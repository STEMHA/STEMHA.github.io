<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>STEMHA&#39;s Blog</title>
  
  <subtitle>People have dream!</subtitle>
  <link href="/rss.xml" rel="self"/>
  
  <link href="https://stemha.github.io/"/>
  <updated>2020-10-26T08:21:22.563Z</updated>
  <id>https://stemha.github.io/</id>
  
  <author>
    <name>STEMHA</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>《科学哲学》读书笔记</title>
    <link href="https://stemha.github.io/2020/10/26/%E7%A7%91%E5%AD%A6%E5%93%B2%E5%AD%A6%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    <id>https://stemha.github.io/2020/10/26/%E7%A7%91%E5%AD%A6%E5%93%B2%E5%AD%A6%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/</id>
    <published>2020-10-26T08:18:27.000Z</published>
    <updated>2020-10-26T08:21:22.563Z</updated>
    
    <content type="html"><![CDATA[<h2 id="第一章-何为科学"><a href="#第一章-何为科学" class="headerlink" title="第一章 何为科学"></a>第一章 何为科学</h2><p><strong>什么是科学？</strong><br>普通人的回答可能是科学包含数理化生等学科，而不包含艺术音乐之类的学科<br>哲学家所追寻的回答而不是上述这种罗列式的回答，而是回去探寻这些学科的共同特征，也就是使科学得以成为科学的东西是什么？</p><p><strong>科学的特征？</strong>下面是一些人的解释</p><ul><li>试图理解，解释和预言我们生活在其中的世界。</li><li>科学家探索世界的特殊方法，似乎有道理，因为许多科学的确使用了在其他非科学的领域所找不到的方法。一个明显的例子，就是是实验方法的运用，它是现代科学发展史上的转折点。</li><li>科学理论的建构，科学家们并不是仅仅在记录本上记下他们实验和观察的结果——他们希望用一个一般的理论来解释这些结果。虽然这并不容易做到，但已经获得一些重大的成果。<a id="more"></a>科学哲学的一个关键问题：弄明白实验，观察，理论架构等方法是如何帮助科学家揭开这么多自然之谜的。</li></ul><h3 id="现代科学之起源"><a href="#现代科学之起源" class="headerlink" title="现代科学之起源"></a>现代科学之起源</h3><p>现代科学起源于1500年到1750年之间发生在欧洲的科学告诉发展时期。也就是我们现在所称的科学革命时期。</p><p>哥白尼革命</p><p>开普勒三定律</p><p>伽利略 实验验证假说</p><p>笛卡尔 机械哲学论</p><p>牛顿 动力学和机械论理论</p><p>相对论和量子力学</p><p>达尔文进化论</p><p>分子生物学</p><p>计算机科学，神经科学</p><h3 id="何为科学哲学？"><a href="#何为科学哲学？" class="headerlink" title="何为科学哲学？"></a>何为科学哲学？</h3><p><code>科学哲学的主要任务</code>是去分析各门科学所采用的研究方法。也许我们会困惑，为啥这项任务不交给科学家来做呢？<br>部分答案是：从一个哲学化的视野去观察科学可以使我们进行更深入的探索———去揭示科学实践中暗含的但是不被科学家们明确讨论的假设。</p><p>下面是一个例子：<br>假设一个科学家做了一个实验并且获得了一个特定的结果。他反复多次做一个实验，一直得出相同的结果。然后他可能会确信如果他继续在完全相同的条件下做这一个实验，得到的结果完全相同。<br>这一假设看起来很显然，但是作为哲学家，就会产生质疑。有什么理由让我们假设将来的重复实验会得到相同的结果？我们怎么知道这是真的呢？<br>科学家当然没时间去厘清这些略显古怪的问题。</p><h3 id="科学与伪科学"><a href="#科学与伪科学" class="headerlink" title="科学与伪科学"></a>科学与伪科学</h3><p>什么是科学？<br>卡尔·波普尔 科学理论的基本特征是它应该具有可证伪性，称一个理论是可证伪性的并不是说它是错的。而是说它意味着该理论能够做出一些可以用经验进行检验的特定预测。<br>如果这些预测被发现是错误的，这一个理论就会被证伪了，或者说是否证了。</p><p>波普尔的划分一定是合理的吗？<br>如果一个科学理论与观测不符们是不是就应该立刻抛弃它？<br>然而现在科学家的通常做法是。他们会寻找能解决矛盾的方法而非放弃理论。 </p><h2 id="第二章-科学推理"><a href="#第二章-科学推理" class="headerlink" title="第二章 科学推理"></a>第二章 科学推理</h2><h3 id="演绎和归纳"><a href="#演绎和归纳" class="headerlink" title="演绎和归纳"></a>演绎和归纳</h3><p>逻辑学家在演绎和归纳这两种推理形式之间做了重要的区分。<br>归纳推理的经典例子(法国人喝葡萄酒)</p><p>所有的法国人都喜欢红葡萄酒<br>皮埃尔是一个法国人</p><hr><p>因此，皮埃尔喜欢红葡萄酒</p><p>演绎推理通常可以表达为，推理的前提必然导致结论。前提和结论之间存在一种关系，也就是说前提为真的话，结论也必定为真。当然前提实际上是否为真是另外一回事，它并不影响推论的演绎性质。</p><p>归纳推理的例子（臭鸡蛋）<br>盒子里的前五个鸡蛋发臭了<br>所有鸡蛋上标明的保质日期相同</p><hr><p>因此，第六个鸡蛋也是发臭的</p><p>这看起来是一个合理的推理，但是不是演绎推理，前提并 不会必然导致结论。可能会出现前提为真，结论为假的情况。<br>但是归纳推理对科学家也是必不可少的，比如唐氏综合症的例子，所有已经发现的唐氏综合症患者都有一条多余的染色体，也就是47条（23对+1条），科学家就据此归纳地推出一条结论：所有唐氏综合症患者，包括尚未检验的，都有一条多余的染色体。</p><h3 id="休谟的问题"><a href="#休谟的问题" class="headerlink" title="休谟的问题"></a>休谟的问题</h3><p>虽然归纳推理在逻辑上并非是无懈可击的，但是它似乎是形成关于世界之信念的一种非常合理的方法</p><p><code>自然的齐一性假设</code>:我们通常假设我们未检验的物体将在某些相关的方面与我们已经检验过的同类物体类似。</p><p><code>休谟归纳问题</code>：                 </p><h3 id="最佳说明的推理"><a href="#最佳说明的推理" class="headerlink" title="最佳说明的推理"></a>最佳说明的推理</h3><p>另一种普通非演绎性推论：<br>食品柜里的干奶酪不见了，仅仅留下一些干奶酪碎屑<br>昨天晚上听到了来自食品柜的刮擦声音</p><hr><p>所以，干奶酪是被老鼠吃了</p><p>这一推论是非演绎性的，前提并不必然导致结论。</p><p>但是总体来说这个假说相当合理，它是对已经有的事实最好的解释。<br>这类推理被称为<code>最佳说明推理（IBE，inference to the best explanation）</code></p><h3 id="概率与归纳"><a href="#概率与归纳" class="headerlink" title="概率与归纳"></a>概率与归纳</h3><h2 id="第三章-科学中的解释"><a href="#第三章-科学中的解释" class="headerlink" title="第三章 科学中的解释"></a>第三章 科学中的解释</h2><p>在提供解释这一目的上，现代科学常常能够成功。<br>但是科学解释确切的说是什么呢？说一个现象能够被科学进行解释究竟是什么意思？</p><h3 id="亨普尔的覆盖律解释模型"><a href="#亨普尔的覆盖律解释模型" class="headerlink" title="亨普尔的覆盖律解释模型"></a>亨普尔的覆盖律解释模型</h3><p>亨普尔认为，科学解释的典型逻辑和论证结构是一样的，由一系列的前提得出一个结论。</p><p>亨普尔的解释模型：<br>普适定律<br>特定事实<br>经过演绎推理=&gt;<br>待解释的现象</p><p>模型的三个要素说明：</p><ul><li>论证必须是演绎推理</li><li>前提必须都为真</li><li>前提至少包含一个普适定律（有时候也称为自然律）</li></ul><p>为什么亨普尔的模型被称为覆盖解释模型？</p><blockquote><p>因为按照这一模型，解释的本质就是表明待解释的对象的现象就是被某个自然普适定律所覆盖的。</p></blockquote><p>当然亨普尔的模型也会有一些不足，我们可以举出一些反例。反例主要有两类</p><ul><li>一类是科学解释，但是不符合该模型</li><li>一类不是科学解释，但是符合该模型</li></ul><h3 id="对称问题"><a href="#对称问题" class="headerlink" title="对称问题"></a>对称问题</h3><p>我们主要聚焦在第二类问题上。<br>一个很典型的例子是旗杆和影子的长度问题以及这个问题的对称问题。</p><p>其中的原因是亨普尔的模型没有考虑因果性的问题。</p><h3 id="解释和因果性"><a href="#解释和因果性" class="headerlink" title="解释和因果性"></a>解释和因果性</h3><h3 id="科学能够解释一切吗？"><a href="#科学能够解释一切吗？" class="headerlink" title="科学能够解释一切吗？"></a>科学能够解释一切吗？</h3><h3 id="解释和还原"><a href="#解释和还原" class="headerlink" title="解释和还原"></a>解释和还原</h3><h2 id="第四章-实在论和反实在论"><a href="#第四章-实在论和反实在论" class="headerlink" title="第四章 实在论和反实在论"></a>第四章 实在论和反实在论</h2><h2 id="第五章-科学变迁和科学革命"><a href="#第五章-科学变迁和科学革命" class="headerlink" title="第五章 科学变迁和科学革命"></a>第五章 科学变迁和科学革命</h2><p>科学观念随着时间不断变化，是否存在一种清晰的变迁方式呢？<br>当科学家放弃现有理论而支持一种新的理论时，我们作何解释？<br>最新的科学理论在客观性上是否就比先前的更好？<br>客观性的概念是否就有意义呢？</p><h3 id="逻辑实证主义的科学哲学"><a href="#逻辑实证主义的科学哲学" class="headerlink" title="逻辑实证主义的科学哲学"></a>逻辑实证主义的科学哲学</h3><h3 id="科学革命的结构"><a href="#科学革命的结构" class="headerlink" title="科学革命的结构"></a>科学革命的结构</h3><h3 id="不可通约性和观察数据的理论负荷"><a href="#不可通约性和观察数据的理论负荷" class="headerlink" title="不可通约性和观察数据的理论负荷"></a>不可通约性和观察数据的理论负荷</h3><h3 id="库恩和科学的合理性"><a href="#库恩和科学的合理性" class="headerlink" title="库恩和科学的合理性"></a>库恩和科学的合理性</h3><h3 id="库恩的遗产"><a href="#库恩的遗产" class="headerlink" title="库恩的遗产"></a>库恩的遗产</h3><p>第六章 物理学，生物学和心理学中的哲学问题</p><p>第七章 科学和科学批评者</p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p>科学哲学 牛津通俗本</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;第一章-何为科学&quot;&gt;&lt;a href=&quot;#第一章-何为科学&quot; class=&quot;headerlink&quot; title=&quot;第一章 何为科学&quot;&gt;&lt;/a&gt;第一章 何为科学&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;什么是科学？&lt;/strong&gt;&lt;br&gt;普通人的回答可能是科学包含数理化生等学科，而不包含艺术音乐之类的学科&lt;br&gt;哲学家所追寻的回答而不是上述这种罗列式的回答，而是回去探寻这些学科的共同特征，也就是使科学得以成为科学的东西是什么？&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;科学的特征？&lt;/strong&gt;下面是一些人的解释&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;试图理解，解释和预言我们生活在其中的世界。&lt;/li&gt;
&lt;li&gt;科学家探索世界的特殊方法，似乎有道理，因为许多科学的确使用了在其他非科学的领域所找不到的方法。一个明显的例子，就是是实验方法的运用，它是现代科学发展史上的转折点。&lt;/li&gt;
&lt;li&gt;科学理论的建构，科学家们并不是仅仅在记录本上记下他们实验和观察的结果——他们希望用一个一般的理论来解释这些结果。虽然这并不容易做到，但已经获得一些重大的成果。&lt;/li&gt;&lt;/ul&gt;
    
    </summary>
    
    
      <category term="读书笔记" scheme="https://stemha.github.io/categories/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="哲学" scheme="https://stemha.github.io/tags/%E5%93%B2%E5%AD%A6/"/>
    
      <category term="名著" scheme="https://stemha.github.io/tags/%E5%90%8D%E8%91%97/"/>
    
  </entry>
  
  <entry>
    <title>工厂方法模式</title>
    <link href="https://stemha.github.io/2020/10/16/%E5%B7%A5%E5%8E%82%E6%96%B9%E6%B3%95%E6%A8%A1%E5%BC%8F/"/>
    <id>https://stemha.github.io/2020/10/16/%E5%B7%A5%E5%8E%82%E6%96%B9%E6%B3%95%E6%A8%A1%E5%BC%8F/</id>
    <published>2020-10-16T08:43:09.000Z</published>
    <updated>2020-10-18T15:29:32.000Z</updated>
    
    <content type="html"><![CDATA[<p>如何赋予派生类创建适当对象的责任。(how derived classes can be given the responsibility of creating appropriate objects.)</p><h2 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a><strong>基本概念</strong></h2><p><code>工厂方法模式（Factory Method Pattern）</code>：</p><ul><li>工厂模式是创建型模式的一种。 </li><li>工厂生产商品，软件工厂则生产对象。</li></ul><p>应用场景：</p><ul><li>工厂方法模式在计算机的很多领域得到应用，它的应用遍布各种工具箱（toolkit）和框架（framework）。 <strong>当我们不能实现知道类是什么样子和我们需要实例化哪些子类对象时候，就可以使用工厂方法模式。</strong></li></ul><p>比如，C++常常采用下面的方式创建对象：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">SomeClass someClassObject_1 = SomeClass(); <span class="comment">//栈中分配 </span></span><br><span class="line">SomeClass * someClassObject_2 = <span class="keyword">new</span> SomeClass(); <span class="comment">//堆中分配</span></span><br></pre></td></tr></table></figure><a id="more"></a><p>上述方法的问题在于，使用SomeClass的对象的代码现在突然变得依赖于SomeClass的具体实现。使用new创建对象没有什么错，但是它带有将我们的创建对象的代码和具体实现的代码紧密耦合起来了。<br>这违反了原则“<strong>对接口而不是针对实现编程</strong>”。（<strong>code to an interface and not to an implementation</strong>.）这句话也就是说尽量在有需求来的时候，我们类中实现的代码尽量不要变化，而是通过各种接口的组合来解决新需求。</p><p>举个例子，如果创建对象需要一系列复杂的初始化操作，比如需要关联其他成员，查配置文件，查数据库表，这时候该怎么办？<br>如果都写到构造函数里面，那构造函数就会很长很长，代码可读性也不好。<br>那么比较好的方式是什么呢？计算机里面解决问题的方法就是加一个层。我们就加一个专门的层——工厂类，来专门负责对象的创建工作。</p><p>形式上，工厂方法被定义为以下形式：</p><ul><li>提供一个用于对象创建的接口，但将对象的实例化委托给子类。</li></ul><h2 id="类图-Class-Diagram"><a href="#类图-Class-Diagram" class="headerlink" title="类图 Class Diagram"></a><strong>类图 Class Diagram</strong></h2><p>The class diagram consists of the following entities:</p><ul><li><code>Product</code>：抽象产品角色。</li><li><code>Concrete Product</code>：具体产品角色，工厂方法模式所创建的任何对象都是这个角色的实例。</li><li><code>Creator</code>：工厂类角色，工厂方法模式的核心，含有与应用紧密相关的商业逻辑。工厂类在客户端的直接调用下创建产品对象。</li><li><code>Concrete Creator</code>：具体工厂类角色。</li></ul><p><img src="/2020/10/16/%E5%B7%A5%E5%8E%82%E6%96%B9%E6%B3%95%E6%A8%A1%E5%BC%8F/%E5%B7%A5%E5%8E%82%E6%96%B9%E6%B3%95%E6%A8%A1%E5%BC%8F%E7%B1%BB%E5%9B%BE.PNG" alt></p><h2 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h2><p>让我们继续制造飞机的过程吧！假设我们正在尝试为F-16战斗机建模。client代码需要为喷气式战斗机构造引擎并进行试飞。<br>该类的简单实现将如下所示：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">F16</span> &#123;</span></span><br><span class="line">    F16Engine engine;  <span class="comment">//引擎</span></span><br><span class="line">    F16Cockpit cockpit; <span class="comment">//驾驶舱</span></span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">makeF16</span><span class="params">()</span>  <span class="comment">//造飞机</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        engine = F16Engine(); <span class="comment">//造引擎</span></span><br><span class="line">        cockpit = F16Cockpit(); <span class="comment">//造驾驶舱</span></span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">fly</span><span class="params">()</span>  <span class="comment">//试飞</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        makeF16(); </span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="string">"F16 with bad design flying"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Client</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Clientmain</span><span class="params">()</span> </span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="comment">// We instantiate from a concrete class, thus tying</span></span><br><span class="line">        <span class="comment">// ourselves to it</span></span><br><span class="line">        F16 f16 = F16();</span><br><span class="line">        f16.fly();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在上面的代码中，我们建造飞机时候使用F16类的具体实现。这时候突然飞机的版本要更新了，我们也要建造它，肯定需要在程序中对新版本的飞机进行表达，这时候该怎么办呢？</p><ul><li>如果采用上面的程序的话，我们只能在新建F16实例的地方更换client代码，比如之前创建的是F16，我们后来想要创建F16B，就得在client代码里面改。</li><li>另一种解决方法是将对象的创建封装在另一个对象中，该对象仅负责更新和新建所要求的F-16变体，到时候想。 </li></ul><p>我们来说说第二种方法。首先，假设我们要表示F16的A变体和B变体，那么代码看起来像：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">F16SimpleFactory</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">F16 <span class="title">makeF16</span><span class="params">(<span class="built_in">string</span> variant)</span> </span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">switch</span> (variant) &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">"A"</span>:</span><br><span class="line">            <span class="keyword">return</span> F16A();</span><br><span class="line">        <span class="keyword">case</span> <span class="string">"B"</span>:</span><br><span class="line">            <span class="keyword">return</span> F16B();</span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">            <span class="keyword">return</span> F16();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面是<code>简单工厂模式</code>的示例，但是上面这种代码还不是模式，而应该算作常见的编程习惯。 </p><p>您也可以将make方法标记为static，以跳过工厂对象创建步骤(意思是直接通过类名加静态方法来进行调用，而不是在对象中进行封装)。 但是，由于静态方法不能在子类中覆盖，因为它们是类的唯一方法，因此我们将不能对静态工厂进行子类化。 </p><p>但是，如果我们希望将F16对象部分的创建保持在同一类中，并且仍然能够引入新的F16变体，则可以对F16进行子类化，并将正确的F16变体对象的创建委托给子类处理。 那么这个新方法正是工厂方法模式！ 这里的方法是makeF16()，我们将使其表现得像产生适当F16变体的工厂。 让我们继续前进，我们引入了两个这样的子类：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">F16</span> &#123;</span></span><br><span class="line">    IEngine engine;</span><br><span class="line">    ICockpit cockpit;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line">   <span class="function"><span class="keyword">virtual</span> F16* <span class="title">makeF16</span><span class="params">()</span>   <span class="comment">//这里是制造部分</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        engine = F16Engine();</span><br><span class="line">        cockpit =  F16Cockpit();</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span>: </span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">taxi</span><span class="params">()</span> </span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="string">"F16 is taxing on the runway !"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">fly</span><span class="params">()</span> </span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="comment">// Note here carefully, the superclass F16 doesn't know</span></span><br><span class="line">        <span class="comment">// what type of F-16 variant it was returned.</span></span><br><span class="line">        F16 f16 = makeF16();</span><br><span class="line">        f16.taxi();</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="string">"F16 is in the air !"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">F16A</span>:</span><span class="keyword">public</span> F16 &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> F16* <span class="title">makeF16</span><span class="params">()</span> <span class="keyword">override</span> <span class="comment">//这里是制造部分</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        super.makeF16();</span><br><span class="line">        engine = F16AEngine();</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">F16B</span>:</span><span class="keyword">public</span> F16 <span class="keyword">override</span> </span><br><span class="line">&#123;    </span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> F16* <span class="title">makeF16</span><span class="params">()</span>  </span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        super.makeF16();</span><br><span class="line">        engine =  F16BEngine();</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>看上面的代码，我们使用子类继承，然后在子类中实现特殊化的引擎对象。 工厂方法可以提供也可以不提供默认或通用的实现，但是可以通过覆盖create / make方法来使子类专门化或修改产品。 在我们的示例中，变体模型仅具有不同的发动机，但座舱相同。 客户端代码现在可以使用更新的模型，如下所示：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Client</span> &#123;</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">()</span> </span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="built_in">vector</span>&lt;F16 *&gt; myAirForce;</span><br><span class="line">        F16 * f16A =<span class="keyword">new</span> F16A();</span><br><span class="line">        F16 * f16B =<span class="keyword">new</span> F16B();</span><br><span class="line">        myAirForce.push_back(f16A);</span><br><span class="line">        myAirForce.push_back(f16B);</span><br><span class="line"> </span><br><span class="line">        <span class="keyword">for</span> (F16 *f16 : myAirForce) &#123;</span><br><span class="line">            f16-&gt;fly();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>请注意，工厂模式是借助抽象类和多态来实现的， 在我们的情况下，父类F16不知道它是从makeF16()方法返回的F16的哪个变体。 一般设置是超类具有除创建方法之外的所有方法的实现。 create方法可以是抽象方法，也可以带有默认实现，然后由超类的其他方法调用。 正确的对象的创建是子类的责任。</p><p>简单工厂模式和静态工厂模式的区别</p><ul><li>简单工厂无法像工厂方法模式那样通过继承来生产变化的产品。</li></ul><h2 id="注意"><a href="#注意" class="headerlink" title="注意"></a><strong>注意</strong></h2><ul><li>该模式可能会导致很多差别很小的子类。</li><li>如果子类扩展了功能，那么超类将无法使用它，除非它将其转换为具体类型，然而向下转换可能在运行时失败。</li></ul><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a><strong>参考资料</strong></h2><p><a href="https://blog.csdn.net/bjweimengshu/article/details/108459337">设计模式之 “工厂模式”</a><br><a href="https://stemha.github.io/2020/05/09/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E6%80%BB%E7%BB%93/">设计模式总结</a><br>Software Design Patterns: Best Practices for Software Developers /github educative</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;如何赋予派生类创建适当对象的责任。(how derived classes can be given the responsibility of creating appropriate objects.)&lt;/p&gt;
&lt;h2 id=&quot;基本概念&quot;&gt;&lt;a href=&quot;#基本概念&quot; class=&quot;headerlink&quot; title=&quot;基本概念&quot;&gt;&lt;/a&gt;&lt;strong&gt;基本概念&lt;/strong&gt;&lt;/h2&gt;&lt;p&gt;&lt;code&gt;工厂方法模式（Factory Method Pattern）&lt;/code&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;工厂模式是创建型模式的一种。 &lt;/li&gt;
&lt;li&gt;工厂生产商品，软件工厂则生产对象。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;应用场景：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;工厂方法模式在计算机的很多领域得到应用，它的应用遍布各种工具箱（toolkit）和框架（framework）。 &lt;strong&gt;当我们不能实现知道类是什么样子和我们需要实例化哪些子类对象时候，就可以使用工厂方法模式。&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;比如，C++常常采用下面的方式创建对象：&lt;/p&gt;
&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;SomeClass someClassObject_1 = SomeClass(); &lt;span class=&quot;comment&quot;&gt;//栈中分配 &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;SomeClass * someClassObject_2 = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; SomeClass(); &lt;span class=&quot;comment&quot;&gt;//堆中分配&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>C++虚函数</title>
    <link href="https://stemha.github.io/2020/10/15/C-%E8%99%9A%E5%87%BD%E6%95%B0/"/>
    <id>https://stemha.github.io/2020/10/15/C-%E8%99%9A%E5%87%BD%E6%95%B0/</id>
    <published>2020-10-15T11:21:09.706Z</published>
    <updated>2020-10-18T14:23:31.195Z</updated>
    
    <content type="html"><![CDATA[<h2 id="虚函数与纯虚函数"><a href="#虚函数与纯虚函数" class="headerlink" title="虚函数与纯虚函数"></a><strong>虚函数与纯虚函数</strong></h2><p><code>定义虚函数的目的</code>：为了允许用基类的指针来调用子类的这个函数。<br><code>定义纯虚函数的目的</code>：为了实现一个接口，起到一个规范的作用，规范继承这个类的程序员必须实现这个函数。</p><a id="more"></a><p>注意：</p><ul><li>定义一个函数为虚函数，不代表函数为不被实现的函数。</li><li>定义一个函数为纯虚函数，才代表函数没有被实现。</li></ul><p>C++ 中，基类必须指出希望派生类<strong>重写</strong>哪些函数，定义为 virtual 的函数（虚函数）是基类期待派生类重新定义的，基类希望派生类<strong>继承</strong>的函数不能定义为虚函数。</p><h2 id="虚函数"><a href="#虚函数" class="headerlink" title="虚函数"></a><strong>虚函数</strong></h2><p><code>虚函数定义</code>：被virtual关键字修饰的成员函数。</p><p>使用规则：</p><ul><li>为了指明函数为虚函数，在其返回类型前面加上保留字 virtual。</li><li>除了构造函数之外，任意非 static 成员函数都可以是虚函数。</li><li>virtual 保留字只在类内部的成员函数声明中出现，不能用在类定义体外部出现的函数定义上。</li><li>虚函数声明基类和子类要一致：在派生类中重新定义时,其函数原型,包括返回类型,函数名,参数个数,参数类型及参数的先后顺序,都必须与基类中的原型完全相同. <ul><li>虚函数在派生类中重新定义时候，如果返回的是对基类型的引用或是指针，那么派生类的虚函数可以返回基类函数返回类型的派生类引用或指针，而不是一定要求一样的，primer上看到的。 </li></ul></li><li><code>虚函数符号子类可以不加virtual</code>：c++规定，当一个成员函数被声明为虚函数后，其<u>派生类中的同名函数都自动成为虚函数</u>。因此，在子类从新声明该虚函数时，可以加，也可以不加，但习惯上每一层声明函数时都加virtual,使程序更加清晰。<ul><li>如果基类把一个函数声明成虚函数，则该函数在派生类中隐式地也是虚函数；</li><li>如果派生类没有覆盖基类中的某个成员函数，则该虚函数的行为类似于其他的普通成员，派生类会直接继承其在基类中的版本。</li></ul></li></ul><p>作用：</p><ul><li>启用动态绑定，实现多态性，通过指向派生类的基类指针或引用，访问派生类中同名覆盖成员函数。 如果成员默认为非虚函数，对非虚函数的调用在编译时确定。</li><li>虚函数是重载的一种表现形式,是一种动态的重载方式。</li><li>虚函数是基类希望派生类继承函数的缺省实现和重载的成员函数。当基类的指针或者引用指向派生类的对象的时候，这时候，如果使用基类指针或引用调用一个虚函数，实际上调用的是继承类的版本；</li></ul><p>注意：</p><ul><li>当我们使用指针或引用对虚函数的调用将被动态绑定，即根据所绑定的对象不同，所执行的函数不同，有可能是基类的，也有可能是派生类的。</li><li>相对的，<code>非虚函数</code>总是在编译时根据调用该函数的对象、引用或指针的类型而确定。</li></ul><blockquote><p>在 C++ 中，基类必须指出希望派生类重写哪些函数，定义为 virtual 的函数是基类期待派生类重新定义的，基类希望派生类继承的函数不能定义为虚函数。//也就是说虚函数部分，是不被作为基类部分在派生类中继承的，而是被重新定义的，画一画继承的图可能会更清晰地理解这一点。</p></blockquote><h2 id="纯虚函数"><a href="#纯虚函数" class="headerlink" title="纯虚函数"></a><strong>纯虚函数</strong></h2><p>纯虚函数（pure virtual）没有实现，被初始化为0；规定：在函数形参表后面写上 = 0 以指定纯虚函数。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">fun</span><span class="params">(<span class="keyword">void</span>)</span> </span>= <span class="number">0</span>;</span><br></pre></td></tr></table></figure><p>声明一个纯虚函数（pure virtual）的目的:</p><ul><li>是为了让派生类只继承函数接口，也就是上面说的接口继承。这个类（包含纯虚函数的类）的存在只是为了让其他类继承。</li><li>为了令继承类继承函数接口以及做一份强制性实现。</li></ul><p>声明非纯虚函数（impure virtual）的目的:</p><ul><li>是让继承类继承该函数的接口和缺省实现。</li></ul><h2 id="非虚函数"><a href="#非虚函数" class="headerlink" title="非虚函数"></a><strong>非虚函数</strong></h2><p>一般成员函数，无virtual关键字修饰。<br><code>非虚函数</code>总是在编译时根据调用该函数的对象、引用或指针的类型而确定，而不是像</p><h2 id="override关键字"><a href="#override关键字" class="headerlink" title="override关键字"></a><strong>override关键字</strong></h2><p>C++11新标准允许派生类显式注明它使用某个成员函数覆盖了它<strong>继承的虚函数</strong>，具体做法是在形参列表或const限定符或引用限定符后面添加一个关键字<code>override</code>。</p><p>规定：</p><ul><li>基类函数必须有 virtual 关键字，不能有 static 。</li><li>不在同一个作用域（分别位于派生类与基类），函数名字相同，参数相同。</li></ul><p>优点：</p><ul><li>如果我们使用了override标记了某个函数，但该函数并没有覆盖已存在的虚函数，此时编译器将会报错。</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">pulic:</span><br><span class="line">  <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">func</span><span class="params">()</span> <span class="keyword">const</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">class</span>  <span class="title">B</span>:</span> A</span><br><span class="line">&#123;</span><br><span class="line">pulic:</span><br><span class="line">  <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">func</span><span class="params">()</span> <span class="keyword">const</span> <span class="keyword">override</span> <span class="keyword">final</span></span>; <span class="comment">//OK</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">C</span>:</span> B</span><br><span class="line">&#123;</span><br><span class="line">pulic:</span><br><span class="line"> <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">func</span><span class="params">()</span><span class="keyword">const</span></span>; <span class="comment">//error, B::func is final</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="final关键字"><a href="#final关键字" class="headerlink" title="final关键字"></a><strong>final关键字</strong></h2><h3 id="禁用继承"><a href="#禁用继承" class="headerlink" title="禁用继承"></a>禁用继承</h3><p>在C++11中允许将类标记为final，方法时直接在类名称后面使用关键字final。如果继承该类会导致编译错误。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span> <span class="title">final</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">  <span class="comment">/*...*/</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="禁用重写"><a href="#禁用重写" class="headerlink" title="禁用重写"></a>禁用重写</h3><p>在C++中，如果把某个函数指定为<code>final</code>，使之后任何尝试覆盖该函数的操作都引发错误。final关键字至于方法参数列表后面。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">  <span class="keyword">public</span>:</span><br><span class="line">    A();</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">Method</span><span class="params">()</span> <span class="keyword">final</span></span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="C-抽象类"><a href="#C-抽象类" class="headerlink" title="C++抽象类"></a><strong>C++抽象类</strong></h2><p><code>抽象类</code>：包含有（或继承）一个或多个纯虚函数的类是抽象类。在C#，Java中用abstract定义抽象类，而在C++中有抽象类的概念，但没有这个关键字。</p><p>规定:</p><ul><li>抽象类只能用作其他类的基类，不能建立抽象类对象。</li><li>抽象类不能用作参数类型、函数返回类型或显式转换的类型。</li><li>可以定义指向抽象类的指针和引用，此指针可以指向它的派生类，进而实现多态性。</li></ul><p>特点：</p><ul><li>由于抽象类包含了没有定义的纯虚函数,所以不能定义抽象类的对象，也就是说抽象类无法实例化。</li></ul><h2 id="C-接口"><a href="#C-接口" class="headerlink" title="C++接口"></a><strong>C++接口</strong></h2><p>C++接口满足以下条件：</p><ol><li>类中没有定义任何的成员变量</li><li>所有的成员函数都是纯虚函数</li><li>所有的成员函数都是公有的</li><li>接口是一种特殊的抽象类</li></ol><h2 id="实现继承和接口继承"><a href="#实现继承和接口继承" class="headerlink" title="实现继承和接口继承"></a><strong>实现继承和接口继承</strong></h2><p>实现继承：派生类同时继承基类的接口和实现。<br>接口继承：派生类不继承基类的实现，只会继承基类的接口。  </p><h2 id="包含虚函数的类和包含纯虚函数的类有什么别称吗？"><a href="#包含虚函数的类和包含纯虚函数的类有什么别称吗？" class="headerlink" title="包含虚函数的类和包含纯虚函数的类有什么别称吗？"></a>包含虚函数的类和包含纯虚函数的类有什么别称吗？</h2><p>如果类中包含有纯虚函数，则这个类是抽象类，而且由于抽象类包含了没有定义的纯虚函数,所以不能定义抽象类的对象。</p><p>如果有虚函数和正常函数就是普通的类。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a><strong>总结</strong></h2><p><code>纯虚函数</code>：要求继承类必须含有某个接口，并对接口函数实现。<br><code>虚函数</code>：继承类必须含有某个接口，可以自己实现。<strong>也可以不实现，而采用基类定义的缺省实现</strong>。<br><code>非虚函数</code>：继承类必须含有某个接口，必须使用基类的实现。  </p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a><strong>参考资料</strong></h2><p>C++ primer 第四版<br><a href="https://blog.csdn.net/ljinddlj/article/details/1922189">C++接口继承与实现继承</a><br><a href="https://www.jianshu.com/p/54ccfe658b10">C++虚函数</a><br><a href="https://www.cnblogs.com/itwhite/p/5075357.html">C++开发者眼中的Java关键字abstract</a>  </p><h2 id="多态"><a href="#多态" class="headerlink" title="多态"></a>多态</h2><blockquote><p>任何可以在基类对象上执行的操作也可以通过派生类对象使用。</p></blockquote><p>可以使用基类类型的指针或引用来引用派生类型对象，所以，使用基类类型的引用或指针时，不知道指针或引用所绑定的对象的类型：基类类型的引用或指针可以引用基类类型对象，也可以引用派生类型对象。无论实际对象具有哪种类型，编译器都将它当作基类类型对象。将派生类对象当作基类对象是安全的，因为每个派生类对象都拥有基类子对象。而且，派生类继承基类的操作。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;虚函数与纯虚函数&quot;&gt;&lt;a href=&quot;#虚函数与纯虚函数&quot; class=&quot;headerlink&quot; title=&quot;虚函数与纯虚函数&quot;&gt;&lt;/a&gt;&lt;strong&gt;虚函数与纯虚函数&lt;/strong&gt;&lt;/h2&gt;&lt;p&gt;&lt;code&gt;定义虚函数的目的&lt;/code&gt;：为了允许用基类的指针来调用子类的这个函数。&lt;br&gt;&lt;code&gt;定义纯虚函数的目的&lt;/code&gt;：为了实现一个接口，起到一个规范的作用，规范继承这个类的程序员必须实现这个函数。&lt;/p&gt;
    
    </summary>
    
    
      <category term="C++" scheme="https://stemha.github.io/categories/C/"/>
    
    
  </entry>
  
  <entry>
    <title>建造者模式</title>
    <link href="https://stemha.github.io/2020/10/14/%E5%BB%BA%E9%80%A0%E8%80%85%E6%A8%A1%E5%BC%8F/"/>
    <id>https://stemha.github.io/2020/10/14/%E5%BB%BA%E9%80%A0%E8%80%85%E6%A8%A1%E5%BC%8F/</id>
    <published>2020-10-14T14:02:30.000Z</published>
    <updated>2020-10-16T08:34:02.799Z</updated>
    
    <content type="html"><![CDATA[<h2 id="建造者模式是什么-？"><a href="#建造者模式是什么-？" class="headerlink" title="建造者模式是什么 ？"></a><strong>建造者模式是什么 ？</strong></h2><p>顾名思义，建造者模式用于构建对象。</p><ul><li>有时，我们创建的对象可能很复杂，可能由多个子对象组成，或者需要复杂的构建过程。通过使用建造者模式，可以简化创建复杂类型的过程。</li><li>建造者模式通常用来构建复合或者聚合的对象</li><li>严谨地说，<strong>构建器模式封装或隐藏了构建复杂对象的过程，并将对象的表示和构建进行了分离</strong>。这种分离使我们可以<strong>使用相同的构建过程来构建不同的表示形式</strong>。</li><li>建造者模式是一个非常实用而常见的创建类型的模式（creational design pattern)</li></ul><p>应用场景：</p><ul><li>当一个类的构造函数参数个数超过4个，而且这些参数有些是可选的参数，考虑使用构造者模式。</li></ul><a id="more"></a><h2 id="建造者模式类图"><a href="#建造者模式类图" class="headerlink" title="建造者模式类图"></a><strong>建造者模式类图</strong></h2><p>类图由以下实体组成</p><ul><li><code>Builder</code>：其定义了构建Product的抽象步骤，其实体类需要实现这些步骤。其会包含一个用来返回最终产品的方法Product getProduct()。</li><li><code>Concrete Builder</code>：具体的建造者</li><li><code>Director</code> ：决定如何构建最终产品的算法. 其会包含一个负责组装的方法void Construct(Builder builder)， 在这个方法中通过调用builder的方法，就可以设置builder，等设置完成后，就可以通过builder的 getProduct() 方法获得最终的产品。</li><li><code>Product</code>：最终要生成的对象</li></ul><p><img src="/2020/10/14/%E5%BB%BA%E9%80%A0%E8%80%85%E6%A8%A1%E5%BC%8F/%E5%BB%BA%E9%80%A0%E8%80%85%E6%A8%A1%E5%BC%8F.png" alt></p><h2 id="使用建造者模式造不同的飞机"><a href="#使用建造者模式造不同的飞机" class="headerlink" title="使用建造者模式造不同的飞机"></a><strong>使用建造者模式造不同的飞机</strong></h2><p>接下来的示例讨论了如何将表示和构造复杂的对象两个操作耦合在一起。</p><p>示例：<br>以制造飞机为例，假设飞机的制造过程分三个步骤进行：</p><ul><li>驾驶舱的制作</li><li>引擎</li><li>机翼</li></ul><p>在我们的假设中，每架飞机至少需要上述三个步骤。但是，如果飞机是客机的话，我们就需要增加在飞机上建造浴室的步骤。这些步骤代表了构建过程。我们建造的产品可以是不同的形式。文中的例子是飞机，但可以有不同的表示形式的飞机，例如战斗机或客机。但是使用相同的建造过程，我们应该能够同时生产战斗机和客机。</p><p>现在看一些代码。首先，我们将从<code>AircraftBuilder类</code>的抽象接口开始。</p><ul><li>The builder contains a method for each component that can be part of the final product. These methods are selectively overridden by concrete builders depending on if the builders will be including that part in the final product variant that they are responsible for building.</li><li>抽象类Builder会包含最终产品每个部分的构建方法。</li><li>这些方法会被具体的构建者（concrete builders）有选择地覆盖，这取决于具体的构建者负责的最终产品中是否包括该部分，如果包含，就覆盖对应的方法。</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AircraftBuilder</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">buildEngine</span><span class="params">()</span> </span>&#123;  <span class="comment">//引擎</span></span><br><span class="line"> </span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">buildWings</span><span class="params">()</span> </span>&#123;   <span class="comment">//机翼</span></span><br><span class="line"> </span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">buildCockpit</span><span class="params">()</span> </span>&#123; <span class="comment">//驾驶舱</span></span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">buildBathrooms</span><span class="params">()</span> </span>&#123; <span class="comment">//洗手间</span></span><br><span class="line"> </span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> IAircraft&amp; <span class="title">getResult</span><span class="params">()</span> </span>= <span class="number">0</span>; <span class="comment">//返回最终产品的方法</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>现在，我们将实施两个具体的建造者，一个用于F-16，另一个用于波音747。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Boeing747Builder</span>：<span class="title">public</span> <span class="title">AircraftBuilder</span> &#123;</span></span><br><span class="line">    Boeing747 boeing747;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">buildCockpit</span><span class="params">()</span> <span class="keyword">override</span> <span class="comment">//选择覆盖驾驶舱建造方法</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line"> </span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">buildEngine</span><span class="params">()</span> <span class="keyword">override</span> <span class="comment">//选择覆盖引擎建造方法</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line"> </span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">buildBathrooms</span><span class="params">()</span> <span class="keyword">override</span> <span class="comment">//选择覆盖洗手间建造方法</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">buildWings</span><span class="params">()</span> <span class="keyword">override</span> <span class="comment">//选择覆盖机翼建造方法</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line"> </span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> IAircraft&amp; <span class="title">getResult</span><span class="params">()</span> <span class="keyword">override</span> <span class="comment">//返回最终产品的方法</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> boeing747;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">F16Builder</span> <span class="title">extends</span> <span class="title">AircraftBuilder</span> &#123;</span></span><br><span class="line">    F16 f16;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">buildEngine</span><span class="params">()</span> <span class="keyword">override</span> <span class="comment">//选择覆盖引擎建造方法</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="comment">// get F-16 an engine</span></span><br><span class="line">        <span class="comment">// f16.engine = new F16Engine();</span></span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">buildWings</span><span class="params">()</span> <span class="keyword">override</span> <span class="comment">//选择覆盖机翼建造方法</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="comment">// get F-16 wings</span></span><br><span class="line">        <span class="comment">// f16.wings = new F16Wings();</span></span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">buildCockpit</span><span class="params">()</span> <span class="keyword">override</span> <span class="comment">//选择覆盖驾驶舱建造方法</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        f16 = <span class="keyword">new</span> F16();</span><br><span class="line">        <span class="comment">// get F-16 a cockpit</span></span><br><span class="line">        <span class="comment">// f16.cockpit = new F16Cockpit();</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> IAircraft&amp; <span class="title">getResult</span><span class="params">()</span> <span class="keyword">override</span> <span class="comment">//返回最终产品的方法</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> f16;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>为简便起见，我们提供了建造器的框架，并跳过了每种方法的单独实现。</p><p>请注意，F16Builder它不会覆盖该buildBathrooms方法，因为F-16座舱中没有浴室。由于波音747拥有供乘客使用的浴室，因此波音的制造商确实重写了浴室的方法。</p><p>建造飞机所需的过程或算法（在我们的案例中是创建不同零件的特定顺序）被称为的另一个<code>类Director</code>捕获。</p><p><code>Director类</code>在某种意义上指导着飞机的建造。<strong>最终产品仍由建造者（Builders）返回（return）。</strong>这里的意思是说Director类知识用来配置建造过程中的参数，最中的产品仍然在建造者那里，所以需要建造者（Builders）返回（return）产品。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Director</span> &#123;</span></span><br><span class="line">    AircraftBuilder aircraftBuilder; <span class="comment">//捕获Builder，也就是Builder是Director的一份子</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    </span><br><span class="line">    Director(AircraftBuilder aircraftBuilder)  <span class="comment">//构造函数</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">this</span>-&gt;aircraftBuilder = aircraftBuilder;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">construct</span><span class="params">(<span class="keyword">bool</span> isPassenger)</span>   <span class="comment">//构建过程（可以有各种参数，来配置构建过程）</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        aircraftBuilder.buildCockpit();</span><br><span class="line">        aircraftBuilder.buildEngine();</span><br><span class="line">        aircraftBuilder.buildWings();</span><br><span class="line"> </span><br><span class="line">        <span class="keyword">if</span> (isPassenger)</span><br><span class="line">            aircraftBuilder.buildBathrooms();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>请注意，我们如何通过我们选择的制造商，并将飞机产品（表示形式）更改为F-16或Boeing-747。</p><p>在我们的方案中，建造者返回相同的超类，但是如果构建器返回的产品不太相似，则情况可能并非如此。</p><p>客户端将使用以下模式：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Client</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">     <span class="function"><span class="keyword">void</span> <span class="title">Clientmain</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        F16Builder f16Builder = F16Builder();  <span class="comment">//先初始化一个建造者</span></span><br><span class="line">        Director director =  Director(f16Builder); <span class="comment">//然后交给指导者来配参数</span></span><br><span class="line">        director.construct(<span class="literal">false</span>); <span class="comment">//指导建造过程</span></span><br><span class="line"> </span><br><span class="line">        IAircraft f16 = f16Builder.getResult(); <span class="comment">//建造者接受指导后返回最终的产品</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>The AircraftBuilder interface hides how a given aircraft gets built. </li><li>The client is unaware of the classes F16Engine, F16Cockpit and similar classes for Boeing-747.</li></ul><h3 id="假如没有指导者"><a href="#假如没有指导者" class="headerlink" title="假如没有指导者"></a>假如没有指导者</h3><p>如果在没有Director的情况下使用了构建器模式。客户端可以直接实例化Builder并调用所需的方法以获取自身的产品。<br>而且也是一个应对“（伸缩构建）telescoping constructors”的解法：</p><ul><li>假设一个类具有很多的属性，但是有些属性是可选的。在这种情况下，可以调用Builder仅设置必需的属性并创建产品。</li></ul><h2 id="其他例子"><a href="#其他例子" class="headerlink" title="其他例子"></a><strong>其他例子</strong></h2><p>另一个假设的示例可能是创建pdf或html类型的文档。请考虑以下代码段：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">IDocument <span class="title">construct</span><span class="params">(DocumentBuilder documentBuilder)</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    documentBuilder.addTitle(<span class="string">"Why use design patterns"</span>);</span><br><span class="line">    documentBuilder.addBody(<span class="string">"blah blah blah... more blah blah blah"</span>);</span><br><span class="line">    documentBuilder.addAuthor(<span class="string">"C. H. Afzal"</span>);</span><br><span class="line">    documentBuilder.addConclusion(<span class="string">"Happy Coding!"</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// Return the document and depending on the concrete</span></span><br><span class="line">    <span class="comment">// implementation of the DocumentBuilder, we could return</span></span><br><span class="line">    <span class="comment">// either a pdf or html document.</span></span><br><span class="line">    <span class="keyword">return</span> documentBuilder.buildDocument();</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面的方法可以出现在控制器代码或客户端代码中，并且可以通过更改传递给该方法的DocumentBuilder的具体类型来构建不同的文档类型。我们可以从抽象类中得到一个HtmlDocumentBuilder和一个PdfDocumentBuilder派生类DocumentBuilder。</p><h2 id="抽象工厂模式与建造者模式"><a href="#抽象工厂模式与建造者模式" class="headerlink" title="抽象工厂模式与建造者模式"></a><strong>抽象工厂模式与建造者模式</strong></h2><ul><li>建造者模式可能看起来类似于抽象工厂模式，但是二者还是略有不同。其中一个不同之处在于，建造者模式是逐步创建对象的，而抽象工厂模式则一步就返回了对象。</li></ul><h2 id="建造者模式的比喻"><a href="#建造者模式的比喻" class="headerlink" title="建造者模式的比喻"></a><strong>建造者模式的比喻</strong></h2><p>假设我们有一座工厂吧，工厂得有基础核心部门（Builder），这个部门拥有所有的基础生产资料模板，然后我们需要几个分别生产不同产品的车间（Concrete Builder）吧，这些车间需要自己从基础核心部门挑选合适的模板然后自己填充定制，用于生产自己的产品。 工厂的生产不能太随意，得需要指挥部（Director）指导，指挥部在基础核心部门（Builder）等着其他车间（Concrete Builder）来接受指导，给出相应的指挥命令（也就是参数），最终车间（Concrete Builder）生产出合适的产品。</p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a><strong>参考资料</strong></h2><p><a href="https://stemha.github.io/2020/05/09/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E6%80%BB%E7%BB%93/">设计模式总结</a><br>Software Design Patterns: Best Practices for Software Developers /github educative</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;建造者模式是什么-？&quot;&gt;&lt;a href=&quot;#建造者模式是什么-？&quot; class=&quot;headerlink&quot; title=&quot;建造者模式是什么 ？&quot;&gt;&lt;/a&gt;&lt;strong&gt;建造者模式是什么 ？&lt;/strong&gt;&lt;/h2&gt;&lt;p&gt;顾名思义，建造者模式用于构建对象。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;有时，我们创建的对象可能很复杂，可能由多个子对象组成，或者需要复杂的构建过程。通过使用建造者模式，可以简化创建复杂类型的过程。&lt;/li&gt;
&lt;li&gt;建造者模式通常用来构建复合或者聚合的对象&lt;/li&gt;
&lt;li&gt;严谨地说，&lt;strong&gt;构建器模式封装或隐藏了构建复杂对象的过程，并将对象的表示和构建进行了分离&lt;/strong&gt;。这种分离使我们可以&lt;strong&gt;使用相同的构建过程来构建不同的表示形式&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;建造者模式是一个非常实用而常见的创建类型的模式（creational design pattern)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;应用场景：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;当一个类的构造函数参数个数超过4个，而且这些参数有些是可选的参数，考虑使用构造者模式。&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="软件工程" scheme="https://stemha.github.io/categories/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/"/>
    
    
      <category term="面向对象" scheme="https://stemha.github.io/tags/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/"/>
    
      <category term="设计模式" scheme="https://stemha.github.io/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
      <category term="建造者模式" scheme="https://stemha.github.io/tags/%E5%BB%BA%E9%80%A0%E8%80%85%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>软件设计模式</title>
    <link href="https://stemha.github.io/2020/10/14/%E8%BD%AF%E4%BB%B6%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    <id>https://stemha.github.io/2020/10/14/%E8%BD%AF%E4%BB%B6%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/</id>
    <published>2020-10-14T13:38:03.000Z</published>
    <updated>2020-10-16T08:12:04.782Z</updated>
    
    <content type="html"><![CDATA[<h2 id="序言"><a href="#序言" class="headerlink" title="序言"></a><strong>序言</strong></h2><blockquote><p>为什么我们需要模式？直截了当的答案是我们不想重新发明轮子！</p></blockquote><a id="more"></a><h2 id="设计模式基本概念"><a href="#设计模式基本概念" class="headerlink" title="设计模式基本概念"></a><strong>设计模式基本概念</strong></h2><p>什么是<code>模式</code>：</p><ul><li>概念：在技术生活中经常发生的问题通常具有定义明确的解决方案，这些解决方案灵活，模块化且更易于理解。这些从战术细节上抽象出来的解决方案就成为了<code>模式</code>。</li><li>应用场景：假如你针对一个问题设计解决方案时遇到了似曾相识的感觉，换句话说，这个解决方案与之前你遇到的某个问题的解决方案极为相似，那么尽管问题在不同的领域，你可能在不知不觉中就使用了一种模式。</li></ul><p>为什么要使用设计模式？</p><ul><li>为了重用代码</li><li>让代码更容易被他人理解</li><li>保证代码可靠性。</li></ul><h2 id="GOF（Gang-of-Four）"><a href="#GOF（Gang-of-Four）" class="headerlink" title="GOF（Gang of Four）"></a><strong>GOF（Gang of Four）</strong></h2><p>1994 年，由 Erich Gamma、Richard Helm、Ralph Johnson 和 John Vlissides 四人合著出版了一本名为 Design Patterns - Elements of Reusable Object-Oriented Software（中文译名：设计模式 - 可复用的面向对象软件元素） 的书，该书首次提到了软件开发中设计模式的概念。<br>他们所提出的设计模式主要是基于以下的面向对象设计原则：</p><ul><li>对接口编程而不是对实现编程。</li><li>优先使用对象组合而不是继承。</li></ul><h2 id="设计模式的使用"><a href="#设计模式的使用" class="headerlink" title="设计模式的使用"></a><strong>设计模式的使用</strong></h2><p>下面是一个示例，让我们更深刻地了解什么是设计模式以及如何应用它们。 接下来的文章中我们来做一下有意思的大工程吧，运用代码来创建一架飞机！</p><p>首先我们要创建飞机的类，名字为 Aircraft，然后要创建相应的构造函数。类构造函数是面向对象语言中的基本概念之一。构造函数帮助创建类的对象，并可以接受参数。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Aircraft</span> &#123;</span></span><br><span class="line"></span><br><span class="line">   <span class="keyword">private</span>:</span><br><span class="line">        <span class="built_in">string</span> type;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">public</span>:</span><br><span class="line">        Aircraft(<span class="built_in">string</span> type) </span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">this</span>-&gt;type = type;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在上面的示例中，我们为该类提供了默认构造函数，该构造函数接受飞机的单个参数type 。结果过了几天后，你意识到你还要向Aircraf类添加其他属性。我们就假设你要添加的新属性是飞机的颜色，但是你之前已经发布了一个版本的库，并且无法在库中修改原始构造函数。因为库已经发布给用户了，很多用户说不定都已经用上了，所以不能够改已经发布的库的函数接口。那么该怎么办呢？</p><p>解决方案是添加另一个具有两个参数的构造函数（也就是我们新加入一个拥有不同接口的构造函数），如下所示：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Aircraft</span> &#123;</span></span><br><span class="line"> </span><br><span class="line">    <span class="keyword">private</span>:</span><br><span class="line">        <span class="built_in">string</span> type;</span><br><span class="line">        <span class="built_in">string</span> color;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">    Aircraft(<span class="built_in">string</span> type) </span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">this</span>-&gt;type = type;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    Aircraft(<span class="built_in">string</span> type, <span class="built_in">string</span> color) </span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">this</span>-&gt;type = type;</span><br><span class="line">        <span class="keyword">this</span>-&gt;color = color;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>假如又过了几天，你又有新的属性要添加到飞机这个类中。<br>如果继续上面这种方式，你将最终得到一堆构造函数，其中的函数参数越来越像折叠望远镜，我们就把这种办法称作为<code>折叠构造函数模式（telescoping constructor pattern ）</code>吧：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Aircraft(<span class="built_in">string</span> type)</span><br><span class="line">Aircraft(<span class="built_in">string</span> type, <span class="built_in">string</span> color)</span><br><span class="line">Aircraft(<span class="built_in">string</span> type, <span class="built_in">string</span> color, <span class="built_in">string</span> prop3)</span><br><span class="line">Aircraft(<span class="built_in">string</span> type, <span class="built_in">string</span> color, <span class="built_in">string</span> prop3, <span class="built_in">string</span> prop4)</span><br></pre></td></tr></table></figure><p>The <code>telescoping pattern</code> is called an anti-pattern: how NOT to do things! //伸缩模式称为反模式：也就是如何对发布的库不做修改！</p><p>很明显，使用折叠构造函数模式来处理这种属性变量越来越多的类是极为不便的，那么，我们该采取何种方法呢？</p><blockquote><p>实际上处理变量越来越多的类的方法是使用<code>建造者模式（Builder Pattern）</code>，我们将在接下来的文章中深入讨论。</p></blockquote><h2 id="设计模式概要"><a href="#设计模式概要" class="headerlink" title="设计模式概要"></a><strong>设计模式概要</strong></h2><ul><li>经验丰富的开发人员应精通设计模式，应用这些模式可使代码在将来可重用和可维护。</li><li>设计模式不仅限于面向对象的语言，还存在于计算机科学的其他领域，例如分布式系统，大数据系统或用户界面。</li></ul><p>急于要接受即将面试的课程的人们，建议您遍历所有的创建型模式，装饰器，代理，迭代器，观察者和访客模式。</p><p>设计模式的分类：</p><ul><li><p><code>创建型模式</code>：新创建的对象听起来可能很琐碎，但在创建对象实例时随便乱扔代码绝对会让你日后头痛。创新的设计模式提供了有关如何最好地将对象创建过程封装到程序中的有力建议。、</p><ul><li>提供了一种在创建对象的同时隐藏创建逻辑的方式，而不是使用 new 运算符直接实例化对象。这使得程序在判断针对某个给定实例需要创建哪些对象时更加灵活。</li></ul></li><li><p><code>结构型模式</code>：与类的组成有关，即类的构成或构造方式。</p></li><li><p><code>行为设计模式</code>：规定了类和对象之间的交互以及责任的委派。</p><ul><li>特别关注对象之间的通信 </li></ul></li></ul><h2 id="面向对象设计的建议"><a href="#面向对象设计的建议" class="headerlink" title="面向对象设计的建议"></a><strong>面向对象设计的建议</strong></h2><blockquote><ul><li>Separate out parts of code that vary or change from those that remain the same. //将保持不变的部分和经常变化的部分分开。</li><li>Always code to an interface and not against a concrete implementation. //针对接口编码，不要针对具体实现编码。</li><li>Encapsulate behaviors as much as possible. //尽可能对行为进行封装</li><li>Favor composition over inheritance. Inheritance can result in explosion of classes and also sometimes the base class is fitted with new functionality that isn’t applicable to some of its derived classes.//优先考虑组成而不是继承。继承会导致类的爆炸式增长，并且有时基类还配备了不适用于其某些派生类的新功能。</li><li>Interacting components within a system should be as loosely coupled as possible. //系统内的交互组件应尽可能松散地耦合。</li><li>Ideally, class design should inhibit modification and encourage extension. //理想情况下，类应该禁止修改并鼓励扩展。</li><li>Using patterns in your day to day work, allows exchanging entire implementation concepts with other developers via shared pattern vocabulary.//通过运用设计模式词汇和其他人交换设计思路</li></ul></blockquote><p>接下来我们说明的大多数设计模式，都是围绕着构建我们的飞机来的，不得不说是个大工程啊（从零开始造飞机！），开始我们的设计模式之旅吧！</p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p><a href="https://stemha.github.io/2020/05/09/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E6%80%BB%E7%BB%93/">设计模式总结</a><br>Software Design Patterns: Best Practices for Software Developers /github educative</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;序言&quot;&gt;&lt;a href=&quot;#序言&quot; class=&quot;headerlink&quot; title=&quot;序言&quot;&gt;&lt;/a&gt;&lt;strong&gt;序言&lt;/strong&gt;&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;为什么我们需要模式？直截了当的答案是我们不想重新发明轮子！&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="软件工程" scheme="https://stemha.github.io/categories/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/"/>
    
    
      <category term="面向对象" scheme="https://stemha.github.io/tags/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/"/>
    
      <category term="设计模式" scheme="https://stemha.github.io/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>Linux内存管理</title>
    <link href="https://stemha.github.io/2020/10/05/Linux%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86/"/>
    <id>https://stemha.github.io/2020/10/05/Linux%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86/</id>
    <published>2020-10-05T07:05:43.000Z</published>
    <updated>2020-10-05T07:25:31.139Z</updated>
    
    <content type="html"><![CDATA[<h2 id="进程的用户空间划分"><a href="#进程的用户空间划分" class="headerlink" title="进程的用户空间划分"></a>进程的用户空间划分</h2><a id="more"></a><p>我们以x86架构的 32 位 Linux系统为例子表述：<br><code>栈(stack)</code>：栈又称堆栈， 是用户存放程序临时创建的局部变量，也就是说我们函数括弧“{} ”中定义的变量（但不包括static 声明的变量，static 意味着在数据段中存放变量）。此外，在函数被调用时，其参数也会被压入发起调用的进程栈中，并且待到调用结束后，函数的返回值也会被存放回栈中。由于栈的先进先出特点，所以栈特别方便用来保存/ 恢复调用现场。从这个意义上讲，我们可以把堆栈看成一个寄存、交换临时数据的内存区。</p><p><code>堆（heap）</code>：用于存放进程运行中被动态分配的内存段，它的大小并不固定，可动态扩张或缩减。当进程调用malloc 等函数分配内存时，新分配的内存就被动态添加到堆上（堆被扩张）；当利用free 等函数释放内存时，被释放的内存从堆中被剔除（堆被缩减） </p><p><code>BSS 段（bss segment）</code>：是指用来存放程序中未初始化的或者初始化为 0 的全局变量和静态变量的一块内存区域。BSS段属于静态内存分配。 </p><p><code>数据段（data segment）</code>：是指用来存放程序中已初始化的全局变量的一块内存区域。换句话说就是存放程序静态分配的变量和全局变量。数据段属于静态内存分配。 </p><p><code>代码段（code segment/text segment）</code>：通常是指用来存放程序执行代码的一块内存区域。这部分区域的大小在程序运行前就已经确定，并且内存区域通常属于只读, 某些架构也允许代码段为可写，即允许修改程序。在代码段中，也有可能包含一些只读的常数变量，例如字符串常量等。 </p><p>说明：</p><ul><li>包含data段和bss段的整个区段此时通常称为数据区。</li></ul><p>数据段、BSS 段、堆通常是被连续存储在内存中，在位置上是连续的，而代码段和栈往往会被独立存放。堆和栈两个区域在 i386 体系结构中栈向下扩展、堆向上扩展，相对而生。就像下面这张图这样子：</p><center><img src="/2020/10/05/Linux%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86/Linux内存分区.png" width="20%" height="20%">  </center><center>图1. Linux进程用户空间分区</center><h2 id="使用size命令查看"><a href="#使用size命令查看" class="headerlink" title="使用size命令查看"></a>使用size命令查看</h2><h3 id="size命令说明"><a href="#size命令说明" class="headerlink" title="size命令说明"></a>size命令说明</h3><p>size 作用：显示一个目标文件或者链接库文件中的目标文件的各个段的大小(可执行文件段的大小,默认为a.out)，是 GNU 二进制工具集 GNU Binutils 的一员。<br>支持的目标： elf32-i386 a.out-i386-linux efi-app-ia32 elf32-little elf32-big srec symbolsrec tekhex binary ihex trad-core。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta"># root @ LAPTOP in /usr/bin </span></span><br><span class="line">$ size sort</span><br><span class="line">   text    data     bss     dec     hex filename</span><br><span class="line"> <span class="number">104372</span>    <span class="number">3136</span>    <span class="number">1960</span>  <span class="number">109468</span>   <span class="number">1</span>ab9c sort</span><br></pre></td></tr></table></figure><ul><li>text表示正文段</li><li>data表示包含静态变量和已经初始化的全局变量的数据段大小（可执行文件包含了初始化的值）</li><li>bss由可执行文件中不含其初始化值的全局变量组成。</li><li>C语言之类的程序编译完成之后，已初始化的全局变量保存在.data 段中，未初始化的全局变量保存在.bss 段中。</li></ul><h3 id="size命令安装"><a href="#size命令安装" class="headerlink" title="size命令安装"></a>size命令安装</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ apt-get install  binutils <span class="comment">//注意安装的时候不要写成Binutils，这样是找不到安装包的</span></span><br></pre></td></tr></table></figure><p>安装成功后，查看size命令的版本</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ size -v</span><br><span class="line">GNU size (GNU Binutils for Ubuntu) 2.30</span><br><span class="line">Copyright (C) <span class="number">2018</span> Free Software Foundation, Inc.</span><br><span class="line">This program is <span class="built_in">free</span> software; you may redistribute it under the terms of</span><br><span class="line">the GNU General Public License version <span class="number">3</span> <span class="keyword">or</span> (at your option) any later version.</span><br><span class="line">This program has absolutely no warranty.</span><br></pre></td></tr></table></figure><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p><a href="https://www.cnblogs.com/yanghong-hnu/p/4705755.html">(深入理解计算机系统) bss段，data段、text段、堆(heap)和栈(stack)</a><br><a href="https://labuladong.gitbook.io/algo/labuladong-he-ta-de-peng-you-men/bie-zai-shuo-ni-bu-dong-linux-nei-cun-guan-li-le-10-zhang-tu-gei-ni-an-pai-de-ming-ming-bai-bai">别再说你不懂Linux内存管理了，10张图给你安排的明明白白</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;进程的用户空间划分&quot;&gt;&lt;a href=&quot;#进程的用户空间划分&quot; class=&quot;headerlink&quot; title=&quot;进程的用户空间划分&quot;&gt;&lt;/a&gt;进程的用户空间划分&lt;/h2&gt;
    
    </summary>
    
    
      <category term="Linux" scheme="https://stemha.github.io/categories/Linux/"/>
    
    
      <category term="Linux" scheme="https://stemha.github.io/tags/Linux/"/>
    
      <category term="内存管理" scheme="https://stemha.github.io/tags/%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>C++精度控制</title>
    <link href="https://stemha.github.io/2020/09/25/C-%E7%B2%BE%E5%BA%A6%E6%8E%A7%E5%88%B6/"/>
    <id>https://stemha.github.io/2020/09/25/C-%E7%B2%BE%E5%BA%A6%E6%8E%A7%E5%88%B6/</id>
    <published>2020-09-25T01:38:32.449Z</published>
    <updated>2020-09-25T09:04:43.492Z</updated>
    
    <content type="html"><![CDATA[<h2 id="C-的格式控制语法"><a href="#C-的格式控制语法" class="headerlink" title="C++的格式控制语法"></a><strong>C++的格式控制语法</strong></h2><p>ostream 类是从ios派生而来的,而ios则是从ios_base派生来的。 ios_base类封装了C++标准中的流输入输出中不依赖于读写的数据的类型的基本信息，如格式化信息、异常状态、事件回调函数等，所以很多的格式控制都需要。</p><ul><li>C++程序设计时，一般不会直接调用std::ios_base的成员函数，但是会经常用到该类中定义的各种流的数据格式的枚举值常量。如ios_base::hex、ios_base::skipws等等。</li><li>C++中通过cout来实现格式输出，就类似于C语言中通过printf()来实现格式输出。</li><li>cout.setf()的作用是通过设置格式标志来控制输出形式<a id="more"></a></li></ul><h2 id="保留有效位数"><a href="#保留有效位数" class="headerlink" title="保留有效位数"></a><strong>保留有效位数</strong></h2><p><code>setprecision(n)</code>：控制浮点数显示的有效数字个数，这个有效数字是囊括了小数点之前的整数部分的，比如12.345是五位有效数字。<br>特性：</p><ul><li>四舍五入进行保留；</li><li>如果有效位数不够，不会自动补0（3.15，setprecision（4）；3.15）</li><li>如果小数点前的位数多余要保留的位数，则使用科学计数法</li></ul><p>代码实例：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iomanip&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">double</span> num=<span class="number">12.3456789</span>;<span class="comment">//小数点后有7位，一共是9个有效数字</span></span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;setprecision(<span class="number">1</span>)&lt;&lt;<span class="string">"setprecision(1): "</span>&lt;&lt;num&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;setprecision(<span class="number">4</span>)&lt;&lt;<span class="string">"setprecision(4): "</span>&lt;&lt;num&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;setprecision(<span class="number">6</span>)&lt;&lt;<span class="string">"setprecision(6): "</span>&lt;&lt;num&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;setprecision(<span class="number">8</span>)&lt;&lt;<span class="string">"setprecision(8): "</span>&lt;&lt;num&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;setprecision(<span class="number">10</span>)&lt;&lt;<span class="string">"setprecision(10): "</span>&lt;&lt;num&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>说明：使用cout&lt;&lt;setprecision(n)时<code>#include &lt;iomanip&gt;</code>在这里必须要带上，否则会出现如下错误。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">main.cpp: In function ‘int main()’:</span><br><span class="line">main.cpp:<span class="number">6</span>:<span class="number">8</span>: error: ‘setprecision’ was <span class="keyword">not</span> declared in <span class="keyword">this</span> scope</span><br><span class="line">    <span class="number">6</span> |  <span class="built_in">cout</span>&lt;&lt;setprecision(<span class="number">1</span>)&lt;&lt;<span class="string">"setprecision(1): "</span>&lt;&lt;num&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">      |        ^~~~~~~~~~~~</span><br></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">setprecision(<span class="number">1</span>): <span class="number">1e+01</span>        <span class="comment">//小数点前的位数多余要保留的位数，使用科学计数法</span></span><br><span class="line">setprecision(<span class="number">4</span>): <span class="number">12.35</span></span><br><span class="line">setprecision(<span class="number">6</span>): <span class="number">12.3457</span></span><br><span class="line">setprecision(<span class="number">8</span>): <span class="number">12.345679</span>    <span class="comment">//可以看到这里是四舍五入保留有效数字的</span></span><br><span class="line">setprecision(<span class="number">10</span>): <span class="number">12.3456789</span>  <span class="comment">//有效位数不够，不会自动补0</span></span><br></pre></td></tr></table></figure><p>当然也可以用<code>cout.precision(n);</code>这样的写法，这个写法不用加<code>#include &lt;iomanip&gt;</code>头文件。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">double</span> num=<span class="number">12.3456789</span>;<span class="comment">//小数点后有7位，一共是9个有效数字</span></span><br><span class="line"><span class="built_in">cout</span>.precision(<span class="number">1</span>);</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="string">"setprecision(1): "</span>&lt;&lt;num&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"><span class="comment">//输出的结果是setprecision(1): 1e+01</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="保留小数点后n位"><a href="#保留小数点后n位" class="headerlink" title="保留小数点后n位"></a><strong>保留小数点后n位</strong></h2><p><code>fixed</code>和<code>setprecision(n)</code>结合可以实现保留小数点后几位，且会补0。//fixed指定点,即小数点后有n个有效数字<br>特性：</p><ul><li>保留小数点之后的几位有效数字，不包括整数部分。</li><li><strong>四舍五入</strong>进行保留</li><li><strong>如果小数点之后有效位数不够，自动补0</strong></li></ul><p>写法一般有三种： </p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*写法1*/</span></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; setiosflags(ios::fixed) &lt;&lt; setprecision(n); </span><br><span class="line"><span class="comment">/*写法2*/</span></span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;fixed&lt;&lt;setprecision(n);</span><br><span class="line"><span class="comment">/*写法3*/</span></span><br><span class="line"><span class="built_in">cout</span>.flags(<span class="built_in">cout</span>.fixed) <span class="comment">//定点,即小数点后有n个有效数字</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">cout</span>.unsetf(<span class="built_in">cout</span>.fixed) <span class="comment">//取消定点法,即变成输出n个有效数字</span></span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iomanip&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123; </span><br><span class="line"><span class="keyword">double</span> a = <span class="number">12.3456789</span>; </span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;fixed&lt;&lt;setprecision(<span class="number">4</span>)&lt;&lt;a&lt;&lt;<span class="built_in">endl</span>;   </span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;fixed&lt;&lt;setprecision(<span class="number">8</span>)&lt;&lt;a&lt;&lt;<span class="built_in">endl</span>; </span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;fixed&lt;&lt;setprecision(<span class="number">10</span>)&lt;&lt;a&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">12.3457</span></span><br><span class="line"><span class="number">12.34567890</span></span><br><span class="line"><span class="number">12.3456789000</span></span><br></pre></td></tr></table></figure><h3 id="在计算过程中保留有效位数。"><a href="#在计算过程中保留有效位数。" class="headerlink" title="在计算过程中保留有效位数。"></a><strong>在计算过程中保留有效位数。</strong></h3><p> 要对 sum 保留6位有效数字，需要在计算过程中就直接转换成 double（一般不用float）</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sum += (<span class="keyword">double</span>)(<span class="number">1.0</span>/i);</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; fixed &lt;&lt; setprecision(<span class="number">6</span>) &lt;&lt; sum &lt;&lt; <span class="built_in">endl</span>;</span><br></pre></td></tr></table></figure><h2 id="使用数学公式来实现四舍五入"><a href="#使用数学公式来实现四舍五入" class="headerlink" title="使用数学公式来实现四舍五入"></a><strong>使用数学公式来实现四舍五入</strong></h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;math.h&gt; </span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123; </span><br><span class="line"><span class="keyword">double</span> a = <span class="number">13.456789</span>; </span><br><span class="line"><span class="keyword">double</span> b; </span><br><span class="line">b = <span class="built_in">floor</span>(a * <span class="number">10000.000f</span> + <span class="number">0.5</span>) / <span class="number">10000.000f</span>; <span class="comment">/*保留小数点后四位*/</span></span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;b;   <span class="comment">//输出13.4568</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="设置浮点数的显示精度"><a href="#设置浮点数的显示精度" class="headerlink" title="设置浮点数的显示精度"></a><strong>设置浮点数的显示精度</strong></h2><blockquote><p>这个各种在线编程题中经常会考到的，尽量记住啊！也就是显示几位有效数字。</p></blockquote><p>std::ios_base::precision是显示有效位的成员函数<br>原型如下:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">streamsize <span class="title">precision</span><span class="params">()</span> <span class="keyword">const</span></span>;          (<span class="number">1</span>)</span><br><span class="line"><span class="function">streamsize <span class="title">precision</span><span class="params">( streamsize new_precision )</span></span>;      (<span class="number">2</span>)</span><br><span class="line">`</span><br></pre></td></tr></table></figure><p>上述函数管理 std::num_put::do_put 所进行的浮点输出精度（即生成多少数位）。<br>(1) 返回当前精度。<br>(2) 设置精度为给定值。</p><p>std::basic_ios::init 所建立的默认精度为 6<br>想要恢复只有通过调用精度控制 cout.precision(6);</p><p>其中new_precision可以是const也可以是#define宏定义过的。</p><p>测试代码如下:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">   <span class="keyword">float</span> price1=<span class="number">10.45</span>,price2=<span class="number">1.5</span>+<span class="number">5.0</span>/<span class="number">6.0</span>;</span><br><span class="line">   <span class="built_in">cout</span>&lt;&lt;<span class="string">"price1 = "</span>&lt;&lt;price1&lt;&lt;<span class="built_in">endl</span>;         <span class="comment">//正常格式</span></span><br><span class="line">   <span class="built_in">cout</span>&lt;&lt;<span class="string">"price2 = "</span>&lt;&lt;price2&lt;&lt;<span class="built_in">endl</span>;         <span class="comment">//正常格式,默认6位有效</span></span><br><span class="line">   <span class="built_in">cout</span>.precision(<span class="number">4</span>);                       <span class="comment">//显示4位精度</span></span><br><span class="line">   <span class="built_in">cout</span>&lt;&lt;<span class="string">"price1 = "</span>&lt;&lt;price1&lt;&lt;<span class="built_in">endl</span>;         <span class="comment">//只有4位有效,出现0会自动省略</span></span><br><span class="line">   <span class="built_in">cout</span>&lt;&lt;<span class="string">"price2 = "</span>&lt;&lt;price2&lt;&lt;<span class="built_in">endl</span>;         <span class="comment">//只有4位,不会四舍五入</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">price1 = <span class="number">10.45</span></span><br><span class="line">price2 = <span class="number">2.33333</span> </span><br><span class="line">price1 = <span class="number">10.45</span></span><br><span class="line">price2 = <span class="number">2.333</span></span><br></pre></td></tr></table></figure><h2 id="打印末尾的0和小数点"><a href="#打印末尾的0和小数点" class="headerlink" title="打印末尾的0和小数点"></a><strong>打印末尾的0和小数点</strong></h2><p>ios_base提供了setf函数(用于set标记),能够控制多种格式化特性,此外ios_base函数提供了多个常量,可做setf函数的参数个数<br>如下面一行代码使cout显示末尾小数点,当然,也会显示末尾位0的</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cout</span>.setf(ios_base::showpoint);</span><br></pre></td></tr></table></figure><p>测试代码如下:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">   <span class="keyword">float</span> price1=<span class="number">10.40</span>,price2=<span class="number">1.5</span>+<span class="number">5.0</span>/<span class="number">6.0</span>;</span><br><span class="line">   <span class="built_in">cout</span>&lt;&lt;<span class="string">"pricel = "</span>&lt;&lt;price1&lt;&lt;<span class="built_in">endl</span>;         <span class="comment">//正常格式</span></span><br><span class="line">   <span class="built_in">cout</span>&lt;&lt;<span class="string">"price2 = "</span>&lt;&lt;price2&lt;&lt;<span class="built_in">endl</span>;         <span class="comment">//正常格式</span></span><br><span class="line">   <span class="built_in">cout</span>.setf(ios_base::showpoint);           <span class="comment">//显示小数点和后面的0</span></span><br><span class="line">   <span class="built_in">cout</span>&lt;&lt;<span class="string">"pricel = "</span>&lt;&lt;price1&lt;&lt;<span class="built_in">endl</span>;        <span class="comment">//不会忽略0</span></span><br><span class="line">   <span class="built_in">cout</span>&lt;&lt;<span class="string">"price2 = "</span>&lt;&lt;price2&lt;&lt;<span class="built_in">endl</span>;    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">pricel = <span class="number">10.4</span></span><br><span class="line">price2 = <span class="number">2.33333</span></span><br><span class="line">pricel = <span class="number">10.4000</span></span><br><span class="line">price2 = <span class="number">2.33333</span></span><br></pre></td></tr></table></figure><h2 id="setf其他方法"><a href="#setf其他方法" class="headerlink" title="setf其他方法"></a><strong>setf其他方法</strong></h2><p>setf有两种原型:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">fmtflags <span class="title">setf</span><span class="params">(fmtlags)</span></span>; (<span class="number">1</span>)</span><br><span class="line"><span class="function">fmtflags <span class="title">setf</span><span class="params">(fmtflags,fmtflags)</span></span>;  (<span class="number">2</span>)</span><br></pre></td></tr></table></figure><p>先来讲第一种:<br><code>fmtflags</code>是<code>bitmask类型</code>的typedef名,用于存储格式标记,</p><ul><li>该名称还是在ios_base类中定义的</li><li>bitmask类型是一种用来存储各个位置的类型,可以是整型,枚举,甚至可以说是STL bitset容器</li></ul><p>下表是fmtflag setf(fmtlags)的一些常量控制和格式控制</p><table><thead><tr><th align="left">常量</th><th align="left">含义</th></tr></thead><tbody><tr><td align="left">ios_base::boolapha</td><td align="left">输出和输入bol值</td></tr><tr><td align="left"><code>ios_base::showpoint</code></td><td align="left"><code>显示末尾小数点</code></td></tr><tr><td align="left">ios_base::uppercase</td><td align="left">大写字母输出16进制</td></tr><tr><td align="left">ios_base:showbase</td><td align="left">输出C++基数前缀</td></tr><tr><td align="left">ios_base::showpos</td><td align="left">正数前面加上’+’号</td></tr></tbody></table><p>测试其中几个函数,代码如下:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">   <span class="keyword">int</span> s=<span class="number">20</span>;</span><br><span class="line">   <span class="built_in">cout</span>.setf(ios_base::showpos);</span><br><span class="line">   <span class="built_in">cout</span>&lt;&lt;<span class="string">"s = "</span>&lt;&lt;s&lt;&lt;<span class="built_in">endl</span>;           <span class="comment">//已经填充'+'号</span></span><br><span class="line">   <span class="built_in">cout</span>&lt;&lt;hex&lt;&lt;<span class="string">"s = "</span>&lt;&lt;s&lt;&lt;<span class="built_in">endl</span>;      <span class="comment">//16进制输出</span></span><br><span class="line">   <span class="built_in">cout</span>.setf(ios_base::uppercase);</span><br><span class="line">   <span class="built_in">cout</span>.setf(ios_base::showbase);</span><br><span class="line">   <span class="built_in">cout</span>&lt;&lt;<span class="string">"s = "</span>&lt;&lt;s&lt;&lt;<span class="built_in">endl</span>;  <span class="comment">//以16进制输出,并输出前缀Ox  </span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">s = +<span class="number">20</span></span><br><span class="line">s = <span class="number">14</span></span><br><span class="line">s = <span class="number">0X14</span></span><br></pre></td></tr></table></figure><p>下面介绍第二种:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">fmtlags <span class="title">setf</span><span class="params">(fmtflags,fmtflas)</span></span>;</span><br></pre></td></tr></table></figure><p>和第一种不同的是,这种格式会返回以前的设置,第二种第一个参数指出要设置哪些位，第二个参数指出要清除哪些位。<br>下面函数调用和16进制控制符作用相同</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cout</span>.setf(ios_base::hex,ios_base::basefield);</span><br></pre></td></tr></table></figure><table><thead><tr><th align="left">第一参数</th><th align="left">第二参数</th><th align="left">含义</th></tr></thead><tbody><tr><td align="left">ios_base::dec</td><td align="left">ios_base::basefield</td><td align="left">使用十进制基数</td></tr><tr><td align="left">ios_base::oct</td><td align="left">ios_base::basefield</td><td align="left">使用八进制基数</td></tr><tr><td align="left">ios_base::hex</td><td align="left">ios_base::basefield</td><td align="left">使用16进制基数</td></tr></tbody></table><table><thead><tr><th align="left">第一参数</th><th align="left">第二参数</th><th align="left">含义</th></tr></thead><tbody><tr><td align="left">ios_base::fixed</td><td align="left">ios_base::floatfield</td><td align="left">定点计数法</td></tr><tr><td align="left">ios_base::scientifc</td><td align="left">ios_base::floatfield</td><td align="left">使用科学计数法</td></tr><tr><td align="left">ios_base::left</td><td align="left">ios_base::adjustfield</td><td align="left">使用左对齐</td></tr><tr><td align="left">ios_base::right</td><td align="left">ios_base::adjustfield</td><td align="left">使用右对齐</td></tr><tr><td align="left">ios_base::internal</td><td align="left">ios_base::adjustfield</td><td align="left">符号或者基数前缀左对齐,值右对齐</td></tr></tbody></table><h2 id="标准控制符表"><a href="#标准控制符表" class="headerlink" title="标准控制符表"></a><strong>标准控制符表</strong></h2><p>可以通过使用下面的操作符，不直接操作标志。<br>例如：当我们设置dec标志时, 我们可以使用下面的命令:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cout</span> &lt;&lt; dec; <span class="comment">//设置dec表示</span></span><br></pre></td></tr></table></figure><p>设置endl标志时，可以使用下面命令：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>; <span class="comment">//输出换行标示，并清空缓冲区</span></span><br></pre></td></tr></table></figure><h3 id="iostream中定义的操作符"><a href="#iostream中定义的操作符" class="headerlink" title="iostream中定义的操作符"></a><strong>iostream中定义的操作符</strong></h3><table><thead><tr><th align="left">操作符</th><th align="left">描述</th><th align="left">输入</th><th align="left">输出</th></tr></thead><tbody><tr><td align="left">boolalpha</td><td align="left">启用boolalpha标志</td><td align="left">√</td><td align="left">√</td></tr><tr><td align="left">dec</td><td align="left">启用dec标志</td><td align="left">√</td><td align="left">√</td></tr><tr><td align="left">endl</td><td align="left">输出换行标示，并清空缓冲区</td><td align="left"></td><td align="left">√</td></tr><tr><td align="left">ends</td><td align="left">输出空字符</td><td align="left"></td><td align="left">√</td></tr><tr><td align="left">fixed</td><td align="left">启用fixed标志</td><td align="left"></td><td align="left">√</td></tr><tr><td align="left">flush</td><td align="left">清空流</td><td align="left"></td><td align="left">√</td></tr><tr><td align="left">hex</td><td align="left">启用 hex 标志</td><td align="left">√</td><td align="left">√</td></tr><tr><td align="left">internal</td><td align="left">启用 internal标志</td><td align="left"></td><td align="left">√</td></tr><tr><td align="left">left</td><td align="left">启用 left标志</td><td align="left"></td><td align="left">√</td></tr><tr><td align="left">noboolalpha</td><td align="left">关闭boolalpha 标志</td><td align="left">√</td><td align="left">√</td></tr><tr><td align="left">noshowbase</td><td align="left">关闭showbase 标志</td><td align="left"></td><td align="left">√</td></tr><tr><td align="left">noshowpoint</td><td align="left">关闭showpoint 标志</td><td align="left"></td><td align="left">√</td></tr><tr><td align="left">noshowpos</td><td align="left">关闭showpos 标志</td><td align="left"></td><td align="left">√</td></tr><tr><td align="left">noskipws</td><td align="left">关闭skipws 标志</td><td align="left">√</td><td align="left"></td></tr><tr><td align="left">nounitbuf</td><td align="left">关闭unitbuf 标志</td><td align="left"></td><td align="left">√</td></tr><tr><td align="left">nouppercase</td><td align="left">关闭uppercase 标志</td><td align="left"></td><td align="left">√</td></tr><tr><td align="left">oct</td><td align="left">启用 oct 标志</td><td align="left">√</td><td align="left">√</td></tr><tr><td align="left">right</td><td align="left">启用 right 标志</td><td align="left"></td><td align="left">√</td></tr><tr><td align="left">scientific</td><td align="left">启用 scientific 标志</td><td align="left"></td><td align="left">√</td></tr><tr><td align="left">showbase</td><td align="left">启用 showbase 标志</td><td align="left"></td><td align="left">√</td></tr><tr><td align="left">showpoint</td><td align="left">启用 showpoint 标志</td><td align="left"></td><td align="left">√</td></tr><tr><td align="left">showpos</td><td align="left">启用 showpos 标志</td><td align="left"></td><td align="left">√</td></tr><tr><td align="left">skipws</td><td align="left">启用 skipws 标志</td><td align="left">√</td><td align="left"></td></tr><tr><td align="left">unitbuf</td><td align="left">启用 unitbuf 标志</td><td align="left"></td><td align="left">√</td></tr><tr><td align="left">uppercase</td><td align="left">启用 uppercase 标志</td><td align="left"></td><td align="left">√</td></tr><tr><td align="left">ws</td><td align="left">跳过所有前导空白字符</td><td align="left">√</td><td align="left"></td></tr></tbody></table><h3 id="iomanip中定义的操作符"><a href="#iomanip中定义的操作符" class="headerlink" title="iomanip中定义的操作符"></a><strong>iomanip中定义的操作符</strong></h3><table><thead><tr><th align="left">操作符</th><th align="left">描述</th><th align="left">输入</th><th align="left">输出</th></tr></thead><tbody><tr><td align="left">resetiosflags(long f)</td><td align="left">关闭被指定为f的标志</td><td align="left">√</td><td align="left">√</td></tr><tr><td align="left">setbase(int base)</td><td align="left">设置数值的基本数为base</td><td align="left"></td><td align="left">√</td></tr><tr><td align="left">setfill(int ch)</td><td align="left">设置填充字符为ch</td><td align="left"></td><td align="left">√</td></tr><tr><td align="left">setiosflags(long f)</td><td align="left">启用指定为f的标志</td><td align="left">√</td><td align="left">√</td></tr><tr><td align="left">setprecision(int p)</td><td align="left">设置数值的精度(四舍五入)</td><td align="left"></td><td align="left">√</td></tr><tr><td align="left">setw(int w)</td><td align="left">设置域宽度为w</td><td align="left"></td><td align="left">√</td></tr></tbody></table><p>如果系统支持则可以使用,否则继续使用setf();</p><h2 id="进制转换"><a href="#进制转换" class="headerlink" title="进制转换"></a><strong>进制转换</strong></h2><p>1.将进制进行转换<br>ios_base类作为引导例如,控制整数以十进制,十六进制,八进制显示,</p><p>可以使用dec,hex,oct控制符,如下:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a=<span class="number">10</span>;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">"original:"</span>&lt;&lt;a&lt;&lt;<span class="built_in">endl</span>;   <span class="comment">//原型输出</span></span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">"dec:"</span>&lt;&lt;dec&lt;&lt;a&lt;&lt;<span class="built_in">endl</span>;   <span class="comment">//十进制输出a</span></span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">"hex:"</span>&lt;&lt;hex&lt;&lt;a&lt;&lt;<span class="built_in">endl</span>;   <span class="comment">//十六进制输出a</span></span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">"oct:"</span>&lt;&lt;oct&lt;&lt;a&lt;&lt;<span class="built_in">endl</span>;   <span class="comment">//八进制输出a</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果如下</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">original:<span class="number">10</span></span><br><span class="line">dec:<span class="number">10</span></span><br><span class="line">hex:a</span><br><span class="line">oct:<span class="number">12</span></span><br></pre></td></tr></table></figure><p>注意：使用dec，hex，oct进行格式控制的时候。一旦进行了格式控制，其格式控制的时间会在接下来程序执行的时间内持续。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> b=<span class="number">100</span>,a=<span class="number">10</span>;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;hex&lt;&lt;<span class="string">"a= "</span>&lt;&lt;a&lt;&lt;<span class="built_in">endl</span>;     <span class="comment">//十六进制输出a </span></span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="string">"b = "</span>&lt;&lt;b&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出的结果是</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">a= a</span><br><span class="line">b = <span class="number">64</span></span><br></pre></td></tr></table></figure><h2 id="修改字符宽度-width-函数"><a href="#修改字符宽度-width-函数" class="headerlink" title="修改字符宽度-width()函数"></a><strong>修改字符宽度-width()函数</strong></h2><p>width()可以修改字符的宽度</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">width</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">width</span><span class="params">(<span class="keyword">int</span> i)</span></span>;</span><br></pre></td></tr></table></figure><p>width(i)中,i是宽度,当然width只能影响下一个项目,然后字符宽度将自动恢复为默认值。例子如下代码:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="string">'#'</span>;</span><br><span class="line">   <span class="built_in">cout</span>.width(<span class="number">10</span>);</span><br><span class="line">   <span class="built_in">cout</span>&lt;&lt;<span class="number">10</span>&lt;&lt;<span class="string">'#'</span>&lt;&lt;<span class="number">50</span>&lt;&lt;<span class="string">"#\n"</span>;</span><br></pre></td></tr></table></figure><p>结果</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">#        <span class="number">10</span>#<span class="number">50</span>#</span><br></pre></td></tr></table></figure><p>widt(i),i的参数可以是const 类型,也可以是#define类型</p><h2 id="填充字符-fill-函数"><a href="#填充字符-fill-函数" class="headerlink" title="填充字符-fill()函数"></a><strong>填充字符-fill()函数</strong></h2><p>fill()成员函数可以用来改变填充字符,例如:cout.fill(’@’)</p><p>代码如下:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cout</span>.fill(<span class="string">'@'</span>);                  <span class="comment">//填充@字符</span></span><br><span class="line">   <span class="keyword">char</span> *str[<span class="number">3</span>]=&#123;<span class="string">"这里识别不出来"</span>,<span class="string">"有几个"</span>,<span class="string">"号"</span>&#125;;</span><br><span class="line">   <span class="keyword">int</span> num[<span class="number">3</span>]=&#123;<span class="number">500</span>,<span class="number">600</span>,<span class="number">700</span>&#125;;</span><br><span class="line">   <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=<span class="number">2</span>;i++)            <span class="comment">//3次循环</span></span><br><span class="line">   &#123;</span><br><span class="line">       <span class="built_in">cout</span>&lt;&lt;str[i]&lt;&lt;<span class="string">" :$"</span>;         <span class="comment">//输出str的每个元素</span></span><br><span class="line">       <span class="built_in">cout</span>.width(<span class="number">5</span>);               </span><br><span class="line">       <span class="built_in">cout</span>&lt;&lt;num[i]&lt;&lt;<span class="built_in">endl</span>;          <span class="comment">//输出num的每个元素</span></span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>运行结果如下:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">这里识别不出来 :$@@<span class="number">500</span></span><br><span class="line">有几个 :$@@<span class="number">600</span></span><br><span class="line">号 :$@@<span class="number">700</span></span><br></pre></td></tr></table></figure><h2 id="取消c-setprecision-设置的精度"><a href="#取消c-setprecision-设置的精度" class="headerlink" title="取消c++ setprecision 设置的精度"></a><strong>取消c++ setprecision 设置的精度</strong></h2><p>C++11需要：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="built_in">std</span>::defaultfloat;</span><br></pre></td></tr></table></figure><p>C++11之前需要：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">std</span>::<span class="built_in">cout</span>.unsetf(<span class="built_in">std</span>::ios_base::floatfield);</span><br></pre></td></tr></table></figure><p>两种方法都可以把浮点输出格式还原为默认状态。</p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p><a href="https://blog.csdn.net/Blusmiao/article/details/89466488">C++精度控制说明(详细)</a><br><a href="https://blog.csdn.net/baishuiniyaonulia/article/details/79144033">C++ 中的 cout.setf() 函数</a><br><a href="https://blog.csdn.net/Richard__Ting/article/details/80375870">C++保留任意小数点位数&amp;格式化输出</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;C-的格式控制语法&quot;&gt;&lt;a href=&quot;#C-的格式控制语法&quot; class=&quot;headerlink&quot; title=&quot;C++的格式控制语法&quot;&gt;&lt;/a&gt;&lt;strong&gt;C++的格式控制语法&lt;/strong&gt;&lt;/h2&gt;&lt;p&gt;ostream 类是从ios派生而来的,而ios则是从ios_base派生来的。 ios_base类封装了C++标准中的流输入输出中不依赖于读写的数据的类型的基本信息，如格式化信息、异常状态、事件回调函数等，所以很多的格式控制都需要。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;C++程序设计时，一般不会直接调用std::ios_base的成员函数，但是会经常用到该类中定义的各种流的数据格式的枚举值常量。如ios_base::hex、ios_base::skipws等等。&lt;/li&gt;
&lt;li&gt;C++中通过cout来实现格式输出，就类似于C语言中通过printf()来实现格式输出。&lt;/li&gt;
&lt;li&gt;cout.setf()的作用是通过设置格式标志来控制输出形式&lt;/li&gt;&lt;/ul&gt;
    
    </summary>
    
    
      <category term="C++" scheme="https://stemha.github.io/categories/C/"/>
    
    
  </entry>
  
  <entry>
    <title>Linux-块设备驱动程序</title>
    <link href="https://stemha.github.io/2020/08/17/Linux-%E5%9D%97%E8%AE%BE%E5%A4%87%E9%A9%B1%E5%8A%A8%E7%A8%8B%E5%BA%8F/"/>
    <id>https://stemha.github.io/2020/08/17/Linux-%E5%9D%97%E8%AE%BE%E5%A4%87%E9%A9%B1%E5%8A%A8%E7%A8%8B%E5%BA%8F/</id>
    <published>2020-08-17T13:09:35.000Z</published>
    <updated>2020-09-01T14:20:01.494Z</updated>
    
    <content type="html"><![CDATA[<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a><strong>概述</strong></h2><blockquote><p>Linux块设备处理程序的组织是相当复杂的，在此不可能详细介绍内核块设备I/O子系统中包含的所有函数<br>我们主要说明下面几个问题：</p><ul><li>Linux块设备I/O子系统的体系结构是什么？</li><li>块设备I/O子系统的主要组件有哪些？有哪些作用？</li><li>打开一个块设备文件时内核执行的步骤有哪些？</li><li>内核如何对块设备和块设备的请求进行管理？-&gt;这部分在内核中称为块I/O层</li></ul></blockquote><a id="more"></a><h2 id="块设备与字符设备"><a href="#块设备与字符设备" class="headerlink" title="块设备与字符设备"></a><strong>块设备与字符设备</strong></h2><p><code>块设备</code>:系统中能够随机（不需要按顺序）访问固定大小数据片（chunks）的设备被称作<code>块设备</code>，这些数据片就称作<code>块</code>。</p><ul><li>最常见的块设备是硬盘，除此以外，还有软盘驱动器、CD-ROM驱动器和闪存等等许多其他块设备。</li><li>注意，它们都是以安装文件系统的方式使用的——这也是块设备的一般访问方式。</li></ul><p><code>字符设备</code>:另一种基本的设备类型是<code>字符设备</code>。</p><ul><li>字符设备按照字符流的方式被有序访问，像串口和键盘就都属于字符设备。</li><li>如果一个硬件设备是以字符流的方式被访问的话，那就应该将它归于字符设备；反过来，如果一个设备是随机（无序的）访问的，那么它就属于块设备。</li></ul><p>两种类型的设备的根本区别在于它们是否可以被随机访问——也就是能否在访问设备时随意地从一个位置跳转到另一个位置。</p><article class="message is-info"><div class="message-header"><p>为什么要使用专门的内核子系统来进行块设备的管理？对块设备的优化带来什么好处？</p></div><div class="message-body"><p>内核管理块设备要比管理字符设备细致得多，需要考虑的问题和完成的工作相比字符设备来说要复杂许多。这是因为字符设备仅仅需要控制一个位置—当前位置—而块设备访问的位置必须能够在介质的不同区间前后移动。所以事实上内核不必提供一个专门的子系统来管理字符设备，但是对块设备的管理却必须要有一个专门的提供服务的子系统。不仅仅是因为块设备的复杂性远远高于字符设备，<span class="icon has-text-info">  <i class="fas fa-info-circle"></i></span><strong>更重要的原因是块设备对执行性能的要求很高；对硬盘每多一分利用都会对整个系统的性能带来提升，其效果要远远比键盘吞吐速度成倍的提高大得多</strong>。另外，我们将会看到，块设备的复杂性会为这种优化留下很大的施展空间。</p></div></article><h2 id="块设备的扇区-内核的块"><a href="#块设备的扇区-内核的块" class="headerlink" title="块设备的扇区/内核的块"></a><strong>块设备的扇区/内核的块</strong></h2><h3 id="扇区"><a href="#扇区" class="headerlink" title="扇区"></a><strong>扇区</strong></h3><p><strong>扇区是什么？</strong></p><ul><li>块设备中最小的可寻址单元是扇区。扇区大小一般是2的整数倍，而最常见的是512字节。</li><li>扇区的大小是设备的物理属性<ul><li>扇区是所有块设备的基本单元，块设备无法对比它还小的单元进行寻址和操作，不过许多块设备能够一次就传输多个扇区。</li><li>虽然大多数块设备的扇区大小都是512字节，不过其它大小的扇区也很常见， 比如，很多CD-ROM盘的扇区都是2K大小。</li><li>在Linux中，扇区大小按惯例都设为512字节；如果一个块设备使用更大的扇区，那么相应的底层设备驱动程序将做些必要的变换。</li></ul></li></ul><p><strong>为什么提出扇区？扇区的作用是什么？</strong></p><ul><li>为了达到可接受的性能，硬盘和类似的设备快速传送几个相邻字节的数据（也就是传递多个字节的数据会提高性能）。块设备的每次数据传送操作都作用于一组称为<code>扇区</code>的相邻字节。li><li>尽管磁盘的物理构造很复杂，但是硬盘控制器接收到的命令将磁盘看成一大组扇区。应该把扇区作为数据传送的基本单元，不允许传送少于一个扇区的数据，大部分磁盘设备都可以同时传送几个相邻的扇区。</li><li>对存放在块设备中的一组数据是通过他们在磁盘上的位置来标识，即其首个512字节扇区的下标以及扇区的数目。扇区的下标存放在类型为sector_t的32位或64位的变量中。</li></ul><h3 id="块"><a href="#块" class="headerlink" title="块"></a><strong>块</strong></h3><p><strong>块：</strong></p><ul><li>虽然各种软件的用途不同，但是它们都会用到自己的最小逻辑可寻址单元—块。</li><li>块是文件系统的一种抽象，只能基于块来访问文件系统。虽然物理磁盘寻址是按照扇区来级进行的，但是内核执行的所有磁盘操作都是按照块进行的。</li><li>由于扇区是设备的最小可寻址单元，所以块不能比扇区还小，只能数倍于扇区大小。对有扇区的硬件设备，内核还要求块大小是2的整数倍，且不能超过一个页的长度。</li><li>对块大小的要求最终如下：<ul><li>必须是扇区大小的2的整数倍，并且要小于页面大小（页框大小），所以通常块大小是512字节，1KB或者4KB</li><li>在80X86体系结构中，允许块的大小为512，1024，2048，4096字节。</li><li>块设备的块大小不是唯一的，创建一个磁盘文件系统时，管理员可以选择合适的块大小。因此，同一个磁盘上的几个分区可能使用不同的块大小。</li><li>此外，对块设备文件的每次读或写操作是一种“原始”访问，因为他绕过了磁盘文件系统；内核通过使用<code>最大的块（4096字节）</code>执行该操作。</li></ul></li></ul><p><code>块缓冲区</code>：每个块都需要自己的块缓冲区，它是内核用来存放块内容的RAM空间。</p><ul><li>当内核从磁盘读出一个块时，就用从硬件设备中所获得的数据来填充相应的缓冲区；同样，当内核向磁盘中写入一个块时，就用相关块缓冲区的数据来更新硬件设备上相应的一组相邻字节。</li><li>块缓冲区的大小通常要与相应块的大小相匹配。</li><li><code>缓冲区首部</code>是一个与每个缓冲区相关的<code>buffer_head</code>类型的描述符。它包含内核处理缓冲区需要了解的所有信息；因此，在对每个缓冲区进行操作之前，内核都要首先检查其缓冲区首部；因此，在对每个缓冲区进行操作之前，内核都要首先检查其缓冲区首部。</li></ul><h3 id="扇区与块的关系"><a href="#扇区与块的关系" class="headerlink" title="扇区与块的关系"></a><strong>扇区与块的关系</strong></h3><p>图1是扇区与块之间的关系图：</p><center><img src="/2020/08/17/Linux-%E5%9D%97%E8%AE%BE%E5%A4%87%E9%A9%B1%E5%8A%A8%E7%A8%8B%E5%BA%8F/扇区与块之间的关系.gif">  </center><center>图1. 扇区与块之间的关系</center><p>扇区和块的别称：</p><ul><li><code>扇区</code>：设备的最小寻址单元，或称为“<code>硬扇区</code>”“<code>设备块</code>”。</li><li><code>块</code>：文件系统的最小寻址单元，或称为“<code>文件块</code>”“<code>I/O块</code>”。</li></ul><p>扇区和块的区别：</p><ul><li>扇区是硬件设备传送数据的基本单位，而块是VFS和文件系统传送数据的基本单位。</li><li>例如：内核访问一个文件的内容时，它必须首先从磁盘上读文件的磁盘索引节点所在的块。该块对应磁盘上一个或多个相邻的扇区，而VFS将其看成是一个单一的数据单元。</li></ul><blockquote><p>扇区这一个概念之所以对内核重要，是因为所有设备的I/O必须以扇区为单位进行操作，内核所使用的“块”这一个高级概念就是建立在扇区之上的。</p></blockquote><p>深入理解linux</p><h2 id="块设备的处理"><a href="#块设备的处理" class="headerlink" title="块设备的处理"></a><strong>块设备的处理</strong></h2><p>在本节我们来说明一下Linux块设备I/O子系统的体系结构。块设备驱动程序上的每个操作都涉及很多内核组件，其中最重要的一些如图2所示：</p><center><img src="/2020/08/17/Linux-%E5%9D%97%E8%AE%BE%E5%A4%87%E9%A9%B1%E5%8A%A8%E7%A8%8B%E5%BA%8F/块设备操作涉及的内核组件.gif">  </center><center>图2. 块设备操作涉及的内核组件</center><p>例如，我们假设一个进程在某个磁盘文件上发出一个read()系统调用（write()系统调用本质上采用同样的方式）。下面是内核对进程请求给予回应的一般步骤：</p><ol><li>read()系统调用的服务例程调用一个适当的函数，将<code>文件描述符</code>和<code>文件内的偏移量</code>传递给它。虚拟文件系统位于块设备处理体系结构的上层，他提供一个通用的文件模型，Linux支持的所有文件系统均采用该模型。</li><li>VFS函数<strong>确定所请求的数据是否存在</strong>，比如文件指针的位置的合法性等，如果有必要的话，它决定如何执行read操作（但均通过具体的文件系统提供的文件操作来执行）。有时候没有必要访问磁盘上的数据，因为内核将大多数最近从块设备读出或写入其中的数据保存在RAM中，及通过<code>磁盘高速缓存</code>来获得数据。</li><li>我们假设内核从块设备读数据，那么它就必须<strong>确定数据的物理位置</strong>。为了做到这点，内核依赖<code>映射层（mapping layer）</code>，主要执行下面两步：<br> 3.1. 内核确定该文件所在文件系统的块大小，并根据文件块的大小计算所请求数据的长度。<u>本质上，文件被看作许多数据块的集合</u>，因此内核确定请求数据所在的块号（文件开始位置的块索引）。<br> 3.2. 接下来，映射层调用一个具体文件系统的函数，它访问文件的磁盘索引节点，然后根据逻辑块号确定所请求数据在磁盘上的位置。事实上，磁盘也被看作数据块的数组，因此内核必须确定存放所请求数据的块对应的号（磁盘或分区开始位置的相对索引）。由于一个文件可能存储在磁盘上的不连续块中，因此存放在磁盘索引节点中的数据结构将每个文件块号映射为一个逻辑块号。<br> 3.3. <span class="icon has-text-info">  <i class="fas fa-info-circle"></i></span><strong>如果是从原始设备文件进行读访问，映射层就不调用具体文件系统的方法，而是把块设备文件中的偏移量转换成在磁盘或者在对应该设备文件的磁盘分区中的位置。</strong></li><li>现在内核可以<strong>对块设备发出读请求</strong>。内核利用<code>通用块层（generic block layer）</code>启动I/O操作来传送所请求的数据。一般而言，每个I/O操作只针对磁盘上一组连续的块。由于请求的数据不必位于相邻的块中，所以通用块层可能启动几次I/O操作。每次I/O操作是由一个“块I/O”（简称“bio”）结构描述，它收集底层组件需要的所有信息以满足所发出的请求。通用块层为所有的块设备提供了一个抽象视图，因而隐藏了硬件块设备间的差异性。几乎所有的块设备都是磁盘。</li><li>通用块层下面的“<code>I/O调度程序</code>”根据预先定义的内核策略将待处理的I/O数据传送请求归类。<strong><code>调度程序的作用</code>是把物理介质上相邻的数据请求聚集在一起。</strong></li><li>最后块设备驱动程序向磁盘控制器的硬件接口发送适当的命令，从而进行实际的数据传送。</li></ol><h3 id="块设备内核组件管理数据的方式"><a href="#块设备内核组件管理数据的方式" class="headerlink" title="块设备内核组件管理数据的方式"></a><strong>块设备内核组件管理数据的方式</strong></h3><p>块设备中的数据存储涉及到了许多内核组件，每个组件采用不同长度的块来管理磁盘数据：</p><ul><li>硬件块设备控制器采用称为“<code>扇区</code>”的固定长度的块来传送数据。因此，I/O调度程序和块设备驱动程序必须管理数据扇区。</li><li>虚拟文件系统、映射层和具体文件系统将磁盘数据存放在成为<code>“块”</code>的逻辑单元中。一个块对应文件系统中一个最小的磁盘存储单元。</li><li><code>“段”</code>: 块设备驱动程序应该能够处理数据的<code>“段”</code>。一个段就是一个内存页或内存页的一部分，它们包含磁盘上物理相邻的数据块。</li><li><code>磁盘高速缓存</code>作用于磁盘数据的<code>“页”</code>上，每页正好装在一个<code>页框</code>中。</li><li><code>通用块层</code>将所有的上层和下层的组件组合在一起，因此它了解数据的<code>扇区、块、段以及页</code>。即使有许多不同的数据块，它们通常也是共享相同的物理RAM单元。</li></ul><h3 id="管理数据方式示例"><a href="#管理数据方式示例" class="headerlink" title="管理数据方式示例"></a><strong>管理数据方式示例</strong></h3><p>例如，图3显示了一个具有4KB字节的<code>页</code>的构造。上层内核组件将页看成是4个1024字节组成的<code>块缓冲区</code>。块设备驱动程序正在传送页中的后三个<code>块</code>，因此这3块被插入到涵盖了后3072字节的<code>段</code>中。硬盘控制器将该段看成是由6个512字节的<code>扇区</code>组成。</p><center><img src="/2020/08/17/Linux-%E5%9D%97%E8%AE%BE%E5%A4%87%E9%A9%B1%E5%8A%A8%E7%A8%8B%E5%BA%8F/包含磁盘数据的页的典型构造.gif">  </center><center>图3. 包含磁盘数据的页的典型构造</center><h2 id="段"><a href="#段" class="headerlink" title="段"></a><strong>段</strong></h2><blockquote><p>磁盘的每个I/O操作的实质是在磁盘与一些RAM单元之间相互传送一些相邻扇区的内容。</p></blockquote><p>大多数情况下，磁盘控制器直接采用DMA方式进行数据传送。</p><ul><li>DMA方式的特点是，磁盘控制器就像一个外置CPU一样，块设备驱动程序只要向磁盘控制器发送一些适当的命令就可以触发一次数据传送；一旦完成数据的传送，控制器就会发出一个中断通知块设备驱动程序。</li><li>DMA方式传送的是磁盘上相邻扇区的数据。这是一个物理约束：磁盘控制器允许DMA传送不相邻的扇区数据，但是这种方式的传送速率很低，因为在磁盘表面上移动读/写磁头是相当慢的。</li></ul><p>老式的磁盘控制器仅仅支持“简单的”DMA传送方式：在这种传送方式中，磁盘必须与RAM中的连续内存单元相互传送数据。但是，新的磁盘控制器，也就是我们即将讲到的SCSI磁盘控制器，支持所谓的<code>分散-聚集（scatter-gather）DMA</code>传送方式。此种方式中，磁盘可以与一些非连续的内存区相互传送数据。启动一次分散-聚集DMA传送，块设备驱动程序需要向磁盘控制器发送：</p><ol><li>要传送的起始磁盘扇区号和总的扇区数（要传的数据位置）</li><li>内存区的描述符链表，其中链表的每项包含一个地址和一个长度（需要传送到的位置）</li></ol><p>磁盘控制器则负责整个数据传送，例如：</p><ul><li>在读操作中控制器从相邻磁盘扇区中获得数据，然后将它们存放到不同的内存区中。</li><li>为了使用分散-聚集DMA传送方式，块设备驱动程序必须能够处理称为<code>段</code>的数据存储元。</li><li>一个<code>段</code>就是一个内存页或内存页中的一部分，它们包含一些相邻磁盘扇区中的数据。</li><li>因此，一次分散-聚集DMA操作可能同时传送几个段。</li></ul><p>注意，块设备驱动程序不需要知道块、块大小以及块缓冲区。因此，即使高层将段看成是由几个块缓冲区组成的页，块设备驱动程序也不用对此给予关注。</p><p>如果，不同的段在RAM中相应的页框正好是连续的并且在磁盘上相应的数据块也是相邻的，那么通用块层可以合并它们。通过这种合并方式产生的更大的内存区就称为<code>物理段</code>。然而，在多种体系结构上还允许使用另一个合并方式：通过使用一个专门的总线电路来处理总线地址与物理地址间的映射。通过这种合并方式产生的内存区称为<code>硬件段</code>。由于我们将注意力集中在80 x 86体系结构上，它在总线地址和物理地址之间不存在动态的映射，因此在本章剩余部分我们假定硬件段总是对应物理段。</p><h2 id="缓冲区与缓冲区头"><a href="#缓冲区与缓冲区头" class="headerlink" title="缓冲区与缓冲区头"></a><strong>缓冲区与缓冲区头</strong></h2><p>当一个块被调入内存时（也就是，在读入后或者等待写出的时候），它要存储在一个缓冲区中。每个缓冲区和一个块对应，它相当于磁盘块在内存中的表示。一个块小于一个页，所以一页可以容纳一个或多个内存中的块。</p><p>由于内核在处理数据时需要一些相关的控制信息，每个缓冲区都有一个对应的描述符。该描述符<code>buffer_head结构体</code>表示，被称作<code>缓冲区头</code>，它包含了内核操作缓冲区所需的全部信息：</p><h3 id="buffer-head结构体"><a href="#buffer-head结构体" class="headerlink" title="buffer_head结构体"></a><strong>buffer_head结构体</strong></h3><p>buffer_head结构体在<a href="https://github.com/torvalds/linux/blob/v3.10/include/linux/buffer_head.h#L61">include/linux/buffer_head.h</a>中定义：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * Historically, a buffer_head was used to map a single block</span></span><br><span class="line"><span class="comment"> * within a page, and of course as the unit of I/O through the</span></span><br><span class="line"><span class="comment"> * filesystem and block layers.  Nowadays the basic I/O unit</span></span><br><span class="line"><span class="comment"> * is the bio, and buffer_heads are used for extracting block</span></span><br><span class="line"><span class="comment"> * mappings (via a get_block_t call), for tracking state within</span></span><br><span class="line"><span class="comment"> * a page (via a page_mapping) and for wrapping bio submission</span></span><br><span class="line"><span class="comment"> * for backward compatibility reasons (e.g. submit_bh).</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">buffer_head</span> &#123;</span></span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">long</span> b_state;           <span class="comment">//缓冲区状态标志/* buffer state bitmap (see above) */ </span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">buffer_head</span> *<span class="title">b_this_page</span>;</span>   <span class="comment">//页面中的缓冲区   /* circular list of page's buffers */</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">page</span> *<span class="title">b_page</span>;</span>           <span class="comment">//存储缓冲区的页面/* the page this bh is mapped to */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">sector_t</span> b_blocknr;<span class="comment">//起始块号 /* start block number */</span></span><br><span class="line"><span class="keyword">size_t</span> b_size;<span class="comment">//映像的大小 /* size of mapping */</span></span><br><span class="line"><span class="keyword">char</span> *b_data;<span class="comment">//页面内的数据指针 /* pointer to data within the page */</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">block_device</span> *<span class="title">b_bdev</span>;</span>      <span class="comment">//相关联的块设备</span></span><br><span class="line"><span class="keyword">bh_end_io_t</span> *b_end_io;<span class="comment">//I/O完成方法 /* I/O completion */</span></span><br><span class="line"> <span class="keyword">void</span> *b_private;<span class="comment">/* reserved for b_end_io */</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">list_head</span> <span class="title">b_assoc_buffers</span>;</span>   <span class="comment">/*相关的映射链表 associated with another mapping */</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">address_space</span> *<span class="title">b_assoc_map</span>;</span><span class="comment">/*相关的地址空间 mapping this buffer is associated with */</span></span><br><span class="line"><span class="keyword">atomic_t</span> b_count;            <span class="comment">/*缓冲区使用计数 users using this buffer_head */</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>说明：</p><ul><li><p><code>b_count域</code>表示缓冲区的使用记数，可通过两个定义在文件<a href="https://github.com/torvalds/linux/blob/v3.10/include/linux/buffer_head.h#L268">include/linux/buffer_head.h</a>中的内联函数对此域进行增减。</p><ul><li><figure class="highlight c"><figcaption><span>点击展开对b_count域进行增减的内联函数 >folded</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">get_bh</span><span class="params">(struct buffer_head *bh)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">        atomic_inc(&amp;bh-&gt;b_count);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">put_bh</span><span class="params">(struct buffer_head *bh)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">        smp_mb__before_atomic_dec();</span><br><span class="line">        atomic_dec(&amp;bh-&gt;b_count);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>在操作缓冲区头之前，应该先使用get_bh()函数增加缓冲区头的引用计数，确保该缓冲区头不会再被分配出去；当完成对缓冲区头的操作之后，还必须使用put_bh()函数减少引用计数。</li></ul></li><li><p><code>b_blocknr域</code>：与缓冲区对应的磁盘物理块由b_blocknr域索引，该值是b_bdev域指明的块设备中的逻辑块号。</p></li><li><p>与缓冲区对应的内存物理页由<code>b_page域</code>表示，另外，<code>b_data域</code>直接指向相应的块（它位于b_page域所指明的页面中的某个位置上），块的大小由<code>b_size域</code>表示，所以块在内存中的起始位置在b_data处，结束位置在(b_data + b_size)处。</p></li><li><p><code>b_state域</code>表示缓冲区状态标志，可以是下表中一种或者多种标志的组合。合法的标志存放在bh_state_bits枚举中，在<a href="https://github.com/torvalds/linux/blob/v3.10/include/linux/buffer_head.h#L19">include/linux/buffer_head.h</a>中定义    </p></li></ul><figure class="highlight c"><figcaption><span>点击展开bh_state_bits枚举列表 >folded</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">enum</span> bh_state_bits &#123;</span><br><span class="line">BH_Uptodate,<span class="comment">/* 该缓冲区包含可用数据Contains valid data */</span></span><br><span class="line">BH_Dirty,<span class="comment">/* 该缓冲区是脏的，缓冲区的内容比磁盘中的块内容要新，所以缓冲区的内容必须被写回磁盘Is dirty */</span></span><br><span class="line">BH_Lock,<span class="comment">/* 该缓冲区正在被I/O操作访问，被锁定以防止并发访问Is locked */</span></span><br><span class="line">BH_Req,<span class="comment">/* 该缓冲区有I/O请求操作Has been submitted for I/O */</span></span><br><span class="line">BH_Uptodate_Lock,<span class="comment">/* Used by the first bh in a page, to serialise</span></span><br><span class="line"><span class="comment">  * IO completion of other buffers in the page</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"></span><br><span class="line">BH_Mapped,<span class="comment">/* 该缓冲区是映射磁盘块的可用缓冲区Has a disk mapping */</span></span><br><span class="line">BH_New,<span class="comment">/* 缓冲区是通过get_block()刚刚映射的，尚且不能访问Disk mapping was newly created by get_block */</span></span><br><span class="line">BH_Async_Read,<span class="comment">/*该缓冲区正通过end_buffer_async_read()被异步I/O读操作使用 Is under end_buffer_async_read I/O */</span></span><br><span class="line">BH_Async_Write,<span class="comment">/*该缓冲区正通过end_buffer_async_write()被异步写操作使用 Is under end_buffer_async_write I/O */</span></span><br><span class="line">BH_Delay,<span class="comment">/* 该缓冲区尚未与磁盘块关联Buffer is not yet allocated on disk */</span></span><br><span class="line">BH_Boundary,<span class="comment">/* 该缓冲区片于连续块区的边界，下一个块不再连续 Block is followed by a discontiguity */</span></span><br><span class="line">BH_Write_EIO,<span class="comment">/* 该缓冲区在写的时候遇到I/O错误 I/O error on write */</span></span><br><span class="line">BH_Unwritten,<span class="comment">/* 该缓冲区在硬盘上的空间已经被申请但是没有实际数据写出Buffer is allocated on disk but not written */</span></span><br><span class="line">BH_Quiet,<span class="comment">/* 该缓冲区禁止错误Buffer Error Prinks to be quiet */</span></span><br><span class="line">BH_Meta,<span class="comment">/* Buffer contains metadata */</span></span><br><span class="line">BH_Prio,<span class="comment">/* Buffer should be submitted with REQ_PRIO */</span></span><br><span class="line"></span><br><span class="line">BH_PrivateStart,<span class="comment">/* not a state bit, but the first bit available</span></span><br><span class="line"><span class="comment"> * for private allocation by other entities</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>说明：</p><ul><li>BH_PrivateStart：bh_state_bits列表还包含了一个特殊标志——BH_PrivateStart，该标志不是可用状态标志，使用它是为了指明可被其他代码使用的起始位。块I/O层不会使用BH_PrivateStart或更高的位。那么某个驱动程序希望通过b_state域存储信息时就可以安全地使用这些位。驱动程序可以在这些位中定义自己的状态标志，只要保证自定义的状态标志不与块I/O层的专用位发生冲突就可以了。</li></ul><h3 id="块缓冲区头、块缓冲区以及页框的关系"><a href="#块缓冲区头、块缓冲区以及页框的关系" class="headerlink" title="块缓冲区头、块缓冲区以及页框的关系"></a><strong>块缓冲区头、块缓冲区以及页框的关系</strong></h3><p>每个块缓冲区都对应一个块缓冲区头buffer_head，二者的关系类似于物理页框和物理页框描述符，前者用来存储数据，后者是对前者的属性以及控制信息的描述。<br>块缓冲区头、块缓冲区以及页框的关系如下：</p><center><img src="/2020/08/17/Linux-%E5%9D%97%E8%AE%BE%E5%A4%87%E9%A9%B1%E5%8A%A8%E7%A8%8B%E5%BA%8F/块缓冲区头、块缓冲区以及页框的关系.gif">  </center><center>图4. 块缓冲区头、块缓冲区以及页框的关系</center><p>总结一下:</p><ul><li>缓冲区:磁盘块在物理内存中的表示形式</li><li>缓冲区描述符:对缓冲区的相关信息的描述，描述了缓冲区与磁盘块的映射关系</li><li>缓冲区头的目的在于描述磁盘块和物理内存缓冲区（在特定页面上的字节序列）之间的映射关系。这个结构体在内核中只扮演一个描述符的角色，说明从缓冲区到块的映射关系。</li></ul><h2 id="通用块层"><a href="#通用块层" class="headerlink" title="通用块层"></a><strong>通用块层</strong></h2><p>通用块层是一个内核组件，它处理来自系统中的所有对块设备发出的请求。由于该层所提供的函数，内核可以容易的做到：</p><ul><li>将数据缓冲区放在高端内存——仅当CPU访问其数据时，才将页框映射为内核中的线性地址空间，并在数据访问完后取消映射。</li><li>通过一些附加额手段，实现一个所谓的<code>“零-复制”模式</code>，将磁盘数据直接存放在用户态地址空间而不是首先复制到内核内存区；<ul><li>事实上，内核为I/O数据传送使用的缓冲区所在的页框就映射在进程的用户态线性地址空间中。</li></ul></li><li>管理逻辑卷，例如有LVM(逻辑卷管理)和RAID（磁盘冗余阵列）使用的逻辑卷：几个磁盘分区，即使位于不同的磁盘中，也可以被看做是一个单一的分区。</li><li>发挥大部分新磁盘控制器的高级特性，例如大主板磁盘高速缓存，增强的DMA性能，I/O传送请求的相关调度等。</li></ul><p>深入理解linux</p><h2 id="bio结构体"><a href="#bio结构体" class="headerlink" title="bio结构体"></a><strong>bio结构体</strong></h2><p>通用块层的核心数据结构是一个称为bio的描述符，它描述了块设备的I/O操作。目前内核中块I/O操作的基本容器由bio结构体表示。在更上层的具体的文件系统的读写操作方法中，构造bio结构，并通过通用块层来提交各块设备驱动程序来进行实际的数据传输。</p><p>它定义在文件<a href="https://github.com/torvalds/linux/blob/v3.10/include/linux/blk_types.h#L35">include/linux/blk_types.h</a>中:</p><ul><li>该结构体代表了正在活动的以<code>段(segment)链表</code>形式组织的块I/O操作。一个段是一小块连续的内存缓冲区。这样,单个缓冲区就不一定要连续。所以<u>使用段来描述缓冲区,即使一个缓冲区分散在内存的多个位置上,bio结构体也能对内核保证I/O操作的执行</u>。这样的向量I/O称为<code>分散-聚合I/O</code>。</li><li>每个bio结构都包含一个<code>磁盘存储区表示符</code>（存储区中的起始扇区号和扇区数目）和一个或多个描述与I/O操作相关的内存区的段。</li></ul><p>bio结构定义如下：</p><figure class="highlight c"><figcaption><span>点击展开bio结构体 >folded</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* struct bio, bio_vec and BIO_* flags are defined in blk_types.h */</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * main unit of I/O for the block layer and lower layers (ie drivers and</span></span><br><span class="line"><span class="comment"> * stacking drivers)</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">bio</span> &#123;</span></span><br><span class="line"><span class="keyword">sector_t</span>bi_sector;<span class="comment">/* 磁盘上相关的扇区,块I/O操作的第一个扇区 device address in 512 byte sectors */</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">bio</span>*<span class="title">bi_next</span>;</span><span class="comment">/* 请求链表，链接到请求队列中的下一个bio request queue link */</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">block_device</span>*<span class="title">bi_bdev</span>;</span><span class="comment">//指向块设备描述符的指针</span></span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">long</span>bi_flags;<span class="comment">/* 状态和命令标志status, command, etc */</span></span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">long</span>bi_rw;<span class="comment">/* 读还是写,I/O操作标志 bottom bits READ/WRITE,</span></span><br><span class="line"><span class="comment"> * top bits priority</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">unsigned</span> shortbi_vcnt;<span class="comment">/* bio的biovec数组中段的数目，bio_vec的偏移个数 how many bio_vec's */</span></span><br><span class="line"><span class="keyword">unsigned</span> shortbi_idx;<span class="comment">/* bio的biovec数组中段的当前索引值 current index into bvl_vec */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* Number of segments in this BIO after</span></span><br><span class="line"><span class="comment"> * physical address coalescing is performed.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">int</span>bi_phys_segments; <span class="comment">//合并之后的硬件段数目</span></span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">int</span>bi_size;<span class="comment">/* I/O计数 residual I/O count */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * To keep track of the max segment size, we account for the</span></span><br><span class="line"><span class="comment"> * sizes of the first and last mergeable segments in this bio.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">int</span>bi_seg_front_size; <span class="comment">//第一个可合并段的大小，硬件段合并算法使用</span></span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">int</span>bi_seg_back_size;  <span class="comment">//最后一个可合并段的大小，硬件段合并算法使用</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">bio_end_io_t</span>*bi_end_io;        <span class="comment">//bio的I/O操作结束时调用的方法</span></span><br><span class="line"><span class="keyword">void</span>*bi_private;         <span class="comment">//拥有者的私有方法。通用块层和块设备驱动程序的I/O完成方法所使用的指针</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> CONFIG_BLK_CGROUP</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * Optional ioc and css associated with this bio.  Put on bio</span></span><br><span class="line"><span class="comment"> * release.  Read comment on top of bio_associate_current().</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">io_context</span>*<span class="title">bi_ioc</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">cgroup_subsys_state</span> *<span class="title">bi_css</span>;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> defined(CONFIG_BLK_DEV_INTEGRITY)</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">bio_integrity_payload</span> *<span class="title">bi_integrity</span>;</span>  <span class="comment">/* data integrity */</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * Everything starting with bi_max_vecs will be preserved by bio_reset()</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">int</span>bi_max_vecs;<span class="comment">/* bio中的bio_vec数组中允许的最大段数 max bvl_vecs we can hold */</span></span><br><span class="line"><span class="keyword">atomic_t</span>bi_cnt;<span class="comment">/* bio的引用计数器 pin count */</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">bio_vec</span>*<span class="title">bi_io_vec</span>;</span><span class="comment">/* 指向bio中的bio_vec数组中段的指针 the actual vec list */</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">bio_set</span>*<span class="title">bi_pool</span>;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * We can inline a number of vecs at the end of the bio, to avoid</span></span><br><span class="line"><span class="comment"> * double allocations for a small number of bio_vecs. This member</span></span><br><span class="line"><span class="comment"> * MUST obviously be kept at the very end of the bio.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">bio_vec</span><span class="title">bi_inline_vecs</span>[0];</span>  <span class="comment">//内嵌bio向量</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>说明：</p><ul><li>bio结构体描述的都只是元数据部分，实际数据都包含在紧跟其后的 <code>bio_vec结构体</code> 中。bio中的每一个段是由bio_vec结构体描述的</li><li>bio结构体中的bi_io_vec字段指向bio_vec数据结构的第一个元素，bi_vcnt则存放了bio_vec数据结构数组中当前元素的个数。</li><li>bi_private域，这是一个属于拥有者（创建者）的私有域，只有创建了bio结构的拥有者可以读写该域。<br>bio结构体中的主要成员变量都是用来管理I/O操作执行的相关信息的,其中最重要的几个成员变量是<code>bi_io_vec</code>、<code>bi_vcnt</code>和<code>bi_idx</code>。下图显示了bio结构体及相关结构体之间的关系：</li></ul><center><img src="/2020/08/17/Linux-%E5%9D%97%E8%AE%BE%E5%A4%87%E9%A9%B1%E5%8A%A8%E7%A8%8B%E5%BA%8F/bio结构体及相关结构体之间的关系.PNG">  </center><center>图5. bio结构体及bio_vec, bi_vcnt和bi_idx之间的关系</center><p>说明：</p><ul><li>在每个给定的块I/O操作中，bi_vcnt域用来描述bi_io_vec所指向的vio_vec数组中的向量数目。当块I/O操作执行完毕后,bi_idx域指向数组的当前索引。</li><li>在块I/O操作期间bio描述符的内容一直保持更新。例如，如果块设备驱动程序在一次分散-聚集DMA操作中不能完成全部的数据传送，那么bio中的bi_idx字段会不断更新来指向待传送的第一个段。为了从索引bi_idx指向的当前段开始不断遍历bio中的段，设备驱动程可以执行宏bio_for_each_segment().</li></ul><p>当通用块层启动一次新的I/O操作时，调用bio_alloc()函数分配一个新的bio结构。内核使用fs_bio_set结构类型来管理bio结构相关内存分配的缓冲区，这个结构由几个用于引用内存池或slab缓冲的指针组成。<br>fs_bio_set中的一个成员bio_pool用于引用分配bio结构的内存池，而在这个缓冲区中分配的内存块的单位并不是sizeof(struct bio)，而是sizeof(struct bio) + BIO_INLINE_VECS* sizeof(struct bio_vec)个字节。在分配了bio结构之后，通常要为bio分配bio_vec结构，当bio_vec结构数小于BIO_INLINE_VECS时则可以通过bio结构的最后一个成员bi_inline_vecs来引用这些bio_vec结构。</p><p>内核同时创建了6个slab缓冲区用于分配数量不等的bio_vec结构，当所需的bio_vec结构数大于BIO_INLINE_VECS，则从这些缓冲区中分配内存。</p><h3 id="I-O-向量"><a href="#I-O-向量" class="headerlink" title="I/O 向量"></a><strong>I/O 向量</strong></h3><p><code>bi_io_vec</code>域指向一个<code>bio_vec</code>结构体数组，该结构体链表包含一个特定I/O操作所需要使用的所有片段。</p><ul><li>每个bio_vec结构都是一个形式为<code>&lt;page, offset, len&gt;的向量</code>，它描述的是一个特定的片段。段所在的物理页、块在物理页中的偏移位置、从给定偏移量开始的块长度。</li></ul><p>整个bio_vec结构体数组表示一个完整的缓冲区。bio_vec结构定义在<a href="https://github.com/torvalds/linux/blob/v3.10/include/linux/blk_types.h">include/linux/blk_types.h</a></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * was unsigned short, but we might as well be ready for &gt; 64kB I/O pages</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">bio_vec</span> &#123;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">page</span>*<span class="title">bv_page</span>;</span> <span class="comment">//指向这个缓冲区所驻留的物理页。指向段的页框中页描述符的指针</span></span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">int</span>bv_len; <span class="comment">//这个缓冲区以字节为单位的大小。段的字节长度</span></span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">int</span>bv_offset; <span class="comment">//缓冲区所驻留的页以字节为单位的偏移量，页框中段数据的偏移量。</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>总而言之，每一个块IO请求都通过一个bio结构体表示。</p><ul><li>每个请求包括一个或多个块，这些块存储在bio_vec结构体数组中。</li><li>这些结构体描述了每个片段在物理页中的实际位置，并且像向量一样被组织在一起。</li><li>IO操作的第一个片段由bio_io_vecs指针所指向，其他的片段在其后一次防止，共有bi_vcnt个片段。</li><li>当块IO层开始执行请求、需要使用各个片段时，bi_idx域会不断更新，指向当前片段。</li><li>块IO层通过bi_idx可以跟踪IO操作的完成进度。但该域更重要的作用在于分割bio结构体。</li></ul><p>bi_cnt域记录bio结构体的使用计数，如果为0就销毁该结构体，并释放内存。通过下面的函数管理使用计数：</p><ul><li>bio_put()代码在<a href="https://github.com/torvalds/linux/blob/v3.10/fs/bio.c#L487">fs/bio.c</a>：</li><li><figure class="highlight c"><figcaption><span>点击展开bio_put()代码 >folded</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * bio_put - release a reference to a bio</span></span><br><span class="line"><span class="comment"> * @bio:   bio to release reference to</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * Description:</span></span><br><span class="line"><span class="comment"> *   Put a reference to a &amp;struct bio, either one you have gotten with</span></span><br><span class="line"><span class="comment"> *   bio_alloc, bio_get or bio_clone. The last put of a bio will free it.</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">bio_put</span><span class="params">(struct bio *bio)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">BIO_BUG_ON(!atomic_read(&amp;bio-&gt;bi_cnt));</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * last put frees it</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">if</span> (atomic_dec_and_test(&amp;bio-&gt;bi_cnt))</span><br><span class="line">bio_free(bio);</span><br><span class="line">&#125;</span><br><span class="line">EXPORT_SYMBOL(bio_put);</span><br></pre></td></tr></table></figure></li><li>bio_get()代码在<a href="https://github.com/torvalds/linux/blob/v3.10/include/linux/bio.h#L157">include/linux/bio.h</a>：</li><li><figure class="highlight c"><figcaption><span>点击展开bio_get()代码 >folded</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * get a reference to a bio, so it won't disappear. the intended use is</span></span><br><span class="line"><span class="comment"> * something like:</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * bio_get(bio);</span></span><br><span class="line"><span class="comment"> * submit_bio(rw, bio);</span></span><br><span class="line"><span class="comment"> * if (bio-&gt;bi_flags ...)</span></span><br><span class="line"><span class="comment"> *do_something</span></span><br><span class="line"><span class="comment"> * bio_put(bio);</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * without the bio_get(), it could potentially complete I/O before submit_bio</span></span><br><span class="line"><span class="comment"> * returns. and then bio would be freed memory when if (bio-&gt;bi_flags ...)</span></span><br><span class="line"><span class="comment"> * runs</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> bio_get(bio)atomic_inc(&amp;(bio)-&gt;bi_cnt)</span></span><br></pre></td></tr></table></figure>前者增加使用计数，后者减少使用计数（如果为0就销毁该结构体，并释放内存）在操作正在活动的bio结构体时，一定要首先增加它的使用计数，以免在操作过程中该bio结构体被释放。</li></ul><h2 id="缓冲区头与bio结构体方法对比"><a href="#缓冲区头与bio结构体方法对比" class="headerlink" title="缓冲区头与bio结构体方法对比"></a><strong>缓冲区头与bio结构体方法对比</strong></h2><p>缓冲区头和新的bio结构体之间存在显著差别：</p><ul><li>bio结构体代表的是I/O操作，它可以包括内存中的一个或多个页。由于bio结构体是轻量级的，它描述的块可以不需要连续的存储区，并且不需要分隔I/O操作。</li><li>buffer_head结构体代表的是一个缓冲区，它描述的仅仅是磁盘中的一个块。因为缓冲区头关联的是单独页中的单独磁盘块，所以它可能会引起不必要的分隔，将请求按块为单位划分，只能靠以后再重新组合。</li></ul><p>利用bio代替buffer_head好处有：</p><ul><li>不需要连续存储区，也不需要分割I/O操作</li><li>bio很容易处理高端内存，因为它处理的是物理页而不是直接指针</li><li>bio既可以代表普通页，也可以代表直接I/O</li><li>bio便于执行分散——集中(矢量化)块I/O操作，操作中的数据可以来自多个物理页</li><li>bio相比缓冲区头属于轻量级结构体。因为它只需要包含块I/O操作所需的信息就行了，不用包含与缓冲区本身相关的不必要信息。</li></ul><p>但是还是需要缓冲区头这个概念，毕竟它还负责描述磁盘块到页面的映射。<br>bio结构体不包含任何和缓冲区相关的状态信息——它仅仅是一个矢量数组，描述一个或多个单独块I/O操作的数据片段和相关信息。<br>在当前设置中，当bio结构体描述当前正在使用的I/O操作时，buffer_head结构体仍然需要包含缓冲区信息。<br>内核通过这两种结构分别保存各自的信息，可以保证每种结构所含的信息量尽可能少。</p><h2 id="请求队列"><a href="#请求队列" class="headerlink" title="请求队列"></a><strong>请求队列</strong></h2><p>块设备将它们挂起的块I/O请求保存在请求队列中，该队列由<code>request_queue结构体</code>表示，定义在文件<a href="https://github.com/torvalds/linux/blob/v3.10/include/linux/blkdev.h#L288">linux/blkdev.h</a>中，包含一个双向请求链表以及相关控制信息。</p><figure class="highlight c"><figcaption><span>点击展开request_queue结构体代码 >folded</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">request_queue</span> &#123;</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * Together with queue_head for cacheline sharing</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">list_head</span><span class="title">queue_head</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">request</span>*<span class="title">last_merge</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">elevator_queue</span>*<span class="title">elevator</span>;</span></span><br><span class="line"><span class="keyword">int</span>nr_rqs[<span class="number">2</span>];<span class="comment">/* # allocated [a]sync rqs */</span></span><br><span class="line"><span class="keyword">int</span>nr_rqs_elvpriv;<span class="comment">/* # allocated rqs w/ elvpriv */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * If blkcg is not used, @q-&gt;root_rl serves all requests.  If blkcg</span></span><br><span class="line"><span class="comment"> * is used, root blkg allocates from @q-&gt;root_rl and all other</span></span><br><span class="line"><span class="comment"> * blkgs from their own blkg-&gt;rl.  Which one to use should be</span></span><br><span class="line"><span class="comment"> * determined using bio_request_list().</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">request_list</span><span class="title">root_rl</span>;</span></span><br><span class="line"></span><br><span class="line">request_fn_proc*request_fn;</span><br><span class="line">make_request_fn*make_request_fn;</span><br><span class="line">prep_rq_fn*prep_rq_fn;</span><br><span class="line">unprep_rq_fn*unprep_rq_fn;</span><br><span class="line">merge_bvec_fn*merge_bvec_fn;</span><br><span class="line">softirq_done_fn*softirq_done_fn;</span><br><span class="line">rq_timed_out_fn*rq_timed_out_fn;</span><br><span class="line">dma_drain_needed_fn*dma_drain_needed;</span><br><span class="line">lld_busy_fn*lld_busy_fn;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * Dispatch queue sorting</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">sector_t</span>end_sector;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">request</span>*<span class="title">boundary_rq</span>;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * Delayed queue handling</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">delayed_work</span><span class="title">delay_work</span>;</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">backing_dev_info</span><span class="title">backing_dev_info</span>;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * The queue owner gets to use this for whatever they like.</span></span><br><span class="line"><span class="comment"> * ll_rw_blk doesn't touch it.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">void</span>*queuedata;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * various queue flags, see QUEUE_* below</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">long</span>queue_flags;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * ida allocated id for this queue.  Used to index queues from</span></span><br><span class="line"><span class="comment"> * ioctx.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">int</span>id;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * queue needs bounce pages for pages above this limit</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">gfp_t</span>bounce_gfp;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * protects queue structures from reentrancy. -&gt;__queue_lock should</span></span><br><span class="line"><span class="comment"> * _never_ be used directly, it is queue private. always use</span></span><br><span class="line"><span class="comment"> * -&gt;queue_lock.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">spinlock_t</span>__queue_lock;</span><br><span class="line"><span class="keyword">spinlock_t</span>*queue_lock;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * queue kobject</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">kobject</span> <span class="title">kobj</span>;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> CONFIG_PM_RUNTIME</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">device</span>*<span class="title">dev</span>;</span></span><br><span class="line"><span class="keyword">int</span>rpm_status;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">int</span>nr_pending;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * queue settings</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">long</span>nr_requests;<span class="comment">/* Max # of requests */</span></span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">int</span>nr_congestion_on;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">int</span>nr_congestion_off;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">int</span>nr_batching;</span><br><span class="line"></span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">int</span>dma_drain_size;</span><br><span class="line"><span class="keyword">void</span>*dma_drain_buffer;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">int</span>dma_pad_mask;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">int</span>dma_alignment;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">blk_queue_tag</span>*<span class="title">queue_tags</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">list_head</span><span class="title">tag_busy_list</span>;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">int</span>nr_sorted;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">int</span>in_flight[<span class="number">2</span>];</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * Number of active block driver functions for which blk_drain_queue()</span></span><br><span class="line"><span class="comment"> * must wait. Must be incremented around functions that unlock the</span></span><br><span class="line"><span class="comment"> * queue_lock internally, e.g. scsi_request_fn().</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">int</span>request_fn_active;</span><br><span class="line"></span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">int</span>rq_timeout;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">timer_list</span><span class="title">timeout</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">list_head</span><span class="title">timeout_list</span>;</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">list_head</span><span class="title">icq_list</span>;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> CONFIG_BLK_CGROUP</span></span><br><span class="line">DECLARE_BITMAP(blkcg_pols, BLKCG_MAX_POLS);</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">blkcg_gq</span>*<span class="title">root_blkg</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">list_head</span><span class="title">blkg_list</span>;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">queue_limits</span><span class="title">limits</span>;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * sg stuff</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">int</span>sg_timeout;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">int</span>sg_reserved_size;</span><br><span class="line"><span class="keyword">int</span>node;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> CONFIG_BLK_DEV_IO_TRACE</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">blk_trace</span>*<span class="title">blk_trace</span>;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * for flush operations</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">int</span>flush_flags;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">int</span>flush_not_queueable:<span class="number">1</span>;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">int</span>flush_queue_delayed:<span class="number">1</span>;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">int</span>flush_pending_idx:<span class="number">1</span>;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">int</span>flush_running_idx:<span class="number">1</span>;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">long</span>flush_pending_since;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">list_head</span><span class="title">flush_queue</span>[2];</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">list_head</span><span class="title">flush_data_in_flight</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">request</span><span class="title">flush_rq</span>;</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">mutex</span><span class="title">sysfs_lock</span>;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span>bypass_depth;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> defined(CONFIG_BLK_DEV_BSG)</span></span><br><span class="line">bsg_job_fn*bsg_job_fn;</span><br><span class="line"><span class="keyword">int</span>bsg_job_size;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">bsg_class_device</span> <span class="title">bsg_dev</span>;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> CONFIG_BLK_CGROUP</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">list_head</span><span class="title">all_q_node</span>;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> CONFIG_BLK_DEV_THROTTLING</span></span><br><span class="line"><span class="comment">/* Throttle data */</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">throtl_data</span> *<span class="title">td</span>;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">rcu_head</span><span class="title">rcu_head</span>;</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>通过内核中像文件系统这样的高层的代码将请求加入到队列中。请求队列只要不为空，队列对应的块设备驱动程序就会从队列头获取请求，然后将其送入对应的块设备上去。</p><ul><li>请求队列表中的每一项都是一个单独的请求，由<code>request结构体</code>表示。</li><li>队列中的请求由结构体request表示，因为一个请求可能要操作多个连续的磁盘块，所以每个请求可以由多个bio结构体组成。</li><li>注意，虽然磁盘上的块必须连续，但是在内存中这些块并不一定要连续_每个bio结构体都可以描述多个段（段是内存中的连续的小区域），而每个请求也可以包含多个bio结构体。</li></ul><h2 id="I-O调度程序-块I-O调度层"><a href="#I-O调度程序-块I-O调度层" class="headerlink" title="I/O调度程序(块I/O调度层)"></a><strong>I/O调度程序(块I/O调度层)</strong></h2><p>如果简单地以内核产生的请求的次序直接将请求发向块设备的话，性能会很差。磁盘寻址是整个计算机中最慢的操作之一，每次寻址（定位磁盘磁头到特定块上的某个位置）需要花费不少时间，所以尽量缩短寻址时间无疑提高系统性能。</p><p>为了优化寻址操作，内核既不会简单地按请求接受次序，也不会立即将其提交给磁盘。相反，它会在提交前，先执行名为<code>合并排序</code>的<strong>预操作</strong>，这种预操作可以极大地提高系统的整体性能。</p><p>在内核中<code>负责提交I/O请求的子系统</code>称为<code>I/O调度程序</code>:</p><ul><li>I/O调度程序将磁盘I/O资源分配给系统中所有挂起的块I/O请求。这种资源分配是通过将请求队列中挂起的<code>请求合并和排序</code>来完成的。</li></ul><p>进程调度程序与I/O调度程序的共同点与区别：</p><ul><li>二者都是将一个资源虚拟给多个对象</li><li>进程调度程序的作用是将处理器资源分配给系统中的运行进程。处理器被进程调度程序虚拟给系统中的运行进程共享。</li><li>I/O调度程序虚拟块设备给多个磁盘请求，以便降低磁盘寻址时间，确保磁盘性能地最优化。</li></ul><h3 id="I-O调度程序的工作"><a href="#I-O调度程序的工作" class="headerlink" title="I/O调度程序的工作"></a><strong>I/O调度程序的工作</strong></h3><p>I/O调度程序的工作是管理块设备的请求队列。</p><ul><li>它决定队列中的请求排列顺序以及在什么时候派发请求到块设备。这样做有利于减少磁盘寻址时间，从而提高全局吞吐量。</li><li><strong>I/O调度器提高的是系统整体性能，对个别请求可能不公平。</strong></li></ul><p>I/O调度程序通过两种方法减少磁盘寻址时间：合并与排序。</p><ul><li>合并：指将两个或多个请求结合成一个请求。通过合并请求，I/O调度程序将多次请求的开销压缩成一次请求的开销。更重要的是，请求合并后只需要传递给磁盘一条寻址命令，就可以访问到请求合并前必须多次寻址才能访问完的磁盘区域了，因此合并请求显然能减少系统开销和磁盘寻址次数。<ul><li>比如文件系统提交请求到请求队列——请求是从文件中读取一个数据区。（当然，最终所有的操作都是针对扇区和块进行的，而不是文件，还假定请求的块都是来自文件块）。如果这时队列中已经存在一个请求，它访问的磁盘扇区和当前请求访问的磁盘扇区相邻（比如，同一个文件中早些时候被读取的数据区），那么这两个请求就可以合并为一个对单个和多个相邻磁盘扇区操作的新请求。</li></ul></li><li>排序：如果存在一个请求，它要操作的磁盘扇区位置与当前请求比较接近，那么是不是该让这两个请求在请求队列上也相邻呢？事实上，I/O调度程序的确是这样处理上述情况的，整个请求队列将按扇区增长方向有序排列。使所有请求按硬盘上扇区的排列顺序有序排列（尽可能的）的目的不仅是为了缩短单独一次请求的寻址时间，更重要的优化在于，通过保持磁盘头以直线方向移动，缩短了所有请求的磁盘寻址时间。该排序算法类似于电梯调度（A–&gt;B…..A—&gt;B）。</li></ul><hr><h2 id="访问块设备"><a href="#访问块设备" class="headerlink" title="访问块设备"></a>访问块设备</h2><p>字符设备的实现比较简单，内核例程和用户态API一一对应，这种映射关系由字符设备的file_operations维护。块设备接口则相对复杂，读写API没有直接到块设备层，而是直接到文件系统层，然后再由文件系统层发起读写请求。<br>对于块设备来说，读写操作是以数据块为单位进行的，为了使高速的 CPU 同低速块设备能够协调工作，提高读写效率，操作系统设置了缓冲机制。当进行读写的时候，首先对缓冲区读写，只有缓冲区中没有需要读的数据或是需要写的数据没有地方写时，才真正地启动设备控制器去控制设备本身进行数据交换，而对于设备本身的数据交换同样也是同缓冲区打交道。</p><h2 id="块设备驱动程序的注册"><a href="#块设备驱动程序的注册" class="headerlink" title="块设备驱动程序的注册"></a><strong>块设备驱动程序的注册</strong></h2><h3 id="register-blkdev-函数"><a href="#register-blkdev-函数" class="headerlink" title="register_blkdev()函数"></a><strong>register_blkdev()函数</strong></h3><p>块设备驱动中的第1个工作通常是注册它们自己到内核，申请设备号，完成这个任务的函数是<code>register_blkdev()</code>,代码在<a href="https://github.com/torvalds/linux/blob/v3.10/block/genhd.c#L285">/block/genhd.c</a></p><figure class="highlight c"><figcaption><span>点击展开register_blkdev()函数代码 >folded</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * register_blkdev - register a new block device</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * @major: the requested major device number [1..255]. If @major=0, try to</span></span><br><span class="line"><span class="comment"> *         allocate any unused major number.</span></span><br><span class="line"><span class="comment"> * @name: the name of the new block device as a zero terminated string</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * The @name must be unique within the system.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * The return value depends on the @major input parameter.</span></span><br><span class="line"><span class="comment"> *  - if a major device number was requested in range [1..255] then the</span></span><br><span class="line"><span class="comment"> *    function returns zero on success, or a negative error code</span></span><br><span class="line"><span class="comment"> *  - if any unused major number was requested with @major=0 parameter</span></span><br><span class="line"><span class="comment"> *    then the return value is the allocated major number in range</span></span><br><span class="line"><span class="comment"> *    [1..255] or a negative error code otherwise</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">register_blkdev</span><span class="params">(<span class="keyword">unsigned</span> <span class="keyword">int</span> major, <span class="keyword">const</span> <span class="keyword">char</span> *name)</span></span></span><br><span class="line"><span class="function"></span>&#123;   <span class="comment">//传入的参数是要注册的主设备号和设备名称  </span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">blk_major_name</span> **<span class="title">n</span>, *<span class="title">p</span>;</span></span><br><span class="line"><span class="keyword">int</span> index, ret = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">mutex_lock(&amp;block_class_lock);</span><br><span class="line"></span><br><span class="line"><span class="comment">/* temporary */</span></span><br><span class="line"><span class="comment">//检查传入的主设备号是否为0，如果为0怎么办？  </span></span><br><span class="line">    <span class="comment">//如果为0的话内核会自动去major_name这个指针数组中为你分配一个主设备号</span></span><br><span class="line">    <span class="comment">//如果已经没有空闲的设备号的话，就会返回一个错误  </span></span><br><span class="line"><span class="keyword">if</span> (major == <span class="number">0</span>) &#123;</span><br><span class="line"><span class="keyword">for</span> (index = ARRAY_SIZE(major_names)<span class="number">-1</span>; index &gt; <span class="number">0</span>; index--) &#123;</span><br><span class="line"><span class="keyword">if</span> (major_names[index] == <span class="literal">NULL</span>)</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (index == <span class="number">0</span>) &#123;</span><br><span class="line">printk(<span class="string">"register_blkdev: failed to get major for %s\n"</span>,</span><br><span class="line">       name);</span><br><span class="line">ret = -EBUSY;</span><br><span class="line"><span class="keyword">goto</span> out;</span><br><span class="line">&#125;</span><br><span class="line">major = index;</span><br><span class="line">ret = major;</span><br><span class="line">&#125;</span><br><span class="line">    <span class="comment">//如果主设备号不为0 ，我们就可以申请一个struct blk_major_name的结构体，并将它初始化，主要是将设备号和设备名称存储到这个结构体中  </span></span><br><span class="line">p = kmalloc(<span class="keyword">sizeof</span>(struct blk_major_name), GFP_KERNEL);</span><br><span class="line"><span class="keyword">if</span> (p == <span class="literal">NULL</span>) &#123;</span><br><span class="line">ret = -ENOMEM;</span><br><span class="line"><span class="keyword">goto</span> out;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">p-&gt;major = major;</span><br><span class="line">strlcpy(p-&gt;name, name, <span class="keyword">sizeof</span>(p-&gt;name));</span><br><span class="line">p-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">index = major_to_index(major);</span><br><span class="line"><span class="comment">//这个函数是做模运算用来得到一个索引值(0-255)，也许你要问了，如果我的主设备号大于255，是不是会将major_names指针数组中的元素覆盖掉？  </span></span><br><span class="line">    <span class="comment">//看看下面的for循环就明白了。假定主设备号是288，那么index = 288%255，就是33</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">//内核首先拿到索引值为33的元素，用*n判断此元素是否为空，如果为空，直接跳出for循环，将上面开辟的结构体赋值给*n好了，这样就将设备的信息注册到了全局数组中去了  </span></span><br><span class="line">  <span class="comment">//如果此元素不为空，也就是已经有一个设备注册到这了，怎么办?那内核就会去比较已经注册的主设备号与我们将要注册的主设备号是否一致，如果一致，内核就会提示我们该设备号已经被占用了。</span></span><br><span class="line">  <span class="comment">//如果不一致呢？有一个next指针，这个指针是指向下一个设备的结构体，直到找到一个空的结构体，并将前面申请的结构体进行赋值。</span></span><br><span class="line"><span class="keyword">for</span> (n = &amp;major_names[index]; *n; n = &amp;(*n)-&gt;next) &#123;</span><br><span class="line"><span class="keyword">if</span> ((*n)-&gt;major == major)</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (!*n)</span><br><span class="line">*n = p;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">ret = -EBUSY;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (ret &lt; <span class="number">0</span>) &#123;</span><br><span class="line">printk(<span class="string">"register_blkdev: cannot get major %d for %s\n"</span>,</span><br><span class="line">       major, name);</span><br><span class="line">kfree(p);</span><br><span class="line">&#125;</span><br><span class="line">out:</span><br><span class="line">mutex_unlock(&amp;block_class_lock);</span><br><span class="line"><span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">EXPORT_SYMBOL(register_blkdev);</span><br></pre></td></tr></table></figure><p>参数说明：</p><ul><li>major参数是块设备要使用的主设备号，name为设备名，它会显示在<code>/proc/devices</code>中。如果major为0，内核会自动分配一个新的主设备号，register_blkdev()函数的返回值就是这个主设备号。</li><li>如果register_blkdev()返回一个负值，表明发生了一个错误。</li><li><code>/proc/devices</code>是一个文件，这个文件列出字符和块设备的主设备号，以及分配到这些设备号的设备名称。示例如下：</li><li><figure class="highlight c"><figcaption><span>点击展开/proc/devices示例 >folded</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line">[root@master ~]<span class="meta"># cat /proc/devices </span></span><br><span class="line">Character devices:</span><br><span class="line">  <span class="number">1</span> mem</span><br><span class="line">  <span class="number">4</span> /dev/vc/<span class="number">0</span></span><br><span class="line">  <span class="number">4</span> tty</span><br><span class="line">  <span class="number">4</span> ttyS</span><br><span class="line">  <span class="number">5</span> /dev/tty</span><br><span class="line">  <span class="number">5</span> /dev/console</span><br><span class="line">  <span class="number">5</span> /dev/ptmx</span><br><span class="line">  <span class="number">7</span> vcs</span><br><span class="line"> <span class="number">10</span> misc</span><br><span class="line"> <span class="number">13</span> input</span><br><span class="line"> <span class="number">21</span> sg</span><br><span class="line"> <span class="number">29</span> fb</span><br><span class="line"><span class="number">128</span> ptm</span><br><span class="line"><span class="number">136</span> pts</span><br><span class="line"><span class="number">162</span> raw</span><br><span class="line"><span class="number">180</span> usb</span><br><span class="line"><span class="number">188</span> ttyUSB</span><br><span class="line"><span class="number">189</span> usb_device</span><br><span class="line"><span class="number">202</span> cpu/msr</span><br><span class="line"><span class="number">203</span> cpu/cpuid</span><br><span class="line"><span class="number">226</span> drm</span><br><span class="line"><span class="number">231</span> infiniband_mad</span><br><span class="line"><span class="number">231</span> infiniband_verbs</span><br><span class="line"><span class="number">231</span> infiniband_cm</span><br><span class="line"><span class="number">235</span> infiniband_cm</span><br><span class="line"><span class="number">236</span> infiniband_mad</span><br><span class="line"><span class="number">237</span> mlx5_fpga_tools</span><br><span class="line"><span class="number">238</span> mei</span><br><span class="line"><span class="number">239</span> ipmidev</span><br><span class="line"><span class="number">240</span> infiniband_verbs</span><br><span class="line"><span class="number">241</span> aux</span><br><span class="line"><span class="number">242</span> nvme</span><br><span class="line"><span class="number">243</span> megaraid_sas_ioctl</span><br><span class="line"><span class="number">244</span> ptp</span><br><span class="line"><span class="number">245</span> pps</span><br><span class="line"><span class="number">246</span> hidraw</span><br><span class="line"><span class="number">247</span> usbmon</span><br><span class="line"><span class="number">248</span> bsg</span><br><span class="line"><span class="number">249</span> hmm_device</span><br><span class="line"><span class="number">250</span> watchdog</span><br><span class="line"><span class="number">251</span> iio</span><br><span class="line"><span class="number">252</span> rtc</span><br><span class="line"><span class="number">253</span> dax</span><br><span class="line"><span class="number">254</span> tpm</span><br><span class="line"></span><br><span class="line">Block devices:</span><br><span class="line"><span class="number">259</span> blkext</span><br><span class="line">  <span class="number">8</span> sd</span><br><span class="line">  <span class="number">9</span> md</span><br><span class="line"> <span class="number">11</span> sr</span><br><span class="line"> <span class="number">65</span> sd</span><br><span class="line"> <span class="number">66</span> sd</span><br><span class="line"> <span class="number">67</span> sd</span><br><span class="line"> <span class="number">68</span> sd</span><br><span class="line"> <span class="number">69</span> sd</span><br><span class="line"> <span class="number">70</span> sd</span><br><span class="line"> <span class="number">71</span> sd</span><br><span class="line"><span class="number">128</span> sd</span><br><span class="line"><span class="number">129</span> sd</span><br><span class="line"><span class="number">130</span> sd</span><br><span class="line"><span class="number">131</span> sd</span><br><span class="line"><span class="number">132</span> sd</span><br><span class="line"><span class="number">133</span> sd</span><br><span class="line"><span class="number">134</span> sd</span><br><span class="line"><span class="number">135</span> sd</span><br><span class="line"><span class="number">254</span> mdp</span><br></pre></td></tr></table></figure></li></ul><h3 id="major-names数组"><a href="#major-names数组" class="headerlink" title="major_names数组"></a><strong>major_names数组</strong></h3><p>代码在<a href="https://github.com/torvalds/linux/blob/v3.10/block/genhd.c#L243">block/genhd.c</a></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="class"><span class="keyword">struct</span> <span class="title">blk_major_name</span> &#123;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">blk_major_name</span> *<span class="title">next</span>;</span></span><br><span class="line"><span class="keyword">int</span> major;</span><br><span class="line"><span class="keyword">char</span> name[<span class="number">16</span>];</span><br><span class="line">&#125; *major_names[BLKDEV_MAJOR_HASH_SIZE];</span><br></pre></td></tr></table></figure><p>说明：</p><ul><li>BLKDEV_MAJOR_HASH_SIZE = 255</li><li>这是一个指针数组，其中的每一个元素都指向了一个struct blk_major_name的结构体</li><li>struct blk_major_name结构体就是用来存放设备的主设备号和设备名称的</li><li>更加详细的解释看参考文献。</li></ul><h3 id="unregister-blkdev-函数"><a href="#unregister-blkdev-函数" class="headerlink" title="unregister_blkdev()函数"></a><strong>unregister_blkdev()函数</strong></h3><p><code>unregister_blkdev()</code>代码在<a href="https://github.com/torvalds/linux/blob/v3.10/block/genhd.c#L341">/block/genhd.c</a></p><figure class="highlight c"><figcaption><span>点击展开unregister_blkdev()函数代码 >folded</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">unregister_blkdev</span><span class="params">(<span class="keyword">unsigned</span> <span class="keyword">int</span> major, <span class="keyword">const</span> <span class="keyword">char</span> *name)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">blk_major_name</span> **<span class="title">n</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">blk_major_name</span> *<span class="title">p</span> = <span class="title">NULL</span>;</span></span><br><span class="line"><span class="keyword">int</span> index = major_to_index(major);</span><br><span class="line"></span><br><span class="line">mutex_lock(&amp;block_class_lock);</span><br><span class="line"><span class="keyword">for</span> (n = &amp;major_names[index]; *n; n = &amp;(*n)-&gt;next)</span><br><span class="line"><span class="keyword">if</span> ((*n)-&gt;major == major)</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">if</span> (!*n || <span class="built_in">strcmp</span>((*n)-&gt;name, name)) &#123;</span><br><span class="line">WARN_ON(<span class="number">1</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">p = *n;</span><br><span class="line">*n = p-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line">mutex_unlock(&amp;block_class_lock);</span><br><span class="line">kfree(p);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">EXPORT_SYMBOL(unregister_blkdev);</span><br></pre></td></tr></table></figure><p>说明：传递给register_blkdev()的参数必须与传递给unregister_blkdev()的参数匹配，否则这个函数返回-EINVAL。</p><p>两个函数的声明代码在<a href="https://github.com/torvalds/linux/blob/v3.10/include/linux/fs.h#L2046">include/linux/fs.h</a></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">extern</span> <span class="keyword">int</span> <span class="title">register_blkdev</span><span class="params">(<span class="keyword">unsigned</span> <span class="keyword">int</span>, <span class="keyword">const</span> <span class="keyword">char</span> *)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">extern</span> <span class="keyword">void</span> <span class="title">unregister_blkdev</span><span class="params">(<span class="keyword">unsigned</span> <span class="keyword">int</span>, <span class="keyword">const</span> <span class="keyword">char</span> *)</span></span>;</span><br></pre></td></tr></table></figure><p>每种具体的块设备都有一套具体的操作，因而各自有一个类似于file_operations 那样的数据结构，称为block_device_operations 结构。它是对块设备操作的集合，其定义为,代码在<a href="https://github.com/torvalds/linux/blob/v3.10/include/linux/blkdev.h#L288">include/linux/blkdev.h</a>：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">block_device_operations</span> &#123;</span></span><br><span class="line"><span class="comment">//打开和释放</span></span><br><span class="line"><span class="keyword">int</span> (*<span class="built_in">open</span>) (struct block_device *, <span class="keyword">fmode_t</span>);</span><br><span class="line"><span class="keyword">void</span> (*<span class="built_in">release</span>) (struct gendisk *, <span class="keyword">fmode_t</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//I/O控制</span></span><br><span class="line"><span class="keyword">int</span> (*ioctl) (struct block_device *, <span class="keyword">fmode_t</span>, <span class="keyword">unsigned</span>, <span class="keyword">unsigned</span> <span class="keyword">long</span>);</span><br><span class="line"><span class="keyword">int</span> (*compat_ioctl) (struct block_device *, <span class="keyword">fmode_t</span>, <span class="keyword">unsigned</span>, <span class="keyword">unsigned</span> <span class="keyword">long</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> (*direct_access) (struct block_device *, <span class="keyword">sector_t</span>,</span><br><span class="line"><span class="keyword">void</span> **, <span class="keyword">unsigned</span> <span class="keyword">long</span> *);</span><br><span class="line"></span><br><span class="line"><span class="comment">//介质改变</span></span><br><span class="line"><span class="function"><span class="keyword">unsigned</span> <span class="title">int</span> <span class="params">(*check_events)</span> <span class="params">(struct gendisk *disk,</span></span></span><br><span class="line"><span class="function"><span class="params">      <span class="keyword">unsigned</span> <span class="keyword">int</span> clearing)</span></span>;</span><br><span class="line"><span class="comment">/* -&gt;media_changed() is DEPRECATED, use -&gt;check_events() instead */</span></span><br><span class="line"><span class="keyword">int</span> (*media_changed) (struct gendisk *);</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> (*unlock_native_capacity) (struct gendisk *);</span><br><span class="line"></span><br><span class="line"><span class="comment">//使介质有效</span></span><br><span class="line"><span class="keyword">int</span> (*revalidate_disk) (struct gendisk *);</span><br><span class="line"></span><br><span class="line"><span class="comment">//获得驱动器信息</span></span><br><span class="line"><span class="keyword">int</span> (*getgeo)(struct block_device *, struct hd_geometry *);</span><br><span class="line"></span><br><span class="line"><span class="comment">/* this callback is with swap_lock and sometimes page table lock held */</span></span><br><span class="line"><span class="keyword">void</span> (*swap_slot_free_notify) (struct block_device *, <span class="keyword">unsigned</span> <span class="keyword">long</span>);、</span><br><span class="line"></span><br><span class="line"><span class="comment">//模块指针，一个指向拥有这个结构体的模块的指针，它通常被初始化为THIS_MODULE</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">module</span> *<span class="title">owner</span>;</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><blockquote><p>如果说<strong>file_operation 结构</strong>是连接虚拟的VFS 文件的操作与具体文件系统的文件操作之间的枢纽，那么<strong>block_device_operations</strong>就是连接抽象的块设备操作与具体块设备操作之间的枢纽。</p></blockquote><p>具体的块设备是由主设备号唯一确定的，因此，主设备号唯一地确定了一个具体的<code>block_device_operations 数据结构</code>。</p><p>那么，块设备注册到系统以后，怎样与文件系统联系起来呢，也就是说，文件系统怎么调用已注册的块设备，这还得从file_operations 结构说起。</p><p>先来看一下块设备的file_operations 结构的定义，变量名为<code>def_blk_fops</code>，其位于<a href="https://github.com/torvalds/linux/blob/v3.10/fs/block_dev.c#L1588">fs/block_dev.c</a>中：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="class"><span class="keyword">struct</span> <span class="title">file_operations</span> <span class="title">def_blk_fops</span> = &#123;</span></span><br><span class="line">.<span class="built_in">open</span>= blkdev_open,</span><br><span class="line">.<span class="built_in">release</span>= blkdev_close,</span><br><span class="line">.llseek= block_llseek,</span><br><span class="line">.<span class="built_in">read</span>= do_sync_read,</span><br><span class="line">.<span class="built_in">write</span>= do_sync_write,</span><br><span class="line">.aio_read= blkdev_aio_read,</span><br><span class="line">.aio_write= blkdev_aio_write,</span><br><span class="line">.mmap= generic_file_mmap,</span><br><span class="line">.fsync= blkdev_fsync,</span><br><span class="line">.unlocked_ioctl= block_ioctl,</span><br><span class="line">#ifdef CONFIG_COMPAT</span><br><span class="line">.compat_ioctl= compat_blkdev_ioctl,</span><br><span class="line">#endif</span><br><span class="line">.splice_read= generic_file_splice_read,</span><br><span class="line">.splice_write= generic_file_splice_write,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>以open()系统调用为例，说明用户进程中的一个系统调用如何最终与物理块设备的操作联系起来。在此，我们仅仅给出几个<code>open()</code>函数的调用关系，如图所示。</p><center><img src="/2020/08/17/Linux-%E5%9D%97%E8%AE%BE%E5%A4%87%E9%A9%B1%E5%8A%A8%E7%A8%8B%E5%BA%8F/几个open函数的调用关系.PNG">  </center><center>图6.几个open函数的调用关系</center><ul><li>当调用open()系统调用时，其最终会调用到def_blk_fops的blkdev_open() 函数。</li><li>blkdev_open()函数的任务：<u>根据主设备号找到对应的block_device_operations结构</u>，然后再调用block_device_operations结构中的函数指针open所指向的函数，如果open 所指向的函数非空，就调用该函数打开最终的物理块设备。</li></ul><p>这就简单地说明了块设备注册以后，从最上层的系统调用到具体地打开一个设备的过程。</p><h2 id="块驱动程序的体系结构"><a href="#块驱动程序的体系结构" class="headerlink" title="块驱动程序的体系结构"></a>块驱动程序的体系结构</h2><p>块设备驱动程序通常分为两部分，即高级驱动程序和低级驱动程序，前者处理VFS 层，后者处理硬件设备</p><center><img src="/2020/08/17/Linux-%E5%9D%97%E8%AE%BE%E5%A4%87%E9%A9%B1%E5%8A%A8%E7%A8%8B%E5%BA%8F/块设备驱动程序的体系结构.PNG">  </center><center>图7.块设备驱动程序的体系结构</center><p>假设进程对一个设备文件发出read()或write()系统调用。<br>VFS 执行对应文件对象的read 或write方法，由此就调用高级块设备处理程序中的一个<strong>过程</strong>。这个过程执行的所有操作都与对这个硬件设备的具体读写请求有关。<br>内核提供两个名为generic_file_read()和generic_file_write()通用函数来留意所有事件的发生。<br>因此，在大部分情况下，高级硬件设备驱动程序不必做什么，而设备文件的read和write方法分别指向generic_file_read()和generic_file_write()方法。但是，有些块设备的处理程序需要自己专用的高级设备驱动程序。</p><p>即使高级设备驱动程序有自己的read 和write 方法，但是这两个方法通常最终还会调用generic_file_read ( )和generic_file_write ( )函数。这些函数把对I/O 设备文件的访问请求转换成对相应硬件设备的块请求。</p><ul><li>所请求的块可能已在主存， 因此generic_file_read ( )和generic_file_write ( )函数调用<code>getblk()函数</code>来检查缓冲区中是否已经预取了块，还是从上次访问以来缓冲区一直都没有改变。</li><li>如果块不在缓冲区中，getblk()就必须调用<code>ll_rw_block()</code>继续从磁盘中读取这个块，后面这个函数激活操纵设备控制器的低级驱动程序，以执行对块设备所请求的操作。</li></ul><p>在VFS 直接访问某一块设备上的特定块时，也会触发缓冲区I/O 操作。</p><ul><li>例如，如果内核必须从磁盘文件系统中读取一个索引节点，那么它必须从相应磁盘分区的块中传送数据 。</li><li>对于<code>特定块的直接访问</code>是由bread()和breada()函数来执行的，这两个函数又会调用前面提到过的getblk()和ll_rw_block()函数。</li></ul><p>由于块设备速度很慢，因此缓冲区I/O 数据传送通常都是异步处理的：</p><ul><li>低级设备驱动程序对DMAC和磁盘控制器进行编程来控制其操作，然后结束。当数据传送完成时，就会产生一个中断，从而第2次激活这个低级设备驱动程序来清除这次I/O 操作所涉及的数据结构。</li></ul><h2 id="块设备基于缓冲区的数据交换"><a href="#块设备基于缓冲区的数据交换" class="headerlink" title="块设备基于缓冲区的数据交换"></a>块设备基于缓冲区的数据交换</h2><p>对于块设备来说，读写操作是以数据块为单位进行的，为了使高速的 CPU 同低速块设备能够协调工作，提高读写效率，操作系统设置了缓冲机制。<br>块设备读和写当进行读写的时候，首先对缓冲区读写，只有缓冲区中没有需要读的数据或是需要写的数据没有地方写时，才真正地启动设备控制器去控制设备本身进行数据交换，而对于设备本身的数据交换同样也是同缓冲区打交道。</p><p>在PC 体系结构中，允许块的大小为512、1024、2048 和4096 字节。同一个块设备驱动程序可以作用于多个块大小，因为它必须处理共享**同一主设备号的一组设备文件，而每个块设备文件都有自己预定义的块大小。</p><p>例如，一个块设备驱动程序可能会处理有两个分区的硬盘，一个分区包含Ext2 文件系统，另一个分区包含交换分区。<br>内核在一个名为<code>blksize_size</code>的表中存放块的大小；<br>表中每个元素的索引就是相应块设备文件的主设备号和从设备号。如果blksize_size[M]为NULL，那么共享主设备号M的所有块设备都使用标准的块大小，即1024 字节。</p><p>每个块都需要自己的缓冲区，它是内核用来存放块内容的<code>RAM内存区</code>。当设备驱动程序从磁盘读出一个块时，就用从硬件设备中所获得的值来填充相应的缓冲区；同样，当设备驱动程序向磁盘中写入一个块时，就用相关缓冲区的实际值来更新硬件设备上相应的一组相邻字节。<br>缓冲区的大小一定要与块的大小相匹配。</p><h2 id="块设备请求"><a href="#块设备请求" class="headerlink" title="块设备请求"></a>块设备请求</h2><p>虽然块设备驱动程序可以一次传送一个单独的数据块，但是内核并不会为磁盘上每个被访问的数据块都单独执行一次I/O 操作,取而代之的是，只要可能，内核就试图把几个块合并在一起，并作为一个整体来处理，这样就减少了磁头的平均移动时间。</p><p>当进程、VFS 层或者任何其他的内核部分要读写一个磁盘块时，就真正引起一个块设备请求。</p><ul><li>从本质上说，这个请求描述的是所请求的块以及要对它执行的操作类型（读还是写）。</li><li>然而，并不是请求一发出，内核就满足它，实际上，<u>块请求发出时I/O 操作仅仅被调度，稍后才会被执行(先调度，后执行)</u>。这种人为的延迟有悖于提高块设备性能的关键机制。</li><li>当请求传送一个新的数据块时，内核检查能否通过稍微扩大前一个一直处于等待状态的请求而满足这个新请求，也就是说，能否不用进一步的搜索操作就能满足新请求。由于磁盘的访问大都是顺序的，因此这种简单机制就非常高效。</li></ul><p>延迟请求复杂化了块设备的处理。</p><ul><li>例如，假设某个进程打开了一个普通文件，然后，文件系统的驱动程序就要从磁盘读取相应的索引节点。高级块设备驱动程序把这个请求加入一个等待队列，并把这个进程挂起，直到存放索引节点的块被传送为止。因为块设备驱动程序是中断驱动的，因此，只要高级驱动程序一发出块请求，它就可以终止执行。</li><li>在稍后的时间低级驱动程序才被激活，它会调用一个所谓的策略程序从一个队列中取得这个请求，并向磁盘控制器发出适当的命令来满足这个请求。当I/O 操作完成时，磁盘控制器就产生一个中断，如果需要，相应的处理程序会再次调用这个策略程序来处理队列中进程的下一个请求。</li></ul><p>每个块设备驱动程序都维护自己的请求队列；每个物理块设备都应该有一个请求队列，以提高磁盘性能的方式对请求进行排序。<br>因此策略程序就可以顺序扫描这种队列，并以最少地移动磁头而为所有的请求提供服务。</p><h2 id="块设备驱动程序的几个函数"><a href="#块设备驱动程序的几个函数" class="headerlink" title="块设备驱动程序的几个函数"></a>块设备驱动程序的几个函数</h2><h2 id="Linux中硬盘驱动程序的实现"><a href="#Linux中硬盘驱动程序的实现" class="headerlink" title="Linux中硬盘驱动程序的实现"></a><strong>Linux中硬盘驱动程序的实现</strong></h2><h2 id="重要文件"><a href="#重要文件" class="headerlink" title="重要文件"></a>重要文件</h2><p>由于块设备驱动程序的绝大部分都与设备无关的，故内核开发者通过把大部分相同的代码放在一个头文件<a href="https://github.com/torvalds/linux/blob/v3.10/block/blk.h">block/blk.h</a>中来简化驱动程序的代码。从而每个块设备驱动程序都必须 包含这个头文件。</p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a><strong>参考资料</strong></h2><p>《深入分析Linux内核源代码》 //书籍内核版本有些旧<br>《Linux内核设计与实现》     //目前感觉这个版本是最准的<br><a href="https://www.byteisland.com/linux-%E9%80%9A%E7%94%A8%E5%9D%97%E5%B1%82-bio-%E8%AF%A6%E8%A7%A3/">Linux 通用块层 bio 详解</a><br><a href="https://www.xuebuyuan.com/1697885.html">块设备注册 register_blkdev | 学步园 </a></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;&lt;strong&gt;概述&lt;/strong&gt;&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;Linux块设备处理程序的组织是相当复杂的，在此不可能详细介绍内核块设备I/O子系统中包含的所有函数&lt;br&gt;我们主要说明下面几个问题：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Linux块设备I/O子系统的体系结构是什么？&lt;/li&gt;
&lt;li&gt;块设备I/O子系统的主要组件有哪些？有哪些作用？&lt;/li&gt;
&lt;li&gt;打开一个块设备文件时内核执行的步骤有哪些？&lt;/li&gt;
&lt;li&gt;内核如何对块设备和块设备的请求进行管理？-&amp;gt;这部分在内核中称为块I/O层&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="Linux" scheme="https://stemha.github.io/categories/Linux/"/>
    
    
      <category term="Linux" scheme="https://stemha.github.io/tags/Linux/"/>
    
      <category term="驱动程序" scheme="https://stemha.github.io/tags/%E9%A9%B1%E5%8A%A8%E7%A8%8B%E5%BA%8F/"/>
    
      <category term="块设备" scheme="https://stemha.github.io/tags/%E5%9D%97%E8%AE%BE%E5%A4%87/"/>
    
  </entry>
  
  <entry>
    <title>Linux文件系统注册、安装与卸载</title>
    <link href="https://stemha.github.io/2020/08/16/Linux%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F%E6%B3%A8%E5%86%8C%E3%80%81%E5%AE%89%E8%A3%85%E4%B8%8E%E5%8D%B8%E8%BD%BD/"/>
    <id>https://stemha.github.io/2020/08/16/Linux%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F%E6%B3%A8%E5%86%8C%E3%80%81%E5%AE%89%E8%A3%85%E4%B8%8E%E5%8D%B8%E8%BD%BD/</id>
    <published>2020-08-16T12:11:46.000Z</published>
    <updated>2020-08-17T13:10:35.655Z</updated>
    
    <content type="html"><![CDATA[<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a><strong>概述</strong></h2><blockquote><p>当内核被编译时，就已经确定了可以支持哪些文件系统，这些文件系统在系统引导时，在 VFS 中进行注册。如果文件系统是作为内核可装载的模块，则在实际安装时进行注册，并在模块卸载时注销。</p><ul><li>VFS的初始化函数用来向VFS注册，即填写<code>文件注册表file_system_type数据结构</code>。每一个文件系统类型在注册表中有一个登记项，记录该文件系统的类型名、文件系统特性、指向对应的VFS超级块读取函数的地址及已注册项的链指针等。</li><li>函数<code>register_filesystem()</code>用于注册文件系统类型，函数<code>unregister_filesystem()</code>用于注销一个文件系统类型。</li></ul></blockquote><a id="more"></a><h2 id="文件系统的注册"><a href="#文件系统的注册" class="headerlink" title="文件系统的注册"></a><strong>文件系统的注册</strong></h2><p>VFS以链表的形式管理已经注册的文件系统。文件系统的注册有两种途径：</p><ul><li>第一种是编译操作系统内核的时候确定了可以支持那性文件系统，在文件系统被引导是，在VFS中进行注册。</li><li>第二种是文件系统被当作可装载模块，通过insmod/rmmod命令在装入该文件系统模块时向VFS注册。</li></ul><p><code>文件系统的初始化例程</code>：每个文件系统都有一个初始化例程，它的作用就是在VFS中进行注册，即填写一个叫 file_system_type 的数据结构。</p><h3 id="file-system-type数据结构"><a href="#file-system-type数据结构" class="headerlink" title="file_system_type数据结构"></a><strong>file_system_type数据结构</strong></h3><ul><li>file_system_type结构包含了文件系统的名称以及一个指向对应的 VFS 超级块读取例程的地址。</li><li>所有已注册的文件系统的<strong>file_system_type 结构形成一个链表</strong>，为区别后面将要说到的已安装的文件系统形成的另一个链表，我们把这个链表称为<code>注册链表</code>。</li><li>这个注册链表是一个临界资源，受file_systems_lock 自旋读写锁的保护。</li></ul><p>图1所示就是内核中的 file_system_type 链表，链表头由file_systems变量指定。图1仅示意性地说明系统中已安装的3个文件系统Ext2、proc、iso9660 其file_system_type 结构所形成的链表。</p><center><img src="/2020/08/16/Linux%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F%E6%B3%A8%E5%86%8C%E3%80%81%E5%AE%89%E8%A3%85%E4%B8%8E%E5%8D%B8%E8%BD%BD/已注册的文件系统形成的链表.PNG">  </center><center>图1. 已注册的文件系统形成的链表.PNG</center><p>file_system_type数据结构在<a href="https://github.com/torvalds/linux/blob/v3.10/include/linux/fs.h">include/linux/fs.h</a>中定义如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">file_system_type</span> &#123;</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">char</span> *name;     <span class="comment">// 文件系统的类型名，以字符串的形式出现</span></span><br><span class="line"><span class="keyword">int</span> fs_flags;          <span class="comment">//指明具体文件系统的一些特性。</span></span><br><span class="line"><span class="comment">/* public flags for file_system_type */</span>  </span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> FS_REQUIRES_DEV1 </span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> FS_BINARY_MOUNTDATA2</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> FS_HAS_SUBTYPE4</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> FS_USERNS_MOUNT8<span class="comment">/* Can be mounted by userns root */</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> FS_USERNS_DEV_MOUNT16 <span class="comment">/* A userns mount does not imply MNT_NODEV */</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> FS_RENAME_DOES_D_MOVE32768<span class="comment">/* FS will handle d_move() during rename() internally. */</span></span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">dentry</span> *(*<span class="title">mount</span>) (<span class="title">struct</span> <span class="title">file_system_type</span> *, <span class="title">int</span>,</span></span><br><span class="line"><span class="class">       <span class="title">const</span> <span class="title">char</span> *, <span class="title">void</span> *);</span></span><br><span class="line"><span class="keyword">void</span> (*kill_sb) (struct super_block *);  <span class="comment">//删除超级块的方法</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">module</span> *<span class="title">owner</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">file_system_type</span> * <span class="title">next</span>;</span> <span class="comment">//把所有的file_system_type 结构链接成单项链表的链接指针</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">hlist_head</span> <span class="title">fs_supers</span>;</span>    <span class="comment">//具有相同文件系统类型的超级块对象链表的头</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">lock_class_key</span> <span class="title">s_lock_key</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">lock_class_key</span> <span class="title">s_umount_key</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">lock_class_key</span> <span class="title">s_vfs_rename_key</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">lock_class_key</span> <span class="title">s_writers_key</span>[<span class="title">SB_FREEZE_LEVELS</span>];</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">lock_class_key</span> <span class="title">i_lock_key</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">lock_class_key</span> <span class="title">i_mutex_key</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">lock_class_key</span> <span class="title">i_mutex_dir_key</span>;</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>说明：</p><ul><li>fs_flags字段存放几个标志，的说明如下：<ul><li>FS_REQUIRES_DEV：这种类型的任何文件系统必须位于物理磁盘设备上</li><li>FS_BINARY_MOUNTDATA：文件系统使用的二进制安装数据</li><li>一般的文件系统类型要求有物理的设备作为其物质基础，其fs_flags 中的<code>FS_REQUIRES_DEV 标志位</code>为1，这些文件系统如Ext2、Minix、ufs 等。</li></ul></li><li>next：把所有的file_system_type 结构链接成单项链表的链接指针， 变量file_systems 指向这个链表。这个链表是一个临界资源，受<code>file_systems_lock</code> 自旋读写锁的保护。</li><li>owner：如果file_system_type 所代表的文件系统是通过可安装模块实现的，则该指针指向代表着具体模块的module 结构。如果文件系统是静态地链接到内核，则这个域为NULL。实际上，你只需要把这个域置为THIS_MODLUE （这是个一个宏），它就能自动地完成上述工作。</li><li>fs_supers：一个双向链表。链表中的元素是超级块结构。每个文件系统都有一个超级块，但有些文件系统可能被安装在不同的设备上，而且每个具体的设备都有一个超级块，这些超级块就形成一个双向链表。链表元素的向前和向后链接存放在超级块的s_instances字段中。</li><li>kill_sb字段指向删除超级块的函数。</li></ul><h3 id="register-filesystem-注册函数"><a href="#register-filesystem-注册函数" class="headerlink" title="register_filesystem()注册函数"></a><strong>register_filesystem()注册函数</strong></h3><p>搞清楚这个数据结构的各个域以后， 就很容易理解下面的注册函数register_filesystem()，该函数定义于<a href="https://github.com/torvalds/linux/blob/v3.10/fs/filesystems.c">fs/filesystems.c</a>：</p><figure class="highlight c"><figcaption><span>点击展开代码 >folded</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *register_filesystem - register a new filesystem</span></span><br><span class="line"><span class="comment"> *@fs: the file system structure</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *Adds the file system passed to the list of file systems the kernel</span></span><br><span class="line"><span class="comment"> *is aware of for mount and other syscalls. Returns 0 on success,</span></span><br><span class="line"><span class="comment"> *or a negative errno code on an error.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *The &amp;struct file_system_type that is passed is linked into the kernel </span></span><br><span class="line"><span class="comment"> *structures and must not be freed until the file system has been</span></span><br><span class="line"><span class="comment"> *unregistered.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">register_filesystem</span><span class="params">(struct file_system_type * fs)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">file_system_type</span> ** <span class="title">p</span>;</span></span><br><span class="line"></span><br><span class="line">BUG_ON(<span class="built_in">strchr</span>(fs-&gt;name, <span class="string">'.'</span>));</span><br><span class="line"><span class="keyword">if</span> (fs-&gt;next)</span><br><span class="line"><span class="keyword">return</span> -EBUSY;</span><br><span class="line">write_lock(&amp;file_systems_lock);  <span class="comment">//对该链表的查找加了写锁write_lock</span></span><br><span class="line">p = find_filesystem(fs-&gt;name, <span class="built_in">strlen</span>(fs-&gt;name));</span><br><span class="line"><span class="keyword">if</span> (*p)</span><br><span class="line">res = -EBUSY;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">*p = fs;</span><br><span class="line">write_unlock(&amp;file_systems_lock);</span><br><span class="line"><span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">EXPORT_SYMBOL(register_filesystem);</span><br></pre></td></tr></table></figure><p>find_filesystem()函数在同一个文件中定义如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> struct file_system_type **<span class="title">find_filesystem</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> *name, <span class="keyword">unsigned</span> len)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">file_system_type</span> **<span class="title">p</span>;</span></span><br><span class="line"><span class="keyword">for</span> (p=&amp;file_systems; *p; p=&amp;(*p)-&gt;next)</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">strlen</span>((*p)-&gt;name) == len &amp;&amp;</span><br><span class="line">    <span class="built_in">strncmp</span>((*p)-&gt;name, name, len) == <span class="number">0</span>)</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">return</span> p;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><span class="icon has-text-warning"><i class="fas fa-exclamation-triangle"></i></span>注意，对注册链表的操作必须互斥地进行，因此，对该链表的查找加了写锁write_lock。</p><h3 id="unregister-filesystem-撤销注册"><a href="#unregister-filesystem-撤销注册" class="headerlink" title="unregister_filesystem()撤销注册"></a><strong>unregister_filesystem()撤销注册</strong></h3><p>文件系统注册后，还可以撤消这个注册，即从注册链表中删除一个<code>file_system_type结构</code>，此后系统不再支持该种文件系统。<br><a href="https://github.com/torvalds/linux/blob/v3.10/fs/filesystems.c">fs/filesystems.c</a>中的unregister_filesystem()函数就是起这个作用的，它在执行成功后返回0，如果注册链表中本来就没有指定的要删除的结构，则返回-1，其代码如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *unregister_filesystem - unregister a file system</span></span><br><span class="line"><span class="comment"> *@fs: filesystem to unregister</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *Remove a file system that was previously successfully registered</span></span><br><span class="line"><span class="comment"> *with the kernel. An error is returned if the file system is not found.</span></span><br><span class="line"><span class="comment"> *Zero is returned on a success.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *Once this function has returned the &amp;struct file_system_type structure</span></span><br><span class="line"><span class="comment"> *may be freed or reused.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">unregister_filesystem</span><span class="params">(struct file_system_type * fs)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">file_system_type</span> ** <span class="title">tmp</span>;</span></span><br><span class="line"></span><br><span class="line">write_lock(&amp;file_systems_lock);</span><br><span class="line">tmp = &amp;file_systems;</span><br><span class="line"><span class="keyword">while</span> (*tmp) &#123;</span><br><span class="line"><span class="keyword">if</span> (fs == *tmp) &#123;</span><br><span class="line">*tmp = fs-&gt;next;</span><br><span class="line">fs-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">write_unlock(&amp;file_systems_lock);</span><br><span class="line">synchronize_rcu();</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">tmp = &amp;(*tmp)-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line">write_unlock(&amp;file_systems_lock);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> -EINVAL;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">EXPORT_SYMBOL(unregister_filesystem);</span><br></pre></td></tr></table></figure><h2 id="文件系统的安装"><a href="#文件系统的安装" class="headerlink" title="文件系统的安装"></a><strong>文件系统的安装</strong></h2><blockquote><p>安装一个文件系统时，内核首先要检查参数的合法性，VFS通过查找由file_systems（file_system_type的首结点）指向的注册表，寻找匹配的file_system_type，就可获得读取文件系统超级块函数的地址，接着查找作为新文件系统安装点的VFS inode,VFS安装程序必须分配一个VFS超级块，然后读入安装文件系统的超级块，并进行填充，再申请一个vfsmount数据结构（其中包含了文件系统所在的块设备的标识、安装点及指向VFS超级块的指针等），使它的指针指向所分配的VFS超级块。当文件系统安装以后，它的根inode便常驻在inode高速缓存中。<br>总的来说，安装过程的主要工作是：创建安装点对象、将其挂接到根文件系统的指定安装点下、初始化超级块对象从而获得文件系统的基本信息和相关的操作。</p></blockquote><p>要使用一个文件系统，仅仅注册是不行的，还必须安装这个文件系统。</p><ul><li>Linux使用系统的<code>根文件系统(system&#39;s root filesystem)</code>，它由内核在引导阶段直接安装，并拥有系统初始化脚本以及最基本的系统程序。在安装Linux 时，硬盘上已经有一个分区安装了ext3文件系统（也可能是其他种类的系统），它是作为根文件系统的，根文件系统在启动时自动安装。其实，在系统启动后你所看到的文件系统，都是在启动时安装的。</li><li>其他文件系统要么由初始化脚本安装，要么由用户直接安装在已安装文件系统的目录上。</li></ul><p>作为一个目录树，每个文件系统都拥有自己的根目录(root directory)。安装文件系统的这个目录称之为<code>安装点(mount point)</code>。已安装文件系统属于安装点目录的一个子文件系统。</p><ul><li>例如，/proc虚拟文件系统是系统的根文件系统的孩子(且系统的根文件系统是/proc的父亲)。</li><li>已安装文件系统的根目录隐藏了父文件系统的安装点目录原来的内容，而且父文件系统的整个子树位于安装点之下。</li></ul><h3 id="mount命令"><a href="#mount命令" class="headerlink" title="mount命令"></a><strong>mount命令</strong></h3><p>如果需要自己（一般是超级用户）<strong>安装文件系统</strong>，则需要指定3 种信息：文件系统的<strong>名称</strong>、包含文件系统的<strong>物理块设备</strong>、文件系统在已有文件系统中的<strong>安装点</strong>。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mount -t ext3 /dev/sda5 /mnt</span><br></pre></td></tr></table></figure><ul><li>ext3 就是文件系统的名称</li><li>/dev/sda5 是包含文件系统的物理块设备，</li><li>/mnt 是将要安装到的目录，即安装点。</li><li>从这个例子可以看出，安装一个文件系统实际上是安装一个物理设备。</li></ul><h3 id="vfsmount数据结构"><a href="#vfsmount数据结构" class="headerlink" title="vfsmount数据结构"></a><strong>vfsmount数据结构</strong></h3><p>把一个文件系统（或设备）安装到一个目录点时要用到的主要数据结构为<code>vfsmount</code>和<code>struct mount</code>，定义于<a href="https://github.com/torvalds/linux/blob/v3.10/include/linux/mount.h">include/linux/mount.h</a> 中：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">vfsmount</span> &#123;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">dentry</span> *<span class="title">mnt_root</span>;</span><span class="comment">/* root of the mounted tree */</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">super_block</span> *<span class="title">mnt_sb</span>;</span><span class="comment">/* pointer to superblock */</span></span><br><span class="line"><span class="keyword">int</span> mnt_flags;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>说明：</p><ul><li>mnt_sb 指向所安装设备的超级块结构super_block。</li></ul><p>文件系统的安装选项，也就是vfsmount 结构中的安装标志mnt_flags在<a href="https://github.com/torvalds/linux/blob/v3.10/include/uapi/linux/fs.h#L62">include/uapi/linux/fs.h</a> 中，定义如下：</p><figure class="highlight c"><figcaption><span>点击展开代码 >folded</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * These are the fs-independent mount-flags: up to 32 flags are supported</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MS_RDONLY 1<span class="comment">/* Mount read-only */</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MS_NOSUID 2<span class="comment">/* Ignore suid and sgid bits */</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MS_NODEV 4<span class="comment">/* Disallow access to device special files */</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MS_NOEXEC 8<span class="comment">/* Disallow program execution */</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MS_SYNCHRONOUS16<span class="comment">/* Writes are synced at once */</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MS_REMOUNT32<span class="comment">/* Alter flags of a mounted FS */</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MS_MANDLOCK64<span class="comment">/* Allow mandatory locks on an FS */</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MS_DIRSYNC128<span class="comment">/* Directory modifications are synchronous */</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MS_NOATIME1024<span class="comment">/* Do not update access times. */</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MS_NODIRATIME2048<span class="comment">/* Do not update directory access times */</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MS_BIND4096</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MS_MOVE8192</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MS_REC16384</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MS_VERBOSE32768<span class="comment">/* War is peace. Verbosity is silence.</span></span></span><br><span class="line"><span class="meta"><span class="comment">   MS_VERBOSE is deprecated. */</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MS_SILENT32768</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MS_POSIXACL(1&lt;&lt;16)<span class="comment">/* VFS does not apply the umask */</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MS_UNBINDABLE(1&lt;&lt;17)<span class="comment">/* change to unbindable */</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MS_PRIVATE(1&lt;&lt;18)<span class="comment">/* change to private */</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MS_SLAVE(1&lt;&lt;19)<span class="comment">/* change to slave */</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MS_SHARED(1&lt;&lt;20)<span class="comment">/* change to shared */</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MS_RELATIME(1&lt;&lt;21)<span class="comment">/* Update atime relative to mtime/ctime. */</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MS_KERNMOUNT(1&lt;&lt;22) <span class="comment">/* this is a kern_mount call */</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MS_I_VERSION(1&lt;&lt;23) <span class="comment">/* Update inode I_version field */</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MS_STRICTATIME(1&lt;&lt;24) <span class="comment">/* Always perform atime updates */</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* These sb flags are internal to the kernel */</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MS_NOSEC(1&lt;&lt;28)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MS_BORN(1&lt;&lt;29)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MS_ACTIVE(1&lt;&lt;30)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MS_NOUSER(1&lt;&lt;31)</span></span><br></pre></td></tr></table></figure><p>说明：</p><ul><li><strong>从定义可以看出，每个标志对应32 位中的一位。</strong></li><li>安装标志是针对整个文件系统中的所有文件的。例如，如果MS_NOSUID 标志为1，则整个文件系统中所有可执行文件的suid 标志位都不起作用了。</li></ul><h3 id="struct-mount结构"><a href="#struct-mount结构" class="headerlink" title="struct mount结构"></a><strong>struct mount结构</strong></h3><p>struct mount结构在<a href="https://github.com/torvalds/linux/blob/v3.10/fs/mount.h#L27">linux/fs/mount.h</a>：</p><figure class="highlight c"><figcaption><span>点击展开代码 >folded</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">mount</span> &#123;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">list_head</span> <span class="title">mnt_hash</span>;</span>    <span class="comment">//安装点的哈希表</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">mount</span> *<span class="title">mnt_parent</span>;</span>     <span class="comment">//是指向上一层安装点的指针</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">dentry</span> *<span class="title">mnt_mountpoint</span>;</span> <span class="comment">//指向安装点dentry 结构的指针</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">vfsmount</span> <span class="title">mnt</span>;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> CONFIG_SMP</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">mnt_pcp</span> __<span class="title">percpu</span> *<span class="title">mnt_pcp</span>;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">else</span></span></span><br><span class="line"><span class="keyword">int</span> mnt_count;</span><br><span class="line"><span class="keyword">int</span> mnt_writers;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">list_head</span> <span class="title">mnt_mounts</span>;</span><span class="comment">/* list of children, anchored here */</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">list_head</span> <span class="title">mnt_child</span>;</span><span class="comment">/* and going through their mnt_child */</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">list_head</span> <span class="title">mnt_instance</span>;</span><span class="comment">/* mount instance on sb-&gt;s_mounts */</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">char</span> *mnt_devname;<span class="comment">/* Name of device e.g. /dev/dsk/hda1 */</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">list_head</span> <span class="title">mnt_list</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">list_head</span> <span class="title">mnt_expire</span>;</span><span class="comment">/* link in fs-specific expiry list */</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">list_head</span> <span class="title">mnt_share</span>;</span><span class="comment">/* circular list of shared mounts */</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">list_head</span> <span class="title">mnt_slave_list</span>;</span><span class="comment">/* list of slave mounts */</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">list_head</span> <span class="title">mnt_slave</span>;</span><span class="comment">/* slave list entry */</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">mount</span> *<span class="title">mnt_master</span>;</span><span class="comment">/* slave is on master-&gt;mnt_slave_list */</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">mnt_namespace</span> *<span class="title">mnt_ns</span>;</span><span class="comment">/* containing namespace */</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">mountpoint</span> *<span class="title">mnt_mp</span>;</span><span class="comment">/* where is it mounted */</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> CONFIG_FSNOTIFY</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">hlist_head</span> <span class="title">mnt_fsnotify_marks</span>;</span></span><br><span class="line">__u32 mnt_fsnotify_mask;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"><span class="keyword">int</span> mnt_id;<span class="comment">/* mount identifier */</span></span><br><span class="line"><span class="keyword">int</span> mnt_group_id;<span class="comment">/* peer group identifier */</span></span><br><span class="line"><span class="keyword">int</span> mnt_expiry_mark;<span class="comment">/* true if marked for expiry */</span></span><br><span class="line"><span class="keyword">int</span> mnt_pinned;</span><br><span class="line"><span class="keyword">int</span> mnt_ghosts;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>说明：</p><ul><li>mnt_hash：为了对系统中的所有安装点进行快速查找，内核把它们按哈希表来组织，mnt_hash就是形成哈希表的队列指针。</li><li>mnt_mountpoint： 是指向安装点dentry 结构的指针。而dentry 指针指向安装点所在目录树中根目录的dentry 结构。？</li><li>mnt_parent： 是指向上一层安装点的指针。如果当前的安装点没有上一层安装点（如根设备），则这个指针为NULL。</li><li>同时，vfsmount 结构中还有mnt_mounts 和mnt_child 两个队列头<ul><li>只要上一层vfsmount 结构存在，就把当前vfsmount 结构中mnt_child 链入上一层vfsmount 结构的mnt_mounts 队列中。这样就形成一个<strong>设备安装的树结构</strong>，从一个vfsmount结构的mnt_mounts 队列开始，可以找到所有直接或间接安装在这个安装点上的其他设备。</li></ul></li><li>mnt_list：是指向vfsmount结构所形成链表的头指针。</li></ul><p>另外，系统还定义了vfsmntlist 变量，指向mnt_list 队列。//在Linux kernel3.10 中没有vfsmntlist</p><h3 id="安装根文件系统"><a href="#安装根文件系统" class="headerlink" title="安装根文件系统"></a><strong>安装根文件系统</strong></h3><blockquote><p>每个文件系统都有它自己的根目录，如果某个文件系统（如Ext3）的根目录是系统目录树的根目录，那么该文件系统称为<code>根文件系统</code>。而其他文件系统可以安装在系统的目录树上，把这些文件系统要插入的那些目录就称为<code>安装点</code>。</p></blockquote><ul><li>当系统启动时，就要在<code>变量ROOT_DEV</code> 中寻找包含根文件系统的磁盘主码。</li><li>当编译内核或向最初的启动装入程序传递一个合适的选项时，根文件系统可以被指定为/dev 目录下的一个设备文件。</li><li>类似地，根文件系统的安装标志存放在<code>root_mountflags 变量</code>中。用户可以指定这些标志，这是通过对已编译的内核映像执行/sbin/rdev 外部程序，或者向最初的启动装入程序传递一个合适的选项来达到的。</li><li>根文件系统的安装函数为<code>mount_root()</code>。</li></ul><h3 id="安装一个常规文件系统"><a href="#安装一个常规文件系统" class="headerlink" title="安装一个常规文件系统"></a><strong>安装一个常规文件系统</strong></h3><p>一旦在系统中安装了根文件系统，就可以安装其他的文件系统。每个文件系统都可以安装在系统目录树中的一个目录上。</p><p>安装文件系统的两个系统的两种方式：</p><ul><li>以命令方式来安装文件系统，例如mount命令。</li><li>在用户程序中要安装一个文件系统则可以调用mount()系统调用。</li></ul><h3 id="sys-mount-函数"><a href="#sys-mount-函数" class="headerlink" title="sys_mount()函数"></a>sys_mount()函数</h3><p>mount()系统调用在内核的实现函数为<code>sys_mount()</code>，其函数定义使用SYSCALL_DEFINE定义，其代码在<a href="https://github.com/torvalds/linux/blob/v3.10/fs/namespace.c#L2503">fs/namespace.c</a> 中。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*sys_mount系统调用*/</span></span><br><span class="line"><span class="comment">/*dev_name为待安装设备的路径名；</span></span><br><span class="line"><span class="comment">dir_name为安装点的路径名；</span></span><br><span class="line"><span class="comment">type是表示文件系统类型的字符串；</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">SYSCALL_DEFINE5(mount, <span class="keyword">char</span> __user *, dev_name, <span class="keyword">char</span> __user *, dir_name,</span><br><span class="line"><span class="keyword">char</span> __user *, type, <span class="keyword">unsigned</span> <span class="keyword">long</span>, flags, <span class="keyword">void</span> __user *, data)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> ret;</span><br><span class="line"><span class="keyword">char</span> *kernel_type;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">filename</span> *<span class="title">kernel_dir</span>;</span></span><br><span class="line"><span class="keyword">char</span> *kernel_dev;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">long</span> data_page;</span><br><span class="line"></span><br><span class="line">ret = copy_mount_string(type, &amp;kernel_type);</span><br><span class="line"><span class="keyword">if</span> (ret &lt; <span class="number">0</span>)</span><br><span class="line"><span class="keyword">goto</span> out_type;</span><br><span class="line"></span><br><span class="line">kernel_dir = getname(dir_name);</span><br><span class="line"><span class="keyword">if</span> (IS_ERR(kernel_dir)) &#123;</span><br><span class="line">ret = PTR_ERR(kernel_dir);</span><br><span class="line"><span class="keyword">goto</span> out_dir;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ret = copy_mount_string(dev_name, &amp;kernel_dev);</span><br><span class="line"><span class="keyword">if</span> (ret &lt; <span class="number">0</span>)</span><br><span class="line"><span class="keyword">goto</span> out_dev;</span><br><span class="line"></span><br><span class="line">ret = copy_mount_options(data, &amp;data_page);</span><br><span class="line"><span class="keyword">if</span> (ret &lt; <span class="number">0</span>)</span><br><span class="line"><span class="keyword">goto</span> out_data;</span><br><span class="line"></span><br><span class="line">ret = do_mount(kernel_dev, kernel_dir-&gt;name, kernel_type, flags,</span><br><span class="line">(<span class="keyword">void</span> *) data_page);</span><br><span class="line"></span><br><span class="line">free_page(data_page);</span><br><span class="line">out_data:</span><br><span class="line">kfree(kernel_dev);</span><br><span class="line">out_dev:</span><br><span class="line">putname(kernel_dir);</span><br><span class="line">out_dir:</span><br><span class="line">kfree(kernel_type);</span><br><span class="line">out_type:</span><br><span class="line"><span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>说明：</p><ul><li>dev_name为待安装文件系统所在设备的路径名，如果不需要就为空（例如，当待安装的是基于网络的文件系统时）；</li><li>dir_name 则是安装点（空闲目录）的路径名；</li><li>type 是文件系统的类型，必须是已注册文件系统的字符串名（如“Ext3”）</li><li>flags是安装模式，如前面所述。</li><li>data 指向一个与文件系统相关的数据结构（可以为NULL）。</li><li>copy_mount_options()和getname()函数将结构形式或字符串形式的参数值从用户空间拷贝到内核空间。<ul><li>这些参数值的长度均以一个页面为限，但是getname()在复制时遇到字符串结尾符“\0”就停止，并返回指向该字符串的指针；</li><li>而copy_mount_options()则拷贝整个页面，并返回该页面的起始地址。</li></ul></li><li>该函数调用的主要函数为do_mount()，do_mount()执行期间要加内核锁，不过这个锁是针对SMP，我们暂不考虑。</li></ul><p><code>do_mount()</code>的实现代码在<a href="https://github.com/torvalds/linux/blob/v3.10/fs/namespace.c#L2247">fs/namespace.c</a>中：</p><figure class="highlight c"><figcaption><span>点击展开代码 >folded</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * Flags is a 32-bit value that allows up to 31 non-fs dependent flags to</span></span><br><span class="line"><span class="comment"> * be given to the mount() call (ie: read-only, no-dev, no-suid etc).</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * data is a (void *) that can point to any structure up to</span></span><br><span class="line"><span class="comment"> * PAGE_SIZE-1 bytes, which can contain arbitrary fs-dependent</span></span><br><span class="line"><span class="comment"> * information (or be NULL).</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * Pre-0.97 versions of mount() didn't have a flags word.</span></span><br><span class="line"><span class="comment"> * When the flags word was introduced its top half was required</span></span><br><span class="line"><span class="comment"> * to have the magic value 0xC0ED, and this remained so until 2.4.0-test9.</span></span><br><span class="line"><span class="comment"> * Therefore, if this magic number is present, it carries no information</span></span><br><span class="line"><span class="comment"> * and must be discarded.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">long</span> <span class="title">do_mount</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> *dev_name, <span class="keyword">const</span> <span class="keyword">char</span> *dir_name,</span></span></span><br><span class="line"><span class="function"><span class="params"><span class="keyword">const</span> <span class="keyword">char</span> *type_page, <span class="keyword">unsigned</span> <span class="keyword">long</span> flags, <span class="keyword">void</span> *data_page)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">path</span> <span class="title">path</span>;</span></span><br><span class="line"><span class="keyword">int</span> retval = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> mnt_flags = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Discard magic */</span></span><br><span class="line"><span class="keyword">if</span> ((flags &amp; MS_MGC_MSK) == MS_MGC_VAL)</span><br><span class="line">flags &amp;= ~MS_MGC_MSK;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Basic sanity checks */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (!dir_name || !*dir_name || !<span class="built_in">memchr</span>(dir_name, <span class="number">0</span>, PAGE_SIZE))</span><br><span class="line"><span class="keyword">return</span> -EINVAL;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (data_page)</span><br><span class="line">((<span class="keyword">char</span> *)data_page)[PAGE_SIZE - <span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* ... and get the mountpoint */</span></span><br><span class="line">retval = kern_path(dir_name, LOOKUP_FOLLOW, &amp;path);</span><br><span class="line"><span class="keyword">if</span> (retval)</span><br><span class="line"><span class="keyword">return</span> retval;</span><br><span class="line"></span><br><span class="line">retval = security_sb_mount(dev_name, &amp;path,</span><br><span class="line">   type_page, flags, data_page);</span><br><span class="line"><span class="keyword">if</span> (!retval &amp;&amp; !may_mount())</span><br><span class="line">retval = -EPERM;</span><br><span class="line"><span class="keyword">if</span> (retval)</span><br><span class="line"><span class="keyword">goto</span> dput_out;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Default to relatime unless overriden */</span></span><br><span class="line"><span class="keyword">if</span> (!(flags &amp; MS_NOATIME))</span><br><span class="line">mnt_flags |= MNT_RELATIME;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Separate the per-mountpoint flags */</span></span><br><span class="line"><span class="keyword">if</span> (flags &amp; MS_NOSUID)</span><br><span class="line">mnt_flags |= MNT_NOSUID;</span><br><span class="line"><span class="keyword">if</span> (flags &amp; MS_NODEV)</span><br><span class="line">mnt_flags |= MNT_NODEV;</span><br><span class="line"><span class="keyword">if</span> (flags &amp; MS_NOEXEC)</span><br><span class="line">mnt_flags |= MNT_NOEXEC;</span><br><span class="line"><span class="keyword">if</span> (flags &amp; MS_NOATIME)</span><br><span class="line">mnt_flags |= MNT_NOATIME;</span><br><span class="line"><span class="keyword">if</span> (flags &amp; MS_NODIRATIME)</span><br><span class="line">mnt_flags |= MNT_NODIRATIME;</span><br><span class="line"><span class="keyword">if</span> (flags &amp; MS_STRICTATIME)</span><br><span class="line">mnt_flags &amp;= ~(MNT_RELATIME | MNT_NOATIME);</span><br><span class="line"><span class="keyword">if</span> (flags &amp; MS_RDONLY)</span><br><span class="line">mnt_flags |= MNT_READONLY;</span><br><span class="line"></span><br><span class="line">flags &amp;= ~(MS_NOSUID | MS_NOEXEC | MS_NODEV | MS_ACTIVE | MS_BORN |</span><br><span class="line">   MS_NOATIME | MS_NODIRATIME | MS_RELATIME| MS_KERNMOUNT |</span><br><span class="line">   MS_STRICTATIME);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (flags &amp; MS_REMOUNT)</span><br><span class="line">retval = do_remount(&amp;path, flags &amp; ~MS_REMOUNT, mnt_flags,</span><br><span class="line">    data_page);</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (flags &amp; MS_BIND)</span><br><span class="line">retval = do_loopback(&amp;path, dev_name, flags &amp; MS_REC);</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (flags &amp; (MS_SHARED | MS_PRIVATE | MS_SLAVE | MS_UNBINDABLE))</span><br><span class="line">retval = do_change_type(&amp;path, flags);</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (flags &amp; MS_MOVE)</span><br><span class="line">retval = do_move_mount(&amp;path, dev_name);</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">retval = do_new_mount(&amp;path, type_page, flags, mnt_flags,</span><br><span class="line">      dev_name, data_page);</span><br><span class="line">dput_out:</span><br><span class="line">path_put(&amp;path);</span><br><span class="line"><span class="keyword">return</span> retval;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对函数中的主要代码给予说明:</p><ul><li>对参数dir_name 和dev_name 进行基本检查，注意“！dir_name ” 和“!*dir_name”的不同，前者指指向字符串的指针为不为空，而后者指字符串不为空。memchr()函数在指定长度的字符串中寻找指定的字符，如果字符串中没有结尾符“\0”，也是一种错误。前面已说过，对于基于网络的文件系统dev_name 可以为空。</li><li>把安装标志为MS_NOSUID、MS_NOEXEC 和MS_NODEV 的3个标志位从flags 分离出来，放在局部安装标志变量mnt_flags 中。</li><li>如果flags 中的MS_REMOUNT 标志位为1，就表示所要求的只是改变一个原已安装设备的安装方式，例如从“只读“安装方式改为“可写”安装方式，这是通过调用<code>do_remount()</code>函数完成的。</li><li>如果flags 中的MS_BIND 标志位为1，就表示把一个“回接”设备捆绑到另一个对象上。<ul><li>回接设备是一种特殊的设备（虚拟设备），而实际上并不是一种真正设备，而是一种机制，这种机制提供了把回接设备回接到某个可访问的常规文件或块设备的手段。通常在/dev目录中有/dev/loop0 和/dev/loop1 两个回接设备文件。调用<code>do_loopback()</code>来实现回接设备的安装。</li></ul></li><li>如果flags 中的MS_MOVE 标志位为1，就表示把一个已安装的设备可以移到另一个安装点，这是通过调用<code>do_move_mount()</code>函数来实现的。</li><li>如果不是以上3 种情况，那就是一般的安装请求，于是把安装点加入到目录树中，这是通过调用<code>do_new_mount()函数</code>来实现的，而do_new_mount()首先调用<code>vfs_kern_mount函数</code>形成一个安装点。do_new_mount()函数也调用了</li></ul><p><code>do_new_mount()函数</code>的代码在<a href="https://github.com/torvalds/linux/blob/v3.10/fs/namespace.c#L1969">fs/namespace.c</a> 中：</p><figure class="highlight c"><figcaption><span>点击展开代码 >folded</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * create a new mount for userspace and request it to be added into the</span></span><br><span class="line"><span class="comment"> * namespace's tree</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">do_new_mount</span><span class="params">(struct path *path, <span class="keyword">const</span> <span class="keyword">char</span> *fstype, <span class="keyword">int</span> flags,</span></span></span><br><span class="line"><span class="function"><span class="params"><span class="keyword">int</span> mnt_flags, <span class="keyword">const</span> <span class="keyword">char</span> *name, <span class="keyword">void</span> *data)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">file_system_type</span> *<span class="title">type</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">user_namespace</span> *<span class="title">user_ns</span> = <span class="title">current</span>-&gt;<span class="title">nsproxy</span>-&gt;<span class="title">mnt_ns</span>-&gt;<span class="title">user_ns</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">vfsmount</span> *<span class="title">mnt</span>;</span></span><br><span class="line"><span class="keyword">int</span> err;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (!fstype)</span><br><span class="line"><span class="keyword">return</span> -EINVAL;</span><br><span class="line"></span><br><span class="line">type = get_fs_type(fstype);</span><br><span class="line"><span class="keyword">if</span> (!type)</span><br><span class="line"><span class="keyword">return</span> -ENODEV;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (user_ns != &amp;init_user_ns) &#123;</span><br><span class="line"><span class="keyword">if</span> (!(type-&gt;fs_flags &amp; FS_USERNS_MOUNT)) &#123;</span><br><span class="line">put_filesystem(type);</span><br><span class="line"><span class="keyword">return</span> -EPERM;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* Only in special cases allow devices from mounts</span></span><br><span class="line"><span class="comment"> * created outside the initial user namespace.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">if</span> (!(type-&gt;fs_flags &amp; FS_USERNS_DEV_MOUNT)) &#123;</span><br><span class="line">flags |= MS_NODEV;</span><br><span class="line">mnt_flags |= MNT_NODEV;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">mnt = vfs_kern_mount(type, flags, name, data);</span><br><span class="line"><span class="keyword">if</span> (!IS_ERR(mnt) &amp;&amp; (type-&gt;fs_flags &amp; FS_HAS_SUBTYPE) &amp;&amp;</span><br><span class="line">    !mnt-&gt;mnt_sb-&gt;s_subtype)</span><br><span class="line">mnt = fs_set_subtype(mnt, fstype);</span><br><span class="line"></span><br><span class="line">put_filesystem(type);</span><br><span class="line"><span class="keyword">if</span> (IS_ERR(mnt))</span><br><span class="line"><span class="keyword">return</span> PTR_ERR(mnt);</span><br><span class="line"></span><br><span class="line">err = do_add_mount(real_mount(mnt), path, mnt_flags);</span><br><span class="line"><span class="keyword">if</span> (err)</span><br><span class="line">mntput(mnt);</span><br><span class="line"><span class="keyword">return</span> err;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对函数中的主要代码给予说明:</p><ul><li>只有系统管理员才具有安装一个设备的权力，因此首先要检查当前进程是否具有这种权限。</li><li>get_fs_type()函数根据具体文件系统的类型名在file_system_file 链表中找到相应的结构。</li></ul><p><code>vfs_kern_mount()函数</code>代码在<a href="https://github.com/torvalds/linux/blob/v3.10/fs/namespace.c#L774">fs/namespace.c</a> 中：</p><figure class="highlight c"><figcaption><span>点击展开代码 >folded</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">vfsmount</span> *</span></span><br><span class="line"><span class="class"><span class="title">vfs_kern_mount</span>(<span class="title">struct</span> <span class="title">file_system_type</span> *<span class="title">type</span>, <span class="title">int</span> <span class="title">flags</span>, <span class="title">const</span> <span class="title">char</span> *<span class="title">name</span>, <span class="title">void</span> *<span class="title">data</span>)</span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">mount</span> *<span class="title">mnt</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">dentry</span> *<span class="title">root</span>;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (!type)</span><br><span class="line"><span class="keyword">return</span> ERR_PTR(-ENODEV);</span><br><span class="line"></span><br><span class="line">mnt = alloc_vfsmnt(name);</span><br><span class="line"><span class="keyword">if</span> (!mnt)</span><br><span class="line"><span class="keyword">return</span> ERR_PTR(-ENOMEM);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (flags &amp; MS_KERNMOUNT)</span><br><span class="line">mnt-&gt;mnt.mnt_flags = MNT_INTERNAL;</span><br><span class="line"></span><br><span class="line">root = mount_fs(type, flags, name, data);</span><br><span class="line"><span class="keyword">if</span> (IS_ERR(root)) &#123;</span><br><span class="line">free_vfsmnt(mnt);</span><br><span class="line"><span class="keyword">return</span> ERR_CAST(root);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">mnt-&gt;mnt.mnt_root = root;</span><br><span class="line">mnt-&gt;mnt.mnt_sb = root-&gt;d_sb;</span><br><span class="line">mnt-&gt;mnt_mountpoint = mnt-&gt;mnt.mnt_root;</span><br><span class="line">mnt-&gt;mnt_parent = mnt;</span><br><span class="line">br_write_lock(&amp;vfsmount_lock);</span><br><span class="line">list_add_tail(&amp;mnt-&gt;mnt_instance, &amp;root-&gt;d_sb-&gt;s_mounts);</span><br><span class="line">br_write_unlock(&amp;vfsmount_lock);</span><br><span class="line"><span class="keyword">return</span> &amp;mnt-&gt;mnt;</span><br><span class="line">&#125;</span><br><span class="line">EXPORT_SYMBOL_GPL(vfs_kern_mount);</span><br></pre></td></tr></table></figure><ul><li>alloc_vfsmnt（）函数调用slab 分配器给类型为vfsmount 结构的局部变量mnt 分配空间，并进行相应的初始化。</li></ul><p><code>do_add_mount()函数</code>代码，<a href="https://github.com/torvalds/linux/blob/v3.10/fs/namespace.c#L1924">fs/namespace.c</a> 中：</p><figure class="highlight c"><figcaption><span>点击展开代码 >folded</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * add a mount into a namespace's mount tree</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">do_add_mount</span><span class="params">(struct mount *newmnt, struct path *path, <span class="keyword">int</span> mnt_flags)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">mountpoint</span> *<span class="title">mp</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">mount</span> *<span class="title">parent</span>;</span></span><br><span class="line"><span class="keyword">int</span> err;</span><br><span class="line"></span><br><span class="line">mnt_flags &amp;= ~(MNT_SHARED | MNT_WRITE_HOLD | MNT_INTERNAL);</span><br><span class="line"></span><br><span class="line">mp = lock_mount(path);</span><br><span class="line"><span class="keyword">if</span> (IS_ERR(mp))</span><br><span class="line"><span class="keyword">return</span> PTR_ERR(mp);</span><br><span class="line"></span><br><span class="line">parent = real_mount(path-&gt;mnt);</span><br><span class="line">err = -EINVAL;</span><br><span class="line"><span class="keyword">if</span> (unlikely(!check_mnt(parent))) &#123;</span><br><span class="line"><span class="comment">/* that's acceptable only for automounts done in private ns */</span></span><br><span class="line"><span class="keyword">if</span> (!(mnt_flags &amp; MNT_SHRINKABLE))</span><br><span class="line"><span class="keyword">goto</span> unlock;</span><br><span class="line"><span class="comment">/* ... and for those we'd better have mountpoint still alive */</span></span><br><span class="line"><span class="keyword">if</span> (!parent-&gt;mnt_ns)</span><br><span class="line"><span class="keyword">goto</span> unlock;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Refuse the same filesystem on the same mount point */</span></span><br><span class="line">err = -EBUSY;</span><br><span class="line"><span class="keyword">if</span> (path-&gt;mnt-&gt;mnt_sb == newmnt-&gt;mnt.mnt_sb &amp;&amp;</span><br><span class="line">    path-&gt;mnt-&gt;mnt_root == path-&gt;dentry)</span><br><span class="line"><span class="keyword">goto</span> unlock;</span><br><span class="line"></span><br><span class="line">err = -EINVAL;</span><br><span class="line"><span class="keyword">if</span> (S_ISLNK(newmnt-&gt;mnt.mnt_root-&gt;d_inode-&gt;i_mode))</span><br><span class="line"><span class="keyword">goto</span> unlock;</span><br><span class="line"></span><br><span class="line">newmnt-&gt;mnt.mnt_flags = mnt_flags;</span><br><span class="line">err = graft_tree(newmnt, parent, mp);</span><br><span class="line"></span><br><span class="line">unlock:</span><br><span class="line">unlock_mount(mp);</span><br><span class="line"><span class="keyword">return</span> err;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="文件系统的卸载"><a href="#文件系统的卸载" class="headerlink" title="文件系统的卸载"></a><strong>文件系统的卸载</strong></h2><p>如果文件系统中的文件当前正在使用，该文件系统是不能被卸载的。<br>如果文件系统中的文件或目录正在使用，则 VFS 索引节点高速缓存中可能包含相应的 VFS 索引节点。<br>根据文件系统所在设备的标识符，检查在索引节点高速缓存中是否有来自该文件系统的 VFS 索引节点，如果有且使用计数大于0，则说明该文件系统正在被使用，因此，该文件系统不能被卸<br>载。否则，查看对应的 VFS 超级块，如果该文件系统的 VFS 超级块标志为“脏”，则必须将超级块信息写回磁盘。<br>上述过程结束之后，对应的 VFS 超级块被释放，vfsmount 数据结构将从vfsmntlist链表中断开并被释放。<br>具体的实现代码为fs/super.c 中的sys_umount()函数。</p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a><strong>参考资料</strong></h2><p>《深入分析Linux内核源代码》 //书籍内核版本有些旧<br><a href="https://www.ibm.com/developerworks/cn/linux/l-lpic1-v3-104-3/index.html">控制文件系统的安装和卸载</a><br><a href="http://tjpm.blog.chinaunix.net/uid-27007072-id-3336479.html">文件系统的注册与注销、安装与卸载</a><br><a href="https://zhuanlan.zhihu.com/p/36240056">文件系统怎么让Linux内核认识自己</a><br><a href="https://zhuanlan.zhihu.com/p/36268333">mount系统调用初探</a></p><h2 id="注解"><a href="#注解" class="headerlink" title="注解"></a><strong>注解</strong></h2><p>uapi文件夹：（the user space API of the kernel，Then upon kernel installation, the uapi include files become the top level /usr/include/linux/ files.）Linux Kernel 中新增的这些 uapi 头文件，其实都是来自于各个模块原先的头文件，最先是由 David Howells 提出来的。uapi 只是把内核用到的头文件和用户态用到的头文件分开。<br>Linux的系统调用都改为SYSCALL_DEFINE定义,原因参照：<a href="https://blog.csdn.net/hxmhyp/article/details/22699669">Linux系统调用之SYSCALL_DEFINE</a>。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;&lt;strong&gt;概述&lt;/strong&gt;&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;当内核被编译时，就已经确定了可以支持哪些文件系统，这些文件系统在系统引导时，在 VFS 中进行注册。如果文件系统是作为内核可装载的模块，则在实际安装时进行注册，并在模块卸载时注销。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;VFS的初始化函数用来向VFS注册，即填写&lt;code&gt;文件注册表file_system_type数据结构&lt;/code&gt;。每一个文件系统类型在注册表中有一个登记项，记录该文件系统的类型名、文件系统特性、指向对应的VFS超级块读取函数的地址及已注册项的链指针等。&lt;/li&gt;
&lt;li&gt;函数&lt;code&gt;register_filesystem()&lt;/code&gt;用于注册文件系统类型，函数&lt;code&gt;unregister_filesystem()&lt;/code&gt;用于注销一个文件系统类型。&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="Linux" scheme="https://stemha.github.io/categories/Linux/"/>
    
    
      <category term="Linux" scheme="https://stemha.github.io/tags/Linux/"/>
    
      <category term="文件系统" scheme="https://stemha.github.io/tags/%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F/"/>
    
      <category term="内核" scheme="https://stemha.github.io/tags/%E5%86%85%E6%A0%B8/"/>
    
  </entry>
  
  <entry>
    <title>Linux-VFS中的数据结构</title>
    <link href="https://stemha.github.io/2020/08/12/Linux-VFS%E4%B8%AD%E7%9A%84%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    <id>https://stemha.github.io/2020/08/12/Linux-VFS%E4%B8%AD%E7%9A%84%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/</id>
    <published>2020-08-12T04:11:05.000Z</published>
    <updated>2020-08-16T12:31:11.472Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a><strong>前言</strong></h2><p>VFS（虚拟文件系统）四大对象：struct super_block 超级块、struct inode 索引节点、struct dentry 目录项、struct file 文件对象<br>VFS采用的是面向对象的设计思想，使用一簇数据结构来代表通用文件对象。所以内核中的数据结构都使用C结构体实现。</p><ul><li><code>超级块super_block对象</code>，代表一个具体的已安装文件系统。</li><li><code>索引节点inode对象</code>，代表一个具体文件。</li><li><code>目录项dentry对象</code>，代表一个目录项，是路径的一个组成部分。</li><li><code>文件file对象</code>，代表有进程打开的文件。</li></ul><p>每个主要对象中都包含一个操作对象，这些操作对象描述了内核针对主要对象可以使用的方法：</p><ul><li><code>super_operations对象</code>：包含内核针对特定文件系统所能调用的方法。</li><li><code>inode_operations对象</code>：包含内核对特定文件所能调用的方法。</li><li><code>dentry_operations对象</code>：包含内核对特定目录所能调用的方法。</li><li><code>file_operations对象</code>：包含进程针对已打开文件所能调用的方法。</li></ul><p>操作对象作为一个指针结构体被实现，此结构体中包含指向操作其父对象的函数指针。对于其中许多方法来说，可以继承使用VFS提供的通用函数，如果通用函数提供的基本功能无法满足需要，就必须使用实际文件系统的独有方法填充这些函数指针，使其指向文件系统实例。</p><a id="more"></a><p><span class="icon has-text-warning"><i class="fas fa-exclamation-triangle"></i></span>注意，这里所说的对象指的是结构体，不是像C++和Java那样的真正的数据类型。</p><p> VFS使用了大量结构体对象，它所包括的对象远远多于上述几种对象，比如：</p><ul><li>每个注册的文件系统都由file_system_type结构体表示，它描述了文件系统及其性能；</li><li>每一个安装点都用vfsmount结构体表示，它包含的是安装点的相关信息，如位置和安装标志等。</li><li>与进程相关的结构体是：file_struct、fs_struct、namespace和file。它们描述了文件系统以及和进程相关的文件。</li></ul><p>本文中的代码以linux3.10内核版本的代码为准。</p><h2 id="超级块"><a href="#超级块" class="headerlink" title="超级块"></a><strong>超级块</strong></h2><p>很多具体文件系统中都有超级块结构，超级块是这些文件系统中最重要的数据结构，它是来描述整个文件系统信息的，可以说是一个全局的数据结构。超级块描述已安装文件系统。文件系统的控制信息存储在超级块中。超级块是文件系统的控制块，有整个文件系统信息，一个文件系统所有的inode都要连接到超级块上，可以说，一个超级块就代表了一个文件系统。</p><ul><li>Minix、Ext2 等有超级块，VFS 也有超级块，为了避免与后面介绍的Ext2 超级块发生混淆，这里用VFS 超级块来表示。</li><li>VFS 超级块是各种具体文件系统在安装时建立的，并在这些文件系统卸载时自动删除</li><li>VFS 超级块确实只存在于内存中，同时提到VFS 超级块也应该说成是哪个具体文件系统的VFS超级块。</li></ul><p>VFS 超级块在<a href="https://github.com/torvalds/linux/blob/v3.10/include/linux/fs.h">include/linux/fs.h</a> 中定义，即数据结构super_block，该结构及其主要域的含义如下：</p><figure class="highlight c"><figcaption><span>点击展开代码 >folded</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">super_block</span> &#123;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">list_head</span><span class="title">s_list</span>;</span><span class="comment">/* Keep this first 指向超级块链表的指针*/</span></span><br><span class="line"><span class="keyword">dev_t</span>s_dev;<span class="comment">/* search index; _not_ kdev_t 设备表示符*/</span></span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">char</span>s_blocksize_bits;   <span class="comment">/*块大小的值占用的位数，例如，如果块大小为1024 字节，则该值为10*/</span></span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">long</span>s_blocksize;  <span class="comment">/*该具体文件系统中数据块的大小，以字节为单位 */</span></span><br><span class="line"><span class="keyword">loff_t</span>s_maxbytes;<span class="comment">/* Max file size 文件的最大长度 */</span>   </span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">file_system_type</span>*<span class="title">s_type</span>;</span>  <span class="comment">/*指向文件系统的file_system_type 数据结构的指针 */</span></span><br><span class="line"><span class="keyword">const</span> <span class="class"><span class="keyword">struct</span> <span class="title">super_operations</span>*<span class="title">s_op</span>;</span>  <span class="comment">/*指向某个特定的具体文件系统的用于超级块操作的函数集合 */</span></span><br><span class="line"><span class="keyword">const</span> <span class="class"><span class="keyword">struct</span> <span class="title">dquot_operations</span>*<span class="title">dq_op</span>;</span> <span class="comment">/* 指向某个特定的具体文件系统用于限额操作的函数集合 */</span></span><br><span class="line"><span class="keyword">const</span> <span class="class"><span class="keyword">struct</span> <span class="title">dquot_operations</span>*<span class="title">dq_op</span>;</span> <span class="comment">/* 指向某个特定的具体文件系统用于限额操作的函数集合 */</span></span><br><span class="line"><span class="keyword">const</span> <span class="class"><span class="keyword">struct</span> <span class="title">quotactl_ops</span>*<span class="title">s_qcop</span>;</span></span><br><span class="line"><span class="keyword">const</span> <span class="class"><span class="keyword">struct</span> <span class="title">export_operations</span> *<span class="title">s_export_op</span>;</span></span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">long</span>s_flags;   <span class="comment">/* 安装标志*/</span></span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">long</span>s_magic;   <span class="comment">/*魔数，即该具体文件系统区别于其他文件系统的一个标志*/</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">dentry</span>*<span class="title">s_root</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">rw_semaphore</span><span class="title">s_umount</span>;</span> <span class="comment">/*对超级块读写时进行同步*/</span></span><br><span class="line"><span class="keyword">int</span>s_count;  <span class="comment">/*对超级块的使用计数*/</span></span><br><span class="line"><span class="keyword">atomic_t</span>s_active;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> CONFIG_SECURITY</span></span><br><span class="line"><span class="keyword">void</span>                    *s_security;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"><span class="keyword">const</span> <span class="class"><span class="keyword">struct</span> <span class="title">xattr_handler</span> **<span class="title">s_xattr</span>;</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">list_head</span><span class="title">s_inodes</span>;</span><span class="comment">/* all inodes  把所有索引对象链接在一起，存放的是头结点*/</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">hlist_bl_head</span><span class="title">s_anon</span>;</span><span class="comment">/* anonymous dentries for (nfs) exporting */</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> CONFIG_SMP</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">list_head</span> __<span class="title">percpu</span> *<span class="title">s_files</span>;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">else</span></span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">list_head</span><span class="title">s_files</span>;</span>  <span class="comment">//链接所有打开的文件</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">list_head</span><span class="title">s_mounts</span>;</span><span class="comment">/* list of mounts; _not_ for fs use */</span></span><br><span class="line"><span class="comment">/* s_dentry_lru, s_nr_dentry_unused protected by dcache.c lru locks */</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">list_head</span><span class="title">s_dentry_lru</span>;</span><span class="comment">/* unused dentry lru */</span></span><br><span class="line"><span class="keyword">int</span>s_nr_dentry_unused;<span class="comment">/* # of dentry on lru */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* s_inode_lru_lock protects s_inode_lru and s_nr_inodes_unused */</span></span><br><span class="line"><span class="keyword">spinlock_t</span>s_inode_lru_lock ____cacheline_aligned_in_smp;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">list_head</span><span class="title">s_inode_lru</span>;</span><span class="comment">/* unused inode lru */</span></span><br><span class="line"><span class="keyword">int</span>s_nr_inodes_unused;<span class="comment">/* # of inodes on lru */</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">block_device</span>*<span class="title">s_bdev</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">backing_dev_info</span> *<span class="title">s_bdi</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">mtd_info</span>*<span class="title">s_mtd</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">hlist_node</span><span class="title">s_instances</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">quota_info</span><span class="title">s_dquot</span>;</span><span class="comment">/* Diskquota specific options */</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">sb_writers</span><span class="title">s_writers</span>;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">char</span> s_id[<span class="number">32</span>];<span class="comment">/* Informational name 文本名字 */</span></span><br><span class="line">u8 s_uuid[<span class="number">16</span>];<span class="comment">/* UUID */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> *s_fs_info;<span class="comment">/* Filesystem private info  文件系统特设信息*/</span></span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">int</span>s_max_links;</span><br><span class="line"><span class="keyword">fmode_t</span>s_mode;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Granularity of c/m/atime in ns.</span></span><br><span class="line"><span class="comment">   Cannot be worse than a second */</span></span><br><span class="line">u32   s_time_gran;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * The next field is for VFS *only*. No filesystems have any business</span></span><br><span class="line"><span class="comment"> * even looking at it. You had been warned.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">mutex</span> <span class="title">s_vfs_rename_mutex</span>;</span><span class="comment">/* Kludge */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * Filesystem subtype.  If non-empty the filesystem type field</span></span><br><span class="line"><span class="comment"> * in /proc/mounts will be "type.subtype"</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">char</span> *s_subtype;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * Saved mount options for lazy filesystems using</span></span><br><span class="line"><span class="comment"> * generic_show_options()</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">char</span> __rcu *s_options;</span><br><span class="line"><span class="keyword">const</span> <span class="class"><span class="keyword">struct</span> <span class="title">dentry_operations</span> *<span class="title">s_d_op</span>;</span> <span class="comment">/* default d_op for dentries */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * Saved pool identifier for cleancache (-1 means none)</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">int</span> cleancache_poolid;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">shrinker</span> <span class="title">s_shrink</span>;</span><span class="comment">/* per-sb shrinker handle */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* Number of inodes with nlink == 0 but still referenced */</span></span><br><span class="line"><span class="keyword">atomic_long_t</span> s_remove_count;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Being remounted read-only */</span></span><br><span class="line"><span class="keyword">int</span> s_readonly_remount;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>所有超级块对象（每个已安装的文件系统都有一个超级块）以双向环形链表的形式链接在一起。链表中第一个元素和最后一个元素的地址分别存放在super_blocks 变量的<code>s_list</code> 域的 next 和 prev 域中。<br><code>s_list 域</code>的数据类型为<code>struct list_head</code>，在内核的其他很多地方都可以找到这样的数据类型；这种数据类型仅仅包括指向链表中的前一个元素和后一个元素的指针。因此，超级块对象的s_list 域包含指向链表中两个相邻超级块对象的指针。</p><p>图1 说明了list_head 元素、next 和 prev 如何嵌入到超级块对象中的。</p><center><img src="/2020/08/12/Linux-VFS%E4%B8%AD%E7%9A%84%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/超级块链表.PNG">  </center><center>图1. 超级块链表</center><p>s_fs_info字段指向属于具体文件系统的超级块信息。为了效率起见，由s_fs_info字段所指向的数据被复制到内存(也就是具体文件系统的超级块)。任何基于磁盘的文件系统都需要访问和更改自己的磁盘分配位图（磁盘分配位图指存在于磁盘中用来标识磁盘每个块是否空闲的一段存储空间），以便分配或释放块。VFS允许这些文件系统直接对内存超级块的s_fs_info字段进行操作，而无需访问磁盘。</p><p>与超级块关联的方法就是超级块操作，由<code>super_operations</code>来描述，该结构的起始地址存放在超级块的<code>s_op字段</code>中。super_operations结构如下，代码来自<a href="https://github.com/torvalds/linux/blob/v3.10/include/linux/fs.h">include/linux/fs.h</a></p><figure class="highlight c"><figcaption><span>点击展开代码 >folded</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">super_operations</span> &#123;</span></span><br><span class="line">   <span class="class"><span class="keyword">struct</span> <span class="title">inode</span> *(*<span class="title">alloc_inode</span>)(<span class="title">struct</span> <span class="title">super_block</span> *<span class="title">sb</span>);</span>  <span class="comment">/* 为索引节点对象分配空间，包括具体文件系统的数据所需要的空间。*/</span></span><br><span class="line"><span class="keyword">void</span> (*destroy_inode)(struct inode *); <span class="comment">/* 撤销索引节点对象，包括具体文件系统的数据。 */</span></span><br><span class="line"></span><br><span class="line">   <span class="keyword">void</span> (*dirty_inode) (struct inode *, <span class="keyword">int</span> flags); <span class="comment">/* 当索引节点标记为修改（脏）时调用。*/</span></span><br><span class="line"><span class="keyword">int</span> (*write_inode) (struct inode *, struct writeback_control *wbc);  <span class="comment">/* 用通过传递参数指定的索引节点对象的内容更新一个文件系统的索引节点。*/</span></span><br><span class="line"><span class="keyword">int</span> (*drop_inode) (struct inode *); </span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> (*evict_inode) (struct inode *);</span><br><span class="line"><span class="keyword">void</span> (*put_super) (struct super_block *);  <span class="comment">/* 释放通过传递的参数指定的超级块对象（因为相应的文件系统被卸载）。*/</span></span><br><span class="line"><span class="keyword">int</span> (*sync_fs)(struct super_block *sb, <span class="keyword">int</span> wait); <span class="comment">/* 在清除文件系统来更新磁盘上的具体文件系统数据结构时调用（由日志文件系统使用）。*/</span></span><br><span class="line"><span class="keyword">int</span> (*freeze_fs) (struct super_block *);</span><br><span class="line"><span class="keyword">int</span> (*unfreeze_fs) (struct super_block *);</span><br><span class="line"><span class="keyword">int</span> (*statfs) (struct dentry *, struct kstatfs *); <span class="comment">/* 将文件系统的统计信息返回，填写在buf缓冲区中。*/</span></span><br><span class="line"><span class="keyword">int</span> (*remount_fs) (struct super_block *, <span class="keyword">int</span> *, <span class="keyword">char</span> *);  <span class="comment">/* 用新的选项重新安装文件系统（当某个安装选项必须被修改时被调用）。*/</span></span><br><span class="line"><span class="keyword">void</span> (*umount_begin) (struct super_block *);  <span class="comment">/* 中断一个安装操作，因为相应的卸载操作已经开始（只在网络文件系统中使用）。*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> (*show_options)(struct seq_file *, struct dentry *); <span class="comment">/* 用来显示特定文件系统的选项。*/</span> </span><br><span class="line"><span class="keyword">int</span> (*show_devname)(struct seq_file *, struct dentry *);</span><br><span class="line"><span class="keyword">int</span> (*show_path)(struct seq_file *, struct dentry *);</span><br><span class="line"><span class="keyword">int</span> (*show_stats)(struct seq_file *, struct dentry *); <span class="comment">/* 用来显示特定文件系统的状态。*/</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> CONFIG_QUOTA <span class="comment">//一般情况下用不到最后两个方法</span></span></span><br><span class="line"><span class="keyword">ssize_t</span> (*quota_read)(struct super_block *, <span class="keyword">int</span>, <span class="keyword">char</span> *, <span class="keyword">size_t</span>, <span class="keyword">loff_t</span>);<span class="comment">/* 限额系统使用该方法从文件中读取数据，该文件详细说明了所在文件系统的限制。*/</span> </span><br><span class="line"><span class="keyword">ssize_t</span> (*quota_write)(struct super_block *, <span class="keyword">int</span>, <span class="keyword">const</span> <span class="keyword">char</span> *, <span class="keyword">size_t</span>, <span class="keyword">loff_t</span>); <span class="comment">/* 限额系统使用该方法将数据写入文件中，该文件详细说明了所在文件系统的限制。*/</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"><span class="keyword">int</span> (*bdev_try_to_free_page)(struct super_block*, struct page*, <span class="keyword">gfp_t</span>);</span><br><span class="line"><span class="keyword">int</span> (*nr_cached_objects)(struct super_block *);</span><br><span class="line"><span class="keyword">void</span> (*free_cached_objects)(struct super_block *, <span class="keyword">int</span>);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>每一个文件系统都可以定义自己的超级块操作，它可以是上面结构的一个字集，因为有些操作可能不需要，未实现的方法对应的字段置为NULL,当我们要调用其中的一个操作时，比如read_inode,这执行以下操作</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sb-&gt;s_op-&gt;read_inode(inode);</span><br></pre></td></tr></table></figure><p>这里sb存放所涉及超级块对象的地址。super_operations表的read_inode字段存放这<u>函数的地址</u>，因此，这一函数被直接调用。</p><p>注意，系统没有定义get_super方法来读超级块，那么，内核如何能够调用一个对象的方法而从磁盘读出该对象？</p><ul><li>我们将在描述文件系统类型的另一个对象中找到等价的get_sb方法。该方法定义在具体文件系统的file_system_type结构中，在register_filesystem的时候会把该文件系统注册进去。</li></ul><h2 id="VFS-的索引节点"><a href="#VFS-的索引节点" class="headerlink" title="VFS 的索引节点"></a><strong>VFS 的索引节点</strong></h2><p>索引节点:文件系统处理文件所需要的所有信息都放在称为索引节点的数据结构中索引节点（inode）,是 VFS 中最为重要的一个结构，用于描述一个文件的meta（元）信息，其包含的是诸如文件的大小、拥有者、创建时间、磁盘位置等和文件相关的信息，所有文件都有一个对应的 inode 结构。文件名可以随时更改，但是索引节点对文件是唯一的，并且随文件的存在而存在。<br>有关使用索引节点的原因将在下一章中进一步介绍.<br>这里主要强调一点，<code>具体文件系统的索引节点</code>是存储在磁盘上的，是一种静态结构，要使用它，必须调入内存，填写VFS 的索引节点，因此，也称<code>VFS 索引节点</code>为<code>动态节点</code>。<br>这里用VFS 索引节点来避免与下一章的Ext2 索引节点混淆。VFS 索引节点的数据结构inode 在<a href="https://github.com/torvalds/linux/blob/v3.10/include/linux/fs.h">include/linux/fs.h</a> 中定义如下:</p><figure class="highlight c"><figcaption><span>点击展开代码 >folded</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">inode</span> &#123;</span></span><br><span class="line"><span class="keyword">umode_t</span>i_mode;  <span class="comment">/*文件的类型与访问权限 */</span></span><br><span class="line"><span class="keyword">unsigned</span> shorti_opflags;</span><br><span class="line"><span class="keyword">kuid_t</span>i_uid;   <span class="comment">/*文件拥有者标识号*/</span></span><br><span class="line"><span class="keyword">kgid_t</span>i_gid;   <span class="comment">/*文件拥有者所在组的标识号*/</span></span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">int</span>i_flags; <span class="comment">/*文件系统的安装标志*/</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> CONFIG_FS_POSIX_ACL</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">posix_acl</span>*<span class="title">i_acl</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">posix_acl</span>*<span class="title">i_default_acl</span>;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="class"><span class="keyword">struct</span> <span class="title">inode_operations</span>*<span class="title">i_op</span>;</span> <span class="comment">/*索引节点的操作*/</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">super_block</span>*<span class="title">i_sb</span>;</span>  <span class="comment">/*指向该文件系统超级块的指针 */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/************用于分页机制的域**********************************/</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">address_space</span>*<span class="title">i_mapping</span>;</span> ／* 把所有可交换的页面管理起来*/</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> CONFIG_SECURITY</span></span><br><span class="line"><span class="keyword">void</span>*i_security;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* Stat data, not accessed from path walking */</span></span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">long</span>i_ino;  <span class="comment">/*索引节点号*/</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * Filesystems may only read i_nlink directly.  They shall use the</span></span><br><span class="line"><span class="comment"> * following functions for modification:</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *    (set|clear|inc|drop)_nlink</span></span><br><span class="line"><span class="comment"> *    inode_(inc|dec)_link_count</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">union</span> &#123;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> i_nlink;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">int</span> __i_nlink;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">dev_t</span>    i_rdev;   <span class="comment">/*实际设备标识号*/</span></span><br><span class="line"><span class="keyword">loff_t</span>    i_size;   <span class="comment">/*文件的大小（以字节为单位）*/</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">timespec</span><span class="title">i_atime</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">timespec</span><span class="title">i_mtime</span>;</span>  <span class="comment">/*文件的最后修改时间*/</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">timespec</span><span class="title">i_ctime</span>;</span>  <span class="comment">/*节点的修改时间*/</span></span><br><span class="line"><span class="keyword">spinlock_t</span>i_lock;<span class="comment">/* i_blocks, i_bytes, maybe i_size */</span> <span class="comment">/*该节点是否被锁定，用于同步操作中*/</span></span><br><span class="line"><span class="keyword">unsigned</span> short          i_bytes;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">int</span>i_blkbits;</span><br><span class="line"><span class="keyword">blkcnt_t</span>i_blocks;  <span class="comment">/*块大小*/</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> __NEED_I_SIZE_ORDERED</span></span><br><span class="line"><span class="keyword">seqcount_t</span>i_size_seqcount;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* Misc */</span></span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">long</span>i_state;  <span class="comment">/*索引节点的状态标志*/</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">mutex</span><span class="title">i_mutex</span>;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">long</span>dirtied_when;<span class="comment">/* jiffies of first dirtying */</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">hlist_node</span><span class="title">i_hash</span>;</span>  ／*指向哈希链表的指针*/</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">list_head</span><span class="title">i_wb_list</span>;</span><span class="comment">/* backing dev IO list */</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">list_head</span><span class="title">i_lru</span>;</span><span class="comment">/* inode LRU list */</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">list_head</span><span class="title">i_sb_list</span>;</span></span><br><span class="line"><span class="keyword">union</span> &#123;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">hlist_head</span><span class="title">i_dentry</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">rcu_head</span><span class="title">i_rcu</span>;</span></span><br><span class="line">&#125;;</span><br><span class="line">u64i_version;</span><br><span class="line"><span class="keyword">atomic_t</span>i_count; <span class="comment">/*当前使用该节点的进程数。计数为0，表明该节点可丢弃或被重新使用 */</span></span><br><span class="line"><span class="keyword">atomic_t</span>i_dio_count;</span><br><span class="line"><span class="keyword">atomic_t</span>i_writecount;</span><br><span class="line"><span class="keyword">const</span> <span class="class"><span class="keyword">struct</span> <span class="title">file_operations</span>*<span class="title">i_fop</span>;</span><span class="comment">/* former -&gt;i_op-&gt;default_file_ops */</span> <span class="comment">/*指向文件操作的指针 */</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">file_lock</span>*<span class="title">i_flock</span>;</span> <span class="comment">/*指向文件加锁链表的指针*/</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">address_space</span><span class="title">i_data</span>;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> CONFIG_QUOTA</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">dquot</span>*<span class="title">i_dquot</span>[<span class="title">MAXQUOTAS</span>];</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">list_head</span><span class="title">i_devices</span>;</span>        <span class="comment">/*设备文件形成的链表*/</span></span><br><span class="line"><span class="keyword">union</span> &#123;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">pipe_inode_info</span>*<span class="title">i_pipe</span>;</span> <span class="comment">/*指向管道文件*/</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">block_device</span>*<span class="title">i_bdev</span>;</span>     <span class="comment">/*指向块设备文件的指针*/</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">cdev</span>*<span class="title">i_cdev</span>;</span>         <span class="comment">/*指向字符设备文件的指针*/</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">__u32i_generation;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> CONFIG_FSNOTIFY</span></span><br><span class="line">__u32i_fsnotify_mask; <span class="comment">/* all events this inode cares about */</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">hlist_head</span><span class="title">i_fsnotify_marks</span>;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> CONFIG_IMA</span></span><br><span class="line"><span class="keyword">atomic_t</span>i_readcount; <span class="comment">/* struct files open RO */</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"><span class="keyword">void</span>*i_private; <span class="comment">/* fs or device private pointer */</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>inode 中几个比较重要的成员：</p><ul><li>i_uid：文件所属的用户</li><li>i_gid：文件所属的组</li><li>i_rdev：文件所在的设备号</li><li>i_size：文件的大小</li><li>i_atime：文件的最后访问时间</li><li>i_mtime：文件的最后修改时间</li><li>i_ctime：文件的创建时间</li><li>i_op：inode相关的操作列表</li><li>i_fop：文件相关的操作列表</li><li>i_sb：文件所在文件系统的超级块</li></ul><p>重点说明i_op 和 i_fop 这两个成员：</p><ul><li>i_op 成员定义对目录相关的操作方法列表，譬如 mkdir()系统调用会触发 inode-&gt;i_op-&gt;mkdir() 方法，而 link() 系统调用会触发 inode-&gt;i_op-&gt;link() 方法。而 i_fop 成员则定义了对打开文件后对文件的操作方法列表，譬如 read() 系统调用会触发 inode-&gt;i_fop-&gt;read() 方法，而 write() 系统调用会触发 inode-&gt;i_fop-&gt;write() 方法</li></ul><p>进一步说明：</p><ul><li>每个文件都有一个inode，每个inode 有一个索引节点号<code>i_ino</code>。在同一个文件系统中，每个索引节点号都是唯一的，内核有时根据索引节点号的哈希值查找其inode结构。</li><li>每个文件都有个文件主，其最初的文件主是创建了这个文件的用户，但以后可以改变。每个用户都有一个用户组，且属于某个用户组，因此，inode 结构中就有相应的<code>i_uid</code>、<code>i_gid</code>，以指明文件主的身份。</li><li>inode 中有两个设备号，<code>i_dev</code>和<code>i_rdev</code>。首先，除特殊文件外，每个节点都存储在某个设备上，这就是i_dev。其次，如果索引节点所代表的并不是常规文件，而是某个设备，那就还得有个设备号，这就是i_rdev。</li><li>每当一个文件被访问时，系统都要在这个文件的inode 中记下时间标记，这就是inode中与时间相关的几个域。</li><li>属于“ 正在使用” 或“ 脏” 链表的索引节点对象也同时存放在一个称为<code>inode_hashtable 链表</code>中。<ul><li>哈希表加快了对索引节点对象的搜索，前提是系统内核要知道索引节点号及对应文件所在文件系统的超级块对象的地址。</li><li>由于散列技术可能引发冲突，所以，索引节点对象设置一个i_hash 域，其中包含向前和向后的两个指针，分别指向散列到同一地址的前一个索引节点和后一个索引节点；该域由此创建了由这些索引节点组成的一个双向链表。</li><li>与索引节点关联的方法也叫索引节点操作，由<code>inode_operations</code>结构来描述，该结构的地址存放在<code>i_op 域</code>中，该结构也包括一个指向文件操作方法的指针。</li></ul></li></ul><h2 id="目录项对象"><a href="#目录项对象" class="headerlink" title="目录项对象"></a><strong>目录项对象</strong></h2><p>dentry 的定义在<a href="https://github.com/torvalds/linux/blob/v3.10/include/linux/dcache.h">include/linux/dcache.h</a> 中：<br>目录项的主要作用是方便查找文件。一个路径的各个组成部分，不管是目录还是普通的文件，都是一个目录项对象。</p><ul><li>如，在路径 /home/liexusong/example.c 中，目录 /, home/, liexusong/ 和文件 example.c 都对应一个目录项对象。</li><li>不同于前面的两个对象，目录项对象没有对应的磁盘数据结构，VFS 在遍历路径名的过程中现场将它们逐个地解析成目录项对象。</li><li>请注意，目录项对象在磁盘上并没有对应的镜像，因此在dentry结构中不包含指出该对象已被修改的字段。</li><li>目录项对象存放在名为dentry_cache的slab分配器高速缓存中。因此，目录项对象的创建和删除是通过调用kmem_cache_alloc()和kmem_cache_free()实现的。</li></ul><p>每个目录项对象可以处于以下四种状态之一：</p><ul><li>空闲状态（free）：处于该状态的目录项对象不包括有效的信息，而且还没有被VFS使用。对应的内存区由slab分配器进行处理。</li><li>未使用状态（unused）：处于该状态的目录项对象当前还没有被内核使用。该对象的引用计数器d_count的值为0，但其d_inode字段仍然指向关联的索引节点对象。该目录项对象包含有效的信息，但是为了在必要时回收内存，它的内容可能被丢弃。</li><li>正在使用状态（in use）：处于该状态的目录项对象当前正在被内核使用。该对象的引用计数器d_count的值为正数，其d_inode字段指向关联的索引节点对象。该目录项对象包含有效的信息，并且不能被丢弃。</li><li>负状态(negative)：与目录项关联的索引节点不复存在，那是因为相应的磁盘索引节点已被删除，或者因为目录项对象是通过解析一个不存在文件的路径名创建的。目录项对象的d_inode字段被置为NULL，但该对象仍然被保存在目录项高速缓存中，以便后续对同一文件目录名的查找操作能够快速完成。术语“负状态”容易使人误解，因为根本不涉及任何负值。</li></ul><p>目录项的定义如下：</p><figure class="highlight c"><figcaption><span>点击展开代码 >folded</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">dentry</span> &#123;</span></span><br><span class="line"><span class="comment">/* RCU lookup touched fields */</span></span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">int</span> d_flags;<span class="comment">/* protected by d_lock */</span></span><br><span class="line"><span class="keyword">seqcount_t</span> d_seq;<span class="comment">/* per dentry seqlock */</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">hlist_bl_node</span> <span class="title">d_hash</span>;</span><span class="comment">/* lookup hash list */</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">dentry</span> *<span class="title">d_parent</span>;</span><span class="comment">/* parent directory */</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">qstr</span> <span class="title">d_name</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">inode</span> *<span class="title">d_inode</span>;</span><span class="comment">/* Where the name belongs to - NULL is</span></span><br><span class="line"><span class="comment"> * negative */</span></span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">char</span> d_iname[DNAME_INLINE_LEN];<span class="comment">/* small names */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* Ref lookup also touches following */</span></span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">int</span> d_count;<span class="comment">/* protected by d_lock */</span></span><br><span class="line"><span class="keyword">spinlock_t</span> d_lock;<span class="comment">/* per dentry lock */</span></span><br><span class="line"><span class="keyword">const</span> <span class="class"><span class="keyword">struct</span> <span class="title">dentry_operations</span> *<span class="title">d_op</span>;</span>  <span class="comment">//注意这个指针，指向响应的目录项的操作函数</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">super_block</span> *<span class="title">d_sb</span>;</span><span class="comment">/* The root of the dentry tree */</span></span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">long</span> d_time;<span class="comment">/* used by d_revalidate */</span></span><br><span class="line"><span class="keyword">void</span> *d_fsdata;<span class="comment">/* fs-specific data */</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">list_head</span> <span class="title">d_lru</span>;</span><span class="comment">/* LRU list */</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * d_child and d_rcu can share memory</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">union</span> &#123;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">list_head</span> <span class="title">d_child</span>;</span><span class="comment">/* child of parent list */</span></span><br><span class="line"> <span class="class"><span class="keyword">struct</span> <span class="title">rcu_head</span> <span class="title">d_rcu</span>;</span></span><br><span class="line">&#125; d_u;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">list_head</span> <span class="title">d_subdirs</span>;</span><span class="comment">/* our children */</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">hlist_node</span> <span class="title">d_alias</span>;</span><span class="comment">/* inode alias list */</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>与目录项对象关联的方法称为目录项操作。这些方法由<code>dentry_operations结构</code>加以描述，该结构的地址存放在<code>目录项对象的d_op字段</code>中。尽管一些文件系统定义了它们自己的目录项方法，但是这些字段通常为NULL，而VFS使用缺省函数代替这些方法：</p><figure class="highlight c"><figcaption><span>点击展开代码 >folded</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">dentry_operations</span> &#123;</span></span><br><span class="line"><span class="keyword">int</span> (*d_revalidate)(struct dentry *, <span class="keyword">unsigned</span> <span class="keyword">int</span>);</span><br><span class="line"><span class="keyword">int</span> (*d_weak_revalidate)(struct dentry *, <span class="keyword">unsigned</span> <span class="keyword">int</span>);</span><br><span class="line"><span class="keyword">int</span> (*d_hash)(<span class="keyword">const</span> struct dentry *, <span class="keyword">const</span> struct inode *,</span><br><span class="line">struct qstr *);</span><br><span class="line"><span class="keyword">int</span> (*d_compare)(<span class="keyword">const</span> struct dentry *, <span class="keyword">const</span> struct inode *,</span><br><span class="line"><span class="keyword">const</span> struct dentry *, <span class="keyword">const</span> struct inode *,</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">int</span>, <span class="keyword">const</span> <span class="keyword">char</span> *, <span class="keyword">const</span> struct qstr *);</span><br><span class="line"><span class="keyword">int</span> (*d_delete)(<span class="keyword">const</span> struct dentry *);</span><br><span class="line"><span class="keyword">void</span> (*d_release)(struct dentry *);</span><br><span class="line"><span class="keyword">void</span> (*d_prune)(struct dentry *);</span><br><span class="line"><span class="keyword">void</span> (*d_iput)(struct dentry *, struct inode *);</span><br><span class="line"><span class="keyword">char</span> *(*d_dname)(struct dentry *, <span class="keyword">char</span> *, <span class="keyword">int</span>);</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">vfsmount</span> *(*<span class="title">d_automount</span>)(<span class="title">struct</span> <span class="title">path</span> *);</span></span><br><span class="line"><span class="keyword">int</span> (*d_manage)(struct dentry *, <span class="keyword">bool</span>);</span><br><span class="line">&#125; ____cacheline_aligned;</span><br></pre></td></tr></table></figure><p>下面对dentry 结构给出进一步的解释。</p><ul><li><code>dentry与inode的关系</code>：一个有效的dentry 结构必定有一个inode 结构，这是因为一个目录项要么代表着一个文件，要么代表着一个目录，而目录实际上也是文件。所以，只要dentry 结构是有效的，则其指针d_inode 必定指向一个inode 结构。可是，反过来则不然，一个inode 却可能对应着不止一个dentry 结构；也就是说，一个文件可以有不止一个文件名或路径名。这是因为一个已经建立的文件可以被连接（link）到其他文件名。所以在inode 结构中有一个队列i_dentry，凡是代表着同一个文件的所有目录项都通过其dentry 结构中的d_alias 域挂入相应inode结构中的i_dentry 队列。</li><li><code>dentry_hashtable</code>：在内核中有一个哈希表dentry_hashtable ，是一个list_head 的指针数组。一旦在内存中建立起一个目录节点的dentry 结构，该dentry 结构就通过其d_hash 域链入哈希表中<br>的某个队列中。</li><li><code>dentry_unused队列</code>：内核中还有一个队列dentry_unused，凡是已经没有用户（count 域为0）使用的dentry结构就通过其<code>d_lru 域</code>挂入这个队列。</li><li>dentry 结构中除了d_alias、d_hash、d_lru 三个队列外，还有d_vfsmnt、d_child 及d_subdir 三个队列。<ul><li>其中d_vfsmnt 仅在该dentry 为一个安装点时才使用。</li><li>当该目录节点有父目录时，则其dentry 结构就通过d_child 挂入其父节点的d_subdirs 队列中，同时又通过指针d_parent 指向其父目录的dentry 结构，而它自己各个子目录的dentry 结构则挂在其d_subdirs 域指向的队列中。</li></ul></li></ul><blockquote><p>从上面的叙述可以看出，一个文件系统中所有目录项结构或组织为一个哈希表，或组织为一颗树，或按照某种需要组织为一个链表，这将为文件访问和文件路径搜索奠定下良好的基础。</p></blockquote><h3 id="目录项高速缓存"><a href="#目录项高速缓存" class="headerlink" title="目录项高速缓存"></a><strong>目录项高速缓存</strong></h3><p>由于从磁盘<strong>读入一个目录项</strong>并<strong>构造相应的目录项对象</strong>需要花费大量时间，所以，在完成对目录项对象的操作后，可能后面还要使用它，因此仍在内存中保留它有重要的意义。</p><p>为了最大限度地提高处理这些目录项对象的效率，Linux使用目录项高速缓存，它由两种类型的数据结构组成：</p><ol><li>一个处于正在使用，未使用或负状态的目录项对象的集合</li><li>一个散列表，从中能快速获取与给定的文件名和目录名对应的目录项对象。同样，如果访问的对象不再目录项高速缓存中，则散列函数返回一个空值。</li></ol><p>目录项高速缓存的作用还相当于索引节点高速缓存（inode cache）的控制器。在内核内存中，并不丢弃与未用目录项相关的索引节点，这是由于目录项高速缓存仍在使用它们。因此，这些索引节点对象保存在RAM中，并且能够借助相应的目录项快速引用他们。</p><p>为了减少VFS层遍历文件路径的时间，内核将目录项对象缓存在目录项缓存（简称dcache）中。目录项缓存包括三个主要部分：</p><ul><li>“被使用的”目录项链表。</li><li>“未被使用的”双向链表。</li><li>散列表和相应的散列函数。</li></ul><p>每个目录项对象可以处于四种状态（空闲状态，未使用状态，正在使用状态，负状态）。被使用和未被使用的目录项都对应一个有效的索引节点，而负状态的目录项没有对应的有效索引节点。<br>所有<code>“未使用”目录项对象</code>都存放在一个“最近最少使用（Least Recently used，LRU）”的双向链表中，该链表按照插入的时间排序。</p><ul><li>换句话说，最后释放的目录项对象放在链表的首部，所以最近最少使用的目录项对象总是靠近链表的尾部。一旦目录项高速缓存的空间开始变小，内核就从链表的尾部删除元素，使得最近最常用的对象得以保存。</li><li>LRU链表的首元素和尾元素的地址存放在list_head类型的<code>dentry_unused变量</code>的next字段和prev字段中。目录项对象的<code>d_lru字段</code>包括指向链表中的相邻目录项的指针。</li></ul><p>每个<code>“正在使用”的目录项对象</code>都被插入一个正在使用的双向链表中</p><ul><li>该链表由相应索引节点对象的<code>i_dentry字段</code>所指向(由于每个索引节点可能与若干硬链接相关联，所以需要一个链表)。</li><li>目录项对象的d_alias字段存放链表中相邻元素的地址。这两个字段的类型都是struct list_head。</li><li>当指向相应文件的最后一个硬链接被删除后，一个“正在使用”的目录项对象可能变成负状态。在这种情况下，该目录项对象被移到“未使用”目录项对象组成的LRU链表中。每当内核缩减目录项高速缓存时，“负状态”目录项对象就朝着LRU链表的尾部移动，这样一来，这些对象就逐渐被释放。</li></ul><p>散列表是由<code>dentry_hashtable数组</code>实现的，方便虚拟文件系统vfs快速索引dentry。。</p><ul><li>数组中每个元素是一个指向链表的指针，这种链表就是把具有相同散列表值的目录项进行散列而形成的。</li><li>该数组的长度取决于系统已经安装的RAM的数量，缺省值是每兆字节RAM包含256个元素。</li><li>散列函数的产生的值是由目录的目录项对象及其文件名计算出来的。</li></ul><p>还有一个链表就是表示父子结构的链表。</p><h2 id="与进程相关的文件结构"><a href="#与进程相关的文件结构" class="headerlink" title="与进程相关的文件结构"></a><strong>与进程相关的文件结构</strong></h2><p>先解释一下文件描述符、打开的文件描述、系统打开文件表、用户打开文件表的概念以及它们的联系</p><h3 id="文件对象"><a href="#文件对象" class="headerlink" title="文件对象"></a><strong>文件对象</strong></h3><p><strong>文件描述符(fd)</strong>：在Linux 中，进程是通过<code>文件描述符（file descriptors，简称fd）</code>而不是文件名来访问文件的，文件描述符实际上是一个整数。<br>Linux 中规定每个进程最多能同时使用NR_OPEN个文件描述符(进程最大打开文件数限制sysctl_nr_open)，sysctl_nr_open值在<a href="https://github.com/torvalds/linux/blob/v3.10/include/linux/fs.h">include/linux/fs.h</a> 中定义，为1024×1024（2.0 版中仅定义为256）。<br><strong>文件位置</strong>：每个文件都有一个32 位的数字来表示下一个读写的字节位置，这个数字叫做<code>文件位置</code>。</p><ul><li>每次打开一个文件，除非明确要求，否则文件位置都被置为0，即文件的开始处，此后的读或写操作都将从文件的开始处执行，但你可以通过执行系统调用<code>LSEEK</code>（随机存储）对这个文件位置进行修改。</li></ul><p><strong>打开的文件描述（open file description）</strong>：Linux 中专门用了一个数据结构<code>file</code> 来保存打开文件的文件位置，这个结构称为<code>打开的文件描述</code>。这个数据结构的设置是煞费苦心的，因为它与进程的联系非常紧密，可以说这是VFS 中一个比较难于理解的数据结构。</p><article class="message is-info"><div class="message-header"><p>首先，为什么不把文件位置干脆存放在索引节点中，而要多此一举，设一个新的数据结构呢？</p></div><div class="message-body"><p>为了避免多个进程对同一个文件的lseek操作相互影响：我们知道，Linux 中的文件是能够共享的，假如把文件位置存放在索引节点中，则如果有两个或更多个进程同时打开同一个文件时，它们将去访问同一个索引节点，于是一个进程的LSEEK 操作将影响到另一个进程的读操作，这显然是不允许也是不可想象的。</p></div></article><article class="message is-info"><div class="message-header"><p>既然进程是通过文件描述符访问文件的，为什么不用一个与文件描述符数组相平行的数组来保存每个打开文件的文件位置？</p></div><div class="message-body"><p>尽管设置平行的数组保存每个打开文件的文件位置可以解决多个进程对一个文件操作的问题，但是无法解决子进程继续操作文件的问题。设置平行的数组这个想法也是不能实现的，原因就在于在生成一个新进程时，子进程要共享父进程的所有信息，包括文件描述符数组。</p><ul><li>一个文件不仅可以被不同的进程分别打开，而且也可以被同一个进程先后多次打开。一个进程如果先后多次打开同一个文件，则每一次打开都要分配一个新的文件描述符，并且指向一个新的file 结构，尽管它们都指向同一个索引节点，但是，如果一个子进程不和父进程共享同一个file 结构，而是也如上面一样，分配一个新的file 结构，会出现什么情况了？让我们来看一个例子。</li><li>假设有一个输出重定位到某文件A 的shell script（shell 脚本），我们知道，shell是作为一个进程运行的，当它生成第1 个子进程时，将以0 作为A 的文件位置开始输出，假设输出了2KB 的数据，则现在文件位置为2KB。然后，shell 继续读取脚本，生成另一个子进程，它要共享shell 的file 结构，也就是共享文件位置，所以第2 个进程的文件位置是2KB，将接着第1 个进程输出内容的后面输出。如果shell 不和子进程共享文件位置，则第2 个进程就有可能重写第1 个进程的输出了，这显然不是希望得到的结果。</li></ul></div></article><p>上面的讨论可以看出设置file 结构的原因。</p><p><strong>file 结构</strong>中主要保存了文件位置，此外，还把指向该文件索引节点的指针也放在其中。<br><strong>系统打开文件表</strong>:file 结构形成一个双链表，称为<code>系统打开文件表</code>，其最大长度是NR_FILE，在fs.h 中定义为8192。<br>file 结构在<a href="https://github.com/torvalds/linux/blob/v3.10/include/linux/fs.h">include/linux/fs.h</a> 中定义如下,具体的解释可以去看《Linux内核设计与实现》：</p><figure class="highlight c"><figcaption><span>点击展开代码 >folded</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">file</span> &#123;</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * fu_list becomes invalid after file_free is called and queued via</span></span><br><span class="line"><span class="comment"> * fu_rcuhead for RCU freeing</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">union</span> &#123;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">list_head</span><span class="title">fu_list</span>;</span> <span class="comment">//文件对象链表</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">rcu_head</span> <span class="title">fu_rcuhead</span>;</span> <span class="comment">//释放之后的RCU链表</span></span><br><span class="line">&#125; f_u;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">path</span><span class="title">f_path</span>;</span>          <span class="comment">//包含目录项</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> f_dentryf_path.dentry</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">inode</span>*<span class="title">f_inode</span>;</span><span class="comment">/* cached value */</span></span><br><span class="line"><span class="keyword">const</span> <span class="class"><span class="keyword">struct</span> <span class="title">file_operations</span>*<span class="title">f_op</span>;</span> <span class="comment">// 文件的操作列表</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * Protects f_ep_links, f_flags, f_pos vs i_size in lseek SEEK_CUR.</span></span><br><span class="line"><span class="comment"> * Must not be taken from IRQ context.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">spinlock_t</span>f_lock;      <span class="comment">//单个文件结构锁</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> CONFIG_SMP</span></span><br><span class="line"><span class="keyword">int</span>f_sb_list_cpu;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"><span class="keyword">atomic_long_t</span>f_count; <span class="comment">// 计数器（表示有多少个用户打开此文件）</span></span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">int</span> f_flags; <span class="comment">// 标识位  </span></span><br><span class="line"><span class="keyword">fmode_t</span>f_mode;      <span class="comment">// 打开模式</span></span><br><span class="line"><span class="keyword">loff_t</span>f_pos;       <span class="comment">// 读写偏移量</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">fown_struct</span><span class="title">f_owner</span>;</span> <span class="comment">// 所属者信息，通过信号进行异步I/O 数据的传送</span></span><br><span class="line"><span class="keyword">const</span> <span class="class"><span class="keyword">struct</span> <span class="title">cred</span>*<span class="title">f_cred</span>;</span> <span class="comment">//文件的信任状</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">file_ra_state</span><span class="title">f_ra</span>;</span><span class="comment">//预读状态</span></span><br><span class="line"></span><br><span class="line">u64f_version;       <span class="comment">//版本号</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> CONFIG_SECURITY</span></span><br><span class="line"><span class="keyword">void</span>*f_security; <span class="comment">//安全模块</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"><span class="comment">/* needed for tty driver, and maybe others */</span></span><br><span class="line"><span class="keyword">void</span>*private_data;      <span class="comment">/* tty 驱动程序的钩子 */</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> CONFIG_EPOLL</span></span><br><span class="line"><span class="comment">/* Used by fs/eventpoll.c to link all the hooks to this file */</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">list_head</span><span class="title">f_ep_links</span>;</span>     <span class="comment">//事件池链表</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">list_head</span><span class="title">f_tfile_llink</span>;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span> <span class="comment">/* #ifdef CONFIG_EPOLL */</span></span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">address_space</span>*<span class="title">f_mapping</span>;</span> <span class="comment">//页缓存映射</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> CONFIG_DEBUG_WRITECOUNT</span></span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">long</span> f_mnt_write_state;    <span class="comment">//调试状态</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>类似于目录项对象，文件对象实际上没有对应的磁盘数据．所以在结构体中没有代表其对象是否为脏、是否需要写回磁盘的标志。文件对象通过<code>f_dentry指针</code>指向相关的目录项对象．目录项会指向相关的索引节点，索引节点会记录文件是否是脏的。</p><p>每个文件对象总是包含在下列的一个<u>双向循环链表</u>之中。</p><ul><li>“未使用”文件对象的链表：<ul><li>该链表既可以用做文件对象的内存高速缓存，又可以当作超级用户的备用存储器，也就是说，即使系统的动态内存用完，也允许超级用户打开文件。</li><li>由于这些对象是未使用的，它们的f_count 域是NULL，该链表首元素的地址存放在变量free_list 中，内核必须确认该链表总是至少包含NR_RESERVED_FILES 个对象，通常该值设为10。</li></ul></li><li>“正在使用”文件对象的链表。<ul><li>该链表中的每个元素至少由一个进程使用，因此，各个元素的f_count 域不会为NULL，该链表中第一个元素的地址存放在变量anon_list 中。</li><li>如果VFS 需要分配一个新的文件对象，就调用函数get_empty_filp( )。该函数检测“未使用”文件对象链表的元素个数是否多于NR_RESERVED_FILES，如果是，可以为新打开的文件使用其中的一个元素；如果没有，则退回到正常的内存分配。</li></ul></li></ul><p>每个文件系统都有其自己的文件操作集合,执行诸如读写文件这样的操作。</p><ul><li>当内核将一个索引节点从磁盘装入内存的时候,就会把指向这些文件操作的指针存放在file_operations结构中，而该结构的地址存放在该索引节点的i_fop字段中。</li><li>当进程打开这个文件的时候，vfs就用存放在索引节点中的这个地址初始化新文件对象的f_op字段，使得对文件操作的后续调用能够使用这些函数。</li><li>如果需要，vfs随后也可以通过在f_op字段存放一个新值而修改文件操作的集合。</li></ul><p>file的操作集合如下，代码在<a href="https://github.com/torvalds/linux/blob/v3.10/include/linux/fs.h">include/linux/fs.h</a> 中：</p><figure class="highlight c"><figcaption><span>点击展开代码 >folded</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">file_operations</span> &#123;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">module</span> *<span class="title">owner</span>;</span></span><br><span class="line"><span class="keyword">loff_t</span> (*llseek) (struct file *, <span class="keyword">loff_t</span>, <span class="keyword">int</span>);</span><br><span class="line"><span class="keyword">ssize_t</span> (*<span class="built_in">read</span>) (struct file *, <span class="keyword">char</span> __user *, <span class="keyword">size_t</span>, <span class="keyword">loff_t</span> *);</span><br><span class="line"><span class="keyword">ssize_t</span> (*<span class="built_in">write</span>) (struct file *, <span class="keyword">const</span> <span class="keyword">char</span> __user *, <span class="keyword">size_t</span>, <span class="keyword">loff_t</span> *);</span><br><span class="line"><span class="keyword">ssize_t</span> (*aio_read) (struct kiocb *, <span class="keyword">const</span> struct iovec *, <span class="keyword">unsigned</span> <span class="keyword">long</span>, <span class="keyword">loff_t</span>);</span><br><span class="line"><span class="keyword">ssize_t</span> (*aio_write) (struct kiocb *, <span class="keyword">const</span> struct iovec *, <span class="keyword">unsigned</span> <span class="keyword">long</span>, <span class="keyword">loff_t</span>);</span><br><span class="line"><span class="keyword">int</span> (*readdir) (struct file *, <span class="keyword">void</span> *, <span class="keyword">filldir_t</span>);</span><br><span class="line"><span class="function"><span class="keyword">unsigned</span> <span class="title">int</span> <span class="params">(*poll)</span> <span class="params">(struct file *, struct poll_table_struct *)</span></span>;</span><br><span class="line"><span class="keyword">long</span> (*unlocked_ioctl) (struct file *, <span class="keyword">unsigned</span> <span class="keyword">int</span>, <span class="keyword">unsigned</span> <span class="keyword">long</span>);</span><br><span class="line"><span class="keyword">long</span> (*compat_ioctl) (struct file *, <span class="keyword">unsigned</span> <span class="keyword">int</span>, <span class="keyword">unsigned</span> <span class="keyword">long</span>);</span><br><span class="line"><span class="keyword">int</span> (*mmap) (struct file *, struct vm_area_struct *);</span><br><span class="line"><span class="keyword">int</span> (*<span class="built_in">open</span>) (struct inode *, struct file *);</span><br><span class="line"><span class="keyword">int</span> (*<span class="built_in">flush</span>) (struct file *, <span class="keyword">fl_owner_t</span> id);</span><br><span class="line"><span class="keyword">int</span> (*<span class="built_in">release</span>) (struct inode *, struct file *);</span><br><span class="line"><span class="keyword">int</span> (*fsync) (struct file *, <span class="keyword">loff_t</span>, <span class="keyword">loff_t</span>, <span class="keyword">int</span> datasync);</span><br><span class="line"><span class="keyword">int</span> (*aio_fsync) (struct kiocb *, <span class="keyword">int</span> datasync);</span><br><span class="line"><span class="keyword">int</span> (*fasync) (<span class="keyword">int</span>, struct file *, <span class="keyword">int</span>);</span><br><span class="line"><span class="keyword">int</span> (*lock) (struct file *, <span class="keyword">int</span>, struct file_lock *);</span><br><span class="line"><span class="keyword">ssize_t</span> (*sendpage) (struct file *, struct page *, <span class="keyword">int</span>, <span class="keyword">size_t</span>, <span class="keyword">loff_t</span> *, <span class="keyword">int</span>);</span><br><span class="line"><span class="function"><span class="keyword">unsigned</span> <span class="title">long</span> <span class="params">(*get_unmapped_area)</span><span class="params">(struct file *, <span class="keyword">unsigned</span> <span class="keyword">long</span>, <span class="keyword">unsigned</span> <span class="keyword">long</span>, <span class="keyword">unsigned</span> <span class="keyword">long</span>, <span class="keyword">unsigned</span> <span class="keyword">long</span>)</span></span>;</span><br><span class="line"><span class="keyword">int</span> (*check_flags)(<span class="keyword">int</span>);</span><br><span class="line"><span class="keyword">int</span> (*flock) (struct file *, <span class="keyword">int</span>, struct file_lock *);</span><br><span class="line"><span class="keyword">ssize_t</span> (*splice_write)(struct pipe_inode_info *, struct file *, <span class="keyword">loff_t</span> *, <span class="keyword">size_t</span>, <span class="keyword">unsigned</span> <span class="keyword">int</span>);</span><br><span class="line"><span class="keyword">ssize_t</span> (*splice_read)(struct file *, <span class="keyword">loff_t</span> *, struct pipe_inode_info *, <span class="keyword">size_t</span>, <span class="keyword">unsigned</span> <span class="keyword">int</span>);</span><br><span class="line"><span class="keyword">int</span> (*setlease)(struct file *, <span class="keyword">long</span>, struct file_lock **);</span><br><span class="line"><span class="keyword">long</span> (*fallocate)(struct file *file, <span class="keyword">int</span> mode, <span class="keyword">loff_t</span> offset,</span><br><span class="line">  <span class="keyword">loff_t</span> len);</span><br><span class="line"><span class="keyword">int</span> (*show_fdinfo)(struct seq_file *m, struct file *f);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="用户打开文件表"><a href="#用户打开文件表" class="headerlink" title="用户打开文件表"></a><strong>用户打开文件表</strong></h3><p>每个进程用一个files_struct 结构来<strong>记录文件描述符的使用情况</strong>，这个files_struct结构称为<code>用户打开文件表</code>， 它是进程的私有数据。</p><p><code>files_struct 结构</code>在<a href="https://github.com/torvalds/linux/blob/v3.10/include/linux/fdtable.h">include/linux/fdtable.h</a> 中定义如下：</p><figure class="highlight c"><figcaption><span>点击展开代码 >folded</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">fdtable</span> &#123;</span></span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">int</span> max_fds;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">file</span> __<span class="title">rcu</span> **<span class="title">fd</span>;</span>      <span class="comment">/* current fd array */</span></span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">long</span> *close_on_exec;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">long</span> *open_fds;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">rcu_head</span> <span class="title">rcu</span>;</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * Open file table structure</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"> <span class="class"><span class="keyword">struct</span> <span class="title">files_struct</span> &#123;</span></span><br><span class="line">  <span class="comment">/*</span></span><br><span class="line"><span class="comment">   * read mostly part</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line"><span class="keyword">atomic_t</span> count;   <span class="comment">//结构的使用计数</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">fdtable</span> __<span class="title">rcu</span> *<span class="title">fdt</span>;</span> <span class="comment">//指向其他fd表的指针</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">fdtable</span> <span class="title">fdtab</span>;</span> <span class="comment">//基fd表</span></span><br><span class="line">  <span class="comment">/*</span></span><br><span class="line"><span class="comment">   * written part on a separate cache line in SMP</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line"><span class="keyword">spinlock_t</span> file_lock ____cacheline_aligned_in_smp;</span><br><span class="line"><span class="keyword">int</span> next_fd;   <span class="comment">//缓存下一个可以使用的fd</span></span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">long</span> close_on_exec_init[<span class="number">1</span>];  <span class="comment">//exec()时关闭的文件描述符链表</span></span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">long</span> open_fds_init[<span class="number">1</span>];      <span class="comment">//打开的文件描述符链表</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">file</span> __<span class="title">rcu</span> * <span class="title">fd_array</span>[<span class="title">NR_OPEN_DEFAULT</span>];</span> <span class="comment">//缺省的文件对象数组，文件对象指针的初始化数组</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><ul><li>fd_array数组指针指向已经打开的文件对象。因为NR_OPEN_DEFAULT等于BITS_PER_LONG，在64位机器体系结构中这个宏的值为64，所以该数组可以容纳64个文件对象。如果一个进程打开的文件对象超过64个，内核将分配一个新数组，并将fdt指针指向它。所以对适当数量的文件对象的访问会执行的很快，因为它是对静态数组的操作；如果一个进程打开的文件数量过多，那么内核就需要建立新数组。所以如果系统中有大量的进程都要打开超过64 个文件，为了优化性能，管理员可以适当增NR_OPEN_DEFAULT 的预定义值．</li><li>open_fds定义在include/linux/fdtable.h中，</li></ul><h3 id="关于文件系统信息的fs-struct-结构"><a href="#关于文件系统信息的fs-struct-结构" class="headerlink" title="关于文件系统信息的fs_struct 结构"></a><strong>关于文件系统信息的fs_struct 结构</strong></h3><p>进程和文件的相互作用时，内核必须维护一些数据，其中就有进程的fs_struct 结构。每个进程描述符的fs字段就指向进程的fs_struct结构。</p><p>义在<a href="https://github.com/torvalds/linux/blob/v3.10/include/linux/fs_struct.h">include/linux/fs_struct.h</a> 中:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">fs_struct</span> &#123;</span></span><br><span class="line"><span class="keyword">int</span> users;</span><br><span class="line"><span class="keyword">spinlock_t</span> lock;</span><br><span class="line"><span class="keyword">seqcount_t</span> seq;</span><br><span class="line"><span class="keyword">int</span> umask;     <span class="comment">//umask 域由umask()系统调用使用，用于为新创建的文件设置初始文件许可权。</span></span><br><span class="line"><span class="keyword">int</span> in_exec;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">path</span> <span class="title">root</span>, <span class="title">pwd</span>;</span>  <span class="comment">//个人猜测 root 代表着本进程所在的根目录，pwd 指向进程当前所在的目录</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="VFS数据结构间的关系"><a href="#VFS数据结构间的关系" class="headerlink" title="VFS数据结构间的关系"></a><strong>VFS数据结构间的关系</strong></h2><p><strong>超级块</strong>：对一个文件系统的描述；<br><strong>索引节点</strong>：对一个文件物理属性的描述；<br><strong>目录项</strong>：对一个文件逻辑属性的描述。<br><strong>文件与进程之间的关系</strong>是由另外的数据结构来描述的：</p><ul><li>一个进程所处的位置是由<code>fs_struct</code>来描述的</li><li>一个进程（或用户）打开的文件是由<code>files_struct</code>来描述的</li><li>整个系统所打开的文件是由<code>file</code>结构来描述。</li></ul><p>如图2给出了这些数据结构之间的关系：</p><center><img src="/2020/08/12/Linux-VFS%E4%B8%AD%E7%9A%84%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/vfs数据结构之间的关系.jpg">  </center><center>图2. vfs数据结构之间的关系</center><p>图2来自<a href="https://github.com/liexusong/linux-source-code-analyze/blob/master/virtual_file_system.md">链接</a></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a><strong>参考资料</strong></h2><p>《深入分析Linux内核源代码》 //书籍内核版本有些旧<br>《Linux内核设计与实现》 //目前感觉这个版本是最准的<br><a href="https://blog.csdn.net/tigerjibo/article/details/6015530">Linux 内核编程之文件系统（一）Linux文件编程之虚拟文件系统(VFS)</a><br><a href="https://blog.csdn.net/tigerjibo/article/details/6015530">Linux 内核编程之文件系统（二）VFS中的目录项对象和文件对象</a><br><a href="https://www.cnblogs.com/zhouqi0505/p/10572123.html">理解linux文件系统—VFS主要数据结构及之间的关系</a> //这里面的配图不错<br><a href="http://edsionte.com/techblog/archives/1984">VFS中的基本数据结构</a><br><a href="https://www.cnblogs.com/shuying1234/archive/2013/05/08/3060541.html">虚拟文件系统</a><br><a href="https://blog.csdn.net/new_abc/article/details/7630099?utm_source=blogxgwz8">文件系统– 虚拟文件系统相关数据结构</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;&lt;strong&gt;前言&lt;/strong&gt;&lt;/h2&gt;&lt;p&gt;VFS（虚拟文件系统）四大对象：struct super_block 超级块、struct inode 索引节点、struct dentry 目录项、struct file 文件对象&lt;br&gt;VFS采用的是面向对象的设计思想，使用一簇数据结构来代表通用文件对象。所以内核中的数据结构都使用C结构体实现。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;超级块super_block对象&lt;/code&gt;，代表一个具体的已安装文件系统。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;索引节点inode对象&lt;/code&gt;，代表一个具体文件。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;目录项dentry对象&lt;/code&gt;，代表一个目录项，是路径的一个组成部分。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;文件file对象&lt;/code&gt;，代表有进程打开的文件。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;每个主要对象中都包含一个操作对象，这些操作对象描述了内核针对主要对象可以使用的方法：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;super_operations对象&lt;/code&gt;：包含内核针对特定文件系统所能调用的方法。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;inode_operations对象&lt;/code&gt;：包含内核对特定文件所能调用的方法。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;dentry_operations对象&lt;/code&gt;：包含内核对特定目录所能调用的方法。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;file_operations对象&lt;/code&gt;：包含进程针对已打开文件所能调用的方法。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;操作对象作为一个指针结构体被实现，此结构体中包含指向操作其父对象的函数指针。对于其中许多方法来说，可以继承使用VFS提供的通用函数，如果通用函数提供的基本功能无法满足需要，就必须使用实际文件系统的独有方法填充这些函数指针，使其指向文件系统实例。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Linux" scheme="https://stemha.github.io/categories/Linux/"/>
    
    
      <category term="Linux" scheme="https://stemha.github.io/tags/Linux/"/>
    
      <category term="数据结构" scheme="https://stemha.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="内核" scheme="https://stemha.github.io/tags/%E5%86%85%E6%A0%B8/"/>
    
  </entry>
  
  <entry>
    <title>Linux-特殊文件系统</title>
    <link href="https://stemha.github.io/2020/08/11/Linux-%E7%89%B9%E6%AE%8A%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F/"/>
    <id>https://stemha.github.io/2020/08/11/Linux-%E7%89%B9%E6%AE%8A%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F/</id>
    <published>2020-08-11T03:51:40.000Z</published>
    <updated>2020-08-11T15:06:42.004Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a><strong>前言</strong></h2><p>网络和磁盘文件系统能够使用户处理存放在内核之外的信息。<br>特殊文件系统可以为系统程序员和管理员提供一种容易的方式来操作内核的数据结构并实现操作系统的特殊特征。     </p><a id="more"></a><h2 id="Linux中常用的-特殊文件系统"><a href="#Linux中常用的-特殊文件系统" class="headerlink" title="Linux中常用的 特殊文件系统"></a><strong>Linux中常用的 特殊文件系统</strong></h2><p>下表列出了最常用的特殊文件系统</p><table><thead><tr><th align="left">名字</th><th align="left">安装</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left">bdev</td><td align="left">none</td><td align="left">块设备</td></tr><tr><td align="left">binfmt_misc</td><td align="left">any</td><td align="left">其他可执行格式</td></tr><tr><td align="left">devpts</td><td align="left">/dev/pts</td><td align="left">伪终端支持（开放组织的Unix98标准）</td></tr><tr><td align="left">eventpollfs</td><td align="left">none</td><td align="left">由有效事件轮询机制使用</td></tr><tr><td align="left">futexfs</td><td align="left">none</td><td align="left">由futex（快速用户空间加锁）机制使用</td></tr><tr><td align="left">pipefs</td><td align="left">none</td><td align="left">管道</td></tr><tr><td align="left">proc</td><td align="left">/proc</td><td align="left">对内核数据结构的常规访问点。一个反映内核运行情况的虚的文件系统，并不实际存在于磁盘上。历史最早，最初就是用来跟内核交互的唯一方式，用来获取处理器、内存、设备驱动、进程等各种信息。</td></tr><tr><td align="left">rootfs</td><td align="left">none</td><td align="left">为启动阶段提供一个空的根目录</td></tr><tr><td align="left">shm</td><td align="left">none</td><td align="left">IPC共享线性区</td></tr><tr><td align="left">mqueue</td><td align="left">any</td><td align="left">实现POSIX消息队列时使用</td></tr><tr><td align="left">sockfs</td><td align="left">none</td><td align="left">套接字</td></tr><tr><td align="left">sysfs</td><td align="left">/sys</td><td align="left">对系统数据的常规访问点（一般是些驱动）, 跟 kobject 框架紧密联系，而 kobject 是为设备驱动模型而存在的，所以 sysfs 是为设备驱动服务的。</td></tr><tr><td align="left">tmpfs</td><td align="left">any</td><td align="left">临时文件（如果不被交换出去就保持在RAM中）</td></tr><tr><td align="left">usbfs</td><td align="left">/proc/bus/usb</td><td align="left">USB设备</td></tr></tbody></table><p>注意：</p><ul><li>有几个特殊文件系统没有固定的安装点（也就是any）。这些文件系统可以由用户自由的安装和使用。</li><li>还有一些特殊文件系统根本没有安装点（也就是none）。它们不是用于和用户交互，但是内核可以使用它们，以便更容易地重用VFS层的某些代码；</li></ul><blockquote><p>特殊文件系统不限于物理块设备。然而，内核给每个安装的特殊文件系统分配一个虚拟的块设备，让其主设备号为0而次设备号具有任意值（每个特殊文件系统有不同的值）。</p></blockquote><p>set_anon_super()函数用于初始化特殊文件系统的超级块；该函数本质上获得一个未使用的次设备号dev，然后用主设备号0和次设备号dev设置新超级块的s_dev字段。<br>而另一个kill_anon_super()函数移走特殊文件系统的超级块。unnamed_dev_idr变量包含指向一个辅助结构（记录当前在用的次设备号）的指针。<br>尽管有些内核设计者不喜欢虚拟块设备标识符，但是这些标识符有助于内核以统一的方式处理特殊文件系统和普通文件系统。</p><h2 id="proc文件系统"><a href="#proc文件系统" class="headerlink" title="/proc文件系统"></a><strong>/proc文件系统</strong></h2><p>/proc 是一个特殊的文件系统，其安装点一般都固定为/proc。这个文件系统中所有的文件都是特殊文件，其内容不存在于任何设备上。<br>每当创建一个进程时，系统就以其pid 为文件名在这个目录下建立起一个特殊文件，使得通过这个文件就可以读／写相应进程的用户空间，而当进程退出时则将此文件删除。<br>/proc 文件系统中的目录项结构dentry，在磁盘上没有对应结构，而以内存中的proc_dir_entry 结构来代替。</p><div class="notification is-success">查看<a href="https://github.com/torvalds/linux">Linux源码</a>可以通过在线的linux源码进行查看，非常方便的。通过tag切换还可以查看不同版本的linux。</div><p>proc_dir_entry定义的地方:</p><ul><li>Linux kernel 2.6.38.8  在#include &lt;linux/proc_fs.h&gt;</li><li>Linux kernel 3.10.17 在<a href="https://github.com/torvalds/linux/blob/v3.10/fs/proc/internal.h">fs/proc/internal.h</a>:struct proc_dir_entry </li></ul><p>Linux内核提供了很多proc文件系统的API,相关API定义在<a href="https://github.com/torvalds/linux/blob/v3.10/fs/proc/generic.c">kernel-3.10/fs/proc/generic.c</a>中，并在<a href="https://github.com/torvalds/linux/blob/v3.10/include/linux/proc_fs.h">kernel-3.10\include\linux\proc_fs.h</a>中引用</p><h2 id="struct-proc-dir-entry数据结构"><a href="#struct-proc-dir-entry数据结构" class="headerlink" title="struct proc_dir_entry数据结构"></a>struct proc_dir_entry数据结构</h2><p>定义路径：<a href="https://github.com/torvalds/linux/blob/v3.10/fs/proc/internal.h">kernel-3.10/fs/proc/internal.h</a></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//这还没有完全实现。这个想法是为了在这些proc_dir_entries中创建一个内存树(就像实际的/proc文件系统一样 )，</span></span><br><span class="line"><span class="comment">//这样我们就可以动态地 向/proc添加新文件。</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * This is not completely implemented yet. The idea is to</span></span><br><span class="line"><span class="comment"> * create an in-memory tree (like the actual /proc filesystem</span></span><br><span class="line"><span class="comment"> * tree) of these proc_dir_entries, so that we can dynamically</span></span><br><span class="line"><span class="comment"> * add new files to /proc.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * The "next" pointer creates a linked list of one /proc directory,</span></span><br><span class="line"><span class="comment"> * while parent/subdir create the directory structure (every</span></span><br><span class="line"><span class="comment"> * /proc file has a parent, but "subdir" is NULL for all</span></span><br><span class="line"><span class="comment"> * non-directory entries).</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">proc_dir_entry</span> &#123;</span></span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">int</span> low_ino;</span><br><span class="line"><span class="keyword">umode_t</span> mode;</span><br><span class="line"><span class="keyword">nlink_t</span> nlink;</span><br><span class="line"><span class="keyword">kuid_t</span> uid;</span><br><span class="line"><span class="keyword">kgid_t</span> gid;</span><br><span class="line"><span class="keyword">loff_t</span> <span class="built_in">size</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="class"><span class="keyword">struct</span> <span class="title">inode_operations</span> *<span class="title">proc_iops</span>;</span></span><br><span class="line"><span class="keyword">const</span> <span class="class"><span class="keyword">struct</span> <span class="title">file_operations</span> *<span class="title">proc_fops</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">proc_dir_entry</span> *<span class="title">next</span>, *<span class="title">parent</span>, *<span class="title">subdir</span>;</span></span><br><span class="line"><span class="keyword">void</span> *data;</span><br><span class="line"><span class="keyword">atomic_t</span> count;<span class="comment">/* use count */</span></span><br><span class="line"><span class="keyword">atomic_t</span> in_use;<span class="comment">/* number of callers into module in progress; */</span></span><br><span class="line"><span class="comment">/* negative -&gt; it's going away RSN */</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">completion</span> *<span class="title">pde_unload_completion</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">list_head</span> <span class="title">pde_openers</span>;</span><span class="comment">/* who did -&gt;open, but not -&gt;release */</span></span><br><span class="line"><span class="keyword">spinlock_t</span> pde_unload_lock; <span class="comment">/* proc_fops checks and pde_users bumps */</span></span><br><span class="line">u8 namelen;</span><br><span class="line"><span class="keyword">char</span> name[];</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="在-proc-下创建目录"><a href="#在-proc-下创建目录" class="headerlink" title="在/proc/下创建目录"></a>在/proc/下创建目录</h3><p>proc_mkdir函数定义路径：<a href="https://github.com/torvalds/linux/blob/v3.10/fs/proc/generic.c">kernel-3.10/fs/proc/generic.c</a></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">struct proc_dir_entry *<span class="title">proc_mkdir</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> *name,</span></span></span><br><span class="line"><span class="function"><span class="params">struct proc_dir_entry *parent)</span></span></span><br><span class="line"><span class="function"><span class="comment">/*proc_mkdir_data()第二个参数mode=0表示mode = S_IRUGO | S_IXUGO; */</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> proc_mkdir_data(name, <span class="number">0</span>, parent, <span class="literal">NULL</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>参数parent表示name的父目录，一般为NULL，表示挂载在/proc/下。</li><li>参数name就是在proc/下创建的目录名。</li></ul><p>该函数实际上调用了proc_mkdir_data函数来创建一个目录的。proc_mkdir_data函数定义路径：<a href="https://github.com/torvalds/linux/blob/v3.10/fs/proc/generic.c">kernel-3.10/fs/proc/generic.c</a></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">struct proc_dir_entry *<span class="title">proc_mkdir_data</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> *name, <span class="keyword">umode_t</span> mode,</span></span></span><br><span class="line"><span class="function"><span class="params">struct proc_dir_entry *parent, <span class="keyword">void</span> *data)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">proc_dir_entry</span> *<span class="title">ent</span>;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (mode == <span class="number">0</span>)</span><br><span class="line">mode = S_IRUGO | S_IXUGO;</span><br><span class="line"></span><br><span class="line">ent = __proc_create(&amp;parent, name, S_IFDIR | mode, <span class="number">2</span>);</span><br><span class="line"><span class="keyword">if</span> (ent) &#123;</span><br><span class="line">ent-&gt;data = data;</span><br><span class="line"><span class="keyword">if</span> (proc_register(parent, ent) &lt; <span class="number">0</span>) &#123;</span><br><span class="line">kfree(ent);</span><br><span class="line">ent = <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> ent;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当需要对创建的目录指定mode的时候，可用下面这个API：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">struct proc_dir_entry *proc_mkdir_mode(const char *name, umode_t mode,</span><br><span class="line">       struct proc_dir_entry *parent)</span><br><span class="line">&#123;</span><br><span class="line">return proc_mkdir_data(name, mode, parent, NULL);</span><br></pre></td></tr></table></figure><h3 id="移除创建的目录或文件"><a href="#移除创建的目录或文件" class="headerlink" title="移除创建的目录或文件"></a>移除创建的目录或文件</h3><p>remove_proc_entry函数定义路径：<a href="https://github.com/torvalds/linux/blob/v3.10/fs/proc/generic.c">kernel-3.10/fs/proc/generic.c</a></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">remove_proc_entry</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> *name, struct proc_dir_entry *parent)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">proc_dir_entry</span> **<span class="title">p</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">proc_dir_entry</span> *<span class="title">de</span> = <span class="title">NULL</span>;</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">char</span> *fn = name;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">int</span> len;</span><br><span class="line"></span><br><span class="line">spin_lock(&amp;proc_subdir_lock);</span><br><span class="line"><span class="keyword">if</span> (__xlate_proc_name(name, &amp;parent, &amp;fn) != <span class="number">0</span>) &#123;</span><br><span class="line">spin_unlock(&amp;proc_subdir_lock);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line">len = <span class="built_in">strlen</span>(fn);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (p = &amp;parent-&gt;subdir; *p; p=&amp;(*p)-&gt;next ) &#123;</span><br><span class="line"><span class="keyword">if</span> (proc_match(len, fn, *p)) &#123;</span><br><span class="line">de = *p;</span><br><span class="line">*p = de-&gt;next;</span><br><span class="line">de-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">spin_unlock(&amp;proc_subdir_lock);</span><br><span class="line"><span class="keyword">if</span> (!de) &#123;</span><br><span class="line">WARN(<span class="number">1</span>, <span class="string">"name '%s'\n"</span>, name);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">proc_entry_rundown(de);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (S_ISDIR(de-&gt;mode))</span><br><span class="line">parent-&gt;nlink--;</span><br><span class="line">de-&gt;nlink = <span class="number">0</span>;</span><br><span class="line">WARN(de-&gt;subdir, <span class="string">"%s: removing non-empty directory "</span></span><br><span class="line"> <span class="string">"'%s/%s', leaking at least '%s'\n"</span>, __func__,</span><br><span class="line"> de-&gt;parent-&gt;name, de-&gt;name, de-&gt;subdir-&gt;name);</span><br><span class="line">pde_put(de);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p><a href="https://github.com/torvalds/linux">github上的linux开源代码 </a><br><a href="http://tinylab.org/show-the-usage-of-procfs-sysfs-debugfs/">Linux 文件系统：procfs, sysfs, debugfs 用法简介</a><br><a href="https://blog.csdn.net/caotuo_csdn/article/details/79172663">proc文件系统详解</a><br><a href="https://blog.csdn.net/sty23122555/article/details/51638697">Linux内核通信之—proc文件系统（详解）</a><br>《深入分析Linux内核源代码》<br>《深入理解Linux内核》</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;&lt;strong&gt;前言&lt;/strong&gt;&lt;/h2&gt;&lt;p&gt;网络和磁盘文件系统能够使用户处理存放在内核之外的信息。&lt;br&gt;特殊文件系统可以为系统程序员和管理员提供一种容易的方式来操作内核的数据结构并实现操作系统的特殊特征。     &lt;/p&gt;
    
    </summary>
    
    
      <category term="Linux" scheme="https://stemha.github.io/categories/Linux/"/>
    
    
      <category term="Linux" scheme="https://stemha.github.io/tags/Linux/"/>
    
      <category term="特殊文件系统" scheme="https://stemha.github.io/tags/%E7%89%B9%E6%AE%8A%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F/"/>
    
  </entry>
  
  <entry>
    <title>Linux-虚拟文件系统</title>
    <link href="https://stemha.github.io/2020/08/10/Linux-%E8%99%9A%E6%8B%9F%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F/"/>
    <id>https://stemha.github.io/2020/08/10/Linux-%E8%99%9A%E6%8B%9F%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F/</id>
    <published>2020-08-10T04:19:21.244Z</published>
    <updated>2020-08-12T04:16:13.829Z</updated>
    
    <content type="html"><![CDATA[<h2 id="linux设计思想"><a href="#linux设计思想" class="headerlink" title="linux设计思想"></a><strong>linux设计思想</strong></h2><blockquote><p>Linux作为一个最著名的自由软件，几乎处处体现了“自由”的思想，你可以编译适合自己系统要求的内核，或者轻松添加别人开发的新的模块。只要你有实力，你还可以自己写一个新的Linux 支持的文件系统。<br>Linux 不仅支持多种文件系统，而且还支持这些文件系统相互之间进行访问。Linux成功的关键因素之一是它具有与其他操作系统和谐共存的能力，你能够透明的安装具有其他操作系统文件格式的磁盘分区（比如Windows系统）。这一切都要归功于神奇的虚拟文件系统。</p></blockquote><a id="more"></a><h2 id="虚拟文件系统思想"><a href="#虚拟文件系统思想" class="headerlink" title="虚拟文件系统思想"></a><strong>虚拟文件系统思想</strong></h2><blockquote><p>虚拟文件系统所隐含的思想是把表示很多不同种类文件系统的共同信息放入内核；其中有一个字段或函数来支持linux所支持的所有文件系统所提供的任何操作。<br>对所调用的每个读、写或其他函数，内核都能把他们替换成支持本地linux文件系统、NTFS文件系统或者文件所在的其他任何文件系统的实际函数。</p></blockquote><h2 id="我们需要知道什么？"><a href="#我们需要知道什么？" class="headerlink" title="我们需要知道什么？"></a><strong>我们需要知道什么？</strong></h2><blockquote><p>概括的说，本文主要讲虚拟文件系统的设计目标，结构及其实现：</p><ul><li>虚拟文件系统是什么？为什么要使用虚拟文件系统？怎么实现虚拟文件系统的？</li><li>虚拟文件系统的组成有哪些，在linux中处于什么样的层次，能不能画个原理图示意一下？</li><li>Linux中虚拟文件系统、磁盘/Flash文件系统及一般的设备文件与设备驱动程序之间的关系是什么样子的？</li><li>Linux文件操作的系统调用和C库文件操作的相关介绍</li><li>sysfs文件系统与Linux设备模型是什么？</li><li>linux文件系统中关键的结构体的介绍,inode结构体与file结构体</li></ul></blockquote><h2 id="虚拟文件系统概念"><a href="#虚拟文件系统概念" class="headerlink" title="虚拟文件系统概念"></a><strong>虚拟文件系统概念</strong></h2><p><code>虚拟文件系统</code>又称<code>虚拟文件系统转换（Virual Filesystem Switch ，简称VFS）</code>:</p><ul><li><strong>说它虚拟，是因为它所有的数据结构都是在运行以后才建立，并在卸载时删除，而在磁盘上并没有存储这些数据结构。</strong></li><li>如果只有VFS，系统是无法工作的，因为它的这些数据结构不能凭空而来，只有与实际的文件系统，如Ext2、Minix、MSDOS、VFAT 等相结合，才能开始工作，所以VFS 并不是一个真正的文件系统。</li><li>与VFS 相对应，我们称Ext2、Minix、MSDOS 等为<code>具体文件系统</code>。</li><li>是内核的一个软件层，用来处理与Unix标准文件系统相关的所有系统调用，也为各种文件系统提供一个通用的接口。</li></ul><h2 id="VFS-的作用"><a href="#VFS-的作用" class="headerlink" title="VFS 的作用"></a><strong>VFS 的作用</strong></h2><p>概括说来，VFS 主要有以下几个作用。</p><ol><li>对具体文件系统的数据结构进行抽象，以一种统一的数据结构进行管理。</li><li>接受用户层的系统调用，例如write、open、stat、link 等。</li><li>支持多种具体文件系统之间相互访问。</li><li>接受内核其他子系统的操作请求，特别是内存管理子系统。</li></ol><ul><li>VFS 提供一个统一的接口（实际上就是file_operatoin 数据结构），一个具体文件系统要想被Linux 支持，就必须按照这个接口编写自己的操作函数，而将自己的细节<br>对内核其他子系统隐藏起来。</li><li>因而，对内核其他子系统以及运行在操作系统之上的用户程序而言，所有的文件系统都是一样的。实际上，要支持一个新的文件系统，主要任务就是编写这些接口函数。</li></ul><center><img src="/2020/08/10/Linux-%E8%99%9A%E6%8B%9F%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F/Linux虚拟文件系统与整个软硬件系统的关系.png" width="70%" height="60%">  </center><center>图1. Linux虚拟文件系统与整个软硬件系统的关系</center><h2 id="文件系统的逻辑关系"><a href="#文件系统的逻辑关系" class="headerlink" title="文件系统的逻辑关系"></a><strong>文件系统的逻辑关系</strong></h2><p>VFS 称为内核的一个子系统，其他子系统只与VFS 打交道，而并不与具体文件系统发生联系。对具体文件系统来说，VFS 是一个管理者，而<br>对内核的其他子系统来说，VFS 是它们与具体文件系统的一个接口，整个Linux 中文件系统的逻辑关系如图2所示。</p><center><img src="/2020/08/10/Linux-%E8%99%9A%E6%8B%9F%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F/Linux中文件系统的逻辑关系示意图.JPG">  </center><center>图2. Linux中文件系统的逻辑关系示意图</center><h2 id="文件系统与设备驱动之间的关系"><a href="#文件系统与设备驱动之间的关系" class="headerlink" title="文件系统与设备驱动之间的关系"></a>文件系统与设备驱动之间的关系</h2><p>Linux中虚拟文件系统、磁盘/Flash文件系统及一般的设备文件与设备驱动程序之间的关系。</p><center><img src="/2020/08/10/Linux-%E8%99%9A%E6%8B%9F%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F/文件系统与设备驱动之间的关系.GIF" width="60%" height="60%">  </center><center>图3. 文件系统与设备驱动之间的关系</center><p>应用程序和VFS之间的接口是系统调用，而VFS与文件系统以及设备文件之间的接口是file_operations结构体成员函数，这个结构体包含对文件进行打开、关闭、读写、控制的一系列成员函数</p><p>由于字符设备的上层没有类似于磁盘的ext2等文件系统，所以字符设备的file_operations成员函数就直接由设备驱动提供了。</p><p>块设备有两种访问方法</p><ul><li>一种方法是不通过文件系统直接访问裸设备<ul><li>在Linux内核实现了统一的def_blk_fops这一file_operations，它的源代码位于fs/block_dev.c，所以当我们运行类似于“dd if=/dev/sdb1of=sdb1.img”的命令</li><li>把整个/dev/sdb1裸分区复制到sdb1.img的时候，内核走的是def_blk_fops这个file_operations；</li></ul></li><li>另外一种方法是通过文件系统来访问块设备<ul><li>file_operations的实现则位于文件系统内，文件系统会把针对文件的读写转换为针对块设备原始扇区的读写。</li><li>ext2、fat、Btrfs等文件系统中会实现针对VFS的file_operations成员函数，设备驱动层将看不到file_operations的存在。</li></ul></li></ul><center><img src="/2020/08/10/Linux-%E8%99%9A%E6%8B%9F%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F/应用程序、VFS与设备驱动.GIF" width="60%" height="60%">  </center><center>图4. 应用程序、VFS与设备驱动</center><h2 id="VFS支持的文件系统"><a href="#VFS支持的文件系统" class="headerlink" title="VFS支持的文件系统"></a><strong>VFS支持的文件系统</strong></h2><p>VFS支持的文件系统可以划分为三种主要类型：</p><div class="tabs is-toggle"><ul><li class="is-active"><a onclick="onTabClick(event)"><span>磁盘文件系统</span></a></li><li><a onclick="onTabClick(event)"><span>网络文件系统</span></a></li><li><a onclick="onTabClick(event)"><span>特殊文件系统</span></a></li></ul></div><div id="磁盘文件系统" class="tab-content" style="display: block;"><ul><li>这些文件系统管理在本地磁盘分区中可用的存储空间或者其他可以起到磁盘作用的设备（比如USB闪存）。</li></ul></div><div id="网络文件系统" class="tab-content"><li>这些文件系统允许轻易的访问属于其他网络计算机的文件系统所包含的文件。</li><li>比如NFS,CIFS(用于微软Windows的通用网络系统)</li></div><div id="特殊文件系统" class="tab-content"><li>这些文件系统不管理本地或者远程磁盘空间。</li><li>比如<code>/proc、/sys、/dev等文件系统</code>。</li></div><style type="text/css">.content .tabs ul { margin: 0; }.tab-content { display: none; }</style><script>function onTabClick (event) {    var tabTitle = $(event.currentTarget).children('span:last-child').text();    $('.article .content .tab-content').css('display', 'none');    $('.article .content .tabs li').removeClass('is-active');    $('#' + tabTitle).css('display', 'block');    $(event.currentTarget).parent().addClass('is-active');}</script><h2 id="VFS处理的系统调用"><a href="#VFS处理的系统调用" class="headerlink" title="VFS处理的系统调用"></a><strong>VFS处理的系统调用</strong></h2><p>VFS 处理的系统调用涉及文件系统、常规文件、目录及符号链接，还有一些特殊的系统调用，如下所示：</p><ul><li>涉及设备文件和管道文件的系统调用，诸如ioperm( )、ioctl( )、pipe( )和mknod( )，</li><li>套接字系统调用，诸如socket( )、connect( )、bind( )和 protocols( )。</li></ul><p>VFS 的部分系统调用：</p><figure class="highlight bash"><figcaption><span>点击展开系统调用列表 >folded</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">mount( )/ umount( )                                     安装/卸载文件系统</span><br><span class="line">sysfs( )                                                获取文件系统信息</span><br><span class="line">statfs( )/ fstatfs( ) /ustat( )                         获取文件系统统计信息</span><br><span class="line">chroot( )                                               更改根目录</span><br><span class="line"><span class="built_in">chdir</span>( ) /fchdir( ) /getcwd( )                          更改当前目录</span><br><span class="line">mkdir( ) /rmdir( )                                      创建/删除目录</span><br><span class="line">getdents( ) /readdir( )/ link( ) unlink( )/rename( )    对目录项进行操作</span><br><span class="line">readlink( ) /symlink( )                                 对软链接进行操作</span><br><span class="line">chown( ) /fchown( ) /lchown( )                          更改文件所有者</span><br><span class="line">chmod( )/ fchmod( ) /utime( )                           更改文件属性</span><br><span class="line"><span class="built_in">stat</span>( ) /fstat( ) /lstat( ) access( )                   读取文件状态</span><br><span class="line">open( ) /close( ) /creat( ) /<span class="built_in">umask</span>( )                   打开/关闭文件</span><br><span class="line">dup( ) /dup2( ) /fcntl( )                               对文件描述符进行操作</span><br><span class="line">select( ) /poll( )                                      异步I/O 通信</span><br><span class="line">truncate( ) /ftruncate( )                               更改文件长度</span><br><span class="line">lseek( ) /_llseek( )                                    更改文件指针</span><br><span class="line"><span class="built_in">read</span>( )/ write( ) /readv( ) /writev( )/sendfile( )      文件I/O 操作</span><br><span class="line">pread( )/ pwrite( )                                     搜索并访问文件</span><br><span class="line">mmap( ) /munmap( )                                      文件内存映射</span><br><span class="line">fdatasync( ) /fsync( ) /sync( )/ msync( )               同步访问文件数据</span><br><span class="line">flock( )                                                处理文件锁</span><br></pre></td></tr></table></figure><h2 id="VFS-中的数据结构"><a href="#VFS-中的数据结构" class="headerlink" title="VFS 中的数据结构"></a><strong>VFS 中的数据结构</strong></h2><p>虚拟文件系统模型的实现方式：</p><ul><li>虚拟文件系统所隐含的主要思想在于引入了一个<code>通用的文件模型</code>，这个模型能够表示所有支持的文件系统。</li><li>该模型严格遵守传统UNIX 文件系统提供的文件模型。</li><li>你可以把通用文件模型看作是面向对象的，在这里，对象是一个软件结构，其中既定义了数据结构也定义了其上的操作方法。</li><li>出于效率的考虑，Linux 的编码并未采用面向对象的程序设计语言（比如C++）。因此<strong>通用文件模型对象作为数据结构来实现：数据结构中指向函数的域就对应于对象的方法。</strong></li></ul><p>通用文件模型由下列对象类型组成：</p><ul><li><strong><code>超级块（superblock）对象</code>：存放系统中已安装文件系统的有关信息。</strong><ul><li>对于基于磁盘文件系统，这类对象通常对应于存放在磁盘上的<code>文件系统控制块（filesystem control block）</code>，也就是说，每个文件系统都有一个超级块对象。</li><li>很多具体文件系统中都有超级块结构，超级块是这些文件系统中最重要的数据结构，它是来描述整个文件系统信息的，是一个全局的数据结构。</li><li><span class="icon has-text-warning"><i class="fas fa-exclamation-triangle"></i></span>注意：Minix、Ext2 等有超级块，VFS 也有超级块，为了避免与后面介绍的Ext2 超级块发生混淆，这里用VFS 超级块来表示。</li><li>VFS 超级块是各种具体文件系统在安装时建立的，并在这些文件系统卸载时自动删除，可见，VFS 超级块确实只存在于内存中，同时<span class="icon has-text-warning"><br><i class="fas fa-exclamation-triangle"></i></span>提到VFS 超级块也应该说成是哪个具体文件系统的VFS超级块。</li></ul></li><li><strong><code>索引节点（inode）对象</code>：存放关于具体文件的一般信息。</strong><ul><li>对于基于磁盘的文件系统，这类对象通常对应于存放在磁盘上的<code>文件控制块（file control block）</code>，也就是说，每个文件都有一个索引节点对象。每个索引节点对象都有一个索引节点号，这个号唯一地标识某个文件系统中的指定文件。</li><li><span class="icon has-text-warning"><i class="fas fa-exclamation-triangle"></i></span>强调一点，<code>具体文件系统的索引节点</code>是存储在磁盘上的，是一种<code>静态结构</code>，要使用它，必须调入内存，填写VFS 的索引节点，因此，也称<code>VFS索引节点</code>为<code>动态节点</code>。</li></ul></li><li><strong><code>目录项（dentry）对象</code>：存放目录项与对应文件进行链接的信息。</strong><ul><li>每个文件除了有一个索引节点inode 数据结构外，还有一个目录项dentry（directoryenrty）数据结构。dentry 结构中有个d_inode 指针指向相应的inode 结构。</li><li>VFS 把每个目录看作一个由若干子目录和文件组成的常规文件。例如，在查找路径名/tmp/test 时，内核为根目录“/”创建一个目录项对象，为根目录下的tmp 项创建一个第2 级目录项对象，为/tmp目录下的test 项创建一个第3 级目录项对象。</li><li>每个磁盘文件系统都以自己特有的方式将该类信息存在磁盘上。</li><li></li></ul></li><li><strong><code>文件（file）对象</code>：存放打开文件与进程之间进行交互的有关信息。</strong><ul><li>这类信息仅当进程访问文件期间存在于内存中。</li></ul></li></ul><article class="message is-info"><div class="message-header"><p>既然inode 结构和dentry 结构都是对文件各方面属性的描述，那为什么不把这两个结构“合二为一”呢？</p></div><div class="message-body"><p>这是因为二者所描述的目标不同，<code>dentry</code>结构代表的是逻辑意义上的文件，所描述的是文件逻辑上的属性，因此，目录项对象在磁盘上并没有对应的映像；而<code>inode</code>结构代表的是物理意义上的文件，记录的是物理上的属性，对于一个具体的文件系统（如Ext2），Ext2_ inode 结构在磁盘上就有对应的映像。所以说，<strong>一个索引节点对象可能对应多个目录项对象</strong>。</p></div></article><p>超级块、索引节点、目录项及文件的数据结构，它们的共同特点有两个：</p><ul><li>充分考虑到对多种具体文件系统的兼容性；</li><li>是“虚”的，也就是说只能存在于内存。</li></ul><p>这正体现了VFS 的特点</p><h2 id="进程与VFS对象的交互"><a href="#进程与VFS对象的交互" class="headerlink" title="进程与VFS对象的交互"></a><strong>进程与VFS对象的交互</strong></h2><h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a><strong>示例</strong></h3><p>下图是一个简单的示例，对进程与文件之间的交互过程进行了说明：</p><ul><li>三个不同的进程已经打开同一个文件，其中两个进程已经使用同一个硬链接。</li><li>每个进程都使用自己的文件对象，但是因为两个进程共有硬链接的关系，我们只需要两个目录项对象，每个硬链接对应一个目录项对象。</li><li>然后这两个目录项对象指向同一个索引节点对象，该索引节点对象标识超级块对象，以及随后的普通磁盘文件。</li></ul><center><img src="/2020/08/10/Linux-%E8%99%9A%E6%8B%9F%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F/进程与VFS对象的交互.gif" width="60%" height="60%">  </center><center>进程与VFS对象的交互</center><p><strong>说明：</strong></p><ul><li>最近最常使用的目录项对象被放在所谓目录项高速缓存的磁盘高速缓存中，以加速从文件路径名到最后一个路径分量的索引节点的转换过程</li></ul><h3 id="磁盘高速缓存"><a href="#磁盘高速缓存" class="headerlink" title="磁盘高速缓存"></a><strong>磁盘高速缓存</strong></h3><ul><li>一般说来，磁盘高速缓存属于软件机制，它允许内核将原本存在磁盘上的某些信息保存在RAM中，以便对这些数据的进一步访问能快速进行，而不必慢速访问磁盘本身。</li><li>除了目录项高速缓存，索引结点高速缓存之外，Linux还使用其他磁盘高速缓存，其中最重要的一种的页高速缓存。</li></ul><article class="message is-info"><div class="message-header"><p>磁盘高速缓存，硬件高速缓存与内存高速缓存直接之间的区别</p></div><div class="message-body"><p><strong>硬件高速缓存</strong>是一个快速的静态的RAM，它加快了对慢速动态RAM的请求。<br><strong>内存高速缓存</strong>是一种软件机制，引入它是为了绕过内核内存分配器。<br>与磁盘高速缓存不同，上述两者都与磁盘或其他设备无关。</p></div></article><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a><strong>参考资料</strong></h2><p>《Linux设备驱动开发详解：基于最新的Linux4.0内核》<br>《深入分析Linux内核源代码》<br>《深入理解Linux内核》</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;linux设计思想&quot;&gt;&lt;a href=&quot;#linux设计思想&quot; class=&quot;headerlink&quot; title=&quot;linux设计思想&quot;&gt;&lt;/a&gt;&lt;strong&gt;linux设计思想&lt;/strong&gt;&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;Linux作为一个最著名的自由软件，几乎处处体现了“自由”的思想，你可以编译适合自己系统要求的内核，或者轻松添加别人开发的新的模块。只要你有实力，你还可以自己写一个新的Linux 支持的文件系统。&lt;br&gt;Linux 不仅支持多种文件系统，而且还支持这些文件系统相互之间进行访问。Linux成功的关键因素之一是它具有与其他操作系统和谐共存的能力，你能够透明的安装具有其他操作系统文件格式的磁盘分区（比如Windows系统）。这一切都要归功于神奇的虚拟文件系统。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="Linux" scheme="https://stemha.github.io/categories/Linux/"/>
    
    
      <category term="Linux" scheme="https://stemha.github.io/tags/Linux/"/>
    
      <category term="内核" scheme="https://stemha.github.io/tags/%E5%86%85%E6%A0%B8/"/>
    
      <category term="虚拟文件系统" scheme="https://stemha.github.io/tags/%E8%99%9A%E6%8B%9F%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F/"/>
    
      <category term="VFS" scheme="https://stemha.github.io/tags/VFS/"/>
    
  </entry>
  
  <entry>
    <title>（阅读笔记）网络信息空间的大数据计算</title>
    <link href="https://stemha.github.io/2020/07/22/%EF%BC%88%E7%AC%94%E8%AE%B0%EF%BC%89%E7%BD%91%E7%BB%9C%E4%BF%A1%E6%81%AF%E7%A9%BA%E9%97%B4%E7%9A%84%E5%A4%A7%E6%95%B0%E6%8D%AE%E8%AE%A1%E7%AE%97/"/>
    <id>https://stemha.github.io/2020/07/22/%EF%BC%88%E7%AC%94%E8%AE%B0%EF%BC%89%E7%BD%91%E7%BB%9C%E4%BF%A1%E6%81%AF%E7%A9%BA%E9%97%B4%E7%9A%84%E5%A4%A7%E6%95%B0%E6%8D%AE%E8%AE%A1%E7%AE%97/</id>
    <published>2020-07-22T15:38:45.000Z</published>
    <updated>2020-08-10T04:19:21.759Z</updated>
    
    <content type="html"><![CDATA[<h2 id="原文介绍"><a href="#原文介绍" class="headerlink" title="原文介绍"></a>原文介绍</h2><pre><code>网络信息空间的大数据计算 作者：胡春明、马帅、怀进鹏 ，中国计算机学会通讯</code></pre><h2 id="我们需要知道什么？"><a href="#我们需要知道什么？" class="headerlink" title="我们需要知道什么？"></a><strong>我们需要知道什么？</strong></h2><blockquote><p>大数据有什么特征？怎么产生的？这些特征带来了哪些影响？大数据时代的研究方法是不是要变化一下？有了大数据，我们需要用它来做计算，那么大数据计算在不同的层次（数据-算法-系统）又会遇到什么样的挑战？</p></blockquote><a id="more"></a><h2 id="大数据的特征"><a href="#大数据的特征" class="headerlink" title="大数据的特征"></a><strong>大数据的特征</strong></h2><p>通常认为大数据具有“4V”特征：</p><ul><li><code>Volume</code>：规模庞大</li><li><code>Variety</code>：种类繁多</li><li><code>Velocity</code>：变化频繁</li><li><code>Value</code>：价值巨大但价值密度低。</li><li>谐音：大多变价了</li></ul><p>这些特征有什么影响吗？</p><blockquote><p>这些特征对发现事实、揭示规律并预测未来提出了新的挑战，并将对已有计算模式、理论和方法产生深远的影响。</p></blockquote><h2 id="传统数据到大数据时代的研究方法论变化"><a href="#传统数据到大数据时代的研究方法论变化" class="headerlink" title="传统数据到大数据时代的研究方法论变化"></a><strong>传统数据到大数据时代的研究方法论变化</strong></h2><p>首先，网络信息空间大数据数量庞大，数据的统计特征分布不均匀。<code>（采样精度问题）</code></p><ul><li>在传统的采样方法中，样本选取的差异在减少计算量的同时可能会引入结果的不确定性，<strong>采样的质量和精确性都会对计算结果产生影响</strong>。</li><li>但是，在大数据的计算中，对单一数据项和分析算法的<strong>精确性要求不再苛刻，通过对大量数据的分析处理能够有效弥补传统抽样方法的局限（也就是上面黑体标出的局限）。</strong></li></ul><p>其次，大数据种类繁多，变化频繁。<code>（分类问题）</code></p><ul><li>已有的计算模式往往通过预先确定的分类方法降低问题的难度和规模，提高预测的准确性。//<strong>传统方法通过分类来处理</strong></li><li>而在大数据计算中，数据的持续更新可能难以形成稳定的分类，不仅要考虑可分类条件下的精确算法，还要考虑动态数据下的增量算法。//<strong>大数据难以形成稳定的分类，需要考虑更多，比如动态数据的增量算法。</strong></li></ul><p>最后，大数据研究不同于传统的逻辑推理研究，是对巨大的数据做统计分析和归纳。<code>（推理与统计归纳问题）</code></p><ul><li>传统的确定性问题往往通过自顶向下的还原方法，逐步分解并加以研究。//<strong>传统的是自顶向下的还原出问题</strong></li><li>而对多源异构大数据相关问题的研究不仅需要还原方法，还需要自底向上的归纳方法，通过关联关系补充因果关系的不足，实现多源数据和多种计算方法的有效融合。//<strong>不仅需要自顶部向下的还原，还需要自底向上的归纳</strong></li></ul><h2 id="大数据计算的特征"><a href="#大数据计算的特征" class="headerlink" title="大数据计算的特征"></a><strong>大数据计算的特征</strong></h2><p>文章作者自己又总结了大数据计算的特征。<br>大数据计算具有“<strong>近似处理、增量计算、多源归纳</strong>”的计算属性，并可进一步归纳为大数据计算的“3I”特征</p><ul><li><code>近似性(Inexact)</code></li><li><code>增量性(Incremental)</code></li><li><code>归纳性(Inductive)</code></li></ul><h2 id="大数据计算特征在不同层次带来的挑战"><a href="#大数据计算特征在不同层次带来的挑战" class="headerlink" title="大数据计算特征在不同层次带来的挑战"></a><strong>大数据计算特征在不同层次带来的挑战</strong></h2><p>三个特性分别在数据层面、算法层面和系统层面给大数据计算带来了“可表示”“可计算”和“可操作”三大问题。</p><h3 id="近似性-Inexact-挑战"><a href="#近似性-Inexact-挑战" class="headerlink" title="近似性(Inexact)挑战"></a><strong>近似性(Inexact)挑战</strong></h3><p>传统计算复杂性理论认为的易解问题在大数据时代下已成为难解问题。<br>由于数据本身的异构和噪声，很难按照传统精确处理的思路来进行大数据的挖掘。<br>此外，许多应用需求旨在寻找数据间的潜在关联关系和宏观趋势特征，允许解的质量在一定区间内近似。</p><p>因此，从数据层面，需要综合考虑数据的语义特征、结构特征与质量特征，理解并量化度量数据的价值分布；<br>从算法理论层面，需要建立大数据下的算法复杂性理论及近似算法理论，识别数据量对算法质量的关联关系；<br>从系统层面，需要<strong>设计满足用户需求的非精确计算架构，达到用户需求与计算效能的均衡</strong></p><h3 id="增量性-Incremental-挑战"><a href="#增量性-Incremental-挑战" class="headerlink" title="增量性(Incremental)挑战"></a><strong>增量性(Incremental)挑战</strong></h3><p>网络信息空间大数据动态持续产生，不断更新，很难形成大数据的统一视图。<br>此外，许多大数据处理对实时性要求越来越高，全量式的批处理和迭代处理方式在时间上难以满足需求，增量式处理成为一种解决办法。</p><p>例子：</p><ul><li>例如，百度智能搜索涉及近万亿的网页，大量网页频繁更新，在构建搜索索引和获取用户查询结果时，很难及时对近千PB(1PB=1015B)网页数据进行全量计算；（难以从头全部计算一遍，最好是根据增量的数据来计算调整结果，有一点像控制论的思想）</li><li>再如突发事件预警需要业务用户对数据进行长期、频繁地探索，并根据不断更新的结果对数据源、分析方法和计算过程等要素进行调整，以获得更准确及时的结果。</li></ul><p>因此，从数据层面，需要量化度量数据的动态复杂性；<br>从算法理论层面，需要考虑数据动态性及其对解的质量的影响，并设计增量式处理算法；<br>从系统层面，需要<strong>设计支持增量计算的存储和处理架构及相关机制</strong>。</p><h3 id="归纳性-Inductive-挑战"><a href="#归纳性-Inductive-挑战" class="headerlink" title="归纳性(Inductive)挑战"></a><strong>归纳性(Inductive)挑战</strong></h3><p>大数据的多源异构特征对网络信息空间数据挖掘提出新挑战并带来机遇。<br>寻找同一实体在多源数据之间的潜在关联性，有助于进一步规避数据中的噪声干扰，并通过多源数据处理的智能归纳融合，修正非精确数据处理引入的偏差，同时获得比单一数据源更好的处理效果。</p><blockquote><p>大数据下单一源头数据计算的结果可能不准确，可以依靠别的数据源的结果来进行修正</p></blockquote><p>例子：</p><ul><li>百度根据用户的搜索日志及其在“百度贴吧”和“百度知道”等不同产品线中提交的数据进行归纳融合，建立用户行为模型，可提供更为准确的个性化搜索结果。</li></ul><p>因此，从数据层面，一方面要研究多源异构数据的表示、度量与语义理解方法，努力减少多源异构数据带来的难题，另一方面需要关注多源数据间的潜在关联性和融合方法；<br>从算法层面，需要寻找新的多源数据处理和智能归纳融合算法，并提高算法精度及效率；<br>从系统层面，需要研究多源数据间可迁移学习的数据挖掘新方法，探索融合机器挖掘和人群分析的多种数据处理机制。</p><h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a><strong>参考文献</strong></h2><p>网络信息空间的大数据计算 作者：胡春明、马帅、怀进鹏</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;原文介绍&quot;&gt;&lt;a href=&quot;#原文介绍&quot; class=&quot;headerlink&quot; title=&quot;原文介绍&quot;&gt;&lt;/a&gt;原文介绍&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;网络信息空间的大数据计算 作者：胡春明、马帅、怀进鹏 ，中国计算机学会通讯&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&quot;我们需要知道什么？&quot;&gt;&lt;a href=&quot;#我们需要知道什么？&quot; class=&quot;headerlink&quot; title=&quot;我们需要知道什么？&quot;&gt;&lt;/a&gt;&lt;strong&gt;我们需要知道什么？&lt;/strong&gt;&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;大数据有什么特征？怎么产生的？这些特征带来了哪些影响？大数据时代的研究方法是不是要变化一下？有了大数据，我们需要用它来做计算，那么大数据计算在不同的层次（数据-算法-系统）又会遇到什么样的挑战？&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="课外学术阅读" scheme="https://stemha.github.io/categories/%E8%AF%BE%E5%A4%96%E5%AD%A6%E6%9C%AF%E9%98%85%E8%AF%BB/"/>
    
    
      <category term="大数据" scheme="https://stemha.github.io/tags/%E5%A4%A7%E6%95%B0%E6%8D%AE/"/>
    
      <category term="挑战" scheme="https://stemha.github.io/tags/%E6%8C%91%E6%88%98/"/>
    
      <category term="大数据计算" scheme="https://stemha.github.io/tags/%E5%A4%A7%E6%95%B0%E6%8D%AE%E8%AE%A1%E7%AE%97/"/>
    
      <category term="研究方法论" scheme="https://stemha.github.io/tags/%E7%A0%94%E7%A9%B6%E6%96%B9%E6%B3%95%E8%AE%BA/"/>
    
      <category term="阅读笔记" scheme="https://stemha.github.io/tags/%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>Linux-信号</title>
    <link href="https://stemha.github.io/2020/07/14/Linux-%E4%BF%A1%E5%8F%B7/"/>
    <id>https://stemha.github.io/2020/07/14/Linux-%E4%BF%A1%E5%8F%B7/</id>
    <published>2020-07-14T15:24:42.000Z</published>
    <updated>2020-08-10T04:19:21.241Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a><strong>前言</strong></h2><p>信号是什么？</p><pre><code>信号(signal)是很短的消息（通常是一个数，以此来标识信号），可以被发送到一个进程或一组进程。</code></pre><p>信号可以干什么？</p><pre><code>信号在最早的Unix系统中即被引入，用于在用户态进程间通信。内核也用信号通知进程系统所发生的事件。</code></pre><a id="more"></a><h2 id="信号的作用"><a href="#信号的作用" class="headerlink" title="信号的作用"></a><strong>信号的作用</strong></h2><p>名字前缀为SIG的一组宏用来标识信号：比如当一个进程引用无效的内存时，SIGSEGV宏产生发送给进程的信号标识符。</p><p>使用信号的两个主要目的是：</p><ol><li>让进程知道已经发生了一个特定的事件。</li><li>强迫进程执行它自己代码中的信号处理程序。</li></ol><p>这两个目的不是互斥的，因为进程经常通过执行一个特定的例程来对某一事件做出反应。</p><h2 id="查看所有信号"><a href="#查看所有信号" class="headerlink" title="查看所有信号"></a><strong>查看所有信号</strong></h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$kill</span> -l</span><br><span class="line"> 1) SIGHUP 2) SIGINT 3) SIGQUIT 4) SIGILL 5) SIGTRAP</span><br><span class="line"> 6) SIGABRT 7) SIGBUS 8) SIGFPE 9) SIGKILL10) SIGUSR1</span><br><span class="line">11) SIGSEGV12) SIGUSR213) SIGPIPE14) SIGALRM15) SIGTERM</span><br><span class="line">16) SIGSTKFLT17) SIGCHLD18) SIGCONT19) SIGSTOP20) SIGTSTP</span><br><span class="line">21) SIGTTIN22) SIGTTOU23) SIGURG24) SIGXCPU25) SIGXFSZ</span><br><span class="line">26) SIGVTALRM27) SIGPROF28) SIGWINCH29) SIGIO30) SIGPWR</span><br><span class="line">31) SIGSYS34) SIGRTMIN35) SIGRTMIN+136) SIGRTMIN+237) SIGRTMIN+3</span><br><span class="line">38) SIGRTMIN+439) SIGRTMIN+540) SIGRTMIN+641) SIGRTMIN+742) SIGRTMIN+8</span><br><span class="line">43) SIGRTMIN+944) SIGRTMIN+1045) SIGRTMIN+1146) SIGRTMIN+1247) SIGRTMIN+13</span><br><span class="line">48) SIGRTMIN+1449) SIGRTMIN+1550) SIGRTMAX-1451) SIGRTMAX-1352) SIGRTMAX-12</span><br><span class="line">53) SIGRTMAX-1154) SIGRTMAX-1055) SIGRTMAX-956) SIGRTMAX-857) SIGRTMAX-7</span><br><span class="line">58) SIGRTMAX-659) SIGRTMAX-560) SIGRTMAX-461) SIGRTMAX-362) SIGRTMAX-2</span><br><span class="line">63) SIGRTMAX-164) SIGRTMAX</span><br></pre></td></tr></table></figure><h2 id="信号的分类"><a href="#信号的分类" class="headerlink" title="信号的分类"></a><strong>信号的分类</strong></h2><p><code>常规信号(regular signal)</code>：</p><ul><li>编号为1 ~ 31的信号为传统UNIX支持的信号，是不可靠信号(非实时的)</li><li>如果一个常规信号被连续发送多次，那么，只有其中的一个发送到接收进程。</li></ul><p><code>实时信号(real-time signal)</code>：</p><ul><li>编号为32 ~ 64的信号是后来扩充的，称做可靠信号(实时信号)。</li><li>必须排队以便发送的多个信号能被接收到。</li><li>尽管Linux内核并不使用实时信号，它还是通过几个特定的系统调用完全实现了POSIX标准。</li></ul><p>可以从两个不同的分类角度对信号进行分类：</p><ul><li>可靠性方面：可靠信号与不可靠信号；<ul><li>不可靠信号和可靠信号的区别在于前者不支持排队，可能会造成信号丢失，而后者不会。</li></ul></li><li>与时间的关系上：实时信号与非实时信号。</li></ul><h2 id="Linux中的前31个信号"><a href="#Linux中的前31个信号" class="headerlink" title="Linux中的前31个信号"></a><strong>Linux中的前31个信号</strong></h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">编号 信号名称       缺省操作    解释                  POSIX</span><br><span class="line"><span class="number">1</span>    SIGHUP      Terminate  挂起控制终或进程        是</span><br><span class="line"><span class="number">2</span>    SIGINT      Terminate  来自键盘的中断          是</span><br><span class="line"><span class="number">3</span>    SIGQUIT     Dump       从键盘退出             是</span><br><span class="line"><span class="number">4</span>    SIGILL      Dump       非法指令               是</span><br><span class="line"><span class="number">5</span>    SIGTRAP     Dump       跟踪的断点             否</span><br><span class="line"><span class="number">6</span>    SIGABRT     Dump       异常结束               是</span><br><span class="line"><span class="number">6</span>    SIGIOT      Dump       等价于SIGABRT          否</span><br><span class="line"><span class="number">7</span>    SIGBUS      Dump       总线错误               否</span><br><span class="line"><span class="number">8</span>    SIGFPE      Dump       浮点异常               是</span><br><span class="line"><span class="number">9</span>    SIGKILL     Terminate  强迫进程终止           是</span><br><span class="line"><span class="number">10</span>   SIGUSR1     Terminate  对进程可用             是</span><br><span class="line"><span class="number">11</span>   SIGSEGV     Dump       无效的内存引用         是</span><br><span class="line"><span class="number">12</span>   SIGUSR2     Terminate  对进程可用             是</span><br><span class="line"><span class="number">13</span>   SIGPIPE     Terminate  向无读者的管道写       是</span><br><span class="line"><span class="number">14</span>   SIGALRM     Terminate  实时定时器时钟         是</span><br><span class="line"><span class="number">15</span>   SIGTERM     Terminate  进程终止               是</span><br><span class="line"><span class="number">16</span>   SIGSTKFLT   Terminate  协处理器栈错误         否</span><br><span class="line"><span class="number">17</span>   SIGCHLD     Ignore     子进程停止、结束或在被跟踪时获得信号 是</span><br><span class="line"><span class="number">18</span>   SIGCONT     Continue   如果已经停止则恢复执行 是</span><br><span class="line"><span class="number">19</span>   SIGSTOP     Stop       停止进程执行           是</span><br><span class="line"><span class="number">20</span>   SIGSTP      Stop       从tty发出停止进程      是</span><br><span class="line"><span class="number">21</span>   SIGTTIN     Stop       后台进程请求输入       是</span><br><span class="line"><span class="number">22</span>   SIGTTOU     Stop       后台进程请求输出       是</span><br><span class="line"><span class="number">23</span>   SIGURG      Ignore     套接字上的紧急条件     否</span><br><span class="line"><span class="number">24</span>   SIGXCPU     Dump       超过CPU时限            否</span><br><span class="line"><span class="number">25</span>   SIGXFSZ     Dump       超过文件大小的限制     否</span><br><span class="line"><span class="number">26</span>   SIGVTALRM   Terminate  虚拟定时器时钟         否</span><br><span class="line"><span class="number">27</span>   SIGPROF     Terminate  概况定时器时钟         否</span><br><span class="line"><span class="number">28</span>   SIGWINCH    Ignore     窗口调整大小           否</span><br><span class="line"><span class="number">29</span>   SIGIO       Terminate  I/O现在可能发生        否</span><br><span class="line"><span class="number">30</span>   SIGPWR      Terminate  等价于SIGIO            否</span><br><span class="line"><span class="number">31</span>   SIGSYS      Dump       坏的系统调用           否</span><br><span class="line"><span class="number">31</span>   SIGUNUSED   Dump       等价于SIGSYS           否</span><br></pre></td></tr></table></figure><h2 id="与信号相关的最重要的系统调用"><a href="#与信号相关的最重要的系统调用" class="headerlink" title="与信号相关的最重要的系统调用"></a><strong>与信号相关的最重要的系统调用</strong></h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">kill()              向线程组发送一个信号</span><br><span class="line">tkill()             向进程发送一个信号</span><br><span class="line">tgkill()            向一个特定线程组中的进程发送信号</span><br><span class="line">sigaction()         改变与信号相关的操作</span><br><span class="line">signal()            类似于sigaction()</span><br><span class="line">sigpending()        检查是否有挂起信号</span><br><span class="line">sigprocmask()       改动堵塞信号的集合</span><br><span class="line">sigsuspend()        等待一个信号</span><br><span class="line">rt_sigaction()      改变与实时信号相关的操作</span><br><span class="line">rt_sigpending()     检测是否挂起实时信号</span><br><span class="line">rt_sigprocmask()    修改阻塞的实时信号的集合</span><br><span class="line">rt_sigqueueinfo()   向线程组发送一个实时信号</span><br><span class="line">rt_sigsuspend()     等待一个实时信号</span><br><span class="line">rt_sigtimedwait()   类似于rt_sigsuspend()</span><br></pre></td></tr></table></figure><h2 id="信号的传递"><a href="#信号的传递" class="headerlink" title="信号的传递"></a><strong>信号的传递</strong></h2><p>信号的一个重要特点是它们可以随时被发送给状态经常不可预知的进程。</p><ul><li>发送给非运行进程的信号必须由内核保存，直到进程恢复执行。阻塞一个信号要求信号的传递拖延，直到随后解除阻塞，这使得信号产生一段时间之后才能对其传递这一问题变得更加严重。</li></ul><p>因此，内核区分信号传递的两个不同阶段：</p><ul><li><code>信号产生</code>：内核更新目标进程的数据结构以表示一个新信号已被发送。</li><li><code>信号传递</code>：内核强迫目标进程通过以下方式对信号做出反应：或改变目标进程的执行状态，或开始执行一个特定的信号处理程序，或两者都是。</li></ul><p>每个所产生的信号至多被传递一次。信号是可消费资源：一旦它们已传递出去，进程描述符中有关这个信号的所有信息都被取消。</p><p>一般来说，信号可以保留不可预知的挂起时间。必须考虑下列因素：</p><ul><li>信号通常只被当前正运行的进程传递(即由current进程传递)。</li><li>给定类型的信号可以由进程选择性地阻塞(blocked)。这种情况下，在取消阻塞前进程将不接收这个信号。 </li><li>当进程执行一个信号处理程序的函数时，通常“屏蔽”相应的信号，即自动阻塞这个信号直到处理程序结束。因此，所处理的信号另一次出现不能中断信号处理程序，所以，信号处理函数不必是可重入的。</li></ul><p><code>挂起信号(pending signal)</code>：已经产生但还没有传递的信号称为挂起信号。</p><ul><li>不论什么时候，对于某个常规类型的信号，一个进程仅存在其一个挂起信号。同一进程同种类型的其它信号不被排队，仅仅被简单的丢弃。</li><li>可是，对于实时信号时不同的,其同种类型的挂起信号能够多个。</li></ul><p>尽管信号的表示比较直观，但内核的实现相当复杂。内核必须：</p><ul><li>记住每个进程阻塞哪些信号。</li><li>当从内核态切换到用户态时，对任何一个进程都要检查是否有一个信号已到达。这几乎在每个定时中断时都发生(大约每毫秒发生一次)。</li><li>确定是否可以忽略信号。这发生在下列所有的条件都满足时：<ul><li>目标进程没有被另一个进程跟踪(进程描述符中ptrace字段的PT_PTRACED标志等于0)。</li><li>信号没有被目标进程阻塞。</li><li>信号被目标进程忽略(或者因为进程已显示地忽略了信号，或者因为进程没有改变信号的缺省操作且这个缺省操作就是“忽略”)。</li><li>处理这样的信号，即信号可能在进程运行期间的任一时刻请求把进程切换到一个信号处理函数，并在这个函数返回以后恢复原来执行的上下文。</li></ul></li></ul><h2 id="传递信号之前所执行的操作"><a href="#传递信号之前所执行的操作" class="headerlink" title="传递信号之前所执行的操作"></a><strong>传递信号之前所执行的操作</strong></h2><p><code>进程应答</code>,进程以三种方式对一个信号做出应答：</p><ol><li>显示地忽略信号。</li><li>执行与信号相关的缺省操作。由内核预定义的缺省操作取决于信号的类型，可以是下列类型之一：<ul><li>Terminate：进程被终止(杀死)。</li><li>Dump：进程被终止(杀死)，并且，如果可能，创建包含进程执行上下文的核心转储文件。这个文件可以用于调试。</li><li>Ignore：信号被忽略。</li><li>Stop：进程被停止，即把进程置为TASK_STOPPED状态。</li><li>Continue：如果进程被停止(TASK_STOPPED)，就把它置为TASK_RUNNING状态。</li></ul></li><li>通过调用相应的信号处理函数捕获信号。<ul><li>注意，被对一个信号的阻塞和忽略是不同的：只要信号被阻塞，它就不被传递；只有在信号解除阻塞后才传递它。而一个被忽略的信号总是被传递，只是没有进一步的操作。</li><li>如果信号的传递会引起内核杀死一个进程，那么这个信号对该进程就是致命的。<ul><li>SIGKILL信号总是致命的；</li><li>而且，缺省操作为Terminate的每个信号，以及不被进程捕获的信号对该进程也是致命的。</li><li>注意，如果一个被进程捕获的信号，其对应的信号处理函数终止了这个进程，那么这个信号就不是致命的，因为进程自己选择了终止，而不是被内核杀死。</li></ul></li></ul></li></ol><h2 id="POSIX信号和多线程应用"><a href="#POSIX信号和多线程应用" class="headerlink" title="POSIX信号和多线程应用"></a><strong>POSIX信号和多线程应用</strong></h2><p>POSIX 1003.1标准对多线程应用的信号处理有一些严格的要求：</p><ol><li>信号处理程序必须在多线程应用的所有线程之间共享；不过，每个线程必须有自己的挂起信号掩码和阻塞信号掩码。</li><li>POSIX库函数kill()和sigqueue()必须向所有的多线程应用而不是某个特殊的线程发出信号。所有由内核产生的信号如此(如：SIGCHLD、SIGINT或SIGQUIT)。</li><li>每个发送给多线程应用的信号仅传递给一个线程，这个线程是由内核在从不会阻塞该信号的线程中随意选择出来的。</li><li>如果向多线程应用发送了一个致命的信号，那么内核将杀死该应用的所有线程，而不仅仅是杀死接收信号的那个线程。</li></ol><p>线程组</p><p>如果一个挂起信号被发送给了某个特定进程，那么这个信号是私有的；如果被发送给了整个线程组，它就是共享的。</p><h2 id="与信号相关的数据结构"><a href="#与信号相关的数据结构" class="headerlink" title="与信号相关的数据结构"></a><strong>与信号相关的数据结构</strong></h2><p>对系统中的每个进程来说，内核必须跟踪什么信号当前正在挂起或被屏蔽，以及每个线程组是如何处理所有信号的。<br>为了完成这些操作，内核使用几个从处理器描述符可存取的数据结构:<br><img src="/2020/07/14/Linux-%E4%BF%A1%E5%8F%B7/%E4%B8%8E%E4%BF%A1%E5%8F%B7%E7%9B%B8%E5%85%B3%E7%9A%84%E6%9C%80%E9%87%8D%E8%A6%81%E7%9A%84%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84.JPG" alt="与信号相关的最重要的数据结构"></p><h2 id="信号描述符和信号处理程序描述符"><a href="#信号描述符和信号处理程序描述符" class="headerlink" title="信号描述符和信号处理程序描述符"></a><strong>信号描述符和信号处理程序描述符</strong></h2><p><code>进程描述符的signal字段</code>指向<code>信号描述符(signal descriptor)</code>——一个<code>signal_struct类型</code>的结构，用来<strong>跟踪共享挂起信号</strong>。</p><p>信号描述符还包括与信号处理关系并不密切的一些字段，如：</p><ul><li>每进程的资源限制数组rlim</li><li>用于存放进程的组领头进程</li><li>会话领头进程PID的字段pgrp和session。</li></ul><p>信号描述符被属于同一组线程组的所有进程共享:</p><ul><li>也就是被调用clone()系统调用(CLONE_THREAD标志置位)创建的所有进程共享，因此，对属于同一线程组的每个进程而言，信号描述符中的字段必须都是相同的。</li></ul><p><code>信号处理程序描述符(signad handler descriplor)</code>:每个进程还引用它，它是一个<code>sighand_struct类型</code>的结构，用来<strong>描述每个信号必须怎样被线程组处理</strong>。</p><ul><li>在调用clone()系统调用时设置CLONE_SIGHAND标志，信号处理程序描述符就可以由几个进程共享。</li><li>描述符的count字段表示共享该结构的进程个数。</li></ul><blockquote><p>在一个POSIX的多线程应用中，线程组中的所有轻量级进程都引用相同的信号描述符和信号处理程序描述符。</p></blockquote><h2 id="挂起信号队列"><a href="#挂起信号队列" class="headerlink" title="挂起信号队列"></a><strong>挂起信号队列</strong></h2><p>为了跟踪当前的挂起信号是什么，内核把两个挂起信号队列与每个进程相关联：</p><ul><li><code>共享挂起信号队列</code>，它位于信号描述符的shared_pending字段，存放整个线程组的挂起信号。</li><li><code>私有挂起信号队列</code>，它位于进程描述符的pending字段，存放特定进程(轻量级进程)的挂起信号。</li></ul><h2 id="与信号处理相关的系统调用"><a href="#与信号处理相关的系统调用" class="headerlink" title="与信号处理相关的系统调用"></a><strong>与信号处理相关的系统调用</strong></h2><p><strong>kill()系统调用</strong>:<br>一般用<code>kill(pid, sig)系统调用</code><strong>向普通进程或多线程应用发送信号</strong>，其相应的服务例程是<code>sys_kill()函数</code>。整数参数pid的几个含义取决于它的值：</p><ul><li>pid &gt; 0：把sig信号发送到其PID等于pid的进程所属的线程组。</li><li>pid = 0：把sig信号发送到与调用进程同组的进程的所有线程组。</li><li>pid = -1：把信号发送到所有进程，除了swapper（PID 0)、init(PID 1)和current以外。</li><li>pid &lt; -1：把信号发送到进程组-pid进程的所有线程组        </li></ul><p>kill()系统调用能发送任何信号，即使是编号在32~64之间的实时信号。然而，kill()系统调用不能确保把一个新的元素加入到目标进程的挂起信号队列，因此，挂起信号的多个实例可能被丢失。实时信号应当通过rt_sigqueueinfo()系统调用进行发送。</p><p><strong>tkill()和tgkill()系统调用</strong>:</p><ul><li>tkill()和tgkill()系统调用<strong>向线程组中的指定进程发送信号</strong>。</li><li>所有遵循POSIX标准的pthread库的<code>pthread_kill()函数</code>，都是调用这两个系统调用中的任意一个向指定的轻量级进程发送信号。</li></ul><p><strong>改变信号的操作</strong><br><code>sigaction(sig, act, oact)系统调用</code>允许用户为信号指定一个操作。</p><ul><li>当然，如果没有自定义的信号操作，那么内核执行与传递的信号相关的缺省操作。</li><li>POSIX标准规定，当缺省操作是”Ignore”时，把信号操作设置成<code>SIG_IGN</code>或<code>SIG_DFL</code>将引起同类型的任一挂起信号被丢弃。</li><li>此外还要注意，对信号处理程序来说，不论请求屏蔽信号是什么，SIGKILL和SIGSTOP从不被屏蔽。</li></ul><p><strong>检查挂起的阻塞信号</strong>:<br>sigpending系统调用允许进程检查挂起的阻塞信号的集合，也就是说检查信号被阻塞时已产生的那些信号。<br><strong>修改阻塞信号的集合</strong>:<br><code>sigprocmask()系统调用</code>允许进程修改阻塞信号的集合。这个系统调用只应用于常规信号(非实时信号)。相应的sys_sigprocmask()服务例程作用于三个参数：</p><ul><li>oset：进程地址空间的一个指针，指向存放以前位掩码的一个位数组。</li><li>set：进程地址空间的一个指针，指向包含新位掩码的位数组。</li><li>how：一个标志，可以有下列的一个值：<ul><li>SIG_BLOCK：*set位掩码数组，指定必须加到阻塞信号的位掩码数组中的信号。</li><li>SIG_UNBLOCK：*set位掩码数组，指定必须从阻塞信号的位掩码数组中删除的信号。</li><li>SIG_SETMASK：*set位掩码数组，指定阻塞信号新的位掩码数组。</li></ul></li></ul><p><strong>挂起进程</strong>:<br><code>sigsuspend()系统调用</code>把进程置为TASK_INTERRUPTBLE状态，当然这是把mask参数指向的位掩码数组所指定的标准信号阻塞以后设置的。只有当一个非忽略、非阻塞的信号发送到进程以后，进程才被唤醒。</p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a><strong>参考资料</strong></h2><p><a href="https://blog.csdn.net/flowing_wind/article/details/79967588">【Linux】Linux进程信号详解</a><br><a href="https://www.cnblogs.com/hoys/archive/2012/08/19/2646377.html">Linux信号（signal) 机制分析</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;&lt;strong&gt;前言&lt;/strong&gt;&lt;/h2&gt;&lt;p&gt;信号是什么？&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;信号(signal)是很短的消息（通常是一个数，以此来标识信号），可以被发送到一个进程或一组进程。&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;信号可以干什么？&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;信号在最早的Unix系统中即被引入，用于在用户态进程间通信。内核也用信号通知进程系统所发生的事件。&lt;/code&gt;&lt;/pre&gt;
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>Linux模块（modules）</title>
    <link href="https://stemha.github.io/2020/07/13/Linux%E6%A8%A1%E5%9D%97%EF%BC%88modules%EF%BC%89/"/>
    <id>https://stemha.github.io/2020/07/13/Linux%E6%A8%A1%E5%9D%97%EF%BC%88modules%EF%BC%89/</id>
    <published>2020-07-13T13:31:39.000Z</published>
    <updated>2020-08-10T04:19:21.580Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a><strong>前言</strong></h2><p>Linux 是一个<code>整体式的内核（Monolithic Kernel）结构</code>，也就是说，整个内核是一个单独的、非常大的程序。</p><ul><li>从实现机制来说，我们又把它划分为5个子系统（前一篇文章有介绍），内核的各个子系统都提供了内部接口（函数和变量），这些函数和变量可供内核所有子系统调用和使用。</li></ul><p>Linux 的整体式结构决定了要给内核增加新的成分也是非常困难，因此Linux 提供了一种全新的机制—<code>可装入模块（Loadable Modules，以下简称模块）</code>：</p><ul><li>用户可以根据自己的需要，在不需要对内核进行重新编译的条件下，模块能被动态地插入到内核或从内核中移走。</li></ul><p><code>模块的特点</code>：</p><ul><li>模块本身可以不被编译入内核映像，从而控制了内核的大小。</li><li>模块一旦被加载，它就和内核中的其他部分完全一样。</li></ul><p>我们需要知道什么？</p><blockquote><p>什么是模块?为什么要使用模块?</p></blockquote><a id="more"></a><h2 id="整体式内核or微内核"><a href="#整体式内核or微内核" class="headerlink" title="整体式内核or微内核"></a><strong>整体式内核or微内核</strong></h2><blockquote><p>linux 内核是一体化内核，就是说，在内核模式下，linux内核执行在一个单独的地址空间。<br>然而，linux也借鉴了微内核设计中一些好的思想，比如：拥有模块化设计，支持内核抢占，支持内核线程，支持动态加载内核模块到内核映像。<br>相反，linux没有采用微内核中那些破坏性能的特性，比如：所有进程运行于内核模式且所有函数可以直接调用而不是通过消息传递的方式。<br>仅管如此，linux内核是模块化的，多线程的且内核自身是可调度的。</p></blockquote><blockquote><p>可以说linux是做出了各方面的权衡，典型的实用主义。实用主义又赢得了一些胜利。</p></blockquote><h2 id="什么是模块"><a href="#什么是模块" class="headerlink" title="什么是模块?"></a><strong>什么是模块?</strong></h2><p><code>模块</code>:</p><ul><li>是内核的一部分（通常是设备驱动程序），但是并没有被编译到内核里面去。</li><li>它们被分别编译并连接成一组目标文件，这些文件能被插入到正在运行的内核，或者从正在运行的内核中移走，进行这些操作可以使用<code>insmod（插入模块）</code>或<code>rmmod（移走模块）</code>命令，或者，在必要的时候，内核本身能请求内核守护进程(kerned)装入或卸下模块。</li></ul><p>这里列出在Linux 内核源程序中所包括的一些模块:</p><ul><li>文件系统：minix，sysv，isofs，hpfs，smbfs，ext3，nfs，proc 等。</li><li>所有的SCSI 高级驱动程序: disk, tape, cdrom, generic。</li><li>大多数SCSI 驱动程序: aha1542, in2000等</li><li>大多数以太网驱动程序：非常多，请看./Documentation/networking/net-modules.txt</li><li>很多其他模块，例如：<ul><li>binfmt_elf: elf 装入程序</li><li>binfmt_java: java 装入程序</li><li>serial: 串口（tty）</li></ul></li></ul><h2 id="为什么要使用模块"><a href="#为什么要使用模块" class="headerlink" title="为什么要使用模块?"></a><strong>为什么要使用模块?</strong></h2><p>Linux内核的整体架构本就非常庞大，其包含的组件也非常多。如果把所有需要的功能都编译到Linux内核中。这会导致两个问题：</p><ul><li>一是生成的内核会很大，</li><li>二是如果我们要在现有的内核中新增或删除功能，将不得不重新编译内核。</li></ul><p>而使用模块机制可使得编译出的内核本身并不需要包含所有功能，而在这些功能需要被使用的时候，其对应的代码被动态地加载到内核。按需动态装入模块是非常吸引人的，因为这样可以保证内核达到最小并且使得内核非常灵活</p><h3 id="挂载文件系统的例子"><a href="#挂载文件系统的例子" class="headerlink" title="挂载文件系统的例子"></a>挂载文件系统的例子</h3><p>例如，当你可能偶尔使用 VFAT 文件系统，你只要安装(<code>mount</code>) VFAT，VFAT 文件系统就成为一个可装入模块，kerneld 通过自动装入VFAT 文件系统建立你的Linux 内核，当你卸下(<code>unmount</code>)VFAT 部分时，系统检测到你不再需要的FAT 系统模块，该模块自动地从内核中被移走。按需动态装入模块还意味着，你会有更多的内存给用户程序。</p><h2 id="Linux-内核模块的优缺点"><a href="#Linux-内核模块的优缺点" class="headerlink" title="Linux 内核模块的优缺点"></a><strong>Linux 内核模块的优缺点</strong></h2><p>利用内核模块的动态装载性具有如下<code>优点</code>：</p><ul><li>将内核映像的尺寸保持在最小，并具有最大的灵活性；</li><li>便于检验新的内核代码，而不需重新编译内核并重新引导。</li></ul><p>内核模块的引入带来的<code>缺点</code>：</p><ul><li>对系统性能和内存利用有负面影响；</li><li>装入的内核模块和其他内核部分一样，具有相同的访问权限，因此，<strong>差的内核模块会导致系统崩溃</strong>；</li><li><strong>为了使内核模块访问所有内核资源，内核必须维护符号表，并在装入和卸载模块时修改这些符号表</strong></li><li>有些模块要求利用其他模块的功能，因此，<strong>内核要维护模块之间的依赖性</strong>；</li><li><strong>内核必须能够在卸载模块时通知模块</strong>，并且要释放分配给模块的内存和中断等资源；</li><li>内核版本和模块版本的不兼容，也可能导致系统崩溃，因此，<strong>严格的版本检查</strong>是必需的。</li></ul><h2 id="内核模块的Hello-World"><a href="#内核模块的Hello-World" class="headerlink" title="内核模块的Hello World"></a><strong>内核模块的Hello World</strong></h2><p>这个最简单的内核模块只包含内核模块加载函数、卸载函数和对GPL v2许可权限的声明以及一些描述信息。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * a simple kernel module: hello</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * Copyright (C) 2014 Barry Song (baohua@kernel.org)</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * Licensed under GPLv2 or later.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/init.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/module.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> __init <span class="title">hello_init</span><span class="params">(<span class="keyword">void</span>)</span>  <span class="comment">//内核模块加载函数</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"> printk(KERN_INFO <span class="string">"Hello World enter\n"</span>);</span><br><span class="line"> <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">module_init(hello_init);            <span class="comment">//以“module_init（函数名）”的形式来指定模块加载函数。</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> __exit <span class="title">hello_exit</span><span class="params">(<span class="keyword">void</span>)</span> <span class="comment">//模块卸载函数</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"> printk(KERN_INFO <span class="string">"Hello World exit\n "</span>);</span><br><span class="line">&#125;</span><br><span class="line">module_exit(hello_exit);            <span class="comment">//以“module_exit（函数名）”的形式来指定模块卸载函数。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//模块声明与描述</span></span><br><span class="line">MODULE_AUTHOR(<span class="string">"Barry Song &lt;21cnbao@gmail.com&gt;"</span>);   <span class="comment">//声明模块的作者</span></span><br><span class="line">MODULE_LICENSE(<span class="string">"GPL v2"</span>);                          <span class="comment">//声明模块的许可证声明</span></span><br><span class="line">MODULE_DESCRIPTION(<span class="string">"A simple Hello World Module"</span>); <span class="comment">//声明模块的描述 </span></span><br><span class="line">MODULE_ALIAS(<span class="string">"a simplest module"</span>);                 <span class="comment">//声明模块的别名</span></span><br></pre></td></tr></table></figure><p>编译它会产生<code>hello.ko目标文件</code>，通过<code>insmod ./hello.ko</code>命令可以加载它，通过<code>rmmod hello</code>命令可以卸载它，加载时输出“Hello World enter”，卸载时输出“Hello World exit”。</p><p><strong>说明：</strong></p><ul><li>内核模块中用于输出的函数是内核空间的<code>printk()</code>而不是用户空间的<code>printf()</code>。printk()的用法和printf()基本相似，但前者可定义输出级别。printk（）可作为一种最基本的内核调试手段，</li><li>moudle_init 和 module_exit 这几行使用了特别的内核宏来指出模块加载函数和卸载函数的角色.</li></ul><blockquote><p>内核是一个独特的环境, 它将它的要求强加于要和它接口的代码上.所以写内核代码需要遵循各种规范。</p></blockquote><p>有几个文件对模块是特殊的, 必须出现在每一个可加载模块中. 因此, 几乎所有模块代码都有下面内容:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;linux&#x2F;module.h&gt;</span><br><span class="line">#include &lt;linux&#x2F;init.h&gt;</span><br></pre></td></tr></table></figure><ul><li><code>moudle.h</code> 包含了大量加载模块需要的函数和符号的定义.</li><li><code>init.h</code> 来指定初始化和清理函数</li><li>大部分模块还包含 <code>moudleparam.h</code>, 使得可以在模块加载时传递参数给模块.</li></ul><h2 id="Linux内核模块程序结构"><a href="#Linux内核模块程序结构" class="headerlink" title="Linux内核模块程序结构"></a><strong>Linux内核模块程序结构</strong></h2><p>一个Linux内核模块主要由如下几个部分组成:</p><ol><li><code>模块加载函数</code><ul><li>当通过<code>insmod</code>或<code>modprobe</code>命令加载内核模块时，模块的加载函数会自动被内核执行，完成本模块的相关初始化工作。</li></ul></li><li><code>模块卸载函数</code><ul><li>当通过<code>rmmod</code>命令卸载某模块时，模块的卸载函数会自动被内核执行，完成与模块卸载函数相反的功能。</li></ul></li><li><code>模块许可证声明</code><ul><li>许可证（LICENSE）声明描述内核模块的许可权限，如果不声明LICENSE，模块被加载时，将收到内核被污染（Kernel Tainted）的警告。</li><li>在Linux内核模块领域，可接受的LICENSE包括“GPL”、“GPL v2”、“GPL and additional rights”、“DualBSD/GPL”、“Dual MPL/GPL”和“Proprietary”（关于模块是否可以采用非GPL许可权，如“Proprietary”，这个在学术界和法律界都有争议）。</li><li>大多数情况下，内核模块应遵循GPL兼容许可权。Linux内核模块最常见的是以MODULE_LICENSE（“GPL v2”）语句声明模块采用GPL v2。</li></ul></li><li>模块参数（可选）<ul><li>模块参数是模块被加载的时候可以传递给它的值，它本身对应模块内部的全局变量。</li></ul></li><li>模块导出符号（可选）<ul><li>内核模块可以导出的符号（symbol，对应于函数或变量），若导出，其他模块则可以使用本模块中的变量或函数。</li></ul></li><li>模块作者等信息声明（可选）<ul><li>各种 MODULE_ 声明可以出现在你的源码文件的任何函数之外的地方. 但是惯例是把这些声明放在文件末尾。 </li></ul></li></ol><h3 id="模块加载函数"><a href="#模块加载函数" class="headerlink" title="模块加载函数"></a>模块加载函数</h3><p>Linux内核模块加载函数一般以<code>__init</code>标识声明,示例模板如下：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> _ _init <span class="title">initialization_function</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123; <span class="comment">/* 初始化代码 */</span> &#125;</span><br><span class="line">module_init(initialization_function);</span><br></pre></td></tr></table></figure><p>模块加载函数以“module_init（函数名）”的形式被指定。它返回整型值，若初始化成功，应返回0。而在初始化失败时，应该返回错误编码。<br>在Linux内核里，错误编码是一个接近于0的负值，在&lt;linux/errno.h&gt;中定义，包含-ENODEV、-ENOMEM之类的符号值。</p><blockquote><p>总是返回相应的错误编码是种非常好的习惯，因为只有这样，用户程序才可以利用perror等方法把它们转换成有意义的错误信息字符串。</p></blockquote><p>在Linux内核中，可以使用request_module（const char*fmt，…）函数加载内核模块，驱动开发人员可以通过调用下列代码灵活地加载其他内核模块：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">request_module(module_name);</span><br></pre></td></tr></table></figure><h3 id="模块卸载函数"><a href="#模块卸载函数" class="headerlink" title="模块卸载函数"></a>模块卸载函数</h3><p>Linux内核模块卸载函数一般以<code>__exit</code>标识声明,示例模板如下：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> _ _exit <span class="title">cleanup_function</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123; <span class="comment">/* 释放代码 */</span> &#125;</span><br><span class="line">module_exit(cleanup_function);</span><br></pre></td></tr></table></figure><p>模块卸载函数在模块卸载的时候执行，而不返回任何值，且必须以“module_exit（函数名）”的形式来指定。</p><p>用__exit来修饰模块卸载函数，可以告诉内核如果相关的模块被直接编译进内核（即built-in），则cleanup_function（）函数会被省略，直接不链进最后的镜像。因为如果模块被内置进内核，就不可能卸载它了，卸载函数也就没有存在的必要了。</p><h3 id="模块参数"><a href="#模块参数" class="headerlink" title="模块参数"></a>模块参数</h3><p>可以用“module_param（参数名，参数类型，参数读/写权限）”为模块定义一个参数。例如下列代码定义了1个整型参数和1个字符指针参数：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">char</span> *book_name = <span class="string">"dissecting Linux Device Driver"</span>;</span><br><span class="line">module_param(book_name, charp, S_IRUGO);</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">int</span> book_num = <span class="number">4000</span>;</span><br><span class="line">module_param(book_num, <span class="keyword">int</span>, S_IRUGO);</span><br></pre></td></tr></table></figure><ul><li>在装载内核模块时，用户可以向模块传递参数，形式为<code>insmode（或modprobe）模块名参数名=参数值</code>，如果不传递，参数将使用模块内定义的缺省值。</li><li>如果模块被内置，就无法insmod了，但是bootloader可以通过在bootargs里设置“模块名.参数名=值”的形式给该内置的模块传递参数</li></ul><h3 id="导出符号"><a href="#导出符号" class="headerlink" title="导出符号"></a>导出符号</h3><p>Linux的“/proc/kallsyms”文件对应着内核符号表，它记录了符号以及符号所在的内存地址。<br>模块可以使用如下宏导出符号到内核符号表中：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">EXPORT_SYMBOL(符号名);</span><br><span class="line">EXPORT_SYMBOL_GPL(符号名);</span><br></pre></td></tr></table></figure><ul><li>导出的符号可以被其他模块使用，只需使用前声明一下即可。</li><li>EXPORT_SYMBOL_GPL（）只适用于包含GPL许可权的模块。</li></ul><p>下面给出了一个导出整数加、减运算函数符号的内核模块的例子:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/init.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/module.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">add_integar</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> a + b;</span><br><span class="line">&#125;</span><br><span class="line">EXPORT_SYMBOL_GPL(add_integar);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">sub_integar</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> a - b;</span><br><span class="line">&#125;</span><br><span class="line">EXPORT_SYMBOL_GPL(sub_integar);</span><br><span class="line"></span><br><span class="line">MODULE_LICENSE(<span class="string">"GPL v2"</span>);</span><br></pre></td></tr></table></figure><p>从“/proc/kallsyms”文件中找出add_integar、sub_integar的相关信息：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta"># grep integar /proc/kallsyms</span></span><br><span class="line">e679402c r __ksymtab_sub_integar [export_symb]</span><br><span class="line">e679403c r __kstrtab_sub_integar [export_symb]</span><br><span class="line">e6794038 r __kcrctab_sub_integar [export_symb]</span><br><span class="line">e6794024 r __ksymtab_add_integar [export_symb]</span><br><span class="line">e6794048 r __kstrtab_add_integar [export_symb]</span><br><span class="line">e6794034 r __kcrctab_add_integar [export_symb]</span><br><span class="line">e6793000 t add_integar [export_symb]</span><br><span class="line">e6793010 t sub_integar [export_symb]</span><br></pre></td></tr></table></figure><h3 id="模块声明与描述"><a href="#模块声明与描述" class="headerlink" title="模块声明与描述"></a>模块声明与描述</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">MODULE_AUTHOR(author);            <span class="comment">//声明模块的作者</span></span><br><span class="line">MODULE_DESCRIPTION(description);  <span class="comment">//声明模块的描述</span></span><br><span class="line">MODULE_VERSION(version_string);   <span class="comment">//声明模块的版本</span></span><br><span class="line">MODULE_DEVICE_TABLE(table_info);  <span class="comment">//声明模块的设备表</span></span><br><span class="line">MODULE_ALIAS(alternate_name);     <span class="comment">//声明模块的别名</span></span><br></pre></td></tr></table></figure><p>对于USB、PCI等设备驱动，通常会创建一个MODULE_DEVICE_TABLE，以表明该驱动模块所支持的设备：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;* table of devices that work with this driver *&#x2F;</span><br><span class="line">static struct usb_device_id skel_table [] &#x3D; &#123;</span><br><span class="line">&#123; USB_DEVICE(USB_SKEL_VENDOR_ID,USB_SKEL_PRODUCT_ID) &#125;,</span><br><span class="line">&#123; &#125; &#x2F;* terminating enttry *&#x2F;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">MODULE_DEVICE_TABLE (usb, skel_table);</span><br></pre></td></tr></table></figure><h2 id="查询内核中已加载模块的信息"><a href="#查询内核中已加载模块的信息" class="headerlink" title="查询内核中已加载模块的信息"></a><strong>查询内核中已加载模块的信息</strong></h2><h3 id="lsmod命令"><a href="#lsmod命令" class="headerlink" title="lsmod命令"></a><strong>lsmod命令</strong></h3><h4 id="lsmod命令格式"><a href="#lsmod命令格式" class="headerlink" title="lsmod命令格式"></a>lsmod命令格式</h4><p>lsmod命令可以获得系统中已加载的所有模块以及模块间的依赖关系，例如：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$ lsmod</span><br><span class="line">Module         Size     Used    by</span><br><span class="line">hello           <span class="number">9</span> <span class="number">472</span>      <span class="number">0</span></span><br><span class="line">nls_iso8859_1  <span class="number">12</span> <span class="number">032</span>      <span class="number">1</span></span><br><span class="line">nls_cp437      <span class="number">13</span> <span class="number">696</span>      <span class="number">1</span></span><br><span class="line">vfat           <span class="number">18</span> <span class="number">816</span>      <span class="number">1</span></span><br><span class="line">fat            <span class="number">57</span> <span class="number">376</span>      <span class="number">1</span>    vfat</span><br><span class="line">...</span><br></pre></td></tr></table></figure><ul><li>Module ：表示模块的名称。  Size：表示模块的大小。  Used：表示依赖模块的个数。  by：表示依赖模块的内容。</li></ul><h4 id="lsmod命令原理"><a href="#lsmod命令原理" class="headerlink" title="lsmod命令原理"></a>lsmod命令原理</h4><p>lsmod命令实际上是读取并分析<code>/proc/modules</code>文件，与上述lsmod命令结果对应的“/proc/modules”文件。如下：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ cat /proc/modules</span><br><span class="line">hello <span class="number">12393</span> <span class="number">0</span> - Live <span class="number">0xe67a2000</span> (OF)</span><br><span class="line">nls_utf8 <span class="number">12493</span> <span class="number">1</span> - Live <span class="number">0xe678e000</span></span><br><span class="line">isofs <span class="number">39596</span> <span class="number">1</span> - Live <span class="number">0xe677f000</span></span><br><span class="line">vboxsf <span class="number">42561</span> <span class="number">2</span> - Live <span class="number">0xe6767000</span> (OF)…</span><br></pre></td></tr></table></figure><h3 id="sys-module与tree-a"><a href="#sys-module与tree-a" class="headerlink" title="/sys/module与tree -a"></a>/sys/module与tree -a</h3><p>内核中已加载模块的信息也存在于/sys/module目录下:</p><ul><li>加载hello.ko后，内核中将包含/sys/module/hello目录，该目录下又有一个refcnt文件和一个sections目录，在/sys/module/hello目录下运行<code>tree –a</code>可得到如下目录树：</li><li><code>tree命令</code>会以树状图的方式列出指定目录下的所有文件，包括目录里的文件，显示出指定目录的文件目录结构。</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">computer:/sys/<span class="keyword">module</span>/hello<span class="meta"># tree -a</span></span><br><span class="line">.├── coresize├── holders├── initsize├── initstate├── notes│ └── .note.gnu.build-id├── refcnt├── sections│ ├── .<span class="built_in">exit</span>.text</span><br><span class="line"><span class="number">3</span> directories, <span class="number">15</span> files</span><br></pre></td></tr></table></figure><h3 id="modinfo命令"><a href="#modinfo命令" class="headerlink" title="modinfo命令"></a><strong>modinfo命令</strong></h3><p>使用modinfo&lt;模块名&gt;命令可以获得模块的信息，包括模块作者、模块的说明、模块所支持的参数以及vermagic：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta"># modinfo floppy</span></span><br><span class="line">filename:       /lib/modules/<span class="number">4.15</span><span class="number">.0</span><span class="number">-96</span>-generic/kernel/drivers/block/floppy.ko</span><br><span class="line">alias:          block-major<span class="number">-2</span>-*</span><br><span class="line">license:        GPL</span><br><span class="line">author:         Alain L. Knaff</span><br><span class="line">srcversion:     EECA1709167BA33BEFC75FD</span><br><span class="line">alias:          acpi*:PNP0700:*</span><br><span class="line">alias:          pnp:dPNP0700*</span><br><span class="line">depends:        </span><br><span class="line">retpoline:      Y</span><br><span class="line">intree:         Y</span><br><span class="line">name:           floppy</span><br><span class="line">vermagic:       <span class="number">4.15</span><span class="number">.0</span><span class="number">-96</span>-generic SMP mod_unload </span><br><span class="line">signat:         PKCS#<span class="number">7</span></span><br><span class="line">signer:         </span><br><span class="line">sig_key:        </span><br><span class="line">sig_hashalgo:   md4</span><br><span class="line">parm:           floppy:charp</span><br><span class="line">parm:           FLOPPY_IRQ:<span class="keyword">int</span></span><br><span class="line">parm:           FLOPPY_DMA:<span class="keyword">int</span></span><br></pre></td></tr></table></figure><h2 id="加载和卸载模块"><a href="#加载和卸载模块" class="headerlink" title="加载和卸载模块"></a><strong>加载和卸载模块</strong></h2><h3 id="modprobe命令"><a href="#modprobe命令" class="headerlink" title="modprobe命令"></a><strong>modprobe命令</strong></h3><p>modprobe命令:</p><ul><li>可以加载模块和卸载模块</li><li>比insmod命令要强大，它在加载某模块时，会同时加载该模块所依赖的其他模块。</li><li>使用modprobe命令加载的模块若以“modprobe -r filename”的方式卸载，将同时卸载其依赖的模块。</li><li>modprobe可载入指定的个别模块，或是载入一组相依的模块。modprobe会根据depmod所产生的相依关系，决定要载入哪些模块。若在载入过程中发生错误，在modprobe会卸载整组的模块。</li></ul><p><a href="https://www.runoob.com/linux/linux-comm-modprobe.html">Linux modprobe命令-菜鸟教程</a><br><code>模块之间的依赖关系</code>存放在根文件系统的<code>/lib/modules/&lt;kernel-version&gt;/modules.dep文件</code>中，实际上是在整体编译内核的时候由depmod工具生成的，它的格式非常简单：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">kernel&#x2F;lib&#x2F;cpu-notifier-error-inject.ko: kernel&#x2F;lib&#x2F;notifier-error-inject.ko</span><br><span class="line">kernel&#x2F;lib&#x2F;pm-notifier-error-inject.ko: kernel&#x2F;lib&#x2F;notifier-error-inject.ko</span><br><span class="line">kernel&#x2F;lib&#x2F;lru_cache.ko:</span><br><span class="line">kernel&#x2F;lib&#x2F;cordic.ko:</span><br><span class="line">kernel&#x2F;lib&#x2F;rbtree_test.ko:</span><br><span class="line">kernel&#x2F;lib&#x2F;interval_tree_test.ko:</span><br><span class="line">updates&#x2F;dkms&#x2F;vboxvideo.ko: kernel&#x2F;drivers&#x2F;gpu&#x2F;drm&#x2F;drm.ko</span><br></pre></td></tr></table></figure><h3 id="insmod命令"><a href="#insmod命令" class="headerlink" title="insmod命令"></a><strong>insmod命令</strong></h3><ul><li>insmod 实用程序必须找到请求装入的内核模块，请求装入的内核模块通常保存在<code>/lib/modules/kernel-version/</code>目录下。</li><li>内核模块被连接成目标文件，与系统中其他程序不同的是，这种目标文件是可重定位的（它们是a.out 或ELF 格式的目标文件）。</li><li>insmods 实用程序位于／sbin 目录下</li></ul><p>只有超级用户才能插入一个模块，其简单的命令如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">insmod serial.o //serial.o 为串口的驱动程序。</span><br></pre></td></tr></table></figure><p>但是，这条命令执行以后可能会出现错误信息，诸如模块与内核版本不匹配、不认识的符号等。</p><blockquote><p>查看/proc/ksyms，从中就可以发现内核移出的所有符号,插入模块时候出现不认识的符号，说明模块中的符号并未包含到内核中。这种情况通常说明模块有一些依赖的模块没有装载到内核。</p></blockquote><p>怎么才能知道所依赖的模块呢？</p><pre><code>除了从符号名判断外，更有效的方法是使用depmod 和 modprobe 命令来代替insmod 命令。</code></pre><h3 id="传递参数给模块"><a href="#传递参数给模块" class="headerlink" title="传递参数给模块"></a>传递参数给模块</h3><p>通常情况下，当你插入模块时，还需要把参数传递给模块。<br>例如，一个设备驱动程序想知道它所驱动的设备的I/O 地址和IRQ，或者一个网络驱动程序想知道你要它进行多少次的诊断跟踪。这里给出一个例子：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">insmod ne.o io=0x400 irq=10</span><br><span class="line">//这里装入的是NE2000 类的以太网适配器驱动程序，并告诉它以太网适配器的I/O 地址为0x400，其所产生的中断为IRQ 10。</span><br></pre></td></tr></table></figure><ul><li>对于可装入模块，并没有标准的参数形式，也几乎没有什么约定。每个模块的编写者可以决定insmod 可以用什么样的参数。</li><li>对于Linux 内核现已支持的模块，<code>Linux HOWTO 文档</code>给出了每种驱动程序的参数信息。</li></ul><h3 id="rmmod命令"><a href="#rmmod命令" class="headerlink" title="rmmod命令"></a><strong>rmmod命令</strong></h3><p>通过<code>rmmod hello</code>命令可以卸载hello模块</p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p>《Linux设备驱动开发详解：基于最新的Linux4.0内核》<br>《深入分析Linux内核源码》</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;&lt;strong&gt;前言&lt;/strong&gt;&lt;/h2&gt;&lt;p&gt;Linux 是一个&lt;code&gt;整体式的内核（Monolithic Kernel）结构&lt;/code&gt;，也就是说，整个内核是一个单独的、非常大的程序。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;从实现机制来说，我们又把它划分为5个子系统（前一篇文章有介绍），内核的各个子系统都提供了内部接口（函数和变量），这些函数和变量可供内核所有子系统调用和使用。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Linux 的整体式结构决定了要给内核增加新的成分也是非常困难，因此Linux 提供了一种全新的机制—&lt;code&gt;可装入模块（Loadable Modules，以下简称模块）&lt;/code&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;用户可以根据自己的需要，在不需要对内核进行重新编译的条件下，模块能被动态地插入到内核或从内核中移走。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;模块的特点&lt;/code&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;模块本身可以不被编译入内核映像，从而控制了内核的大小。&lt;/li&gt;
&lt;li&gt;模块一旦被加载，它就和内核中的其他部分完全一样。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;我们需要知道什么？&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;什么是模块?为什么要使用模块?&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="Linux" scheme="https://stemha.github.io/categories/Linux/"/>
    
    
      <category term="Linux" scheme="https://stemha.github.io/tags/Linux/"/>
    
      <category term="内核" scheme="https://stemha.github.io/tags/%E5%86%85%E6%A0%B8/"/>
    
      <category term="模块" scheme="https://stemha.github.io/tags/%E6%A8%A1%E5%9D%97/"/>
    
      <category term="module" scheme="https://stemha.github.io/tags/module/"/>
    
  </entry>
  
  <entry>
    <title>Linux内核的组成</title>
    <link href="https://stemha.github.io/2020/07/13/Linux%E5%86%85%E6%A0%B8%E7%9A%84%E7%BB%84%E6%88%90/"/>
    <id>https://stemha.github.io/2020/07/13/Linux%E5%86%85%E6%A0%B8%E7%9A%84%E7%BB%84%E6%88%90/</id>
    <published>2020-07-13T07:06:32.000Z</published>
    <updated>2020-07-13T10:00:26.618Z</updated>
    
    <content type="html"><![CDATA[<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a><strong>概述</strong></h2><p>Linux内核主要由<code>进程调度（SCHED）</code>、<code>内存管理（MM）</code>、<code>虚拟文件系统（VFS）</code>、<code>网络接口（NET）</code>和<code>进程间通信（IPC）</code>5个子系统组成。</p><a id="more"></a><div align="center"><p><img src="/2020/07/13/Linux%E5%86%85%E6%A0%B8%E7%9A%84%E7%BB%84%E6%88%90/Linux%E5%86%85%E6%A0%B8%E7%9A%84%E7%BB%84%E6%88%90%E9%83%A8%E5%88%86%E4%B8%8E%E5%85%B3%E7%B3%BB.JPG" alt="Linux内核的组成部分与关系"></p></div><p>如果更具体一点就是下面这幅图：</p><div align="center"><p><img src="/2020/07/13/Linux%E5%86%85%E6%A0%B8%E7%9A%84%E7%BB%84%E6%88%90/Linux%E5%86%85%E6%A0%B8%E5%AD%90%E7%B3%BB%E7%BB%9F%E5%8F%8A%E5%85%B6%E4%B9%8B%E9%97%B4%E7%9A%84%E5%85%B3%E7%B3%BB.JPG" alt="Linux 内核子系统及其之间的关系"></p></div><h2 id="进程调度"><a href="#进程调度" class="headerlink" title="进程调度"></a><strong>进程调度</strong></h2><ul><li>处于系统的中心位置，内核中其他的子系统都依赖它，因为每个子系统都需要挂起或恢复进程。</li><li>可运行进程实际是仅等待 CPU 资源的进程，如果某个进程在等待其他资源，则该进程是不可运行进程。</li></ul><p><img src="/2020/07/13/Linux%E5%86%85%E6%A0%B8%E7%9A%84%E7%BB%84%E6%88%90/Linux%E8%BF%9B%E7%A8%8B%E7%8A%B6%E6%80%81%E8%BD%AC%E6%8D%A2.JPG" alt="Linux进程状态转换"></p><p>在设备驱动编程中，当请求的资源不能得到满足时，驱动一般会调度其他进程执行，并使本进程进入睡眠状态，直到它请求的资源被释放，才会被唤醒而进入就绪状态。</p><h3 id="进程睡眠"><a href="#进程睡眠" class="headerlink" title="进程睡眠"></a><strong>进程睡眠</strong></h3><p>睡眠的划分：</p><ul><li><code>可中断的睡眠</code>(浅睡眠)：在收到信号的时候会醒。其状态标志位为TASK_INTERRUPTIBLE；</li><li><code>不可中断的睡眠</code>(深睡眠)：把信号传递到这种睡眠状态的进程不能改变它的状态,也就是说它不响应信号的唤醒。其状态标志位为TASK_UNINTERRUPTIBLE。</li></ul><h3 id="进程的描述"><a href="#进程的描述" class="headerlink" title="进程的描述"></a><strong>进程的描述</strong></h3><p>在Linux内核中，使用<code>task_struct结构体</code>来描述进程，该结构体中包含描述该进程内存资源、文件系统资源、文件资源、tty资源、信号处理等的指针。</p><h3 id="Linux线程创建"><a href="#Linux线程创建" class="headerlink" title="Linux线程创建"></a><strong>Linux线程创建</strong></h3><p>Linux的线程采用轻量级进程模型来实现，在用户空间通过<code>pthread_create()</code>API创建线程的时候，本质上内核只是创建了一个新的task_struct，并将新task_struct的所有资源指针都指向创建它的那个task_struct的资源指针。</p><h3 id="内核线程"><a href="#内核线程" class="headerlink" title="内核线程"></a>内核线程</h3><p>绝大多数进程（以及进程中的多个线程）是由用户空间的应用创建的，当它们存在底层资源和硬件访问的需求时，会通过系统调用进入内核空间。<br>有时候，在内核编程中，如果需要几个并发执行的任务，可以启动<code>内核线程</code>，这些线程没有用户空间。启动内核线程的函数为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pid_t kernel_thread(int (*fn)(void *), void *arg, unsigned long flags);</span><br></pre></td></tr></table></figure><h2 id="内存管理"><a href="#内存管理" class="headerlink" title="内存管理"></a><strong>内存管理</strong></h2><p><code>内存管理的主要作用</code>是控制多个进程安全地共享主内存区域。当CPU提供内存管理单元（MMU）时，Linux内存管理对于每个进程完成从虚拟内存到物理内存的转换。<br>内存管理从逻辑上可以分为硬件无关的部分和硬件相关的部分。</p><ul><li>硬件无关的部分( Architecture Independent Manager)提供了提供所有的内存管理机制,包括进程的映射（以进程为单位的memory mapping）和虚拟内存的对换（虚拟内存的Swapping）。</li><li>硬件相关的部分( Architecture Specific Managers)为内存管理硬件提供了虚拟接口</li></ul><h3 id="Linux进程地址空间"><a href="#Linux进程地址空间" class="headerlink" title="Linux进程地址空间"></a><strong>Linux进程地址空间</strong></h3><p>一般而言，32位处理器的Linux的每个进程享有4GB的内存空间，0 ~ 3GB属于用户空间，3 ~ 4GB属于内核空间，内核空间对常规内存、I/O设备内存以及高端内存有不同的处理方式。当然，内核空间和用户空间的具体界限是可以调整的，在内核配置选项Kernel Features→Memory split下，可以设置界限为2GB或者3GB。</p><div align="center"><p><img src="/2020/07/13/Linux%E5%86%85%E6%A0%B8%E7%9A%84%E7%BB%84%E6%88%90/Linux%E8%BF%9B%E7%A8%8B%E5%9C%B0%E5%9D%80%E7%A9%BA%E9%97%B4.JPG" alt="Linux进程地址空间"></p></div><h3 id="Linux内存管理的组成"><a href="#Linux内存管理的组成" class="headerlink" title="Linux内存管理的组成"></a><strong>Linux内存管理的组成</strong></h3><div align="center"><p><img src="/2020/07/13/Linux%E5%86%85%E6%A0%B8%E7%9A%84%E7%BB%84%E6%88%90/Linux%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86.JPG" alt="Linux内存管理"></p></div><ul><li>Linux内核的内存管理总体比较庞大，包含底层的Buddy算法，它用于管理每个页的占用情况，<code>内核空间的slab</code>以及用户空间的<code>C库的二次管理</code>。</li><li>内核也提供了页缓存的支持，用内存来缓存磁盘</li><li>per-BDI <code>flusher</code>线程用于刷回脏的页缓存到磁盘。</li><li><code>Kswapd</code>（交换进程）则是Linux中用于页面回收（包括file-backed的页和匿名页）的内核线程，它采用最近最少使用（LRU）算法进行内存回收。</li><li><code>slab</code>是Linux操作系统的一种内存分配机制。其工作是针对一些经常分配并释放的对象，如进程描述符等，这些对象的大小一般比较小，如果直接采用伙伴系统来进行分配和释放，不仅会造成大量的内存碎片，而且处理速度也太慢。</li><li>在内核初始化完成之后, 内存管理的责任就由<code>伙伴系统</code>来承担. 伙伴系统是一个结合了2的方幂个分配器和空闲缓冲区合并计技术的内存分配方案, 其基本思想很简单. 内存被分成含有很多页面的大块, 每一块都是2个页面大小的方幂. 如果找不到想要的块, 一个大块会被分成两部分, 这两部分彼此就成为伙伴. 其中一半被用来分配, 而另一半则空闲. 这些块在以后分配的过程中会继续被二分直至产生一个所需大小的块. 当一个块被最终释放时, 其伙伴将被检测出来, 如果伙伴也空闲则合并两者.</li></ul><h2 id="虚拟文件系统"><a href="#虚拟文件系统" class="headerlink" title="虚拟文件系统"></a><strong>虚拟文件系统</strong></h2><p>Linux虚拟文件系统隐藏了各种硬件的具体细节，为所有设备提供了统一的接口。而且，它独立于各个具体的文件系统，是对各种文件系统的一个抽象。</p><ul><li>它为上层的应用程序提供了统一的vfs_read（）、vfs_write（）等接口，并调用具体底层文件系统或者设备驱动中实现的<code>file_operations结构体</code>的成员函数。</li></ul><div align="center"><p><img src="/2020/07/13/Linux%E5%86%85%E6%A0%B8%E7%9A%84%E7%BB%84%E6%88%90/VFS.JPG" alt="VFS"></p></div><h2 id="网络接口"><a href="#网络接口" class="headerlink" title="网络接口"></a><strong>网络接口</strong></h2><p>网络接口提供了对各种网络标准协议的存取和各种网络硬件的支持。<br>网络接口可分为网络协议和网络驱动程序两部分：</p><ul><li>网络协议部分负责实现每一种可能的网络传输协议</li><li>网络设备驱动程序负责与硬件设备进行通信，每一种可能的硬件设备都有相应的设备驱动程序。</li></ul><div align="center"><p><img src="/2020/07/13/Linux%E5%86%85%E6%A0%B8%E7%9A%84%E7%BB%84%E6%88%90/Linux%E7%BD%91%E7%BB%9C%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84.JPG" alt="Linux网络体系结构"></p></div><p>Linux内核支持的协议栈种类较多，如Internet、UNIX、CAN、NFC、Bluetooth、WiMAX、IrDA等，<strong>上层的应用程序统一使用套接字接口。</strong></p><h2 id="进程间通信"><a href="#进程间通信" class="headerlink" title="进程间通信"></a><strong>进程间通信</strong></h2><p>Linux支持进程间的多种通信机制，包含<code>信号量</code>、<code>共享内存</code>、<code>消息队列</code>、<code>管道</code>、<code>UNIX域套接字</code>等，这些机制可协助多个进程、多资源的互斥访问、进程间的同步和消息传<br>递。</p><blockquote><p>在实际的Linux应用中，人们更多地趋向于使用UNIX域套接字，而不是System V IPC中的消息队列等机制。</p></blockquote><h2 id="Linux内核5个组成部分之间的依赖关系"><a href="#Linux内核5个组成部分之间的依赖关系" class="headerlink" title="Linux内核5个组成部分之间的依赖关系"></a><strong>Linux内核5个组成部分之间的依赖关系</strong></h2><ul><li>处于中心位置的是<code>进程调度</code>，所有其他的子系统都依赖于它，因为每个子系统都需要挂起或恢复进程。<ul><li>一般情况下，当一个进程等待硬件操作完成时，它被挂起；当操作真正完成时，进程被恢复执行。</li><li>例如，当一个进程通过网络发送一条消息时，网络接口需要挂起发送进程，直到硬件成功地完成消息的发送，当消息被发送出去以后，网络接口给进程返回一个代码，表示操作的成功或失败。</li><li>其他子系统（内存管理，虚拟文件系统及进程间通信）以相似的理由依赖于进程调度。</li></ul></li><li><code>进程调度与内存管理之间的关系</code>：这两个子系统互相依赖。在多道程序环境下，程序要运行必须为之创建进程，而创建进程的第一件事，就是要将程序和数据装入内存。</li><li><code>进程间通信与内存管理的关系</code>：进程间通信子系统要依赖内存管理支持共享内存通信机制，这种机制允许两个进程除了拥有自己的私有内存，还可存取共同的内存区域。</li><li><code>虚拟文件系统与网络接口之间的关系</code>：虚拟文件系统利用网络接口支持网络文件系统（NFS），也利用内存管理支持RAMDISK 设备。</li><li><code>内存管理与虚拟文件系统之间的关系</code>：<strong>内存管理利用虚拟文件系统支持交换</strong>，交换进程（swapd）定期地由调度程序调度，这也是内存管理依赖于进程调度的唯一原因。当一个进程存取的内存映射被换出时，内存管理向文件系统发出请求，同时，挂起当前正在运行的进程。</li></ul><p>除了上面图示中的资源以外，内核中的所有子系统还要依赖一些共同的资源，但在图中并没有显示出来。这些资源包括所有子系统都用到的过程，例如分配和释放内存空间的过程，打印警告或错误信息的过程，还有系统的调试例程等。</p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p>《Linux设备驱动开发详解：基于最新的Linux4.0内核》<br><a href="https://baike.baidu.com/item/slab/5803993?fr=aladdin">slab-百度百科</a><br><a href="https://www.cnblogs.com/linhaostudy/p/10089120.html">伙伴系统之伙伴系统概述–Linux内存管理(十五)</a> //很通俗的博客。<br><a href="http://www.wowotech.net/linux_kenrel/11.html">Linux内核的整体架构</a>  //不错的英文图示<br>《深入分析Linux内核源代码》</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;&lt;strong&gt;概述&lt;/strong&gt;&lt;/h2&gt;&lt;p&gt;Linux内核主要由&lt;code&gt;进程调度（SCHED）&lt;/code&gt;、&lt;code&gt;内存管理（MM）&lt;/code&gt;、&lt;code&gt;虚拟文件系统（VFS）&lt;/code&gt;、&lt;code&gt;网络接口（NET）&lt;/code&gt;和&lt;code&gt;进程间通信（IPC）&lt;/code&gt;5个子系统组成。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Linux" scheme="https://stemha.github.io/categories/Linux/"/>
    
    
      <category term="Linux" scheme="https://stemha.github.io/tags/Linux/"/>
    
      <category term="内核" scheme="https://stemha.github.io/tags/%E5%86%85%E6%A0%B8/"/>
    
  </entry>
  
  <entry>
    <title>Linux内核的编译及加载</title>
    <link href="https://stemha.github.io/2020/07/10/Linux%E5%86%85%E6%A0%B8%E7%9A%84%E7%BC%96%E8%AF%91%E5%8F%8A%E5%8A%A0%E8%BD%BD/"/>
    <id>https://stemha.github.io/2020/07/10/Linux%E5%86%85%E6%A0%B8%E7%9A%84%E7%BC%96%E8%AF%91%E5%8F%8A%E5%8A%A0%E8%BD%BD/</id>
    <published>2020-07-10T09:26:52.000Z</published>
    <updated>2020-08-10T04:19:21.374Z</updated>
    
    <content type="html"><![CDATA[<h2 id="编译内核需要做什么？"><a href="#编译内核需要做什么？" class="headerlink" title="编译内核需要做什么？"></a><strong>编译内核需要做什么？</strong></h2><ol><li>查找并且下载一份内核源代码</li><li>配置内核。</li><li>编译内核和模块。</li><li>配置启动文件。<a id="more"></a></li></ol><h2 id="Linux内核代码获取与解压"><a href="#Linux内核代码获取与解压" class="headerlink" title="Linux内核代码获取与解压"></a><strong>Linux内核代码获取与解压</strong></h2><p>建议直接去官方网站（ <a href="http://www.kernel.org">www.kernel.org</a> ）下载Linux内核代码。<br>编译内核时，一般将源码解压到/usr/src目录下，解压完成后会在该目录下生成一个与源码包版本号一致的目录。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">mv linux-3.12.6.tar.xz /usr/src //将下载的内核移动到/usr/src/目录下</span><br><span class="line"></span><br><span class="line">// 切换到/usr/src/ 下载的压缩包是.tar.xz后缀，解压分为两步</span><br><span class="line">xz -d linux-3.12.6.tar.xz</span><br><span class="line">tar -xvf linux-3.12.6.tar</span><br></pre></td></tr></table></figure><h2 id="linux-DOC-编译生成"><a href="#linux-DOC-编译生成" class="headerlink" title="linux DOC 编译生成"></a><strong>linux DOC 编译生成</strong></h2><p>linux源根目录/Documentation/00-INDEX:目录索引<br>linux源根目录/Documentation/HOWTO:指南<br>生成linux内核帮助文档:在linux源根目录(Documentation) 执行下面的命令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">make htmldocs</span><br><span class="line">&#x2F;&#x2F;ubuntu16下需要执行sudo apt-get install xmlto安装插件才可生成doc文档</span><br></pre></td></tr></table></figure><p>在 <a href="https://www.kernel.org/doc/html/latest/index.html">https://www.kernel.org/doc/html/latest/index.html</a> 也能查看到官方生成的文档</p><h2 id="内核编译的准备工作"><a href="#内核编译的准备工作" class="headerlink" title="内核编译的准备工作"></a><strong>内核编译的准备工作</strong></h2><p>说明一下：本文章是根据Ubuntu系统的命令格式来写的<br>更换内核之前，先更新一下源：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get update</span><br></pre></td></tr></table></figure><p>然后安装一些必要的编译内核的工具</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apt-get install libncurses5-dev build-essential kernel-package</span><br></pre></td></tr></table></figure><ul><li>libncurses5-dev是为了运行make menuconfig</li><li>Build-essential是编译工具</li><li>kernel-package是编译内核工具</li></ul><p>进入下载的内核主目录:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd linux-3.12.6</span><br></pre></td></tr></table></figure><p>清理所有产生的文件与config配置文件（第一次编译内核时可省略）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo make mrproper</span><br></pre></td></tr></table></figure><h2 id="配置内核"><a href="#配置内核" class="headerlink" title="配置内核"></a><strong>配置内核</strong></h2><p>在编译内核时，需要配置内核，可以使用下面命令中的一个：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">make config     #（基于文本的最为传统的配置界面，不推荐使用）</span><br><span class="line">make menuconfig #（基于文本菜单的配置界面）开启文本菜单选项，对窗口有限制，尽量调大窗口，否则会出错</span><br><span class="line">                #使用此命令需安装gcc和ncurses-devel</span><br><span class="line"></span><br><span class="line">make xconfig    #（要求QT被安装）</span><br><span class="line">make gconfig    #（要求GTK+被安装）</span><br></pre></td></tr></table></figure><p><code>make menuconfig</code>最值得推荐，它不依赖于QT或GTK+，且非常直观，对/home/baohua/develop/linux中的Linux 4.0-rc1内核运行 <code>make ARCH=arm menuconfig</code>后的界面如下图所示。</p><p><img src="/2020/07/10/Linux%E5%86%85%E6%A0%B8%E7%9A%84%E7%BC%96%E8%AF%91%E5%8F%8A%E5%8A%A0%E8%BD%BD/Linux%E5%86%85%E6%A0%B8%E7%BC%96%E8%AF%91%E9%85%8D%E7%BD%AE.JPG" alt="图1，Linux内核编译配置"></p><p>对每一个配置选项，用户有三种选含义如下：</p><ul><li><code>&lt;*&gt;或[*]</code>——编译进内核本体</li><li>[M]——编译成内核模块</li><li>[  ]——不将该功能编译进内核</li></ul><p>Linux内核的配置系统由以下3个部分组成。</p><ul><li><code>Makefile</code>：分布在Linux内核源代码中，定义Linux内核的编译规则。</li><li><code>Kconfig</code>（配置文件）：给用户提供配置选择的功能。</li><li><code>配置工具</code>：包括配置命令解释器（对配置脚本中使用的配置命令进行解释）和配置用户界面（提供字符界面和图形界面）。这些配置工具使用的都是脚本语言，如用Tcl/TK、Perl等。</li></ul><p><code>.config配置文件</code>(隐藏文件)：</p><ul><li>使用make config、make menuconfig等命令后，会生成一个.config配置文件存储配置信息，记录哪些部分被编译入内核、哪些部分被编译为内核模块。</li><li>如果想方便配置，可复制/boot/config文件覆盖.config文件，直接修改即可。</li></ul><p>运行make menuconfig等时，配置工具首先分析与体系结构对应的/arch/xxx/Kconfig文件（xxx即为传入的ARCH参数）</p><ol><li><strong>通过source引入多层次的Kconfig文件</strong>：/arch/xxx/Kconfig文件中除本身包含一些与体系结构相关的配置项和配置菜单以外，还通过source语句引入了一系列Kconfig文件，而这些Kconfig又可能再次通过source引入下一层的Kconfig。</li><li>配置工具依据Kconfig包含的菜单和条目即可描绘出一个如图1所示的分层结构。</li></ol><h2 id="编译内核和模块"><a href="#编译内核和模块" class="headerlink" title="编译内核和模块"></a><strong>编译内核和模块</strong></h2><p>编译</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo make -j4 <span class="comment"># 以4个内核多线程方式编译内核</span></span><br><span class="line">sudo make modules -j4</span><br></pre></td></tr></table></figure><p>安装</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo make modules_install</span><br><span class="line">sudo make install</span><br></pre></td></tr></table></figure><p>此时，内核编译完成。安装完成后会在/boot目录下生成几个新内核的文件。<br>剩下是修改启动程序配置，然后运行新的内核程序。</p><h2 id="配置启动文件"><a href="#配置启动文件" class="headerlink" title="配置启动文件"></a><strong>配置启动文件</strong></h2><p>进入引导程序（boot loader)的配置文件看看，对于不同的引导程序(LILO和GRUB）,其配置文件所在路径不同。</p><ul><li>对于LILO，路径为：/etc/lilo.conf</li><li>对于GRUB，路径为：/boot/grub/grub.cfg  </li></ul><p>本系统为GRUB引导，因此进入/boot/grub/grub.cfg<br>查看grub.conf配置文件，会发现新内核的信息已经写入了</p><p>如果想开机默认显示grub菜单栏：编辑grub.conf，然后注释掉”GRUB_HIDDEN_TIMEOUT”和”GRUB_HIDDEN_TIMEOUT_QUIET”</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo vi /etc/default/grub</span><br></pre></td></tr></table></figure><p>编辑完毕之后更新一下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo update-grub</span><br></pre></td></tr></table></figure><p>重启,然后选择更改后的内核</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo reboot</span><br></pre></td></tr></table></figure><h2 id="Kconfig和Makefile"><a href="#Kconfig和Makefile" class="headerlink" title="Kconfig和Makefile"></a><strong>Kconfig和Makefile</strong></h2><p><strong>在Linux内核中增加程序</strong>需要完成以下3项工作:</p><ol><li>将编写的源代码复制到Linux内核源代码的相应目录中。</li><li><strong>修改Kconfig配置</strong>：在目录的Kconfig文件中增加关于新源代码对应项目的<strong>编译配置选项</strong>。</li><li><strong>修改Makefile编译代码</strong>：在目录的Makefile文件中增加对新源代码的<strong>编译条目</strong>。</li></ol><h3 id="内核编译中的Makefile"><a href="#内核编译中的Makefile" class="headerlink" title="内核编译中的Makefile"></a><strong>内核编译中的Makefile</strong></h3><p>这里主要对内核源代码各级子目录中的kbuild（内核的编译系统）Makefile进行简单介绍，这部分是内核模块或设备驱动开发者最常接触到的。</p><p>Makefile的语法包括如下几个方面。</p><ol><li><code>目标定义</code>：用来定义哪些内容要作为模块编译，哪些要编译并链接进内核。（编译成模块or编译进内核）<ul><li>代码示例：<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">obj -y += foo.o</span><br><span class="line">------------------------------------------------------------------------------------</span><br><span class="line">obj -y 表示要由foo.c或者foo.s文件编译得到foo.o并链接进内核（无条件编译，所以不需要Kconfig配置选项）</span><br><span class="line">obj -m 则表示该文件要作为模块编译。</span><br><span class="line">obj -n 形式的目标不会被编译。</span><br></pre></td></tr></table></figure></li><li>更常见的做法是根据<code>make menuconfig</code>后生成的<code>config文件</code>的<code>CONFIG_变量</code>来决定文件的编译方式，如：<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">obj -$(CONfiG_ISDN) += isdn.o</span><br><span class="line">obj -$(CONfiG_ISDN_PPP_BSDCOMP) += isdn_bsdcomp.o</span><br></pre></td></tr></table></figure></li><li>除了具有上述<code>obj -</code>形式的目标以外，还有<code>lib -y library库</code>、<code>hostprogs -y主机程序</code>等目标，但是这两类基本都应用在特定的目录和场合下。</li></ul></li><li><code>多文件模块的定义</code>:处理一个模块由多个文件组成的情况。</li></ol><ul><li>最简单的Makefile仅需一行代码就够了。如果一个模块由多个文件组成，会稍微复杂一些，这时候应采用模块名加-y或-$后缀的形式来定义模块的组成文件，如下：<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#Makefile for the linux ext2-filesystem routines.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line">obj -$(CONfiG_EXT2_FS) += ext2.o</span><br><span class="line">ext2 -y := balloc.o dir.o file.o fsync.o ialloc.o inode.o ioctl.o namei.o super.o symlink.o</span><br><span class="line">ext2 -$(CONfiG_EXT2_FS_XATTR) += xattr.o xattr_user.o xattr_trusted.o</span><br><span class="line">ext2 -$(CONfiG_EXT2_FS_POSIX_ACL) += acl.o</span><br><span class="line">ext2 -$(CONfiG_EXT2_FS_SECURITY) += xattr_security.o</span><br><span class="line">ext2 -$(CONfiG_EXT2_FS_XIP) += xip.o</span><br></pre></td></tr></table></figure></li><li>模块的名字为ext2<ul><li>由balloc.o、dir.o、file.o等多个目标文件最终链接生成ext2.o直至ext2.ko文件，</li><li>并且是否包括xattr.o、acl.o等则取决于内核配置文件的配置情况，例如，如果CONFIG_EXT2_FS_POSIX_ACL被选择，则编译acl.c得到acl.o并最终链接进ext2。</li></ul></li></ul><ol start="3"><li><code>目录层次的迭代</code>:处理是否编译一个目录中文件进内核的情况。<br>如下例：<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">obj -$(CONfiG_EXT2_FS) += ext2/</span><br></pre></td></tr></table></figure>当CONFIG_EXT2_FS的值为y或m时，kbuild将会把ext2目录列入向下迭代的目标中。</li></ol><h3 id="Kconfig"><a href="#Kconfig" class="headerlink" title="Kconfig"></a><strong>Kconfig</strong></h3><p>Kconfig（配置文件）：在内核编译时给用户提供配置选择的功能。<br>主要包括如下几个方面。</p><ol><li><code>配置选项</code></li></ol><ul><li><p>大多数内核配置选项都对应Kconfig中的一个配置选项（config）：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">config MODVERSIONS       <span class="comment"># 配置选项</span></span><br><span class="line">bool <span class="string">"Module versioning support"</span>   <span class="comment">#配置选项的类型</span></span><br><span class="line"><span class="built_in">help</span>                 <span class="comment"># 帮助信息</span></span><br><span class="line">   Usually, you have to use modules compiled with your kernel.</span><br><span class="line">   Saying Y here makes it ...</span><br></pre></td></tr></table></figure><p>“config”关键字定义新的配置选项，之后的几行代码定义了该配置选项的属性。</p></li><li><p><code>配置选项的属性</code>包括:</p><ul><li><code>类型</code>、<code>数据范围</code>、<code>输入提示</code>、</li><li><code>依赖关系</code>、<code>选择关系</code>及<code>帮助信息</code>、<code>默认值</code>等。</li></ul></li><li><p>每个<code>配置选项都必须指定类型</code>，<code>配置选项类型</code>包括<code>bool</code>、<code>tristate</code>、<code>string</code>、<code>hex</code>和<code>int</code></p><ul><li>其中<code>tristate</code>和<code>string</code>是两种<code>基本类型</code>，其他类型都基于这两种基本类型。</li></ul></li><li><p>类型定义后可以紧跟<code>输入提示</code>，</p><ul><li>下面两段脚本是等价的：<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bool <span class="string">"Networking support"</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">bool</span><br><span class="line">prompt <span class="string">"Networking support"</span></span><br></pre></td></tr></table></figure></li><li>输入提示的一般格式为：<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">prompt &lt;prompt&gt; [<span class="keyword">if</span> &lt;expr&gt;]<span class="comment">#可选的if用来表示该提示的依赖关系。</span></span><br></pre></td></tr></table></figure></li><li>配置使用默认值并使用if的格式为：<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">default &lt;expr&gt; [<span class="keyword">if</span> &lt;expr&gt;]</span><br></pre></td></tr></table></figure>如果用户不设置对应的选项，配置选项的值就是默认值。//为了便于理解，可以看下面的例子；</li></ul></li><li><p><code>依赖关系的格式</code>为：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">depends on（或者requires） &lt;expr&gt;</span><br></pre></td></tr></table></figure><ul><li>如果定义了多重依赖关系，它们之间用“&amp;&amp;”间隔。</li><li>依赖关系也可以应用到该菜单中所有的其他选项（同样接受if表达式）内，下面两段脚本是等价的：<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">bool <span class="string">"foo"</span> <span class="keyword">if</span> BAR</span><br><span class="line">default y <span class="keyword">if</span> BAR</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">depends on BAR</span><br><span class="line">bool <span class="string">"foo"</span></span><br><span class="line">default y</span><br></pre></td></tr></table></figure></li></ul></li><li><p><code>选择关系（也称为反向依赖关系）</code>:A如果选择了B，则在A被选中的情况下，B自动被选中。(我个人理解为一种包含关系)格式为：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select &lt;symbol&gt; [<span class="keyword">if</span> &lt;expr&gt;]</span><br></pre></td></tr></table></figure></li><li><p><code>数据范围的格式</code>为：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">range &lt;symbol&gt; &lt;symbol&gt; [<span class="keyword">if</span> &lt;expr&gt;]</span><br></pre></td></tr></table></figure><p>int和hex类型的选项设置可以接受的输入值范围，用户只能输入大于等于第一个symbol，且小于等于第二个symbol的值。</p></li><li><p><code>帮助信息的格式</code>为：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">help</span>（或---<span class="built_in">help</span>---）</span><br><span class="line">开始</span><br><span class="line">…</span><br><span class="line">结束</span><br></pre></td></tr></table></figure><ul><li>帮助信息完全靠文本缩进识别结束。</li><li>“—help—”和“help”在作用上没有区别，设计“—help—”的初衷在于将文件中的配置逻辑与给开发人员的提示分开。</li></ul></li></ul><ol start="2"><li><code>菜单结构</code><br>配置选项在菜单树结构中的位置可由两种方法决定。</li></ol><ul><li>第一种方式：<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">menu <span class="string">"Network device support"</span></span><br><span class="line">depends on NET</span><br><span class="line">config NETDEVICES</span><br><span class="line">…</span><br><span class="line">endmenu</span><br></pre></td></tr></table></figure><ul><li>所有处于“menu”和“endmenu”之间的配置选项都会成为“Network device support”的子菜单，而且，所有子菜单（config）选项都会继承父菜单（menu）的依赖关系，比如，“Network device support”对“NET”的依赖会被加到配置选项NETDEVICES的依赖列表中。</li><li>注意：menu后面跟的“Network device support”项仅仅是1个菜单，没有对应真实的配置选项，也不具备3种不同的状态。这是它和config的区别。</li></ul></li><li>第二种方式：通过分析依赖关系生成菜单结构：如果菜单项在一定程度上依赖于前面的选项，它就能成为该选项的子菜单。如果父选项为“n”，子选项不可见；如果父选项可见，子选项才可见。示例如下：<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">config MODULES</span><br><span class="line">bool <span class="string">"Enable loadable module support"</span></span><br><span class="line">config MODVERSIONS</span><br><span class="line">bool <span class="string">"Set version information on all module symbols"</span></span><br><span class="line">depends on MODULES</span><br><span class="line">comment <span class="string">"module support disabled"</span></span><br><span class="line">depends on !MODULES</span><br></pre></td></tr></table></figure><ul><li>MODVERSIONS直接依赖MODULES，只有MODULES不为“n”时，该选项才可见。</li></ul></li><li>除此之外，Kconfig中还可能使用“choices…endchoice”、“comment”、“if…endif”这样的语法结构。其中“choices…endchoice”的结构为：<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">choice</span><br><span class="line">&lt;choice options&gt;</span><br><span class="line">&lt;choice block&gt;</span><br><span class="line">endchoice</span><br></pre></td></tr></table></figure>它定义一个选择群，其接受的选项（choice options）可以是前面描述的任何属性，例如，LDD6410的VGA输出分辨率可以是1024×768或者800×600，在drivers/video/samsung/Kconfig中就定义了如下choice：<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">choice</span><br><span class="line">depends on FB_S3C_VGA</span><br><span class="line">prompt <span class="string">"Select VGA Resolution for S3C Framebuffer"</span></span><br><span class="line">default FB_S3C_VGA_1024_768</span><br><span class="line">config FB_S3C_VGA_1024_768</span><br><span class="line">bool <span class="string">"1024*768@60Hz"</span></span><br><span class="line">---<span class="built_in">help</span>---</span><br><span class="line">TBA</span><br><span class="line">config FB_S3C_VGA_640_480</span><br><span class="line">bool <span class="string">"640*480@60Hz"</span></span><br><span class="line">---<span class="built_in">help</span>---</span><br><span class="line">TBA</span><br><span class="line">endchoice</span><br></pre></td></tr></table></figure>相关资料：<blockquote><p>用Kconfig配置脚本和Makefile脚本编写的更详细信息，可以分别参见内核文档Documentation目录内的kbuild子目录下的Kconfig-language.txt和Makefiles.txt文件。</p></blockquote></li></ul><h2 id="注解"><a href="#注解" class="headerlink" title="注解"></a>注解</h2><p>内核多次编译过，在编译开始之前可进行清理</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"> make clean       <span class="comment">#清理编译的文件，但保留配置文件</span></span><br><span class="line"> make mrproper    <span class="comment">#移除所有编译生成的文件、配置文件和备份文件</span></span><br><span class="line"> make distclean   <span class="comment">#清理所有产生的文件与config配置文件与编辑过的补丁文件,也就是完全清理</span></span><br></pre></td></tr></table></figure><p>如果想快速编译，可进行如下操作</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">make -j *         #*为cup核心数</span><br></pre></td></tr></table></figure><p>如何只编译内核的部分代码</p><p>只编译某子目录中的相关代码：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /usr/src/linux</span><br><span class="line">make  path/to/dir/</span><br></pre></td></tr></table></figure><p>只编译部分模块：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">make M&#x3D;path&#x2F;to&#x2F;dir</span><br></pre></td></tr></table></figure><p>只编译一个模块：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">make path&#x2F;to&#x2F;dir&#x2F;MOD_NAME.ko</span><br><span class="line">&#96;&#96;&#96;</span><br><span class="line">将编译生成的文件保存至别处：</span><br></pre></td></tr></table></figure><p>make O=/path/to/somewhere</p><p>```</p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p>《Linux设备驱动开发详解：基于最新的Linux4.0内核》<br><a href="https://blog.csdn.net/baidu_24256693/article/details/80115354">linux内核编译详解</a><br><a href="https://blog.csdn.net/qq_34247099/article/details/50949720">Linux 内核编译</a><br><a href="https://www.jianshu.com/p/5d7f7d9dc503">Linux源码下生成并安装内核文档</a><br><a href="https://www.shanlily.cn/archives/444">Linux(ubuntu)更换内核方法</a><br><a href="https://www.cnblogs.com/bitor/p/9608725.html">linux内核编程入门 hello world</a><br><a href="https://blog.csdn.net/weixin_38391755/article/details/80380786">Makefile教程（绝对经典，所有问题看这一篇足够了）</a><br><a href="https://www.zhihu.com/question/23792247?sort=created">如何系统地学习 Makefile 相关的知识（读/写）？</a><br><a href="https://baike.baidu.com/item/Makefile/4619787?fr=aladdin">Makefile-百度百科</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;编译内核需要做什么？&quot;&gt;&lt;a href=&quot;#编译内核需要做什么？&quot; class=&quot;headerlink&quot; title=&quot;编译内核需要做什么？&quot;&gt;&lt;/a&gt;&lt;strong&gt;编译内核需要做什么？&lt;/strong&gt;&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;查找并且下载一份内核源代码&lt;/li&gt;
&lt;li&gt;配置内核。&lt;/li&gt;
&lt;li&gt;编译内核和模块。&lt;/li&gt;
&lt;li&gt;配置启动文件。&lt;/li&gt;&lt;/ol&gt;
    
    </summary>
    
    
      <category term="Linux" scheme="https://stemha.github.io/categories/Linux/"/>
    
    
      <category term="Linux" scheme="https://stemha.github.io/tags/Linux/"/>
    
      <category term="内核" scheme="https://stemha.github.io/tags/%E5%86%85%E6%A0%B8/"/>
    
      <category term="编译加载" scheme="https://stemha.github.io/tags/%E7%BC%96%E8%AF%91%E5%8A%A0%E8%BD%BD/"/>
    
  </entry>
  
  <entry>
    <title>Linux内核目录文件说明</title>
    <link href="https://stemha.github.io/2020/07/09/LINUX%E5%86%85%E6%A0%B8%E4%BB%A3%E7%A0%81%E7%9B%AE%E5%BD%95%E6%96%87%E4%BB%B6%E8%AF%B4%E6%98%8E/"/>
    <id>https://stemha.github.io/2020/07/09/LINUX%E5%86%85%E6%A0%B8%E4%BB%A3%E7%A0%81%E7%9B%AE%E5%BD%95%E6%96%87%E4%BB%B6%E8%AF%B4%E6%98%8E/</id>
    <published>2020-07-09T15:37:51.000Z</published>
    <updated>2020-08-10T04:19:21.224Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a><strong>前言</strong></h2><p>Linux内核也是一个抢占式多任务内核。这意味该内核可以暂停一些任务来保证任何应用都有机会来使用CPU。比如：</p><pre><code>如果一个应用正在运行但是正在等待一些数据，内核会把这个应用暂停并允许其他的程序使用新释放的CPU资源，直到数据到来。否则的话，系统就会浪费资源给那些正在等待数据或者其他程序执行的的任务。内核将会强制程序去等待或者停止使用CPU。没有内核的允许，应用程序不能脱离暂停或者使用CPU。</code></pre><p>Linux设计思想是“一切皆文件”：</p><pre><code>设备作为文件显示在/dev文件夹下，如果一个用户想要访问在存储卡上的数据，他们能通过设备文件访问这些数据。</code></pre><p>已编译的Linux内核：</p><pre><code>在引导文件夹(/boot),用户会看到诸如“vmlinux”或者“vmlinuz”的文件。这两者都是已编译的Linux内核。以“z”结尾的是已压缩的。“vm”代表虚拟内存。SPARC处理器的系统上，用户可以看见一个zImage文件。部分用户可以发现一个bzImage文件，这是一个已压缩的Linux内核。这些引导文件都是不能更改的，除非用户知道他们正在做什么。否则系统会变成无法引导，启动不了。</code></pre><p>Linux内核是所有Linux系统的核心。如果有任何恶意代码控制或破害了内核的任何一部分，那么系统会严重受损，文件可能被删除或损坏，私人信息可能被盗等等。</p><blockquote><p>注意事项: 绝不在内核源代码内移动文件，除非你知道你在做什么。否则，编译会由于丢失文件失败。</p></blockquote><p>内核在操作系统目录下的路径一般为：/usr/src/</p><a id="more"></a><h2 id="Linux内核源代码划分"><a href="#Linux内核源代码划分" class="headerlink" title="Linux内核源代码划分"></a><strong>Linux内核源代码划分</strong></h2><p>Linux内核的文件夹结构保持相对稳定。内核开发者会做一些修改，但总体来说，这些设置对整个内核版本都是一样。驱动程序文件夹的布局也基本保持一样。<br>Linux内核源代码包括三个主要部分：</p><ol><li><p>内核核心代码，各个子系统和子模块，以及其它的支撑子系统，例如电源管理、Linux初始化等</p></li><li><p>其它非核心代码，例如库文件（因为Linux内核是一个自包含的内核，即内核不依赖其它的任何软件，自己就可以编译通过）、固件集合、KVM（虚拟机技术）等</p></li><li><p>编译脚本、配置文件、帮助文档、版权说明等辅助性文件</p></li></ol><p>一般在每个目录下都有一个.depend文件和一个Makefile文件。这两个文件都是编译时使用的辅助文件。仔细阅读这两个文件对弄清各个文件之间的联系和依托关系很有帮助。有的目录下还有Readme文件，它是对该目录下文件的一些说明，同样有利于对内核源码的理解。</p><h2 id="Linux内核源代码一级目录"><a href="#Linux内核源代码一级目录" class="headerlink" title="Linux内核源代码一级目录"></a><strong>Linux内核源代码一级目录</strong></h2><h3 id="目录文件"><a href="#目录文件" class="headerlink" title="目录文件"></a><strong>目录文件</strong></h3><p>Linux内核源代码包含如下目录：</p><ol><li><p><code>arch</code>： 包含和硬件体系结构相关的代码</p><ul><li>每种平台占一个相应的目录，如i386、arm、arm64、powerpc、mips等。Linux内核目前已经支持30种左右的体系结构。</li><li>在arch目录下，存放的是各个平台以及各个平台的芯片对Linux内核进程调度、内存管理、中断等的支持，以及每个具体的SoC和电路板的板级支持代码。</li><li>随着时间的推移，一些新的处理器将被支持,有些会被放弃。</li><li>/arch/boot包含了系统启动的相关信息和make之后生成的启动镜像文件bzImage。</li></ul></li><li><p><code>block</code>：包含块设备驱动程序的代码。</p><ul><li>该目录用于实现块设备的基本框架和块设备的I/O调度算法</li><li>块设备是以数据块方式接收和发送的数据的设备。数据块都是一块一块的数据而不是持续的数据流。</li></ul></li><li><p><code>crypto</code>：英文意思是加密。目录下放了一些各种常见的加密算法的C语言代码实现。</p><ul><li>常用加密和散列算法（如AES、SHA等），还有一些压缩和CRC校验算法。</li></ul></li><li><p><code>documentation</code>：内核各部分的通用解释和注释。</p></li><li><p><code>drivers</code>：设备驱动程序，每个不同的驱动占用一个子目录。</p><ul><li>每个文件夹都以硬件的种类或者型号命名。</li><li>如char、block、net、mtd、i2c等。</li><li>键盘和鼠标驱动也在这个input文件夹中</li></ul></li><li><p><code>fireware</code>：包含了让计算机读取和理解从设备发来的信号的代码。</p><pre><code>举例来说，一个摄像头管理它自己的硬件，但计算机必须了解摄像头给计算机发送的信号。Linux系统会使用vicam固件（firmware）来理解摄像头的通讯。否则，没有了固件，Linux系统将不知道如何处理摄像头发来的信息。另外，固件同样有助于将Linux系统发送消息给该设备。这样Linux系统可以告诉摄像头重新调整或关闭摄像头。</code></pre></li><li><p><code>fs</code>：fs是file system，所支持的各种文件系统</p><ul><li><p>如EXT、FAT、NTFS、JFFS2等。</p></li><li><p>fs文件夹内，开发者会看到一些不在文件夹中的文件。这些文件用来控制整个文件系统。例如，mount.h中会包含挂载文件系统的代码。</p></li><li><p>文件系统是以结构化的方式来存储和管理的存储设备上的文件和目录。每个文件系统都有自己的优点和缺点。这是由文件系统的设计决定的。</p><pre><code>举例来说，NTFS文件系统支持的透明压缩（当启用时，会在用户不知道的情况下自动压缩存储文件）。大多数文件系统缺乏此功能，但如果在fs文件夹里编入相应的文件，它们也有这种能力。</code></pre></li></ul></li><li><p><code>include</code>：存放内核所需、与平台无关的头文件</p><ul><li>内核API级别头文件。</li><li>与系统相关的头文件放置在include/linux子目录下。</li><li>与平台相关的头文件已经被移动到 arch 平台的include 目录，如 ARM 的头文件目录&lt;arch/arm/include/asm/&gt;</li></ul></li><li><p><code>init</code>：内核初始化代码。</p><ul><li>包含了<strong>内核启动的处理代码(INITiation)</strong>。<strong>main.c是内核的核心文件</strong>，这是用来衔接所有的其他文件的源代码主文件。</li><li>著名的start_kernel（）就位于init/main.c文件中。</li></ul></li><li><p><code>ipc</code>：进程间通信的代码。</p><ul><li>用于实现System V的进程间通信（Inter Process Communication，IPC）模块 .</li><li>此文件夹中的代码是作为内核与进程之间的通信层。内核控制着硬件，因此程序只能请求内核来执行任务。</li><li>假设用户有一个打开DVD托盘的程序。程序不直接打开托盘，该程序通知内核，然后，内核给硬件发送一个信号去打开托盘。</li><li>这里的代码同样管理kill信号。<ul><li>举例来说，当系统管理员打开进程管理器去关闭一个已经锁死的程序，这个关闭程序的信号被称为kill信号。</li><li><strong>内核接收到信号</strong>，然后内核会要求程序停止或直接把进程从内存和CPU中移除（取决于kill的类型）。</li></ul></li><li>命令行中的管道同样用于进程间通信。<ul><li>管道会<strong>告诉内核</strong>在某个内存页上写入输出数据。程序或者命令得到的数据是来自内存页上的某个给定的指针。</li></ul></li></ul></li><li><p><code>kernel</code>：内核最核心的部分，包括进程调度、定时器等</p><ul><li>和平台相关的一部分代码放在arch/*/kernel目录下。</li><li>这个文件夹中的代码控制内核本身</li><li>在该文件夹下有个”power”文件夹，这里的代码可以使计算机重新启动、关机和挂起。</li></ul></li><li><p><code>lib</code>：库文件代码。</p><ul><li>这里的库函数和C语言的库函数不一样。在内核编程中是不能用C语言标准库函数，此处lib目录下的库函数就是用来替代那些标准库函数的。</li><li>例如在内核中要打印信息不能用printf，而要用printk，这个printk就是这个lib目录下的。</li></ul></li><li><p><code>mm</code>：（memory management）内存管理代码</p><ul><li>和平台相关的一部分代码放在arch/*/mm目录下。</li><li>内存并不是任意存储在RAM芯片上的。相反，内核小心地将数据放在RAM芯片上。内核不会覆盖任何正在使用或保存重要数据的内存区域。</li></ul></li><li><p><code>net</code>：网络相关代码</p><ul><li>实现各种常见的网络协议。</li></ul></li><li><p><code>samples</code>:</p><ul><li>存放提供的一些内核编程范例，如kfifo；后者相关用户态编程范例，如hidraw</li><li>此文件夹包含了程序示例和正在编写中的模块代码。<ul><li>假设一个新的模块引入了一个想要的有用功能，但没有程序员说它已经可以正常运行在内核上。那么，这些模块就会移到这里。这给了新内核程序员一个机会通过这个文件夹来获得帮助，或者选择一个他们想要协助开发的模块。</li></ul></li></ul></li><li><p><code>scripts</code>：用于配置内核的脚本文件。</p><ul><li>这些脚本文件不是linux内核工作时使用的，而是用来辅助linux内核的配置和编译。</li><li>这个目录下的脚本不需要详细的分析，只需要通过外围来重点学会配置和编译linux内核即可。</li><li>最好不要改变这个文件夹内的任何东西。否则，可能无法配置或编译内核。</li></ul></li><li><p><code>security</code>：主要是一个SELinux的模块。</p></li><li><p><code>sound</code>：声卡驱动</p><ul><li>ALSA、OSS音频设备的驱动核心代码和常用设备驱动。</li></ul></li><li><p><code>tools</code>：编译过程中一些主机必要工具，这个文件夹中包含了和内核交互的工具。</p></li><li><p><code>usr</code>：早期用户空间代码（所谓的initramfs）</p><ul><li>实现用于打包和压缩的cpio等。 </li><li>对于vmlinuz和其他类似的文件，usr文件夹中的代码在内核编译完成后创建这些文件。</li><li>该目录中的代码为内核尚未完全启动时执行用户空间代码提供了支持</li></ul></li><li><p><code>virt</code>：内核虚拟机KVM</p></li></ol><blockquote><p>内核一般要做到drivers与arch的软件架构分离，驱动中不包含板级信息，让驱动跨平台。同时内核的通用部分（如kernel、fs、ipc、net等）则与具体的硬件（arch和drivers）剥离。<br>与内核移植紧密的目录是arch和drivers，有点相关的是include、block、mm、net、lib等目录。</p></blockquote><h3 id="普通文件"><a href="#普通文件" class="headerlink" title="普通文件"></a><strong>普通文件</strong></h3><p>还有一些文件在源代码的根目录下：</p><ol><li><code>COPYING</code> ：许可和授权信息。<ul><li>Linux内核在GPLv2许可证下授权。该许可证授予任何人有权免费去使用、修改、分发和共享源代码和编译代码。然而，没有人可以出售源代码。</li></ul></li><li><code>CREDITS</code> ： 贡献者列表</li><li><code>Kbuild</code> ： 这是一个设置一些内核设定的脚本。<ul><li>Kbuild是Kernel build（内核编译）的意思，这个文件就是linux内核特有的内核编译体系需要用到的文件。</li><li>打个比方，这个脚本设定一个ARCH变量，这是开发者想要生成的内核支持的处理器类型。</li></ul></li><li><code>Kconfig</code> ： 这个脚本会在开发人员配置内核的时候用到，这会在以后的文章中讨论。</li><li><code>MAINTAINERS</code> ： 这是一个目前维护者列表，他们的电子邮件地址，主页，和他们负责开发和维护的内核的特定部分或文件。当一个开发者在内核中发现一个问题，并希望能够报告给能够处理这个问题的维护者时，这是是很有用的。</li><li><code>Makefile</code> ： linux内核的总Makefile，整个内核工程是用这个Makefile来管理的。<ul><li>这个脚本是编译内核的主要文件。这个文件将编译参数和编译所需的文件和必要的信息传给编译器。</li><li>用来组织内核的各模块，记录了个模块间的相互这间的联系和依托关系</li><li>仔细阅读各子目录下的Makefile文件对弄清各个文件这间的联系和依托关系很有帮助。</li></ul></li><li><code>README</code> ：提供给开发者想要知道的如何编译内核的信息。</li><li><code>REPORTING-BUGS</code> ：这个文档提供如何报告问题的信息。</li></ol><h2 id="Linux内核源代码二级目录"><a href="#Linux内核源代码二级目录" class="headerlink" title="Linux内核源代码二级目录"></a><strong>Linux内核源代码二级目录</strong></h2><h3 id="arch目录"><a href="#arch目录" class="headerlink" title="arch目录"></a><strong>arch目录</strong></h3><p>Kconfig文件，它用于设置这个目录里的源代码编译所需的一系列设定。每个支持的处理器架构都在它相应的文件夹中，如arm64、arm32、x86、mips等。</p><p><code>/arch/boot</code> ：</p><ul><li>内核需要的特定平台代码，包含了当前平台上系统引导过程使用的部分或全部代码。这部分代码应用于对应平台，用于完成向系统内存装载内核镜像的工作。</li><li>包含了系统启动的相关信息和make之后生成的启动镜像文件bzImage</li></ul><p>/arch/boot/dts：设备树文件<br>/arch/kernel：用于存放特定体系结构特有信号量的实现代码和对称多处理器（Symmetric MultiProccessing，简称SMP）相关模块。<br>/lib：通用函数在特定体系结构的文件，如利用当前体系结构特性实现的strlen和memcpy内存操作函数；与通用的实现方法相比，他们的开销小、更加高效。<br>/math-emu：模拟FPU的代码，在ARM中，使用/math-xxx代替<br>/arch/mm：特定体系结构的内存管理文件<br>/arch/include：特定体系的头文件</p><h3 id="driver目录"><a href="#driver目录" class="headerlink" title="driver目录"></a><strong>driver目录</strong></h3><p>Linux内核驱动开发工程师来说，最常接触的就是driver目录<br><code>驱动程序</code>是使内核能够沟通和操作硬件或协议（规则和标准）的小程序。没有驱动程序，内核不知道如何与硬件沟通或者处理协议（内核实际上先发送指令给BIOS，然后BIOS传给硬件）。 </p><h4 id="通用驱动程序与专用驱动程序"><a href="#通用驱动程序与专用驱动程序" class="headerlink" title="通用驱动程序与专用驱动程序"></a><strong>通用驱动程序与专用驱动程序</strong></h4><p>许多驱动程序是<code>通用驱动程序</code>，这意味着一个通用键盘驱动可以使内核可以处理几乎所有的键盘。<br>有些驱动是<code>专用驱动程序</code>，像苹果和Commodore就分别为苹果电脑和Amiga系统制造了专门的硬件。<br>Linux内核中已经包含了许多诸如智能手机、苹果、Amiga系统、PS3、Android平板，和许多其他设备的驱动程序。</p><p>注意：有些设备的驱动不在本目录中。比如，射频驱动在net和media文件夹下。</p><h4 id="目录与文件"><a href="#目录与文件" class="headerlink" title="目录与文件"></a><strong>目录与文件</strong></h4><ol><li>accessibility ：这些驱动提供支持一些辅助设备。</li></ol><ul><li>在Linux 3.9.4中，这个文件夹中只有一个驱动就是盲文设备驱动。</li></ul><ol start="2"><li><p>acpi ： 高级配置和电源接口（ACPI : Advanced Configuration and Power Interface）驱动用来管理电源使用。</p></li><li><p>amba ： 高级微控制器总线架构（AMBA : Advanced Microcontroller Bus Architecture）是与片上系统（SoC）的管理和互连的协议。</p><ul><li>SoC是一块包含许多或所有必要的计算机组件的芯片。这里的AMBA驱动让内核能够运行在这上面。</li></ul></li><li><p>ata ： 该目录包含PATA和SATA设备的驱动程序。</p><ul><li>串行ATA（SATA）是一种连接主机总线适配器到像硬盘那样的存储器的计算机总线接口。</li><li>并行ATA（PATA）用于连接存储设备，如硬盘驱动器，软盘驱动器，光盘驱动器的标准。PATA就是我们所说的IDE。</li></ul></li><li><p>atm : 异步通信模式(ATM : Asynchronous Transfer Mode)是一种通信标准。</p><ul><li>这里有各种接到PCI桥的驱动(他们连接到PCI总线)和以太网控制器(控制以太网通信的集成电路芯片)。</li></ul></li><li><p>auxdisplay - 这个文件夹提供了三个驱动。LCD 帧缓存（framebuffer）驱动、LCD控制器驱动和一个LCD驱动。</p><ul><li>这些驱动用于管理液晶显示器。 </li></ul></li><li><p>base : 这是个重要的目录包含了固件、系统总线、虚拟化能力等基本的驱动。</p></li><li><p>bcma : 这些驱动用于使用基于AMBA协议的总线。AMBA是由博通公司开发。</p></li><li><p><code>block</code> : 这些驱动提供对块设备的支持，</p><ul><li>像软驱、SCSI磁带、TCP网络块设备等等。</li></ul></li><li><p>bluetooth : 蓝牙是一种安全的无线个人区域网络标准(PANs)。蓝牙驱动就在这个文件夹，它允许系统使用各种蓝牙设备。</p><ul><li>例如，一个蓝牙鼠标不用电缆，并且计算机有一个电子狗(小型USB接收器)。Linux系统必须能够知道进入电子狗的信号，否则蓝牙设备无法工作。</li></ul></li><li><p>bus - 这个目录包含了三个驱动。</p><ul><li>第一个转换ocp接口协议到scp协议</li><li>第二个是设备间的互联驱动</li><li>第三个是用于处理互联中的错误处理</li></ul></li><li><p>cdrom - 这个目录包含两个驱动。</p><ul><li>一个是cd-rom，包括DVD和CD的读写。</li><li>第二个是gd-rom(只读GB光盘)，GD光盘是1.2GB容量的光盘，这像一个更大的CD或者更小的DVD。GD通常用于世嘉游戏机中。</li></ul></li><li><p><code>char</code> - 字符设备驱动。</p><ul><li>字符设备每次传输数据传输一个字符。</li><li>这个文件夹里的驱动包括打印机、PS3闪存驱动、东芝SMM驱动和随机数发生器驱动等。</li></ul></li><li><p>clk - 这些驱动用于系统时钟。</p></li><li><p>clocksource - 这些驱动用于作为定时器的时钟。</p></li><li><p><code>connector</code>- 这些驱动使内核知道当进程fork并使用proc连接器更改UID(用户ID)、GID(组ID)和SID(会话ID)</p><ul><li>内核需要知道什么时候进程fork(CPU中运行多个任务)并执行。否则,内核可能会低效管理资源。</li></ul></li><li><p>cpufreq - 这些驱动改变CPU的电源能耗。</p></li><li><p><code>cpuidle</code> - 这些驱动用来管理空闲的CPU。一些系统使用多个CPU，其中一个驱动可以让这些CPU负载相当。</p></li><li><p>crypto - 这些驱动提供加密功能。</p></li><li><p><code>dca</code> - 直接缓存访问（DCA ： Direct Cache Access）驱动允许内核访问CPU缓存。</p><ul><li>CPU缓存就像CPU内置的RAM。CPU缓存的速度比RAM更快。然而,CPU缓存的容量比RAM小得多。CPU在这个缓存系统上存储了最重要的和执行的代码。</li></ul></li><li><p>devfreq - 这个驱动程序提供了一个通用的动态电压和频率调整(DVFS ： Generic Dynamic Voltage and Frequency Scaling)框架，</p><ul><li>可以根据需要改变CPU频率来节约能源。也就是CPU节能。</li></ul></li><li><p>dio - 数字输入/输出（DIO ：Digital Input/Output）总线驱动允许内核可以使用DIO总线。</p></li><li><p>dma - 直接内存访问(DMA)驱动允许设备无需CPU直接访问内存。这减少了CPU的负载。</p></li><li><p>edac - 错误检测和校正（ Error Detection And Correction）驱动帮助减少和纠正错误。</p></li><li><p>eisa - 扩展工业标准结构总线（Extended Industry Standard Architecture）驱动提供内核对EISA总线的支持。</p></li><li><p>extcon - 外部连接器（EXTernal CONnectors）驱动用于检测设备插入时的变化。例如，extcon会检测用户是否插入了USB驱动器。</p></li><li><p>firewire - 这些驱动用于控制苹果制造的类似于USB的火线设备。</p></li><li><p><code>firmware</code> - 这些驱动用于和像BIOS(计算机的基本输入输出系统固件)这样的设备的固件通信。</p><ul><li><code>BIOS</code>用于启动操作系统和控制硬件与设备的固件。</li><li>一些BIOS允许用户超频CPU。</li></ul></li><li><p><code>gpio</code> - 通用输入/输出(GPIO ：General Purpose Input/Output)是可由用户控制行为的芯片的管脚。</p><ul><li>这里的驱动就是控制GPIO。</li></ul></li><li><p>gpu - 这些驱动控制VGA、GPU和直接渲染管理(DRM ：Direct Rendering Manager )。</p><ul><li>VGA是640*480的模拟计算机显示器或是简化的分辨率标准。DRM是一个Unix渲染系统。</li></ul></li><li><p>hid - 这驱动用于对USB人机界面设备的支持。</p></li><li><p>hsi - 这个驱动用于内核访问像Nokia N900这样的蜂窝式调制解调器。</p></li><li><p>hv - 这个驱动用于提供Linux中的键值对(KVP ：Key Value Pair)功能。</p></li><li><p>hwmon - 硬件监控驱动用于内核读取硬件传感器上的信息。</p><ul><li>比如，CPU上有个温度传感器。那么内核就可以追踪温度的变化并相应地调节风扇的速度。</li></ul></li><li><p>hwspinlock - 硬件转锁驱动允许系统同时使用两个或者更多的处理器，或使用一个处理器上的两个或更多的核心。</p></li><li><p>i2c - I2C驱动可以使计算机用I2C协议处理主板上的低速外设。</p><ul><li>系统管理总线(SMBus ：System Management Bus)驱动管理SMBus,这是一种用于轻量级通信的two-wire总线。</li></ul></li><li><p>ide - 这些驱动用来处理像CDROM和硬盘这些PATA/IDE设备。</p></li><li><p>idle - 这个驱动用来管理Intel处理器的空闲功能。</p></li><li><p>iio - 工业I/O核心驱动程序用来处理数模转换器或模数转换器。</p></li><li><p><code>infiniband</code> - Infiniband是在企业数据中心和一些超级计算机中使用的一种高性能的端口。</p><ul><li>这个目录中的驱动用来支持Infiniband硬件。</li></ul></li><li><p><code>input</code> - 这里包含了很多驱动，这些驱动都用于输入处理，</p><ul><li>包括游戏杆、鼠标、键盘、游戏端口（旧式的游戏杆接口）、遥控器、触控、耳麦按钮和许多其他的驱动。</li><li>如今的操纵杆使用USB端口，但是在上世纪80、90年代，操纵杆是插在游戏端口的。</li></ul></li><li><p><code>iommu</code> - <code>输入/输出内存管理单元</code>(IOMMU ：Input/Output Memory Management Unit)驱动用来管理内存管理单元中的IOMMU。</p><ul><li>IOMMU连接DMA IO总线到内存上。<code>IOMMU</code>是设备在没有CPU帮助下直接访问内存的桥梁。这有助于减少处理器的负载。</li></ul></li><li><p>ipack - Ipack代表的是IndustryPack。 </p><ul><li>这个驱动是一个虚拟总线,允许在载体和夹板之间操作。</li></ul></li><li><p><code>irqchip</code> - 这些驱动程序允许硬件的中断请求(IRQ)发送到处理器，暂时挂起一个正在运行的程序而去运行一个特殊的程序（称为一个中断处理程序）。</p></li><li><p>isdn - 这些驱动用于支持综合业务数字网(ISDN)，这是用于同步数字传输语音、视频、数据和其他网络服务使用传统电话网络的电路的通信标准。</p></li><li><p>leds - 用于LED的驱动。</p></li><li><p>lguest - lguest用于管理客户机系统的中断。中断是CPU被重要任务打断的硬件或软件信号。CPU接着给硬件或软件一些处理资源。</p></li><li><p>macintosh - 苹果设备的驱动在这个文件夹里。</p></li><li><p>mailbox - 这个文件夹(pl320-pci)中的驱动用于管理邮箱系统的连接。</p></li><li><p><code>md</code>- 多设备驱动用于支持<code>磁盘阵列</code>，一种多块硬盘间共享或复制数据的系统。</p></li><li><p>media - 媒体驱动提供了对收音机、调谐器、视频捕捉卡、DVB标准的数字电视等等的支持。</p><ul><li>驱动还提供了对不同通过USB或火线端口插入的多媒体设备的支持。</li></ul></li><li><p><code>memory</code> - 支持内存的重要驱动。</p></li><li><p>memstick - 这个驱动用于支持Sony记忆棒。</p></li><li><p>message - 这些驱动用于运行LSI Fusion MPT(一种消息传递技术)固件的LSI PCI芯片/适配器。</p><ul><li>LSI大规模集成，这代表每片芯片上集成了几万晶体管、</li></ul></li><li><p>mfd - 多用途设备(MFD)驱动提供了对可以提供诸如电子邮件、传真、复印机、扫描仪、打印机功能的多用途设备的支持。</p><ul><li>这里的驱动还给MFD设备提供了一个通用多媒体通信端口(MCP)层。</li></ul></li><li><p><code>misc</code> - 这个目录包含了不适合在其他目录的各种驱动。就像光线传感器驱动。</p></li><li><p>mmc - MMC卡驱动用于处理用于MMC标准的闪存卡。</p></li><li><p><code>mtd</code>- 内存技术设备(MTD ：Memory technology devices)驱动程序用于Linux和闪存的交互，这就就像一层闪存转换层。</p><ul><li>其他块设备和字符设备的驱动程序不会以闪存设备的操作方式来做映射。尽管USB记忆卡和SD卡是闪存设备，但它们不使用这个驱动，因为他们隐藏在系统的块设备接口后。</li><li>这个驱动用于<code>新型闪存设备的通用闪存驱动器驱动</code>。</li></ul></li><li><p>net - 网络驱动提供像AppleTalk、TCP和其他的网络协议。</p><ul><li>这些驱动也提供对调制解调器、USB 2.0的网络设备、和射频设备的支持。</li></ul></li><li><p>nfc - 这个驱动是德州仪器的共享传输层之间的接口和NCI核心。</p></li><li><p>ntb - 不透明的桥接驱动提供了在PCIe系统的不透明桥接。PCIe是一种高速扩展总线标准。</p></li><li><p>nubus - NuBus是一种32位并行计算总线。用于支持苹果设备。</p></li><li><p><code>of</code> - 此驱动程序提供设备树中创建、访问和解释程序的OF助手。<code>设备树</code>是一种数据结构，用于描述硬件。</p></li><li><p><code>oprofile</code> - 这个驱动用于从驱动到用户空间进程(运行在用户态下的应用)评测整个系统。</p><ul><li>这帮助开发人员找到性能问题—-性能分析机制-是用于 Linux 的若干种评测和性能监控工具中的一种</li></ul></li><li><p>parisc - 这些驱动用于HP生产的PA-RISC架构设备。</p><ul><li>PA-RISC是一种特殊指令集的处理器。</li></ul></li><li><p>parport - 并口驱动提供了Linux下的并口支持。</p></li><li><p><code>pci</code> - 这些驱动提供了PCI总线服务。</p></li><li><p>pcmcia - 这些是笔记本的pc卡驱动</p></li><li><p><code>pinctrl</code> - 这些驱动用来处理引脚控制设备。引脚控制器可以禁用或启用I/O设备。</p></li><li><p><code>platform</code> -这个文件夹包含了不同的计算机平台的驱动像Acer、Dell、Toshiba、IBM、Intel、Chrombooks等等。</p></li><li><p>pnp - 即插即用驱动允许用户在插入一个像USB的设备后可以立即使用而不必手动配置设备。</p></li><li><p><code>power</code> - 电源驱动使内核可以测量电池电量，检测充电器和进行电源管理。</p></li><li><p>pps - Pulse-Per-Second驱动用来控制电流脉冲速率。这用于计时。</p></li><li><p>ps3 - 这是Sony的游戏控制台驱动- PlayStation3。</p></li><li><p>ptp - 图片传输协议(PTP)驱动支持一种从数码相机中传输图片的协议。</p></li><li><p><code>pwm</code> - 脉宽调制(PWM)驱动用于控制设备的电流脉冲。主要用于控制像CPU风扇。</p></li><li><p>rapidio - RapidIO驱动用于管理RapidIO架构，它是一种高性能分组交换，用于电路板上交互芯片的交互技术，也用于互相使用底板的电路板。</p></li><li><p><code>regulator</code> - 校准驱动用于校准电流、温度、或其他可能系统存在的校准硬件。—-用于控制系统中某些设备的电压电流供应</p></li><li><p>remoteproc - 这些驱动用来管理远程处理器。</p></li><li><p>rpmsg - 这个驱动用来控制支持大量驱动的远程处理器通讯总线(rpmsg)。</p><ul><li>这些总线提供消息传递设施,促进客户端驱动程序编写自己的连接协议消息。</li><li>该基础架构允许主处理器上的 Linux 操作系统管理远程处理器上远程软件环境的生命周期和通信-用于在 AMP 环境中的操作系统之间实现 IPC 的 rpmsg 组件和 API</li></ul></li><li><p>rtc - 实时时钟(RTC)驱动使内核可以读取时钟。</p></li><li><p>s390 - 用于31/32位的大型机架构的驱动。</p></li><li><p>sbus - 用于管理基于SPARC的总线驱动。</p></li><li><p><code>scsi</code> - 允许内核使用SCSI标准外围设备。例如,Linux将在与SCSI硬件传输数据时使用SCSI驱动。</p></li><li><p>sfi -简单固件接口(SFI)驱动允许固件发送信息表给操作系统。这些表的数据称为SFI表。</p></li><li><p>sh - 该驱动用于支持SuperHway总线。</p></li><li><p>sn - 该驱动用于支持IOC3串口。</p></li><li><p><code>spi</code> - 这些驱动处理串行设备接口总线(SPI)，它是一个在在全双工下运行的同步串行数据链路标准。设备在主/从模式下通信(取决于设备配置)。</p></li><li><p>ssb - ssb(Sonics Silicon Backplane)驱动提供对在不同博通芯片和嵌入式设备上使用的迷你总线的支持。</p></li><li><p>staging - 该目录含有许多子目录。这里所有的驱动还需要在加入主内核前经过更多的开发工作。</p></li><li><p><code>target</code> - <code>SCSI设备驱动</code></p></li><li><p>tc - 这些驱动用于TURBOchannel，TURBOchannel是数字设备公司开发的32位开放总线。这主要用于DEC工作站。</p></li><li><p>thermal - thermal驱动使CPU保持较低温度。—Linux温控框架</p></li><li><p>tty - tty驱动用于管理物理终端连接。</p></li><li><p><code>uio</code> - 该驱动允许用户编译运行在用户空间而不是内核空间的驱动。这使用户驱动不会导致内核崩溃。</p><ul><li><code>运行在用户空间的IO技术</code></li></ul></li><li><p>usb - USB设备允许内核使用USB端口。闪存驱动和记忆卡已经包含了固件和控制器,所以这些驱动程序允许内核使用USB接口和与USB设备。</p></li><li><p>uwb - Ultra-WideBand驱动用来管理短距离，高带宽通信的超低功耗的射频设备</p></li><li><p><code>vfio</code> - 允许设备访问用户空间的VFIO驱动。—-<code>用户态驱动框架</code></p></li><li><p>vhost - 这是用于宿主内核中的virtio服务器驱动。用于虚拟化中。</p></li><li><p>video - 这是用来管理显卡和监视器的视频驱动。</p></li><li><p>virt - 这些驱动用来虚拟化。</p></li><li><p>virtio - 这个驱动用来在虚拟PCI设备上使用virtio设备。用于虚拟化中。</p></li><li><p>vlynq - 这个驱动控制着由德州仪器开发的专有接口。这些都是宽带产品，像WLAN和调制解调器，VOIP处理器，音频和数字媒体信号处理芯片。</p></li><li><p>vme - WMEbus最初是为摩托罗拉68000系列处理器开发的总线标准</p></li><li><p>w1 - 这些驱动用来控制one-wire总线。</p></li><li><p>watchdog - 该驱动管理看门狗定时器，这是一个可以用来检测和恢复异常的定时器。</p></li><li><p>xen - 该驱动是Xen管理程序系统。这是个允许用户运行多个操作系统在一台计算机的软件或硬件。这意味着xen的代码将允许用户在同一时间的一台计算机上运行两个或更多的Linux系统。用户也可以在Linux上运行Windows、Solaris、FreeBSD、或其他操作系统。</p></li><li><p>zorro - 该驱动提供Zorro Amiga总线支持。</p></li></ol><h4 id="阅读驱动代码的说明"><a href="#阅读驱动代码的说明" class="headerlink" title="阅读驱动代码的说明　"></a><strong>阅读驱动代码的说明</strong>　</h4><p>Linux的内核代码在驱动程序文件夹中以源代码的形式包含了许多驱动程序。<br>驱动文件夹中的每个文件夹会在下面说明。在配置和 编译内核时，这样有助于你了解驱动程序。否则，用户可能会在编译时加入不必要的或者漏掉重要的驱动。<br>驱动代码通常会包含一个单行注释来指出驱动的目的。比如，tc的驱动代码，有一行的注释说是用于TURBOchannel总线。由于这些文档，用户应该看驱动前几行的注释来了解它们的用途。</p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a><strong>参考资料</strong></h2><p>《Linux设备驱动开发详解：基于最新的Linux4.0内核》<br><a href="https://blog.csdn.net/weixin_38715577/article/details/101365039">Linux内核目录结构介绍（超详细）</a><br><a href="https://blog.csdn.net/ffmxnjm/article/details/72933915">LINUX内核目录文件说明以及配置并编译内核的方法</a><br><a href="https://blog.csdn.net/linuxweiyh/article/details/83279195">linux内核源码目录结构</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;&lt;strong&gt;前言&lt;/strong&gt;&lt;/h2&gt;&lt;p&gt;Linux内核也是一个抢占式多任务内核。这意味该内核可以暂停一些任务来保证任何应用都有机会来使用CPU。比如：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;如果一个应用正在运行但是正在等待一些数据，内核会把这个应用暂停并允许其他的程序使用新释放的CPU资源，直到数据到来。
否则的话，系统就会浪费资源给那些正在等待数据或者其他程序执行的的任务。
内核将会强制程序去等待或者停止使用CPU。没有内核的允许，应用程序不能脱离暂停或者使用CPU。&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Linux设计思想是“一切皆文件”：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;设备作为文件显示在/dev文件夹下，如果一个用户想要访问在存储卡上的数据，他们能通过设备文件访问这些数据。&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;已编译的Linux内核：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;在引导文件夹(/boot),用户会看到诸如“vmlinux”或者“vmlinuz”的文件。这两者都是已编译的Linux内核。
以“z”结尾的是已压缩的。“vm”代表虚拟内存。
SPARC处理器的系统上，用户可以看见一个zImage文件。部分用户可以发现一个bzImage文件，这是一个已压缩的Linux内核。
这些引导文件都是不能更改的，除非用户知道他们正在做什么。否则系统会变成无法引导，启动不了。&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Linux内核是所有Linux系统的核心。如果有任何恶意代码控制或破害了内核的任何一部分，那么系统会严重受损，文件可能被删除或损坏，私人信息可能被盗等等。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;注意事项: 绝不在内核源代码内移动文件，除非你知道你在做什么。否则，编译会由于丢失文件失败。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;内核在操作系统目录下的路径一般为：/usr/src/&lt;/p&gt;
    
    </summary>
    
    
      <category term="Linux" scheme="https://stemha.github.io/categories/Linux/"/>
    
    
      <category term="Linux" scheme="https://stemha.github.io/tags/Linux/"/>
    
      <category term="目录结构" scheme="https://stemha.github.io/tags/%E7%9B%AE%E5%BD%95%E7%BB%93%E6%9E%84/"/>
    
      <category term="内核" scheme="https://stemha.github.io/tags/%E5%86%85%E6%A0%B8/"/>
    
      <category term="说明" scheme="https://stemha.github.io/tags/%E8%AF%B4%E6%98%8E/"/>
    
  </entry>
  
  <entry>
    <title>Linux-性能分析，测试与调优工具（2）</title>
    <link href="https://stemha.github.io/2020/07/09/linux-%E6%80%A7%E8%83%BD%E5%88%86%E6%9E%90%EF%BC%8C%E6%B5%8B%E8%AF%95%E4%B8%8E%E8%B0%83%E4%BC%98%E5%B7%A5%E5%85%B7%EF%BC%882%EF%BC%89/"/>
    <id>https://stemha.github.io/2020/07/09/linux-%E6%80%A7%E8%83%BD%E5%88%86%E6%9E%90%EF%BC%8C%E6%B5%8B%E8%AF%95%E4%B8%8E%E8%B0%83%E4%BC%98%E5%B7%A5%E5%85%B7%EF%BC%882%EF%BC%89/</id>
    <published>2020-07-09T13:41:40.000Z</published>
    <updated>2020-08-10T04:19:21.638Z</updated>
    
    <content type="html"><![CDATA[<h2 id="常用工具"><a href="#常用工具" class="headerlink" title="常用工具"></a><strong>常用工具</strong></h2><h3 id="top、vmstat、iostat和sar"><a href="#top、vmstat、iostat和sar" class="headerlink" title="top、vmstat、iostat和sar"></a><strong>top、vmstat、iostat和sar</strong></h3><p>top命令用于显示处理器的活动状况。在缺省情况下，显示占用CPU最多的任务，并且每隔5s做一次刷新；<br>vmstat命令用于报告关于内核线程、虚拟内存、磁盘、陷阱和CPU活动的统计信息；<br>iostat命令用于分析各个磁盘的传输闲忙状况；<br>sar用于收集、报告或者保存系统活动信息，其中，sar用于显示数据，sar1和sar2用于收集和保存数据。</p><a id="more"></a><h3 id="sysctl"><a href="#sysctl" class="headerlink" title="sysctl"></a><strong>sysctl</strong></h3><p>sysctl是一个接口，可用于改变正在运行中的Linux系统。用sysctl可以读取几百个以上的系统变量，例如用<code>sysctl –a</code>可读取所有变量。</p><p>sysctl的实现原理是：</p><ul><li>所有的内核参数在/proc/sys中形成一个树状结构</li><li>sysctl系统调用的内核函数是：sys_sysctl，匹配项目后，最后的读写在do_sysctl_strategy中完成</li></ul><p>比如：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">"1"</span> &gt; /proc/sys/net/ipv4/ip_forward</span><br></pre></td></tr></table></figure><p>就等价于：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sysctl –w net.ipv4.ip_forward =<span class="string">"1"</span></span><br></pre></td></tr></table></figure><h2 id="高级分析手段"><a href="#高级分析手段" class="headerlink" title="高级分析手段"></a><strong>高级分析手段</strong></h2><h3 id="OProfile"><a href="#OProfile" class="headerlink" title="OProfile"></a><strong>OProfile</strong></h3><p>OProfile作用</p><ul><li>可以帮助用户识别诸如模块的占用时间、循环的展开、高速缓存的使用率低、低效的类型转换和冗余操作、错误预测转移等问题。</li><li>它收集有关处理器事件的信息，其中包括TLB的故障、停机、存储器访问以及缓存命中和未命中的指令的攫取数量。</li></ul><p>OProfile支持两种采样方式：</p><ul><li>基于事件的采样（Event Based）：<ul><li>NMI模式</li><li>OProfile只记录特定事件（比如L2缓存未命中）的发生次数，当达到用户设定的定值时Oprofile就记录一下（采一个样）。</li><li>这种方式需要CPU内部有<code>性能计数器（Performace Counter）</code>。</li></ul></li><li>基于时间的采样（Time Based）：<ul><li>Timer Interrupt模式</li><li>OProfile借助OS时钟中断的机制，在每个时钟中断，OProfile都会记录一次（采一次样）。</li><li>引入它的目的在于，提供对没有性能计数器的CPU的支持，其精度相对于基于事件的采样要低，因为要借助OS时钟中断的支持，对于禁用中断的代码，OProfile不能对其进行分析。</li></ul></li></ul><p>OProfile在Linux上分两部分:</p><ul><li>内核模块（oprofile.ko）<ul><li>负责访问性能计数器或者注册基于时间采样的函数，并将采样值置于内核的缓冲区内。</li></ul></li><li>用户空间的守护进程（oprofiled）<ul><li>后者在后台运行，负责从内核空间收集数据，写入文件。</li></ul></li></ul><p>控制oprofile需要用到opcontrol。要打开oprofile,需要用start选项来调用opconrol,当第一次调用opcontrol时,必须告诉它想统计内核还是用户空间数据.<br>其运行步骤如下。<br>1）初始化opcontrol –init<br>2）配置opcontrol –setup –event=…<br>3）启动opcontrol –start<br>4）运行待分析的程序xxx<br>5）取出数据<br>opcontrol –dump<br>opcontrol –stop<br>6）分析结果 opreport -l./xxx</p><p>具体的看一下这篇文章吧，<a href="https://www.cnblogs.com/jkkkk/p/6520381.html">《Linux调优工具oprofile的演示分析》</a></p><h3 id="gprof"><a href="#gprof" class="headerlink" title="gprof"></a><strong>gprof</strong></h3><p>GNU gprof作用：</p><ul><li>可以<strong>打印出程序运行中各个函数消耗的时间，以帮助程序员找出众多函数中耗时最多的函数</strong>；</li><li>可产生程序运行时的函数调用关系，包括调用次数，以帮助程序员分析程序的运行流程。</li></ul><p>GNU gprof的实现原理：</p><ul><li>在编译和链接程序的时候（使用-pg编译和链接选项）<ul><li>gcc在应用程序的每个函数中都加入名为mcount（_mcount或__mcount，依赖于编译器或操作系统）的函数。</li></ul></li><li>也就是说应用程序里的每一个函数都会调用mcount，而mcount会在内存中保存一张函数调用图，并通过函数调用堆栈的形式查找子函数和父函数的地址。<ul><li>这张调用图也保存了所有与函数相关的调用时间、调用次数等的所有信息。</li></ul></li></ul><p>GNU gprof的基本用法如下。<br>1）使用-pg编译和链接应用程序。<br>2）执行应用程序并使它生成供gprof分析的数据。<br>3）使用gprof程序分析应用程序生成的数据。</p><h2 id="内核跟踪"><a href="#内核跟踪" class="headerlink" title="内核跟踪"></a><strong>内核跟踪</strong></h2><h3 id="LTTng"><a href="#LTTng" class="headerlink" title="LTTng"></a><strong>LTTng</strong></h3><p>LTTng（Linux Trace Toolkit-next generation， Linux 跟踪工具包下一代）是一个用于<strong>跟踪系统详细运行状态和流程</strong>的工具</p><ul><li>它可以跟踪记录系统中的特定事件。</li><li>这些事件包括：<ul><li>系统调用的进入和退出；</li><li>陷阱/中断（Trap/Irq）的进入和退出；</li><li>进程调度事件；内核定时器</li><li>文件系统相关事件——open/read/write/seek/ioctl等；</li><li>内存管理相关事件——内存分配/释放等；</li><li>其他IPC/套接字/网络等事件。</li></ul></li></ul><p>而对于这些记录，我们可以通过图形的方式经由lttv-gui查看</p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p>《Linux设备驱动开发详解：基于最新的Linux4.0内核》</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;常用工具&quot;&gt;&lt;a href=&quot;#常用工具&quot; class=&quot;headerlink&quot; title=&quot;常用工具&quot;&gt;&lt;/a&gt;&lt;strong&gt;常用工具&lt;/strong&gt;&lt;/h2&gt;&lt;h3 id=&quot;top、vmstat、iostat和sar&quot;&gt;&lt;a href=&quot;#top、vmstat、iostat和sar&quot; class=&quot;headerlink&quot; title=&quot;top、vmstat、iostat和sar&quot;&gt;&lt;/a&gt;&lt;strong&gt;top、vmstat、iostat和sar&lt;/strong&gt;&lt;/h3&gt;&lt;p&gt;top命令用于显示处理器的活动状况。在缺省情况下，显示占用CPU最多的任务，并且每隔5s做一次刷新；&lt;br&gt;vmstat命令用于报告关于内核线程、虚拟内存、磁盘、陷阱和CPU活动的统计信息；&lt;br&gt;iostat命令用于分析各个磁盘的传输闲忙状况；&lt;br&gt;sar用于收集、报告或者保存系统活动信息，其中，sar用于显示数据，sar1和sar2用于收集和保存数据。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Linux" scheme="https://stemha.github.io/categories/Linux/"/>
    
    
      <category term="Linux" scheme="https://stemha.github.io/tags/Linux/"/>
    
      <category term="工具" scheme="https://stemha.github.io/tags/%E5%B7%A5%E5%85%B7/"/>
    
      <category term="性能分析" scheme="https://stemha.github.io/tags/%E6%80%A7%E8%83%BD%E5%88%86%E6%9E%90/"/>
    
  </entry>
  
  <entry>
    <title>Linux程序调试-GDB调试器</title>
    <link href="https://stemha.github.io/2020/07/06/Linux%E7%A8%8B%E5%BA%8F%E8%B0%83%E8%AF%95-GDB%E8%B0%83%E8%AF%95%E5%99%A8/"/>
    <id>https://stemha.github.io/2020/07/06/Linux%E7%A8%8B%E5%BA%8F%E8%B0%83%E8%AF%95-GDB%E8%B0%83%E8%AF%95%E5%99%A8/</id>
    <published>2020-07-06T12:52:59.000Z</published>
    <updated>2020-08-27T02:13:58.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="我们需要知道什么？"><a href="#我们需要知道什么？" class="headerlink" title="我们需要知道什么？"></a><strong>我们需要知道什么？</strong></h2><blockquote><p>GDB是什么？有什么作用呢？<br>GDB的用法有哪些？</p></blockquote><a id="more"></a><h2 id="GDB的功能"><a href="#GDB的功能" class="headerlink" title="GDB的功能"></a><strong>GDB的功能</strong></h2><p>GDB是GNU开源组织发布的一个强大的UNIX下的程序调试工具，GDB主要可帮助工程师完成下面4个方面的功能。</p><ul><li><strong>启动程序，并给定初始化的环境</strong>，可以按照工程师自定义的要求运行程序。</li><li><strong>设置断点</strong>，让被调试的程序在工程师指定的断点处停住，断点可以是条件表达式。</li><li><strong>查询程序执行的各种数据</strong>，当程序被停住时，可以检查此时程序中所发生的事，并追踪上文。</li><li><strong>动态地改变程序的执行环境</strong>。</li></ul><blockquote><p>不管是调试Linux内核空间的驱动还是调试用户空间的应用程序，都必须掌握GDB的用法。在调试内核和调试应用程序时使用的GDB命令是完全相同的。</p></blockquote><h2 id="用于调试的代码"><a href="#用于调试的代码" class="headerlink" title="用于调试的代码"></a><strong>用于调试的代码</strong></h2><p>以下面代码表示的应用程序为例演示GDB调试器的用法。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> a + b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">   <span class="keyword">int</span> sum[<span class="number">10</span>] =&#123;<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>&#125;;</span><br><span class="line">   <span class="keyword">int</span> i;</span><br><span class="line">   <span class="keyword">int</span> array1[<span class="number">10</span>] =&#123;<span class="number">48</span>, <span class="number">56</span>, <span class="number">77</span>, <span class="number">33</span>, <span class="number">33</span>, <span class="number">11</span>, <span class="number">226</span>, <span class="number">544</span>, <span class="number">78</span>, <span class="number">90</span>&#125;;</span><br><span class="line">   <span class="keyword">int</span> array2[<span class="number">10</span>] =&#123;<span class="number">85</span>, <span class="number">99</span>, <span class="number">66</span>, <span class="number">0x199</span>, <span class="number">393</span>, <span class="number">11</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>&#125;;</span><br><span class="line">  </span><br><span class="line">   <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)</span><br><span class="line">   &#123;</span><br><span class="line">sum[i] = add(array1[i], array2[i]);</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用下面的命令编译上述程序，得到包含调试信息的二进制文件gdb_example。<strong>注意</strong>：编译程序时需要加上-g，之后才能用gdb进行调。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gcc -g gdb_example.c -o gdb_example</span><br></pre></td></tr></table></figure><p>ps：</p><ul><li>-c和-o是gcc编译器的可选参数。</li><li>-c表示只编译源文du件但不链接，会把.c或.cc的c源程序编译成目标文件，一般是.o文件。</li><li>-o用于指定输出文件名。不用-o的话，一般会在当前文件夹下生成默认的a.out文件作为可执行程序。</li><li>-g 把调试信息加到可执行文件中，如果没有-g，将看不见程序的函数名、变量名，所代替的全是运行时的内存地址。</li></ul><p>执行下面的命令进入调试状态</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gdb gdb_example</span><br></pre></td></tr></table></figure><p>然后会出现如下效果</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">root@ubuntu:~/cpptest<span class="comment"># gdb gdb_example </span></span><br><span class="line">GNU gdb (Ubuntu 8.1-0ubuntu3.2) 8.1.0.20180409-git</span><br><span class="line">Copyright (C) 2018 Free Software Foundation, Inc.</span><br><span class="line">License GPLv3+: GNU GPL version 3 or later &lt;http://gnu.org/licenses/gpl.html&gt;</span><br><span class="line">This is free software: you are free to change and redistribute it.</span><br><span class="line">There is NO WARRANTY, to the extent permitted by law.  Type <span class="string">"show copying"</span></span><br><span class="line">and <span class="string">"show warranty"</span> <span class="keyword">for</span> details.</span><br><span class="line">This GDB was configured as <span class="string">"x86_64-linux-gnu"</span>.</span><br><span class="line">Type <span class="string">"show configuration"</span> <span class="keyword">for</span> configuration details.</span><br><span class="line">For bug reporting instructions, please see:</span><br><span class="line">&lt;http://www.gnu.org/software/gdb/bugs/&gt;.</span><br><span class="line">Find the GDB manual and other documentation resources online at:</span><br><span class="line">&lt;http://www.gnu.org/software/gdb/documentation/&gt;.</span><br><span class="line">For <span class="built_in">help</span>, <span class="built_in">type</span> <span class="string">"help"</span>.</span><br><span class="line">Type <span class="string">"apropos word"</span> to search <span class="keyword">for</span> commands related to <span class="string">"word"</span>...</span><br><span class="line">Reading symbols from gdb_example...done.</span><br></pre></td></tr></table></figure><p>调试示例：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">(gdb) <span class="built_in">break</span> add</span><br><span class="line">Breakpoint 1 at 0x674: file gdb_example.c, line 3.</span><br><span class="line">(gdb) run</span><br><span class="line">Starting program: /root/cpptest/gdb_example </span><br><span class="line"></span><br><span class="line">Breakpoint 1, add (a=48, b=85) at gdb_example.c:3</span><br><span class="line">3<span class="built_in">return</span> a + b;</span><br><span class="line">(gdb) next</span><br><span class="line">4&#125;</span><br><span class="line">(gdb) next</span><br><span class="line">main () at gdb_example.c:12</span><br><span class="line">12   <span class="keyword">for</span> (i = 0; i &lt; 10; i++)</span><br><span class="line">(gdb) next</span><br><span class="line">14sum[i] = add(array1[i], array2[i]);</span><br><span class="line">(gdb) <span class="built_in">print</span> sum</span><br><span class="line"><span class="variable">$1</span> = &#123;133, 0, 0, 0, 0, 0, 0, 0, 0, 0&#125;</span><br></pre></td></tr></table></figure><h2 id="GDB的启动"><a href="#GDB的启动" class="headerlink" title="GDB的启动"></a>GDB的启动</h2><p>启动GDB的方法有以下几种：<br>1、gdb program<br>program也就是你的执行文件，一般在当前目录下。<br>2、gdb program core<br>用gdb同时调试一个运行程序和core文件，core是程序非法执行后core dump后产生的文件。<br>3、gdb program 1234<br>如果你的程序是一个服务程序，那么你可以指定这个服务程序运行时的进程ID。gdb会自动attach上去，并调试他。program应该在PATH环境变量中搜索得到。</p><p>GDB启动时，可以加上一些GDB的启动开关，详细的开关可以用gdb -help查看。列举一些比较常用的参数：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">--symbols&#x3D;SYMFILE</span><br></pre></td></tr></table></figure><p>从指定文件中读取符号表</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">--se&#x3D;FILE</span><br></pre></td></tr></table></figure><p>从指定文件中读取符号表信息，并把他用在可执行文件中。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">--core&#x3D;COREFILE</span><br></pre></td></tr></table></figure><p>调试时core dump的core文件。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">--directory&#x3D;DIR</span><br></pre></td></tr></table></figure><p>加入一个源文件的搜索路径。默认搜索路径是环境变量中PATH所定义的路径。</p><h2 id="GDB相关命令"><a href="#GDB相关命令" class="headerlink" title="GDB相关命令"></a><strong>GDB相关命令</strong></h2><h3 id="list命令"><a href="#list命令" class="headerlink" title="list命令"></a><strong>list命令</strong></h3><p>作用：在GDB中运行list命令可以列出代码<br>list的具体形式如下:</p><ol><li><code>list&lt;linenum&gt;</code>：用于显示程序第linenum行周围的源程序（我的测试是一共显示10行）。效果如下所示：<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">(gdb) <span class="built_in">list</span> <span class="number">8</span>  <span class="comment">//列出文件第九行附近的代码</span></span><br><span class="line"><span class="number">3</span><span class="keyword">return</span> a + b;</span><br><span class="line"><span class="number">4</span>&#125;</span><br><span class="line"><span class="number">5</span><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function">6</span>&#123;</span><br><span class="line"><span class="number">7</span>   <span class="keyword">int</span> sum[<span class="number">10</span>] =&#123;<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>&#125;;</span><br><span class="line"><span class="number">8</span>   <span class="keyword">int</span> i;</span><br><span class="line"><span class="number">9</span>   <span class="keyword">int</span> array1[<span class="number">10</span>] =&#123;<span class="number">48</span>, <span class="number">56</span>, <span class="number">77</span>, <span class="number">33</span>, <span class="number">33</span>, <span class="number">11</span>, <span class="number">226</span>, <span class="number">544</span>, <span class="number">78</span>, <span class="number">90</span>&#125;;</span><br><span class="line"><span class="number">10</span>   <span class="keyword">int</span> array2[<span class="number">10</span>] =&#123;<span class="number">85</span>, <span class="number">99</span>, <span class="number">66</span>, <span class="number">0x199</span>, <span class="number">393</span>, <span class="number">11</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>&#125;;</span><br><span class="line"><span class="number">11</span>  </span><br><span class="line"><span class="number">12</span>   <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)</span><br></pre></td></tr></table></figure></li><li><code>list&lt;function&gt;</code>：显示函数名为function的函数对应的源程序。如下所示：<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">(gdb) <span class="built_in">list</span> main</span><br><span class="line"><span class="number">1</span><span class="function"><span class="keyword">int</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span></span></span><br><span class="line"><span class="function">2</span>&#123;</span><br><span class="line"><span class="number">3</span><span class="keyword">return</span> a + b;</span><br><span class="line"><span class="number">4</span>&#125;</span><br><span class="line"><span class="number">5</span><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function">6</span>&#123;</span><br><span class="line"><span class="number">7</span>   <span class="keyword">int</span> sum[<span class="number">10</span>] =&#123;<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>&#125;;</span><br><span class="line"><span class="number">8</span>   <span class="keyword">int</span> i;</span><br><span class="line"><span class="number">9</span>   <span class="keyword">int</span> array1[<span class="number">10</span>] =&#123;<span class="number">48</span>, <span class="number">56</span>, <span class="number">77</span>, <span class="number">33</span>, <span class="number">33</span>, <span class="number">11</span>, <span class="number">226</span>, <span class="number">544</span>, <span class="number">78</span>, <span class="number">90</span>&#125;;</span><br><span class="line"><span class="number">10</span>   <span class="keyword">int</span> array2[<span class="number">10</span>] =&#123;<span class="number">85</span>, <span class="number">99</span>, <span class="number">66</span>, <span class="number">0x199</span>, <span class="number">393</span>, <span class="number">11</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>&#125;;</span><br></pre></td></tr></table></figure></li><li>说明:<ul><li><code>list</code>， 显示当前行后面的源程序。</li><li><code>list-</code>，显示当前行前面的源程序。</li></ul></li></ol><h3 id="examine命令"><a href="#examine命令" class="headerlink" title="examine命令"></a><strong>examine命令</strong></h3><p>examine命令来查看内存地址中的值,在GDB中使用的时候缩写为x。<br>examine命令格式：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">x/&lt;number/format/u&gt;  &lt;addr&gt;</span><br></pre></td></tr></table></figure><p>参数说明</p><ul><li><addr>表示一个内存地址。</addr></li><li>“x/”后的n、f、u都是可选的参数。</li><li>number是一个正整数，表示显示内存的长度，也就是说从当前地址向后显示几个地址的内容；</li><li>format表示显示的格式，和c语言中的格式缩写一样：<ul><li>如果地址所指的是字符串，那么格式可以是s</li><li>如果地址是指令地址，那么格式可以是i；</li><li>d:整数integer</li><li>s:字符串string</li><li>c:字符char</li><li>u:无符号整数 unsigned integer</li><li>o:八进制格式显示变量</li><li>x:十六进制格式</li><li>f: 浮点数格式float</li></ul></li><li>u表示从当前地址往后请求的字节数，如果不指定的话，GDB默认的是4字节。<ul><li>u参数可以被一些字符代替：<ul><li>b表示单字节</li><li>h表示双字节</li><li>w表示四字节</li><li>g表示八字节。</li></ul></li><li>当我们指定了字节长度后，GDB会从指定的内存地址开始，读写指定字节，并把其当作一个值取出来</li></ul></li><li>number，format，u这3个参数可以一起使用,如下面示例所示。</li></ul><p>示例：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">(gdb) x/3uh 0x54320</span><br><span class="line">效果：表示从内存地址0x54320开始以双字节为1个单位（h）、16进制方式（u）显示3个单位（3）的内存。</span><br></pre></td></tr></table></figure><h3 id="set命令"><a href="#set命令" class="headerlink" title="set命令"></a><strong>set命令</strong></h3><p>set命令用于修改内存。它的命令格式是:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">set</span> *有类型的指针=value</span><br></pre></td></tr></table></figure><p>比如，下列程序，在用gdb运行起来后，通过Ctrl+C停住。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">main()</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">void</span> *p = <span class="built_in">malloc</span>(<span class="number">16</span>);</span><br><span class="line"><span class="keyword">while</span>(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们可以在运行中用如下命令来修改p指向的内存。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">(gdb) <span class="built_in">set</span> *(<span class="keyword">unsigned</span> <span class="keyword">char</span> *)p=<span class="string">'h'</span>    <span class="comment">//令p是指向无符号字符的指针变量</span></span><br><span class="line">(gdb) <span class="built_in">set</span> *(<span class="keyword">unsigned</span> <span class="keyword">char</span> *)(p+<span class="number">1</span>)=<span class="string">'e'</span></span><br><span class="line">(gdb) <span class="built_in">set</span> *(<span class="keyword">unsigned</span> <span class="keyword">char</span> *)(p+<span class="number">2</span>)=<span class="string">'l'</span></span><br><span class="line">(gdb) <span class="built_in">set</span> *(<span class="keyword">unsigned</span> <span class="keyword">char</span> *)(p+<span class="number">3</span>)=<span class="string">'l'</span></span><br><span class="line">(gdb) <span class="built_in">set</span> *(<span class="keyword">unsigned</span> <span class="keyword">char</span> *)(p+<span class="number">4</span>)=<span class="string">'o'</span></span><br></pre></td></tr></table></figure><p>看看结果：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">(gdb) x/s p</span><br><span class="line"><span class="number">0x804b008</span>: <span class="string">"hello"</span></span><br></pre></td></tr></table></figure><p>也可以直接使用地址常数：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">(gdb) p p  <span class="comment">//print命令（缩写为p）</span></span><br><span class="line">$<span class="number">2</span> = (<span class="keyword">void</span> *) <span class="number">0x804b008</span></span><br><span class="line">(gdb) <span class="built_in">set</span> *(<span class="keyword">unsigned</span> <span class="keyword">char</span> *)<span class="number">0x804b008</span>=<span class="string">'w'</span></span><br><span class="line">(gdb) <span class="built_in">set</span> *(<span class="keyword">unsigned</span> <span class="keyword">char</span> *)<span class="number">0x804b009</span>=<span class="string">'o'</span></span><br><span class="line">(gdb) <span class="built_in">set</span> *(<span class="keyword">unsigned</span> <span class="keyword">char</span> *)<span class="number">0x804b00a</span>=<span class="string">'r'</span></span><br><span class="line">(gdb) <span class="built_in">set</span> *(<span class="keyword">unsigned</span> <span class="keyword">char</span> *)<span class="number">0x804b00b</span>=<span class="string">'l'</span></span><br><span class="line">(gdb) <span class="built_in">set</span> *(<span class="keyword">unsigned</span> <span class="keyword">char</span> *)<span class="number">0x804b00c</span>=<span class="string">'d'</span></span><br><span class="line">(gdb) x/s <span class="number">0x804b008</span></span><br><span class="line"><span class="number">0x804b008</span>: <span class="string">"world"</span></span><br></pre></td></tr></table></figure><h3 id="run命令"><a href="#run命令" class="headerlink" title="run命令"></a><strong>run命令</strong></h3><p>在GDB中，运行程序使用run命令。在程序运行前，我们可以设置如下4方面的工作环境。</p><ol><li>程序运行参数<br><code>set args</code>可指定运行时参数，如<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">set</span> args <span class="number">10</span> <span class="number">20</span> <span class="number">30</span> <span class="number">40</span> <span class="number">50</span>；</span><br></pre></td></tr></table></figure><code>show args</code>命令可以查看设置好的运行参数。</li><li>运行环境<br><code>path&lt;dir&gt;</code>可设定程序的运行路径；<br><code>how paths</code>可查看程序的运行路径；<br><code>set environment varname[=value]</code><strong>可设置环境变量</strong>，如set env USER=baohua；<br><code>show environment[varname]</code>则可<strong>查看环境变量</strong>。</li><li>工作目录<br><code>cd&lt;dir&gt;</code>相当于shell的cd命令，<code>pwd</code>可显示当前所在的目录。</li><li>程序的输入输出<br><code>info terminal</code>用于显示程序用到的终端的模式；<br>在GDB中也可以使用重定向控制程序输出，如<code>run&gt;outfile</code>；<br>用tty命令可以指定输入输出的终端设备，如<code>tty /dev/ttyS1</code>。</li></ol><h3 id="break命令"><a href="#break命令" class="headerlink" title="break命令"></a><strong>break命令</strong></h3><p>在GDB中用break命令来设置断点，设置断点的方法如下：</p><ol><li><code>break&lt;function&gt;</code>：在进入指定函数时停住。 在C++中可以使用class::function或function（type，type）格式来指定函数名。<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">(gdb) <span class="built_in">break</span> add</span><br><span class="line">Breakpoint 1 at 0x674: file gdb_example.c, line 3.</span><br></pre></td></tr></table></figure></li><li><code>break &lt;linenum&gt;</code>：在指定行号停住。<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">(gdb) <span class="keyword">break</span> <span class="number">12</span></span><br><span class="line">Breakpoint <span class="number">2</span> at <span class="number">0x752</span>: file gdb_example.c, line <span class="number">12.</span></span><br></pre></td></tr></table></figure></li><li><code>break +offset</code>/<code>break -offset</code>:在当前行号的前面或后面的offset行停住，offiset为自然数。</li><li><code>break filename：linenum</code> ：在源文件filename的linenum行处停住。</li><li><code>break filename：function</code> ：在源文件filename的function函数的入口处停住。</li><li><code>break *address</code> ：在程序运行的内存地址处停住。<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">(gdb) <span class="built_in">break</span> *0x0000000000000674</span><br><span class="line">Note: breakpoint 1 also <span class="built_in">set</span> at pc 0x674.</span><br><span class="line">Breakpoint 7 at 0x674: file gdb_example.c, line 3.</span><br></pre></td></tr></table></figure></li><li><code>break</code>：break命令没有参数时，表示在下一条指令处停住。</li><li><code>break … if&lt;condition&gt;</code><ul><li>…可以是上述的break<linenum>、break+offset/break–offset中的参数</linenum></li><li>condition表示条件，在条件成立时停住。比如在循环体中，可以设置break if i=100，表示当i为100时停住程序。</li></ul></li></ol><p><strong>查看断点</strong>时，可使用info命令，如info breakpoints[n]、info break[n]（n表示断点号）。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">(gdb) info <span class="keyword">break</span></span><br><span class="line">Num     Type           Disp Enb Address            What</span><br><span class="line"><span class="number">1</span>       breakpoint     keep y   <span class="number">0x0000000000000674</span> in add at gdb_example.c:<span class="number">3</span></span><br><span class="line"><span class="number">2</span>       breakpoint     keep y   <span class="number">0x0000000000000752</span> in main at gdb_example.c:<span class="number">12</span></span><br><span class="line"><span class="number">3</span>       breakpoint     keep y   <span class="number">0x0000000000000689</span> in main at gdb_example.c:<span class="number">5</span></span><br><span class="line"><span class="number">4</span>       breakpoint     keep y   <span class="number">0x0000000000000752</span> in main at gdb_example.c:<span class="number">12</span></span><br><span class="line"><span class="number">5</span>       breakpoint     keep y   <span class="number">0x000000000000070c</span> in main at gdb_example.c:<span class="number">10</span></span><br><span class="line"><span class="number">6</span>       breakpoint     keep y   <span class="number">0x0000000000000698</span> in main at gdb_example.c:<span class="number">7</span></span><br><span class="line">(gdb) info <span class="keyword">break</span> <span class="number">5</span></span><br><span class="line">Num     Type           Disp Enb Address            What</span><br><span class="line"><span class="number">5</span>       breakpoint     keep y   <span class="number">0x000000000000070c</span> in main at gdb_example.c:<span class="number">10</span></span><br><span class="line">(gdb) info breakpoint <span class="number">5</span></span><br><span class="line">Num     Type           Disp Enb Address            What</span><br><span class="line"><span class="number">5</span>       breakpoint     keep y   <span class="number">0x000000000000070c</span> in main at gdb_example.c:<span class="number">10</span></span><br></pre></td></tr></table></figure><h3 id="单步命令"><a href="#单步命令" class="headerlink" title="单步命令"></a><strong>单步命令</strong></h3><p><code>next命令</code>：用于单步执行，类似于VC++中的step over。 next的单步不会进入函数的内部。<br><code>step（缩写为s）命令</code>：与next正好相对，在单步执行一个函数时，进入其内部，类似于VC++中的step into。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">(gdb) <span class="keyword">break</span> <span class="number">14</span></span><br><span class="line">Breakpoint <span class="number">1</span> at <span class="number">0x75e</span>: file gdb_example.c, line <span class="number">14.</span></span><br><span class="line">(gdb) run </span><br><span class="line">Starting program: /root/cpptest/gdb_example </span><br><span class="line"></span><br><span class="line">Breakpoint <span class="number">1</span>, main () at gdb_example.c:<span class="number">14</span></span><br><span class="line"><span class="number">14</span>sum[i] = add(array1[i], array2[i]);</span><br><span class="line">(gdb) step</span><br><span class="line">add (a=<span class="number">48</span>, b=<span class="number">85</span>) at gdb_example.c:<span class="number">3</span></span><br><span class="line"><span class="number">3</span><span class="keyword">return</span> a + b;</span><br></pre></td></tr></table></figure><p>单步执行高级用法如下：</p><ol><li><code>step &lt;count&gt;</code> 也就是上面的示例<br>单步跟踪，如果有函数调用，则进入该函数（进入函数的前提是，此函数被编译有debug信息）。<br>step后面不加count表示一条条地执行，加count表示执行后面的count条指令，然后再停住。</li><li><code>next &lt;count&gt;</code> 也就是上面的示例<br>单步跟踪，如果有函数调用，它不会进入该函数。<br>同理，next后面不加count表示一条条地执行，加count表示执行后面的count条指令，然后再停住。</li><li><code>set step-mode</code></li></ol><ul><li>set step-mode on用于打开step-mode模式，这样，在进行单步跟踪（运行step指令）时，若跨越某没有调试信息的函数，程序的执行则会在该函数的第一条指令处停住，而不会跳过整个函数。这样我们可以查看该函数的机器指令。</li><li>set step-mod off用于关闭step-mode模式</li></ul><ol start="4"><li><code>finish</code><br>运行程序，直到当前函数完成返回，并<strong>打印函数返回时的堆栈地址、返回值及参数值等信息</strong>。</li><li><code>until</code>（缩写为u）<br>一直在循环体内执行单步而退不出来是一件令人烦恼的事情，用until命令可以运行程序直到退出循环体。</li><li>stepi（缩写为si）和nexti（缩写为ni） （选看）<br>stepi和nexti用于单步跟踪一条机器指令。比如，一条C程序代码有可能由数条机器指令完成，stepi和nexti可以单步执行机器指令，相反，step和next是C语言级别的命令。<br>另外，运行display/i$pc命令后，单步跟踪会在打出程序代码的同时打出机器指令，即汇编代码。</li></ol><h3 id="continue命令"><a href="#continue命令" class="headerlink" title="continue命令"></a><strong>continue命令</strong></h3><p>当程序被停住后，可以使用continue命令（缩写为c，fg命令同continue命令）恢复程序的运行直到程序结束，或到达下一个断点。<br>命令格式为：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">continue</span> [ignore-count] <span class="comment">//ignore-count表示忽略其后多少次断点。</span></span><br><span class="line">c [ignore-count]</span><br><span class="line">fg [ignore-count]</span><br></pre></td></tr></table></figure><p>示例：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">(gdb) <span class="built_in">break</span> add</span><br><span class="line">Breakpoint 1 at 0x674: file gdb_example.c, line 3.</span><br><span class="line">(gdb) <span class="built_in">break</span> 14</span><br><span class="line">Breakpoint 2 at 0x75e: file gdb_example.c, line 14.</span><br><span class="line">(gdb) <span class="built_in">break</span> 10</span><br><span class="line">Breakpoint 3 at 0x70c: file gdb_example.c, line 10.</span><br><span class="line">(gdb) run </span><br><span class="line">Starting program: /root/cpptest/gdb_example </span><br><span class="line"></span><br><span class="line">Breakpoint 3, main () at gdb_example.c:10</span><br><span class="line">10   int array2[10] =&#123;85, 99, 66, 0x199, 393, 11, 1, 2, 3, 4&#125;;</span><br><span class="line">(gdb) <span class="built_in">continue</span> </span><br><span class="line">Continuing.</span><br><span class="line"></span><br><span class="line">Breakpoint 2, main () at gdb_example.c:14</span><br><span class="line">14sum[i] = add(array1[i], array2[i]);</span><br></pre></td></tr></table></figure><h3 id="print命令"><a href="#print命令" class="headerlink" title="print命令"></a><strong>print命令</strong></h3><p>查看当前程序的运行数据：当程序被停住时，可以使用print命令（缩写为p），或是同义命令inspect来查看当前程序的运行数据。<br>print命令的格式如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">print &lt;expr&gt;</span><br><span class="line">print &#x2F;&lt;format&gt; &lt;expr&gt;</span><br></pre></td></tr></table></figure><p><code>&lt; expr &gt;</code>是表达式，也是被调试的程序中的表达式<br><code>&lt; format &gt;</code>是输出的格式，比如，如果要把表达式按十六进制的格式输出，那么就是/x。<br>在表达式中，有几种GDB所支持的操作符，它们可以用在任何一种语言中:</p><ul><li><code>@</code>是一个和数组有关的操作符</li><li><code>::</code>指定一个在文件或是函数中的变量</li><li><code>{&lt;type&gt;}&lt;addr&gt;</code>表示一个指向内存地址<addr>的类型为type的对象</addr></li></ul><p>当需要查看一段连续内存空间的值时，可以使用GDB的@操作符，@的左边是第一个内存地址，@的右边则是想查看内存的长度。<br>例如如下动态申请的内存：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> *<span class="built_in">array</span> = (<span class="keyword">int</span> *) <span class="built_in">malloc</span> (len * <span class="keyword">sizeof</span> (<span class="keyword">int</span>));</span><br></pre></td></tr></table></figure><p>在GDB调试过程中这样显示这个动态数组的值：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">p *<span class="built_in">array</span>@len</span><br></pre></td></tr></table></figure><p>print的输出格式如下。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">x：按十六进制格式显示变量。</span><br><span class="line">d：按十进制格式显示变量。</span><br><span class="line">u：按十六进制格式显示无符号整型。</span><br><span class="line">o：按八进制格式显示变量。</span><br><span class="line">t：按二进制格式显示变量。</span><br><span class="line">a：按十六进制格式显示变量。</span><br><span class="line">c：按字符格式显示变量。</span><br><span class="line">f：按浮点数格式显示变量。</span><br></pre></td></tr></table></figure><p>可用<code>display命令</code>设置一些自动显示的变量，当程序停住时，或是单步跟踪时，这些变量会自动显示。</p><blockquote><p>当用GDB的print查看程序运行时数据时，每一个print都会被GDB记录下来。GDB会以$ 1，$ 2，$ 3 … 这样的方式为每一个print命令编号。我们可以使用这个编号访问以前的表达式，如 $ 1。</p></blockquote><h4 id="修改变量值"><a href="#修改变量值" class="headerlink" title="修改变量值"></a><strong>修改变量值</strong></h4><p>如果要修改变量，如x的值，可使用如下命令：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print x=<span class="number">4</span></span><br></pre></td></tr></table></figure><h3 id="watch命令"><a href="#watch命令" class="headerlink" title="watch命令"></a><strong>watch命令</strong></h3><p>watch一般用来观察某个表达式（变量也是一种表达式）的值是否有了变化，如果有变化，马上停止程序运行。<br>设置观察点有如下几种方法来。</p><ul><li><code>watch &lt;expr&gt;</code>：为表达式（变量）expr设置一个观察点。一旦表达式值有变化时，马上停止程序运行。</li><li><code>rwatch &lt;expr&gt;</code>：当表达式（变量）expr被读时，停止程序运行。</li><li><code>awatch &lt;expr&gt;</code>：当表达式（变量）的值被读或被写时，停止程序运行。</li><li><code>info watchpoints</code>：列出当前所设置的所有观察点。</li></ul><h3 id="jump命令"><a href="#jump命令" class="headerlink" title="jump命令"></a><strong>jump命令</strong></h3><p>GDB可以修改程序的执行顺序，从而让程序随意跳跃。这个功能可以由GDB的jump命令实现。<br><code>jump &lt;linespec&gt;</code>来指定下一条语句的运行点。</p><ul><li>&lt; linespec &gt;可以是文件的行号，可以是file：line格式，也可以是+num这种偏移量格式，表示下一条运行语句从哪里开始。</li></ul><p><code>jump &lt;address&gt;</code></p><ul><li>这里的&lt; address &gt; 是代码行的内存地址。</li></ul><p>注意：<br>jump命令不会改变当前程序栈中的内容，如果使用jump从一个函数跳转到另一个函数，当跳转到的函数运行完返回，进行出栈操作时必然会发生错误，这可能会导致意想不到的结果，因此最好只用jump在同一个函数中进行跳转。</p><h3 id="signal命令"><a href="#signal命令" class="headerlink" title="signal命令"></a><strong>signal命令</strong></h3><p>singal命令，可以产生一个信号量给被调试的程序，如中断信号Ctrl+C。于是，可以在程序运行的任意位置处设置断点，并在该断点处用GDB产生一个信号量，这种精确地在某处产生信号的方法非常有利于程序的调试。<br>signal命令的语法是</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">signal &lt;signal&gt;</span><br></pre></td></tr></table></figure><p>UNIX的系统信号量通常为1~15，因此<signal>的取值也在这个范围内。</signal></p><h3 id="return命令"><a href="#return命令" class="headerlink" title="return命令"></a><strong>return命令</strong></h3><p>如果在函数中设置了调试断点，在断点后还有语句没有执行完，这时候我们可以使用return命令强制函数忽略还没有执行的语句并返回。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">return</span></span><br><span class="line"><span class="keyword">return</span> &lt;expression&gt;</span><br></pre></td></tr></table></figure><p>上述return命令用于取消当前函数的执行，并立即返回，如果指定了<expression>，那么该表达式的值会被作为函数的返回值。</expression></p><h3 id="call命令"><a href="#call命令" class="headerlink" title="call命令"></a><strong>call命令</strong></h3><p>call命令用于强制调用某函数：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">call &lt;expr&gt;</span><br></pre></td></tr></table></figure><p>表达式可以是函数，以此达到强制调用函数的目的，它会显示函数的返回值（如果函数返回值不是void）。比如在下列程序执行while（1）的时候：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">main()</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">void</span> *p = <span class="built_in">malloc</span>(<span class="number">16</span>);</span><br><span class="line"><span class="keyword">while</span>(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们可以强制要求其执行strcpy()和printf()：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">(gdb) <span class="function">call <span class="title">strcpy</span><span class="params">(p, <span class="string">"hello world"</span>)</span></span></span><br><span class="line">$3 = 134524936</span><br><span class="line">(gdb) <span class="function">call <span class="title">printf</span><span class="params">(<span class="string">"%s\n"</span>, p)</span></span></span><br><span class="line"><span class="function">hello world</span></span><br><span class="line">$4 = 12</span><br></pre></td></tr></table></figure><h3 id="info命令"><a href="#info命令" class="headerlink" title="info命令"></a><strong>info命令</strong></h3><p>info命令可以用来在调试时查看寄存器、断点、观察点和信号等信息。</p><ol><li>查看寄存器的值，使用如下命令：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">info registers （查看除了浮点寄存器以外的寄存器）</span><br><span class="line">info all-registers （查看所有寄存器，包括浮点寄存器）</span><br><span class="line">info registers &lt;regname ...&gt; （查看所指定的寄存器）</span><br></pre></td></tr></table></figure></li><li>查看断点信息，使用如下命令：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">info break</span><br></pre></td></tr></table></figure></li><li>要列出当前所设置的所有观察点，可使用如下命令：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">info watchpoints</span><br></pre></td></tr></table></figure></li><li>查看有哪些信号正在被GDB检测，使用如下命令：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">info signals</span><br><span class="line">info handle</span><br></pre></td></tr></table></figure></li><li>info line命令来查看源代码在内存中的地址。</li></ol><ul><li>info line后面可以跟行号、函数名、文件名：行号、文件名：函数名等多种形式，例如用下面的命令会打印出所指定的源码在运行时的内存地址：<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">info line tst.c:func</span><br></pre></td></tr></table></figure></li></ul><h3 id="disassemble"><a href="#disassemble" class="headerlink" title="disassemble"></a><strong>disassemble</strong></h3><p>disassemble命令用于反汇编（将机器语言转换为汇编语言）。可用它来查看当前执行时的源代码的机器码，实际上只是把目前内存中的指令冲刷出来。<br>下面的示例用于查看函数func的汇编代码：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Dump of assembler code <span class="keyword">for</span> function func:</span><br><span class="line"><span class="number">0x8048450</span> &lt;func&gt;: push %ebp</span><br><span class="line"><span class="number">0x8048451</span> &lt;func+<span class="number">1</span>&gt;: mov %esp,%ebp</span><br><span class="line"><span class="number">0x8048453</span> &lt;func+<span class="number">3</span>&gt;: sub $<span class="number">0x18</span>,%esp</span><br><span class="line"><span class="number">0x8048456</span> &lt;func+<span class="number">6</span>&gt;: movl $<span class="number">0x0</span>,<span class="number">0xfffffffc</span>(%ebp)</span><br><span class="line">...</span><br><span class="line">End of assembler dump.</span><br></pre></td></tr></table></figure><h3 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a><strong>注意事项</strong></h3><ul><li>GDB并不具备记忆功能，每次断开重新开启，之前的断点设置等信息都会丢失的。</li></ul><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p>《Linux设备驱动开发详解：基于最新的Linux4.0内核》<br><a href="http://blog.chinaunix.net/uid-25324849-id-238896.html">GDB用法详解</a><br><a href="https://www.jianshu.com/p/589308dd36dc">gdb —- x命令详解</a><br><a href="https://www.iteye.com/blog/simohayha-493091">gdb学习笔记(一)</a><br><a href="https://blog.csdn.net/haoel/article/details/2885">用GDB调试程序（七）</a> //包含修改变量的值</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;我们需要知道什么？&quot;&gt;&lt;a href=&quot;#我们需要知道什么？&quot; class=&quot;headerlink&quot; title=&quot;我们需要知道什么？&quot;&gt;&lt;/a&gt;&lt;strong&gt;我们需要知道什么？&lt;/strong&gt;&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;GDB是什么？有什么作用呢？&lt;br&gt;GDB的用法有哪些？&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="Linux" scheme="https://stemha.github.io/categories/Linux/"/>
    
    
      <category term="Linux" scheme="https://stemha.github.io/tags/Linux/"/>
    
      <category term="调试器" scheme="https://stemha.github.io/tags/%E8%B0%83%E8%AF%95%E5%99%A8/"/>
    
  </entry>
  
  <entry>
    <title>Linux程序执行相关函数-exec函数</title>
    <link href="https://stemha.github.io/2020/07/05/Linux%E7%A8%8B%E5%BA%8F%E6%89%A7%E8%A1%8C%E7%9B%B8%E5%85%B3%E5%87%BD%E6%95%B0-exec%E5%87%BD%E6%95%B0/"/>
    <id>https://stemha.github.io/2020/07/05/Linux%E7%A8%8B%E5%BA%8F%E6%89%A7%E8%A1%8C%E7%9B%B8%E5%85%B3%E5%87%BD%E6%95%B0-exec%E5%87%BD%E6%95%B0/</id>
    <published>2020-07-05T13:25:17.000Z</published>
    <updated>2020-08-10T04:19:21.584Z</updated>
    
    <content type="html"><![CDATA[<p>类Unix系统提供了一系列函数，这些函数能<code>用可执行文件所描述的新上下文代替进程的上下文</code>。这样的函数名以前缀exec开始，后跟一个或两个字母。</p><a id="more"></a><h2 id="exec族函数"><a href="#exec族函数" class="headerlink" title="exec族函数"></a><strong>exec族函数</strong></h2><p>下表列出了<code>exec族函数</code>，它们之间的差别在于如何解释参数。</p><table><thead><tr><th align="left">函数名</th><th align="left">路径搜索</th><th align="left">命令行参数</th><th align="left">环境数组</th></tr></thead><tbody><tr><td align="left">execl()</td><td align="left">否</td><td align="left">列表</td><td align="left">否</td></tr><tr><td align="left">execlp()</td><td align="left">是</td><td align="left">列表</td><td align="left">否</td></tr><tr><td align="left">execle()</td><td align="left">否</td><td align="left">列表</td><td align="left">是</td></tr><tr><td align="left">execv()</td><td align="left">否</td><td align="left">数组</td><td align="left">否</td></tr><tr><td align="left">execvp()</td><td align="left">是</td><td align="left">数组</td><td align="left">否</td></tr><tr><td align="left">execve()</td><td align="left">否</td><td align="left">数组</td><td align="left">是</td></tr></tbody></table><h2 id="参数说明"><a href="#参数说明" class="headerlink" title="参数说明"></a><strong>参数说明</strong></h2><h3 id="第一个参数"><a href="#第一个参数" class="headerlink" title="第一个参数"></a><strong>第一个参数</strong></h3><p>每个函数的第一个参数表示被执行文件的路径名。</p><ul><li>路径名可以是绝对路径或是当前进程目录的相对路径。</li><li>此外，如果路径名中不包含“/”字符，execlp()和execvp()函数就在PATH环境变量指定的所有目录中搜索这个可执行文件。</li></ul><h3 id="execl-execlp-和exec1e-中间的参数"><a href="#execl-execlp-和exec1e-中间的参数" class="headerlink" title="execl(), execlp()和exec1e()中间的参数"></a><strong>execl(), execlp()和exec1e()中间的参数</strong></h3><p>除了第一个参数，execl(), execlp()和exec1e()函数包含的其他参数个数都是可变的。</p><ul><li>每个参数指向一个字符串，这个字符串是对新程序命令行参数的描述，正如函数名中“l”字符所隐含的一样，这些参数组织成一个列表，最后一个值为NULL。</li><li>通常情况下，第一个命令行参数复制可执行文件名。</li></ul><h3 id="execv-execvp-和execve-的第二个参数"><a href="#execv-execvp-和execve-的第二个参数" class="headerlink" title="execv(), execvp()和execve()的第二个参数"></a><strong>execv(), execvp()和execve()的第二个参数</strong></h3><p>相反，execv(), execvp()和execve()函数指定单个参数的命令行参数，正如函数名中的“v”字符所隐含的一样，这单个参数是<code>指向命令行参数串的指针向量地址</code>。</p><ul><li>数组的最后一个元素必须存放NULL值。</li></ul><h3 id="最后一个参数"><a href="#最后一个参数" class="headerlink" title="最后一个参数"></a><strong>最后一个参数</strong></h3><p>execle()和execve()函数的最后一个参数是指向<code>环境串</code>的指针数组的地址：数组的最后一个元素照样必须为NULL。<br>其他函数对新程序环境参数的访问是通过C库定义的外部全局变量environ进行的。</p><blockquote><p>所有的<code>exec函数</code>(除execve()外)都是<code>C库定义的封装例程</code>，并利用了<code>execve()系统调用</code>，这是<code>Linux所提供的处理程序执行的唯一系统调用</code>。</p></blockquote><h2 id="sys-execve-服务"><a href="#sys-execve-服务" class="headerlink" title="sys_execve()服务"></a><strong>sys_execve()服务</strong></h2><p>sys_execve()服务例程接收下列参数：</p><ol><li>可执行<code>文件路径名的地址</code>(在用户态地址空间)。</li><li>以NULL结束的字符串指针数组的地址(在用户态地址空间)，每个字符串表示一个<code>命令行参数</code>。</li><li>以NULL结束的字符串指针数组的地址(也在用户态地址空间)。每个字符串以NAME = value形式表示一个<code>环境变量</code>。</li></ol><h3 id="sys-execve-执行过程"><a href="#sys-execve-执行过程" class="headerlink" title="sys_execve()执行过程"></a><strong>sys_execve()执行过程</strong></h3><p>sys_execve()把<code>可执行文件路径名</code>拷贝到一个新分配的页框。<br>然后调用<code>do_execve()函数</code>，传递给它的参数为指向这个页框的指针、指针数组的指针及把用户态寄存器内容保存到内核态堆栈的位置。</p><h2 id="do-execve"><a href="#do-execve" class="headerlink" title="do_execve()"></a><strong>do_execve()</strong></h2><p>do_execve()依次执行下列操作：</p><ol><li><p>动态地分配一个<code>linux_binprn数据结构</code>，并用新的可执行文件的数据<strong>填充linux_binprn数据结构</strong>。</p></li><li><p>调用<code>path_lookup()</code>, <code>dentry_open()</code>和<code>path_release()</code>，以<strong>获得与可执行文件相关的目录项对象、文件对象和索引节点对象</strong>。如果失败，则返回相应的错误码。</p></li><li><p><strong>检查是否可以由当前进程执行该文件</strong>，再检查索引节点的i_writecount字段，以确定可执行文件没被写入;把-1存放在这个字段以禁止进一步的写访问。</p></li><li><p>在多处理器系统中，调用<code>sched_exec()函数</code>来确定最小负载CPU以执行新程序，并把当前进程转移过去。</p></li><li><p>调用<code>ini_new_context()</code><strong>检查当前进程是否使用自定义局部描述符表</strong>。如果是，函数为新程序分配和淮备一个新的LDT。</p></li><li><p>调用<code>prepare_binprm()</code>函数<strong>填充linux_binprm数据结构</strong>，这个函数又依次执行下列操作：</p><ul><li>再一次检查文件是否可执行(至少设置一个执行访问权限)。如果不可执行，则返回错误码(因为带有CAP_DAC_OVERRIDE权能的进程总能通过检查，所以第3步中的检查还不够。</li><li>初始化linux_binprm结构的<code>e_uid</code>和<code>e_gid字段</code>，考虑可执行文件的setuid和setgid标志的值。这些字段分别表示有效的用户ID和组ID。也要检查进程的权能。</li><li>用可执行文件的前128字节填充linux_binprm结构的<code>buf字段</code>。这些字节包含的是适合于识别可执行文件格式的一个魔数和其他信息。</li></ul></li><li><p>把<strong>文件路径名、命令行参数及环境串拷贝到一个或多个新分配的页框</strong>中，最终它们会被分配给用户态地址空间。</p></li><li><p>调用<code>search_binary_handler()函数</code>对<code>formats链表</code>进行扫描，并尽力<strong>应用每个元素的load_binary方法</strong>，把linux_binprm数据结构传递给这个函数。只要load_binary方法成功应答了文件的可执行格式，对formats的扫描就终止。</p></li><li><p><strong>如果可执行文件格式不在formats链表中</strong>，就释放所分配的所有页框并返回错误码 -ENOEXEC，表示Linux不认识这个可执行文件格式。</p></li><li><p>否则，函数释放linux_binprm数据结构，<strong>返回从这个文件可执行格式的load_binary方法中所获得的代码</strong>。</p></li></ol><h2 id="load-binary方法"><a href="#load-binary方法" class="headerlink" title="load_binary方法"></a><strong>load_binary方法</strong></h2><p>可执行文件格式对应的load_binary方法执行下列操作(假定这个可执行文件所在的文件系统允许文件进行内存映射并需要一个或多个共享库)：</p><ol><li><p><strong>检查存放在文件前128字节中的一些魔数以确认可执行格式</strong>。如果魔数不匹配，则返回错误码 -ENOEXEC。</p></li><li><p><strong>读可执行文件的首部</strong>。这个首部描述程序的段和所需的<code>共享库</code>。</p></li><li><p>从<strong>可执行文件获得动态链接程序的路径名，并用它来确定共享库的位置并把它们映射到内存</strong>。</p></li><li><p><strong>获得动态链接程序的目录项对象</strong>，也就获得了索引节点对象和文件对象。</p></li><li><p><strong>检查动态链接程序的执行许可权</strong>。</p></li><li><p><strong>把动态链接程序的前128字节拷贝到缓冲区</strong>。</p></li><li><p><strong>对动态链接程序类型执行一些一致性检查。</strong></p></li><li><p>调用<code>flush_old_exec()</code>函数<strong>释放前一个计算所占用的几乎所有资源</strong>。这个函数又依次执行下列操作：</p><ol start="81"><li>如果信号处理程序的表为其他进程所共享，那么就分配一个新表并把旧表的引用计数器减1;而且它将进程从旧的线程组脱离。这是通过调用de_ thread()函数完成的。</li><li>如果与其他进程共享，就调用unshare_files()拷贝描述进程已打开文件的files_struct结构。</li><li>调用exec_mmap()函数释放分配给进程的内存描述符、所有线性区及所有页框，并清除进程的页表。</li><li>将可执行文件路径名赋给进程描述符的comm字段。</li><li>用flush_thread()函数清除浮点寄存器的值和在TSS段保存的调试寄存器的值。</li><li>调用flush_signal_handlers()函数，用于将每个信号恢复为默认操作，从而更新信号处理程序的表。</li><li>调用flush_old_files()函数关闭所有打开的文件，这些打开的文件在进程描述符的files-&gt;close_on_exec字段设置了相应的标志。现在，已经不能返回了，如果真出了差错，这个函数再不能恢复前一个计算</li></ol></li><li><p>清除<code>进程描述符的PF_FORKNOEXEC标志</code>。这个标志用于在进程创建时设置进程记账，在执行一个新程序时清除进程记账。</p></li><li><p><strong>设立进程新的个性</strong>，即设置进程描述符的personality字段。</p></li><li><p>调用arch_pick_mmap_layout()，以<strong>选择进程线性区的布局</strong>。</p></li><li><p>调用setup_arg_pages()函数<strong>为进程的用户态堆栈分配一个新的线性区描述符</strong>，并把那个线性区插入到进程的地址空间。setup_arg_pages()还<strong>把命令行参数和环境变量串所在的页框分配给新的线性区。</strong>   </p></li><li><p>调用do_map()函数<strong>创建一个新线性区来对可执行文件正文段(即代码)进行映射</strong>。这个线性区的起始线性地址依赖于可执行文件的格式，因为程序的可执行代码通常是不可重定位的。因此，这个函数假定从某一特定逻辑地址的偏移量开始装入正文段。ELF程序被装入的起始线性地址为0x080480000。    </p></li><li><p>调用do_mmap()函数<strong>创建一个新线性区来对可执行文件的数据段进行映射</strong>。这个线性区的起始线性地址也依赖于可执行文件的格式，因为可执行代码希望在特定的偏移量(即特定的线性地址)处找到它自己的变量。在ELF程序中，数据段正好被装在正文段之后。  </p></li><li><p><strong>为可执行文件的其他专用段分配另外的线性区</strong>，通常是无。 </p></li><li><p><strong>调用一个装入动态链接程序的函数</strong>。如果动态链接程序是ELF可执行的，这个函数就叫做<code>load_elf_interp()</code>。一般情况下，这个函数执行第12-14步的操作，不过要用动态链接程序代替被执行的文件。动态链接程序的正文段和数据段在线性区的起始线性地址是由动态链接程序本身指定的，但它们处于高地址区(通常高于0x40000000)，这是为了避免与被执行文件的正文段和数据段所映射的线性区发生冲突。</p></li><li><p><strong>把可执行格式的linux_binfmt对象的地址存放在进程描述符的binfmt字段中。</strong>   </p></li><li><p><strong>确定进程的新权能。</strong></p></li><li><p><strong>创建特定的动态链接程序表并把它们存放在用户态堆栈</strong>，这些表处于命令行参数和指向环境串的指针数组之间。  </p></li><li><p><strong>设置进程的内存描述符的start_code、end_code、start_data、end_data、start_brk、brk及start_stack字段</strong>。</p></li><li><p>调用do_brk()函数<strong>创建一个新的匿名线性区来映射程序的bss段</strong>(当进程写入一个变量时，就触发请求调页，进而分配一个页框)。这个线性区的大小是在可执行程序被链接时就计算出来的。因为程序的可执行代码通常是不可重新定位的，因此，必须指定这个线性区的起始线性地址。在ELF程序中，bss段正好装在数据段之后。</p></li><li><p>调用start_thread()宏<strong>修改保存在内核态堆栈但属于用户态寄存器的eip和esp的值</strong>，以使它们分别指向动态链接程序的入口点和新的用户态堆栈的栈顶。</p></li><li><p>如果进程正被跟踪，就通知调试程序execve()系统调用已完成。</p></li><li><p>返回0(成功)。</p></li></ol><p>当execve()系统调用终止且调用进程重新恢复它在用户态的执行时，执行上下文被大幅度改变，调用系统调用的代码不复存在。<br>从这个意义上看，我们可以说execve()从未成功返回。取而代之的是，要执行的新程序已被映射到进程的地址空间。<br>但是，新程序还不能执行，因为动态链接程序还必须考虑共享库的装载。</p><p>如果可执行文件是静态链接的，即如果不需要共享库，load_binary方法只需将程序的正文段、数据段、bss段和堆栈段映射到进程线性区，然后把用户态eip寄存器的内容设置为新程序的入口点即可。</p><h2 id="动态链接程序如何运作"><a href="#动态链接程序如何运作" class="headerlink" title="动态链接程序如何运作"></a>动态链接程序如何运作</h2><p>尽管动态链接程序运行在用户态，但我们还要在这里简要概述一下动态链接程序是如何运作的。</p><ul><li>它的第一个工作就是从内核保存在用户态堆栈的信息(处于环境串指针数组和arg start之间)开始，为自己建立一个基本的执行上下文。</li><li>然后，动态链接程序必须检查被执行的程序，以识别哪个共享库必须装入及在每个共享库中哪个函数被有效地请求。</li><li>接下来，解释器发出几个mmap()系统调用来创建线性区，以对将存放程序实际使用的库函数(正文和数据)的页进行映射。</li><li>然后，解释器根据库的线性区的线性地址更新对共享库符号的所有引用。</li><li>最后，动态链接程序通过跳转到被执行程序的主入口点而终止它的执行。</li><li>从现在开始，进程将执行可执行文件的代码和共享库的代码。</li></ul><h2 id="注解"><a href="#注解" class="headerlink" title="注解"></a>注解</h2><p>魔数：就是一个标识作用的信息。 <a href="https://www.xuebuyuan.com/1992152.html">linux中魔数的作用</a></p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p><a href="https://stemha.github.io/2020/07/04/Linux%E7%A8%8B%E5%BA%8F%E7%9A%84%E6%89%A7%E8%A1%8C%E8%BF%87%E7%A8%8B/">Linux程序的执行过程</a><br>深入理解Linux内核中文版（第三版）</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;类Unix系统提供了一系列函数，这些函数能&lt;code&gt;用可执行文件所描述的新上下文代替进程的上下文&lt;/code&gt;。这样的函数名以前缀exec开始，后跟一个或两个字母。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Linux" scheme="https://stemha.github.io/categories/Linux/"/>
    
    
      <category term="Linux" scheme="https://stemha.github.io/tags/Linux/"/>
    
      <category term="内核" scheme="https://stemha.github.io/tags/%E5%86%85%E6%A0%B8/"/>
    
      <category term="程序执行" scheme="https://stemha.github.io/tags/%E7%A8%8B%E5%BA%8F%E6%89%A7%E8%A1%8C/"/>
    
  </entry>
  
  <entry>
    <title>Linux程序的执行过程</title>
    <link href="https://stemha.github.io/2020/07/04/Linux%E7%A8%8B%E5%BA%8F%E7%9A%84%E6%89%A7%E8%A1%8C%E8%BF%87%E7%A8%8B/"/>
    <id>https://stemha.github.io/2020/07/04/Linux%E7%A8%8B%E5%BA%8F%E7%9A%84%E6%89%A7%E8%A1%8C%E8%BF%87%E7%A8%8B/</id>
    <published>2020-07-04T09:08:50.000Z</published>
    <updated>2020-08-10T04:19:21.586Z</updated>
    
    <content type="html"><![CDATA[<h2 id="我们需要知道什么？"><a href="#我们需要知道什么？" class="headerlink" title="我们需要知道什么？"></a><strong>我们需要知道什么？</strong></h2><blockquote><p>进程的概念在UNIX中的表现就是一组程序竞争系统资源的行为。<br>内核是如何通过程序文件的内容建立进程的执行上下文？<br>一个程序执行的上下文到底是什么呢？</p></blockquote><a id="more"></a><p>虽然将一组指令装入内存让 CPU 执行看起来不是大问题，但内核还必须处理以下几方面的问题：</p><ul><li><code>不同的可执行文件格式</code>。Linux 可在 64 位版本的机器上执行 32 位可执行代码。</li><li><code>共享库</code>。很多可执行文件并不包含执行程序所需的所有代码，而是期望内核在运行时从共享库中加载函数。</li><li><code>执行上下文的其它信息</code>。这包括<code>命令行参数</code>与<code>环境变量</code>。</li></ul><p>程序是以<code>可执行文件(executable file)</code>的形式存放在磁盘上的，<code>可执行文件</code>既包括<code>被执行函数的目标代码</code>，也包括这些<code>函数所使用的数据</code>。<br>程序中的很多函数是所有程序员都可使用的服务例程，它们的目标代码包含在所谓“库”的特殊文件中:</p><ul><li>实际上，一个库函数的代码或被<code>静态地拷贝到可执行文件</code>(<code>静态库</code>)</li><li>或在<code>运行时被连接到进程</code>(<code>共享库</code>，因为它们的代码由很多独立的进程所共享)。</li></ul><p>当装入并运行一个程序时，用户可以提供影响程序执行方式的两种信息：</p><ol><li><code>命令行参数</code>：用户在shell提示符下紧跟文件名输入的就是命令行参数。</li><li><code>环境变量</code>：环境变量(例如HOME和PATH)是从shell继承来的，但用户在装入并运行程序前可以修改任何环境变量。</li></ol><p>接下来各部分的内容<br>可执行文件：解释一个程序的执行上下文是什么。<br>可执行格式：提及一些 Linux 所支持的可执行格式，并说明 Linux 如果改变它的“个性”以执行其它操作系统所编译的程序。<br>exec 函数：描述执行一个新程序的进程所需的系统调用。</p><h2 id="可执行文件"><a href="#可执行文件" class="headerlink" title="可执行文件"></a><strong>可执行文件</strong></h2><p>进程可以定义为执行上下文。这也意味着进行特定的计算需要收集必要的信息，包括所访问的页，打开的文件，硬件寄存器的内容等。<br><code>可执行文件</code>是一个普通文件，描述了如何初始化一个新的执行上下文，也就是如何开始一个新的计算。</p><h3 id="执行过程示例"><a href="#执行过程示例" class="headerlink" title="执行过程示例"></a><strong>执行过程示例</strong></h3><p>假如一位用户想在当前目录下面显示文件（我们知道用ls命令就可以），用户在shell提示符下只需要简单的敲出外部命令<code>/bin/ls</code>就可以了。这时候具体会发生什么呢？</p><ol><li>命令shell会<u>创建一个新的进程</u>，新的进程又会<u>调用系统调用execve()</u>,其中<u>传递的一个参数就是ls可执行文件的全路径名</u>（本例子中是/bin/ls）</li><li>sys_exec()找到相应的文件，检查可执行的格式，并根据存放在其中的信息修改当前进程的上下文。</li><li>因此，当这个系统调用中止的时候，新的进程开始执行存放在可执行文件中的代码。本例子中是执行目录显示。</li></ol><p><strong>当一个进程开始新的程序的时候，它的执行上下文会发生很大的变化。</strong>因为进程的前一个计算执行期间所获得的大部分资源会被抛弃，但是进程的 PID 不改变，并且新的计算从前一个计算继承所有打开的文件描述符。</p><ul><li>比方上面的示例，当进程开始执行/bin/ls时候，它用execve()系统调用传递来的新参数代替shell的参数，并获得一个新的shell环境。</li><li>然后从父进程继承来的所有的页（并通过写时复制机制实现共享）被释放，以便在一个新的用户态空间执行新的计算，甚至进程的特权都可能改变。</li><li>当前进程的PID是不会改变的，而且新的计算会继承从之前计算所有打开的文件描述符，当然这些文件描述符是之前执行execve()系统调用时还没有自动关闭的描述符。</li></ul><h2 id="进程的信任状和权能"><a href="#进程的信任状和权能" class="headerlink" title="进程的信任状和权能"></a><strong>进程的信任状和权能</strong></h2><h3 id="进程的信任状"><a href="#进程的信任状" class="headerlink" title="进程的信任状"></a><strong>进程的信任状</strong></h3><h4 id="作用"><a href="#作用" class="headerlink" title="作用"></a><strong>作用</strong></h4><ul><li>信任状把进程与一个特定的用户或用户组捆绑在一起。</li><li>信任状在多用户系统上特别重要，因为信任状可以决定每个进程能做什么，不能做什么，保证了用户个人数据的完整性，也保证了系统整体上的稳定性。</li><li>信任状的使用需要进程数据结构方面给予支持，也需要被保护的资源方面给与支持。<ul><li>比如文件，<u>当某个进程试图访问一个文件，VFS总是根据文件的拥有者和进程的信任状所建立的许可权检查访问的合法性。</u></li></ul></li></ul><h4 id="进程描述符中的信任状字段"><a href="#进程描述符中的信任状字段" class="headerlink" title="进程描述符中的信任状字段"></a><strong>进程描述符中的信任状字段</strong></h4><p>进程的信任状存放在进程描述符的几个字段中：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">uid,gid            用户和组的实际标识符</span><br><span class="line">euid,egid          用户和组的有效标识符          </span><br><span class="line">fsuid,fsgid        文件访问的用户和组的有效标识符 </span><br><span class="line">groups             补充的组标识符</span><br><span class="line">suid,sgid          用户和组保存的标识符</span><br></pre></td></tr></table></figure><p><strong>说明：</strong></p><ul><li><code>euid(effective user ID)</code>:当进程执行时间, 操作系统会对euid进行识别, 以此来判断<code>到底用什么权限来执行这个进程</code>.</li><li>值为0的uid指定给root用户，值为0的gid指定给root超级组。只要有关进程的信任状存放了一个零值，则内核将放弃权限检查，始终允许这个进程做任何事情，如涉及系统管理或硬件处理的那些操作，而这些操作对于非特权进程是不允许的。</li><li><strong>setuid是类unix系统提供的一个标志位</strong>， <ul><li>其实际意义是<u>set一个process的euid为这个可执行文件或程序的拥有者(比如root)的uid</u>， 也就是说当setuid位被设置之后， 当文件或程序(统称为executable)被执行时, 操作系统会赋予文件所有者的权限, 因为其euid是文件所有者的uid.</li><li>setuid的方法是使用Linux的chmod指令，我们都习惯给予一个文件类似“0750” “0644” 之类的权限，它们的最高位0就是setuid的位置</li><li>比如 chmod 4750 文件名</li></ul></li></ul><p>当一个进程被创建时，总是继承父进程的信任状。</p><ul><li>不过，这些信任状以后可以被修改，这发生在当进程开始执行一个新程序时，或者当进程发出合适的系统调用时。</li><li>通常情况下，进程的uid, euid, fsuid及suid字段具有相同的值。然而，当<code>进程执行setuid程序</code>时，即可执行文件的setuid标志被设置时，euid和fsuid字段被置为这个文件拥有者的标识符。几乎所有的检查都涉及这两个字段中的一个：<code>fsuid</code>用于与文件相关的操作，而<code>euid</code>用于其他所有的操作。这也同样适用于组标识符的gid、egid、fsgid及sgid字段。</li></ul><h4 id="如何使用fsuid字段"><a href="#如何使用fsuid字段" class="headerlink" title="如何使用fsuid字段"></a><strong>如何使用fsuid字段</strong></h4><p>考虑一下当用户想改变口令时的情况。所有的口令都存放在一个公共文件中，但用户不能直接编辑这样的文件，因为它是受保护的。因此使用如下操作：</p><ol><li>户调用一个名为/usr/bin/passwd的系统程序，它可以设置setuid标志，而且它的拥有者是超级用户。</li><li>当shell创建的进程执行这样一个程序时，进程的euid和fsuid字段被置为0，即超级用户的PID。</li><li>现在，这个进程可以访问这个文件，因为当内核执行访问控制表时在fsuid字段发现了值。</li><li>当然，/usr/bin/passwd程序除了让用户改变自己的口令外，并不允许做其他任何事情。</li></ol><h4 id="系统调用怎样影响进程信任状"><a href="#系统调用怎样影响进程信任状" class="headerlink" title="系统调用怎样影响进程信任状"></a><strong>系统调用怎样影响进程信任状</strong></h4><p>从Unix的历史发展可以得出一个教训，即setuid程序是相当危险的：恶意用户可以以这样的方式触发代码中的一些bug，从而强迫setuid程序执行程序的最初设计者从未安排的操作。这可能常常危及整个系统的安全。<br>为了减少这样的风险，Linux与所有现代Unix操作系统一样，让进程只有在必要时才获得setuid特权，并在不需要时取消它们。可以证明，当使用数个保护级别来实现用户应用程序时，这种特点是很有用的。<br>进程描述符包含一个<code>suid字段</code>，在setuid程序执行以后在该字段中正好<strong>存放</strong>有效标识符(euid和fsuid)的值。进程可以通过<code>setuid()、setresuid()、setfsuid()和setreuid()系统调用</code>改变有效标识符。</p><p>下表显示了这些系统调用是怎样影响进程的信任状的。<br>如果调用进程还没有超级用户特权，即它的euid字段不为0，那么，只能用这些系统调用来设置在这个进程的信任状字段已经有的值。<br>例如，一个普通用户进程可以通过调用系统调用<code>setfsuid()</code>强迫它的fsuid值为500，但这只有在其他信任状字段中有一个字段已经有相同的值500时才行。</p><p><strong>设置信任状的系统调用</strong></p><table><thead><tr><th align="left"></th><th align="left">setuid(e)</th><th align="left">setuid(e)</th><th align="left"></th><th align="left"></th><th align="left"></th></tr></thead><tbody><tr><td align="left">字段</td><td align="left">euid = 0</td><td align="left">euid != 0</td><td align="left">setresuid(u,e,s)</td><td align="left">setresuid(u,e)</td><td align="left">setresuid(f)</td></tr><tr><td align="left">uid</td><td align="left">设置为e</td><td align="left">不改变</td><td align="left">设置为u</td><td align="left">设置为u</td><td align="left">不改变</td></tr><tr><td align="left">euid</td><td align="left">设置为e</td><td align="left">设置为e</td><td align="left">设置为e</td><td align="left">设置为e</td><td align="left">不改变</td></tr><tr><td align="left">fsuid</td><td align="left">设置为e</td><td align="left">设置为e</td><td align="left">设置为e</td><td align="left">设置为e</td><td align="left">设置为f</td></tr><tr><td align="left">suid</td><td align="left">设置为e</td><td align="left">不改变</td><td align="left">设置为s</td><td align="left">设置为e</td><td align="left">不改变</td></tr></tbody></table><p>为了理解四个用户ID字段之间的关系，考虑setuid()系统调用的效果。</p><ul><li>这些操作是不同的，这取决于调用者进程的euid字段是否被置为0(即进程有超级用户特权)或被置为一个正常的UID。</li><li>如果euid字段为0，这个系统调用就把调用进程的所有信任状字段(uid, euid, fsuid及suid)置为参数e的值。<code>超级用户进程因此就可以删除自己的特权而变为由普通用户拥有的一个进程。</code><ul><li>例如，在用户登录时，系统以超级用户特权创建一个新进程，但这个进程通过调用setuid()系统调用删除自己的特权，然后开始执行用户login shell程序。</li></ul></li><li>如果euid字段不为0，那么这个系统调用只修改存放在euid和fsuid中的值，让其他两个字段保持不变。</li><li>当运行setuid程序来提高和降低进程有效权限时(这些权限存放在euid和fsuid字段)，该系统调用的这种功能是非常有用的。</li></ul><h3 id="进程的权能（可选看）"><a href="#进程的权能（可选看）" class="headerlink" title="进程的权能（可选看）"></a><strong>进程的权能（可选看）</strong></h3><p>这个在linux中不怎么用。<br>“权能(capability )”一词引人进程信任状的另一种模型。Linux内核支持POSIX权能，一种权能仅仅是一个标志，它表明是否允许进程执行一个特定的操作或一组特定的操作。这个模型不同于传统的“超级用户VS普通用户”模型，在后一种模型中，一个进程要么能做任何事情，要么什么也不能做，这取决于它的有效UID。<br>在Linux内核中已包含了很多权能。权能的主要优点是，任何时候每个进程只需要有限种权能。因此，即使有恶意的用户发现一种利用有潜在错误的程序的方法，他也只能非法地执行有限个操作类型。</p><h2 id="命令含参数和-shell-环境"><a href="#命令含参数和-shell-环境" class="headerlink" title="命令含参数和 shell 环境"></a><strong>命令含参数和 shell 环境</strong></h2><p>当用户键入一个命令时，为满足这个请求而装入的程序可以从shell接收一些<code>命令行参数(command-line argument)</code>。<br>例如:</p><ul><li>当用户键入命令:$ ls -l /usr/bin以获得/usr/bin目录下的全部文件列表时，shell进程创建一个新进程执行这个命令。</li><li>这个新进程装入/bin/ls可执行文件。在这样做的过程中，从shell继承的大多数执行上下文被丢弃，但三个单独的参数ls、-l和/usr/bin依然保持。</li><li>一般情况下，新进程可以接收任意多个参数。传递命令行参数的约定依赖于所用的高级语言。</li></ul><h3 id="传递命令行参数"><a href="#传递命令行参数" class="headerlink" title="传递命令行参数"></a><strong>传递命令行参数</strong></h3><p>在C语言中，程序的main()函数把传递给程序的参数个数和指向字符串指针数组的地址作为参数。下列原型形式化地表示了这种标准格式:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc，<span class="keyword">char</span> *argv[])</span></span></span><br></pre></td></tr></table></figure><p>回到前面的例子:</p><ul><li>当/bin/ls程序被调用时，argc的值为3, argv[0]指向”ls”字符串，argv[1]指向”-l”字符串，而argv[2]指向”/usr/bin”字符串。</li><li>argv数组的末尾处总以空指针来标记，因此，argv[3]为NULL。</li><li>在C语言中，传递给main()函数的第三个可选参数是<code>包含环境变量的参数</code>。</li></ul><h3 id="传递环境变量参数"><a href="#传递环境变量参数" class="headerlink" title="传递环境变量参数"></a><strong>传递环境变量参数</strong></h3><p><code>环境变量</code>用来定制进程的执行上下文，由此为用户或其他进程提供通用的信息，或者允许进程在执行execve()系统调用的过程中保持一些信息。<br>为了使用环境变量，main ()可以声明如下：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc，<span class="keyword">char</span> *argv()，<span class="keyword">char</span> *envp[])</span></span></span><br></pre></td></tr></table></figure><p><code>envp参数</code>指向环境串的指针数组，形式如下：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">VAR_NAME=something</span><br></pre></td></tr></table></figure><p><strong>说明：</strong></p><ul><li>VAR_NAME表示一个环境变量的名字，而“=”后面的子串表示赋给变量的实际值。</li><li>envp数组的结尾用空指针标记，就像argv数组。<code>envp数组的地址</code>存放在<code>C库的environ全局变量</code>中。</li><li><strong>命令行参数和<code>环境串</code>都存放在<code>用户态堆栈</code>中，正好位于返回地址之前</strong>。</li></ul><p>下图显示了用户态堆栈的底部单元。环境变量位于栈底附近正好在一个长整数0(即图中的NULL)之后。</p><div align="center"><p><img src="/2020/07/04/Linux%E7%A8%8B%E5%BA%8F%E7%9A%84%E6%89%A7%E8%A1%8C%E8%BF%87%E7%A8%8B/%E7%94%A8%E6%88%B7%E6%80%81%E5%A0%86%E6%A0%88%E6%A8%A1%E5%9E%8B.png" alt="用户态堆栈模型"></p></div><h2 id="库"><a href="#库" class="headerlink" title="库"></a><strong>库</strong></h2><p>每个高级语言的源码文件都是经过几个步骤才转化为目标文件的（.o文件），目标文件中包含的是汇编语言指令的机器代码，它们和相应的高级语言指令对应。</p><ul><li>目标文件并不能被执行，因为它不包含源代码文件所用的全局外部符号名的线性地址，例如库函数或同一程序中的其他源代码文件。</li><li>这些地址的分配或解析是由链接程序完成的，链接程序把程序所有的目标文件收集起来并构造可执行文件。</li><li>链接程序还分析程序所用的库函数，并以本章后面所描述的方式把它们粘合成可执行文件。</li><li>大多数程序，甚至是最小的程序都会利用C库。</li></ul><p>例如下面只有一行的C程序：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span>&#123;&#125;</span><br></pre></td></tr></table></figure><p>尽管这个程序没有做任何事情，但还是需要做很多工作来建立执行环境，并在程序终止时杀死这个进程。尤其当main()函数终止时，C编译程序把exit_group()函数插入到目标代码中。程序通常通过C库中的封装例程调用系统调用，C编译器亦如此。</p><p>任何可执行文件除了包括对程序的语句进行编译所直接产生的代码外，还包括一些<code>“粘合”代码</code>来处理<code>用户态进程与内核之间的交互</code>。这样的粘合代码有一部分存放在C库中。<br>除了C库，Unix系统中还包含很多其他的函数库。一般的Linux系统通常就有几百个不同的库。</p><p>传统Unix系统中的所有可执行文件都是基于<code>静态库(static library)</code>的。这意味着链接程序所产生的可执行文件不仅包括原程序的代码，还包括程序所引用的库函数的代码。静态库的一大缺点是它们占用大量的磁盘空间。因为每个静态链接的可执行文件都复制库代码的某些部分。<br>现代Unix系统利用<code>共享库(shared library)</code>。可执行文件不用再包含库的目标代码，而仅仅指向库名。当程序被装入内存执行时，一个名为<code>动态链接器(dynamic linker，也叫ld.so)的程序</code>就专注于分析可执行文件中的库名，确定所需库在系统目录树中的位置，并使执行进程可以使用所请求的代码。<br>进程也可以使用dlopen()库函数在运行时装入额外的共享库。</p><p><strong>共享库的优点：</strong></p><ul><li>共享库对提供文件内存映射的系统尤为方便，因为它们减少了执行一个程序所需的主内存量。</li><li>当动态链接程序必须把某一共享库链接到进程时，并不拷贝目标代码，而是仅仅执行一个内存映射，把库文件的相关部分映射到进程的地址空间中。这就允许共享库机器代码所在的页框被使用同一代码的所有进程共享。如果程序是静态链接的，那么共享是不可能的。</li></ul><p><strong>共享库的缺点:</strong></p><ul><li>动态链接的程序启动时间通常比静态链接的程序长。</li><li>动态链接的程序的可移植性也不如静态链接的好，因为当系统中所包含的库版本发生变化时，动态链接的程序运行时就可能出现问题。</li></ul><p><strong>如何编译的时候只使用静态链接：</strong></p><pre><code>用户可以始终请求一个程序被静态地链接。例如，GCC编译器提供-static选项，即告诉链接程序使用静态库而不是共享库。</code></pre><h2 id="程序段和进程的线性区"><a href="#程序段和进程的线性区" class="headerlink" title="程序段和进程的线性区"></a><strong>程序段和进程的线性区</strong></h2><p>从逻辑上说，Unix程序的线性地址空间传统上被划分为几个叫做<code>段(segment)</code>的区间：</p><p><code>正文段</code></p><ul><li>包含程序的可执行代码。</li></ul><p><code>己初始化数据段</code></p><ul><li>包含已初始化的数据，也就是初值存放在可执行文件中的所有静态变量和全局变量(因为程序在启动时必须知道它们的值)。</li></ul><p><code>未初始化数据段(bss段)</code></p><ul><li>包含未初始化的数据，也就是初值没有存放在可执行文件中的所有全局变量，因为程序在引用它们之前才赋值，历史上把这个段叫做bss段。</li></ul><p><code>堆栈段</code></p><ul><li>包含程序的堆栈，堆栈中有返回地址、参数和被执行函数的局部变量。</li></ul><p>每个<code>mm_struct内存描述符</code>都包含一些字段来标识相应进程特定线性区的作用：<br>start_code，end_code：程序的源代码所在线性区的起始和终止线性地址，即可执行文件中的代码。<br>start_data，end_data：程序的初始化数据所在线性区的起始和终止线性地址，正如在可执行文件中所指定的那样。这两个字段指定的线性区大体上与数据段对应。<br>start_brk，brk：存放线性区的起始和终止线性地址，该线性区包含动态分配给进程的内存区。有时把这部分线性区叫做堆。<br>start_stack：正好在main()的返回地址之上的地址。更高的地址被保留(栈向低地址增长)。<br>arg_start，arg_end：命令行参数所在的堆栈部分的起始地址和终止地址。<br>env_start，env_end：环境串所在的堆栈部分的起始地址和终止地址。</p><h2 id="可执行格式"><a href="#可执行格式" class="headerlink" title="可执行格式"></a><strong>可执行格式</strong></h2><p>Linux标淮的可执行格式是<code>ELF(Executable and Linking Format)</code>，它由Unix系统实验室开发并在Unix世界相当流行。著名的Unix操作系统都把ELF作为它们的主要可执行格式。<br>Linux的旧版支持另一种名叫<code>Assembler OUTput Format (a.out)的格式</code>。因为现在ELF非常实用，因此已经很少用a.out格式。</p><p>Linux支持很多其他不同格式的可执行文件。</p><ul><li>在这种方式下，Linux能运行为.其他操作系统所编译的程序，如MS-DOS的EXE程序。</li><li>有几种可执行格式，如Java或bash脚本，是与平台无关的。</li></ul><p>由<code>类型为linux_binfmt的对象</code>所描述的<code>可执行格式</code>实质上提供以下三种方法：</p><ul><li><code>load_binary</code> 通过读存放在可执行文件中的信息<u>为当前进程建立一个新的执行环境</u>。</li><li><code>load_shlib</code>  用于<u>动态地把一个共享库捆绑到一个已经在运行的进程</u>，这是由<code>uselib()系统调用</code>激活的。</li><li><code>core_dump</code> 在名为<code>core</code>的文件中<strong>存放当前进程的执行上下文</strong>。这个文件通常在进程接收到缺省操作为“dump”的信号时被创建，格式取决于被执行程序的可执行类型。</li></ul><p>所有的<code>linux binfmt对象</code>都处于一个单向链表中。</p><ol><li>链表第一个元素的地址：存放在formats变量中。</li><li>插入和删除元素：通过调用<code>register_binfmt()</code>和<code>unregister_binfmt()</code>函数在链表中插入和删除元素。<ul><li>在系统启动期间，为每个<strong>编译进内核的可执行格式</strong>都执行<code>register_binfmt()</code>函数。</li><li>当实现了一个新的可执行格式的模块正被装载时，也执行这个函数，当模块被卸载时，执行<code>unregister_binfmt()</code>函数。</li></ul></li><li>在formats链表中的最后一个元素:是对解释脚本的可执行格式进行描述的一个对象。</li></ol><p>这种格式只定义了load_binary方法。其相应的load_script()函数检查这种可执行文件是否以两个<code>#!</code>字符开始。如果是，这个函数就把第一行的其余部分解释为另一个可执行文件的路径名，并把脚本文件名作为参数传递以执行它。</p><h3 id="自定义的可执行格式"><a href="#自定义的可执行格式" class="headerlink" title="自定义的可执行格式"></a><strong>自定义的可执行格式</strong></h3><p>Linux允许用户注册自己定义的可执行格式:</p><pre><code>对这种格式的识别或者通过存放在文件前128字节的魔数，或者通过表示文件类型的扩展名。</code></pre><p>例如，MS-DOS的扩展名由“.”把三个字符从文件名中分离出来：.exe扩展名标识可执行文件，而.bat扩展名标识shell脚本。</p><h4 id="如何执行"><a href="#如何执行" class="headerlink" title="如何执行"></a><strong>如何执行</strong></h4><p><strong>当内核确定可执行文件是自定义格式时，它就启动相应的解释程序。</strong><br>解释程序运行在用户态，读入可执行文件的路径名作为参数，并执行计算。<br>例如，包含Java程序的可执行文件就由Java虚拟机(如//usr/lib/Java/bin/Java)来解释。</p><h4 id="建立自定义可执行格式"><a href="#建立自定义可执行格式" class="headerlink" title="建立自定义可执行格式"></a><strong>建立自定义可执行格式</strong></h4><p>这种机制与脚本格式类似，但功能更加强大，这是因为它对自定义格式不加任何限制。<br>要<code>注册一个新格式</code>，就必须在<code>binfmt_misc文件系统</code>的<code>注册文件</code>内写人一个字符串，其格式为：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"> name:type:offset:<span class="built_in">string</span>:mask:interpreter:flags</span><br></pre></td></tr></table></figure><p>每个字段的含义如下：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">name:         新格式的标识符。</span><br><span class="line">type:         识别类型(M表示魔数，E表示扩展)。</span><br><span class="line">offset:       魔数在文件中的起始偏移量。</span><br><span class="line"><span class="built_in">string</span>:       以魔数或者以扩展名匹配的字节序列。</span><br><span class="line">mask:         用来屏蔽掉<span class="built_in">string</span>中的一些位的字符串。</span><br><span class="line">interpreter:  解释程序的完整路径名。</span><br><span class="line">flags:        可选标志，控制必须怎样调用解释程序。</span><br></pre></td></tr></table></figure><p>例如，超级用户执行的下列命令将使内核识别出Microsoft Windows的可执行格式:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> :DOSWin:M:O:MZ:Oxff:/usr/bin/wine:’&gt;/proc/sys/fs/binfmt misc/register</span><br></pre></td></tr></table></figure><p>Windows可执行文件的前两个字节是<code>魔数MZ</code>，由解释程序/usr/bin/wine执行这个可执行文件。</p><h2 id="执行域"><a href="#执行域" class="headerlink" title="执行域"></a><strong>执行域</strong></h2><p>Linux的一个巧妙的特点就是能执行其他操作系统所编译的程序。当然，只有内核运行的平台与可执行文件包含的机器代码对应的平台相同时这才是可能的。对这些“外来”程序提供两种支持：</p><ul><li><code>模拟执行(emulated execution)</code>：程序中包含的系统调用与POSIX不兼容时才有必要执行这种程序。</li><li><code>原样执行(native execution)</code>：只有程序中所包含的系统调用完全与POSIX兼容时才有效。</li></ul><h3 id="模拟执行的例子"><a href="#模拟执行的例子" class="headerlink" title="模拟执行的例子"></a><strong>模拟执行的例子</strong></h3><p>Microsoft MS-DOS和Windows程序是被模拟执行的，因为它们包含的API不能被Linux所认识，因此不能原样执行。像DOSemu或Wine这样的模拟程序被调用来把每个API调用转换为一个模拟的封装函数调用，而封装函数调用又使用现有的Linux系统调用。</p><h3 id="原样执行的例子"><a href="#原样执行的例子" class="headerlink" title="原样执行的例子"></a><strong>原样执行的例子</strong></h3><p>另一方面，不用太费力就可以执行为其他操作系统编译的与POSIX兼容的程序，因为与POSIX兼容的操作系统都提供了类似的API。</p><ul><li>内核必须消除的细微差别通常涉及如何调用系统调用或如何给各种信号编号。这种信息存放在<code>类型为exec_domain的执行域描述符</code>中。</li></ul><p>进程可以指定它的执行域：</p><ul><li>通过设置<code>进程描述符</code>的<code>personality字段</code>，以及把相应<code>exec_domain数据结构</code>的地址存放到<code>thread_info结构</code>的<code>exec_domain字段</code>来实现的。</li><li>进程可以通过发布一个personality()系统调用来改变它的个性(personality)。</li></ul><p>程序员通常不希望直接改变其程序的个性;相反，应该通过建立进程的执行上下文的“粘合”代码来发出personality()系统调用。//待定</p><h2 id="灵活线性布局-可选看"><a href="#灵活线性布局-可选看" class="headerlink" title="灵活线性布局(可选看)"></a><strong>灵活线性布局(可选看)</strong></h2><p><code>灵活线性区布局(flexible memory region lagout)</code>在内核版本2.6.9中引人。<br>实际上，每个进程均是按照用户态堆栈预期的增长量来进行内存布局的。但是仍然可以使用老的经典布局(主要用于当内核无法限制进程用户态堆栈的大小时)。</p><p>下表是80x86结构的默认用户态地址空间为例描述了这两种布局，地址空间最大可以到3GB。布局之间只在文件内存映射与匿名映射时线性区的位置上有区别。</p><p>x86结构的线性布局:</p><table><thead><tr><th align="left">线性区种类</th><th align="left">经典布局</th><th align="left">灵活布局</th></tr></thead><tbody><tr><td align="left">正文段(ELF)</td><td align="left">开始于：0x08048000</td><td align="left">开始于：0x08048000</td></tr><tr><td align="left">数据与bss段</td><td align="left">开始于：紧接正文段之后</td><td align="left">开始于：紧接正文段之后</td></tr><tr><td align="left">堆</td><td align="left">开始于：紧接数据与bss段之后</td><td align="left">开始于：紧接数据与bss段之后</td></tr><tr><td align="left">文件内存映射与匿名线性区</td><td align="left">开始于：0x40000000(该地址对应整个用户地址空间的1/3)，库连续往高地址追加</td><td align="left">开始于：紧接用户态堆栈尾(最小地址)，库连续往低地址追加</td></tr><tr><td align="left">用户态堆栈</td><td align="left">开始于：OxC0000000并向低地址增长</td><td align="left">开始于：OxC0000000并向低地址增长</td></tr></tbody></table><p>在经典布局下，这些区域从整个用户态地址空间的1/3开始，通常在地址0x40000000。新的区域往更高线性地址追加，因此，这些区域往用户态堆栈方向扩展。<br>相反的是，在灵活布局中，文件内存映射与匿名映射的线性区是紧接用户态堆栈尾的。新的区域往更低线性地址追加，因此，这些区域往堆的方向扩展。因为堆栈也是连续往低地址追加的。</p><p>当内核能通过RLIMIT_STACK资源限制来限定用户态堆栈的大小时，通常使用灵活布局这个限制确定了为堆栈保留的线性地址空间大小。但是这个空间大小不能小于128MB或大于2.5GB。另外，如果RLIMIT_STACK资源限制设为无限(infinity)，或者系统管理员将sysctl_legacy_va_layout变量设为1(通过修改/proc/sys/vm/legacy_va_layout文件或调用相应的sysctl()系统调用实现)，内核无法确定用户态堆栈的上限，就仍然使用经典线性区布局。</p><p>引入灵活布局的主要优点在于：可以允许进程更好地使用用户态线性地址空间。</p><ul><li>在经典布局中，堆的限制是小于1GB，而其他线性区可以使用到约2GB(减去堆栈大小)。</li><li>在灵活布局中，没有这些限制，堆和其他线性区可以自由扩展，可以使用除了用户态堆栈和程序用固定大小的段以外的所有线性地址空间。</li></ul><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a><strong>参考资料</strong></h2><p>深入理解Linux内核中文版（第三版）<br><a href="https://www.cnblogs.com/-flw/p/5375100.html">linux内核学习之七 可执行程序的装载和运行</a><br><a href="https://blog.csdn.net/weixin_44575881/article/details/86552016">Linux中的setuid简介</a><br><a href="https://blog.csdn.net/qq_39584315/article/details/80311070">进程的虚拟内存，物理内存，共享内存</a><br><a href="https://blog.csdn.net/zouxiaoting/article/details/8658137">进程虚拟内存空间—线性区的数据结构</a><br><a href="https://www.cnblogs.com/fly-fish/archive/2011/12/16/2289933.html">linux下的三种可执行文件格式的比较</a><br><a href="https://blog.csdn.net/mazongshan1/article/details/37936971">linux 如何运行一个可执行文件</a><br><a href="https://blog.csdn.net/magaiou/article/details/80322133">深入理解Linux内核(完整版)-笔记</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;我们需要知道什么？&quot;&gt;&lt;a href=&quot;#我们需要知道什么？&quot; class=&quot;headerlink&quot; title=&quot;我们需要知道什么？&quot;&gt;&lt;/a&gt;&lt;strong&gt;我们需要知道什么？&lt;/strong&gt;&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;进程的概念在UNIX中的表现就是一组程序竞争系统资源的行为。&lt;br&gt;内核是如何通过程序文件的内容建立进程的执行上下文？&lt;br&gt;一个程序执行的上下文到底是什么呢？&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="Linux" scheme="https://stemha.github.io/categories/Linux/"/>
    
    
      <category term="Linux" scheme="https://stemha.github.io/tags/Linux/"/>
    
      <category term="内核" scheme="https://stemha.github.io/tags/%E5%86%85%E6%A0%B8/"/>
    
      <category term="驱动程序" scheme="https://stemha.github.io/tags/%E9%A9%B1%E5%8A%A8%E7%A8%8B%E5%BA%8F/"/>
    
      <category term="概述" scheme="https://stemha.github.io/tags/%E6%A6%82%E8%BF%B0/"/>
    
  </entry>
  
  <entry>
    <title>Linux 设备驱动概述</title>
    <link href="https://stemha.github.io/2020/06/29/Linux-%E8%AE%BE%E5%A4%87%E9%A9%B1%E5%8A%A8%E6%A6%82%E8%BF%B0/"/>
    <id>https://stemha.github.io/2020/06/29/Linux-%E8%AE%BE%E5%A4%87%E9%A9%B1%E5%8A%A8%E6%A6%82%E8%BF%B0/</id>
    <published>2020-06-29T15:34:32.000Z</published>
    <updated>2020-08-10T04:19:21.264Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>同类的东西，学习起来找共性就好了。学习Linux设备驱动，需要寻找各种驱动程序与系统的共性，探索其中的规律；</p></blockquote><a id="more"></a><h2 id="设备驱动的作用"><a href="#设备驱动的作用" class="headerlink" title="设备驱动的作用"></a><strong>设备驱动的作用</strong></h2><p>驱动程序的作用主要是实现硬件对软件工程师的隐形。</p><p><strong>详细作用解释</strong>：</p><ul><li><p>驱使硬件设备行动。</p></li><li><p>驱动与底层硬件直接打交道，<u>按照硬件设备的具体工作方式，<code>读写设备寄存器</code>，完成<code>设备的轮询</code>、<code>中断处理</code>、<code>DMA通信</code>，进行<code>物理内存向虚拟内存的映射</code></u>等，最终让通信设备能收发数据，让显示设备能显示文字和画面，让存储设备记录文件和数据。</p></li><li><p>设备驱动充当了硬件和应用软件之间的纽带，它使得应用软件只需要调用系统软件的应用编程接口（API）就可以让硬件去完成要求的工作。</p><ul><li><strong>没有操作系统的情况</strong>，工程师可以根据硬件设备的特点自行定义接口，如对串口定义SerialSend()、SerialRecv()；对 LED 定义LightOn()、LightOff()；以及对 Flash 定义FlashWrite()、FlashRead()等。</li><li><strong>有操作系统的情况</strong>，设备驱动的架构则由相应的操作系统定义，驱动工程师必须按照相应的架构设计设备驱动，这样，设备驱动才能良好地整合到操作系统的内核中。</li></ul></li></ul><h2 id="无操作系统时的设备驱动"><a href="#无操作系统时的设备驱动" class="headerlink" title="无操作系统时的设备驱动"></a><strong>无操作系统时的设备驱动</strong></h2><p>对于<code>功能比较单一、控制并不复杂的系统</code>，如公交车刷卡机、电冰箱、微波、简单的手机和小灵通等，并不需要多任务调度、文件系统、内存管理等复杂功能，单任务架构完全可以很好地支持它们的工作。一个无限循环中夹杂对设备中断的检测或者对设备的轮询是这种系统中软件的典型架构。</p><p><strong>单任务软件典型架构</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc,<span class="keyword">char</span>* avgv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">while</span>(<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">if</span>(serialInt==<span class="number">1</span>)</span><br><span class="line">       <span class="comment">// 有串口中断</span></span><br><span class="line">      &#123;</span><br><span class="line">        ProcessSerialInt();  <span class="comment">//处理串口中断</span></span><br><span class="line">        serialInt=<span class="number">0</span>;         <span class="comment">//中断标志变量清0 </span></span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span>(keyInt==<span class="number">1</span>)        <span class="comment">//有按键中断</span></span><br><span class="line">      &#123;</span><br><span class="line">        ProcessKeyInt();   <span class="comment">//处理按键中断</span></span><br><span class="line">        keyInt=<span class="number">0</span>;          <span class="comment">//中断标志标量清0</span></span><br><span class="line">      &#125;</span><br><span class="line">      status=CheckXXX();</span><br><span class="line">      <span class="keyword">switch</span>(status)</span><br><span class="line">      &#123;</span><br><span class="line">        . . .</span><br><span class="line">      &#125;</span><br><span class="line">        . . .</span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样的系统中，虽然不存在操作系统，但是设备驱动是必须存在的。</p><ul><li>一般情况下，对每一种设备驱动都会定义为一个软件模块，包含.h文件和.c文件。<ul><li><code>.h文件</code>定义该设备驱动的数据结构并声明外部函数，<code>.c文件</code>进行设备驱动的具体实现。</li></ul></li></ul><p>举例：<br>一个串口驱动serial.c serial.h，主要是配置GPIO，串口控制寄存器，以及串口的收发（读写）寄存器，而这几个配置都是自定义函数实现的，比如串口的写（发）SerialSend 函数等。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**********************</span></span><br><span class="line"><span class="comment">*serial.h 文件</span></span><br><span class="line"><span class="comment">**********************/</span></span><br><span class="line"><span class="function"><span class="keyword">extern</span> <span class="keyword">void</span> <span class="title">SerialInit</span><span class="params">(<span class="keyword">void</span>)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">extern</span> <span class="keyword">void</span> <span class="title">SerialSend</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> buf*,<span class="keyword">int</span> count)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">extern</span> <span class="keyword">void</span> <span class="title">SerialRecv</span><span class="params">(<span class="keyword">char</span> buf*,<span class="keyword">int</span> count)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**********************</span></span><br><span class="line"><span class="comment">*serial.c 文件</span></span><br><span class="line"><span class="comment">**********************/</span></span><br><span class="line"><span class="comment">/* 初始化串口 */</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">SerialInit</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">...</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 串口发送 */</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">SerialSend</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> buf*,<span class="keyword">int</span> count)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">...</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 串口接收 */</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">SerialRecv</span><span class="params">(<span class="keyword">char</span> buf*,<span class="keyword">int</span> count)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">...</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 串口中断处理函数 */</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">SerialIsr</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">...</span><br><span class="line">serialInt = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其他模块需要使用这个设备的时候，只需要包含设备驱动的头文件 serial.h，然后调用其中的外部接口函数即可。如我们要从串口上发送字符串“Hello World”，使用函数SerialSend( “ Hello World “,11)即可。</p><p>这样子，在没有操作系统的情况下，设备驱动的接口被直接提交给了应用软件工程师， <strong>应用软件没有跨越任何层次就直接访问了设备驱动的接口。 设备驱动包含的接口函数也与硬件的功能直接吻合</strong>， 没有任何附加功能。</p><div align="center"><p><img src="/2020/06/29/Linux-%E8%AE%BE%E5%A4%87%E9%A9%B1%E5%8A%A8%E6%A6%82%E8%BF%B0/%E6%97%A0os%E6%97%B6%E9%A9%B1%E5%8A%A8-%E7%A1%AC%E4%BB%B6-%E5%BA%94%E7%94%A8%E7%9A%84%E5%85%B3%E7%B3%BB.png" alt="无os时驱动-硬件-应用的关系"></p></div><p>有的工程师把单任务系统设计成设备驱动和具体的应用软件模块处于同一层次（即应用程序也在比如serial.c中实现），这显然是不合理的，不符合软件设计中高内聚低耦合的要求。<br>另一种不合理的设计是直接在应用中操作硬件的寄存器（单独一个main.c，所有功能都在一个函数中实现，不采用其他任何接口/函数），而不单独设计驱动模块，这种设计意味着系统中不存在或未能充分利用可被重用的驱动代码。</p><h2 id="有操作系统时的设备驱动"><a href="#有操作系统时的设备驱动" class="headerlink" title="有操作系统时的设备驱动"></a><strong>有操作系统时的设备驱动</strong></h2><p>当系统中包含操作系统后，设备驱动会变得怎样？</p><ul><li>首先，无操作系统时<u>设备驱动的硬件操作工作仍然是必不可少的</u>， 没有这一部分，设备驱动不可能与硬件打交道。</li><li>其次，我们还需要将<strong>设备驱动融入内核</strong>。为了实现这种融合，必须<code>在所有的设备驱动中设计面向操作系统内核的接口</code>。</li><li><strong>这样的接口由操作系统规定，对一类设备而言结构一致，独立于具体的设备</strong>。</li></ul><p>由此可见，当系统中存在操作系统的时候，设备驱动变成了连接硬件和内核的桥梁。</p><div align="center"><p><img src="/2020/06/29/Linux-%E8%AE%BE%E5%A4%87%E9%A9%B1%E5%8A%A8%E6%A6%82%E8%BF%B0/%E6%9C%89os%E6%97%B6%E9%A9%B1%E5%8A%A8-%E7%A1%AC%E4%BB%B6-%E5%BA%94%E7%94%A8%E7%9A%84%E5%85%B3%E7%B3%BB.png" alt="有os时驱动-硬件-应用的关系"></p></div><p><strong>操作系统的存在势必要求设备驱动附加更多的代码和功能（主要是提供了很多结构）</strong>，把单一的“驱使硬件设备行动”变成了操作系统内与硬件交互的模块，它对外呈现为操作系统的API，不再给应用软件工程师直接提供接口。</p><p>有了操作系统之后，设备驱动反而变得复杂，那要操作系统干什么？</p><ul><li>首先，一个复杂的软件系统需要处理多个并发的任务，没有操作系统，想完成多任务并发是很困难的。</li><li>其次，操作系统给我们提供内存管理机制。一个典型的例子是，对于多数含 MMU的处理器而言，Windows、Linux 等操作系统可以让每个进程都独立地访问 4GB的内存空间。</li></ul><p>上述优点似乎并没有体现在设备驱动身上，操作系统的存在给设备驱动究竟带来了什么好处呢？</p><ul><li>简而言之，操作系统通过给设备驱动制造麻烦来达到给上层应用提供便利的目的。</li><li><strong>如果设备驱动都按照操作系统给出的独立于设备的接口而设计，应用程序将可使用统一的系统调用接口来访问各种设备。</strong></li><li>对于类UNIX的VxWorks、Linux等操作系统而言，<u>应用程序通过write()、read()等函数读写文件就可以访问各种字符设备和块设备，而不用管设备的具体类型和工作方式</u>，是非常方便的。</li></ul><p><u>不管有无操作系统，不管是SerialSend，或者write，访问设备都需要对寄存器进行读写操作</u>，比如串口，在dev目录下有个ttys0结点，我们可以通过ioctl函数对其进行读写操作，当然，write、read更为直接咯。而上层的应用可以对这些函数进行封装，定义不同的接口，从而实现更多的功能</p><h2 id="Linux设备的分类及特点"><a href="#Linux设备的分类及特点" class="headerlink" title="Linux设备的分类及特点"></a><strong>Linux设备的分类及特点</strong></h2><p>驱动针对的对象是存储器和外设（包括CPU 内部集成的存储器和外设），而不是针对CPU 内核。</p><blockquote><p>多说一点，以前的通过总线挂载到cpu的一些设备，正在被逐渐集成到CPU上。<br>随着IC 制作工艺的发展，目前，芯片的集成度越来越高，往往在CPU 内部就集成了存储器和外设适配器。譬如，相当多的ARM、PowerPC、MIPS 等处理器都集成了UART、I2C 控制器、SPI 控制器、USB 控制器、SDRAM 控制器等，有的处理器还集成了GPU（图形处理器）、视频编解码器等。</p></blockquote><p>Linux 将存储器和外设分为3 个基础大类。</p><ul><li><code>字符设备</code><ul><li>字符设备指那些必须以串行顺序依次进行访问的设备，如触摸屏、磁带驱动器、鼠标<br>等。</li></ul></li><li><code>块设备</code><ul><li>块设备可以按任意顺序进行访问，以块为单位进行操作，如硬盘、eMMC 等。</li></ul></li><li><code>网络设备</code><ul><li>网络设备面向数据包的接收和发送而设计，它并不倾向于对应于文件系统的节点。内核与网络设备的通信与内核和字符设备、网络设备的通信方式完全不同，前者主要还是使用套接字接口。</li></ul></li></ul><h2 id="Linux设备驱动与整个软硬件系统的关系"><a href="#Linux设备驱动与整个软硬件系统的关系" class="headerlink" title="Linux设备驱动与整个软硬件系统的关系"></a><strong>Linux设备驱动与整个软硬件系统的关系</strong></h2><p>如图所示，除网络设备外，字符设备与块设备都被映射到Linux文件系统的文件和目录，通过文件系统的系统调用接口open()、write()、read()、close()等即可访问字符设备和块设备。所有字符设备和块设备都统一呈现给用户。</p><div align="center"><p><img src="/2020/06/29/Linux-%E8%AE%BE%E5%A4%87%E9%A9%B1%E5%8A%A8%E6%A6%82%E8%BF%B0/Linux%E8%AE%BE%E5%A4%87%E9%A9%B1%E5%8A%A8%E4%B8%8E%E6%95%B4%E4%B8%AA%E8%BD%AF%E7%A1%AC%E4%BB%B6%E7%B3%BB%E7%BB%9F%E7%9A%84%E5%85%B3%E7%B3%BB.png" alt="Linux设备驱动与整个软硬件系统的关系"></p></div><p>Linux的<code>块设备有两种访问方法</code>：</p><ol><li>类似dd命令对应的原始块设备，如“/dev/sdb1”等；</li><li>在块设备上建立FAT、EXT4、BTRFS等文件系统，然后以文件路径如“/home/barry/hello.txt”的形式进行访问。<ul><li>在Linux中，针对NOR、NAND等提供了独立的<code>内存技术设备（Memory Technology Device，MTD）子系统</code>，其上运行YAFFS2、JFFS2、UBIFS等具备擦除和负载均衡能力的文件系统。</li><li>针对磁盘或者Flash设备的FAT、EXT4、YAFFS2、JFFS2、UBIFS等文件系统定义了文件和目录在存储介质上的组织。而Linux的虚拟文件系统则统一对它们进行了抽象。</li></ul></li></ol><blockquote><p>应用程序可以使用Linux的系统调用接口编程，但也可使用C库函数，出于代码可移植性的目的，后者更值得推荐。</p></blockquote><p>C库函数本身也通过系统调用接口而实现，如C库函数fopen()、fwrite()、fread()、fclose()分别会调用操作系统的API open()、write()、read()、close()。</p><h2 id="Linux-设备驱动学习的重点、难点"><a href="#Linux-设备驱动学习的重点、难点" class="headerlink" title="Linux 设备驱动学习的重点、难点"></a><strong>Linux 设备驱动学习的重点、难点</strong></h2><ul><li><strong>好的硬件基础</strong>:懂得 SRAM、Flash、SDRAM、磁盘的读写方式，UART、I2C、USB 等设备的接口以及轮询、中断、DMA 的原理，PCI 总线的工作方式以及CPU 的内存管理单元（MMU）等。</li><li><strong>好的 C 语言基础</strong>: 能灵活地运用 C 语言的结构体、指针、函数指针及内存动态申请和释放等。</li><li><strong>一定的 Linux 内核基础</strong>:至少要明白<code>驱动与内核的接口</code>。尤其是对于块设备、网络设备、Flash 设备、串口设备等复杂设备，内核定义的驱动体系结构本身就非常复杂。</li><li><strong>非常好的多任务并发控制和同步的基础</strong>:在驱动中会大量使用自旋锁、互斥、信号量、等待队列等并发与同步机制。</li></ul><h2 id="资源与工具"><a href="#资源与工具" class="headerlink" title="资源与工具"></a><strong>资源与工具</strong></h2><ul><li>类似<a href="http://lxr.free-electrons.com/、http://lxr.oss.org.cn/">http://lxr.free-electrons.com/、http://lxr.oss.org.cn/</a> 这样的网站提供了Linux 内核源代码的交叉索引，在其中输入Linux 内核中的函数、数据结构或变量的名称就可以直接得到以超链接形式给出的定义和引用它的所有位置。</li><li>一些网站也提供了Linux 内核中函数、变量和数据结构的搜索功能，在google 中搜索“linux identifier search ”可得。</li><li>Linux 主机上阅读和编辑Linux 源码的常用方式是vim + cscope 或者vim + ctags，vim是一个文本编辑器，而cscope 和ctags 则可建立代码索引</li></ul><h2 id="LED驱动示例（选看）"><a href="#LED驱动示例（选看）" class="headerlink" title="LED驱动示例（选看）"></a><strong>LED驱动示例（选看）</strong></h2><h3 id="无操作系统时的LED-驱动"><a href="#无操作系统时的LED-驱动" class="headerlink" title="无操作系统时的LED 驱动"></a>无操作系统时的LED 驱动</h3><p>在嵌入式系统的设计中，LED 一般直接由CPU 的GPIO（通用可编程I/O）口控制。<br>GPIO 一般由两组寄存器控制，即一组<code>控制寄存器</code>和一组<code>数据寄存器</code>。</p><ul><li>控制寄存器可设置GPIO 口的工作方式为输入或者输出。</li><li>当引脚被设置为输出时，向数据寄存器的对应位写入1和0 会分别在引脚上产生高电平和低电平；</li><li>当引脚设置为输入时，读取数据寄存器的对应位可获得引脚上的电平为高或低。</li></ul><p>假设:</p><ul><li>在GPIO_REG_CTRL 物理地址中控制寄存器处的第n 位写入1 可设置GPIO 口为输出</li><li>在地址GPIO_REG_DATA 物理地址中数据寄存器的第n 位写入1 或0 可在引脚上产生高或低电平</li></ul><p>则在无操作系统的情况下，设备驱动见代码3。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//代码3</span></span><br><span class="line"><span class="meta">#def ine reg_gpio_ctrl *(volatile int *)(ToVirtual(GPIO_REG_CTRL))</span></span><br><span class="line"><span class="meta">#def ine reg_gpio_data *(volatile int *)(ToVirtual(GPIO_REG_DATA))</span></span><br><span class="line"><span class="comment">// 程序中ToVirtual() 的作用是当系统启动了硬件MMU 之后，根据物理地址和虚拟地址的映射关系，将寄存器的物理地址转化为虚拟地址。</span></span><br><span class="line"><span class="comment">/* 初始化LED */</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">LightInit</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">reg_gpio_ctrl |= (<span class="number">1</span> &lt;&lt; n); <span class="comment">/* 设置GPIO 为输出 */</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 点亮LED */</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">LightOn</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">reg_gpio_data |= (<span class="number">1</span> &lt;&lt; n); <span class="comment">/* 在GPIO 上输出高电平 */</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 熄灭LED */</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">LightOff</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">reg_gpio_data &amp;= ～ (<span class="number">1</span> &lt;&lt; n); <span class="comment">/* 在GPIO 上输出低电平 */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上述程序中的LightInit()、LightOn()、LightOff() 都直接作为驱动提供给应用程序的外部接口函数。</p><h3 id="Linux-下的LED驱动"><a href="#Linux-下的LED驱动" class="headerlink" title="Linux 下的LED驱动"></a>Linux 下的LED驱动</h3><p>在Linux 下，可以使用字符设备驱动的框架来编写对应于代码3的LED 设备驱动（这里仅仅是为了方便讲解，内核中实际实现了一个提供sysfs 节点的GPIO LED 驱动，位于drivers/leds/leds-gpio.c 中），操作硬件的LightInit()、LightOn()、LightOff() 函数仍然需要，<br>但是，遵循Linux 编程的命名习惯，重新将其命名为light_init()、light_on()、light_off()。<strong>这些函数将被LED 设备驱动中独立于设备并针对内核的接口进行调用</strong>。</p><p>代码4，Linux 操作系统下的LED 驱动:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> ...<span class="comment">/* 包含内核中的多个头文件 */</span></span></span><br><span class="line"><span class="comment">/* 设备结构体 */</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">light_dev</span> &#123;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">cdev</span> <span class="title">cdev</span>;</span> <span class="comment">/* 字符设备cdev 结构体 */</span></span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">char</span> vaule; <span class="comment">/* LED 亮时为1，熄灭时为0，用户可读写此值 */</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">light_dev</span> *<span class="title">light_devp</span>;</span></span><br><span class="line"><span class="keyword">int</span> light_major = LIGHT_MAJOR;</span><br><span class="line">MODULE_AUTHOR(<span class="string">"Barry Song &lt;21cnbao@gmail.com&gt;"</span>);</span><br><span class="line">MODULE_LICENSE(<span class="string">"Dual BSD/GPL"</span>);</span><br><span class="line"><span class="comment">/* 打开和关闭函数 */</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">light_open</span><span class="params">(struct inode *inode, struct file *filp)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">light_dev</span> *<span class="title">dev</span>;</span></span><br><span class="line"><span class="comment">/* 获得设备结构体指针 */</span></span><br><span class="line">dev = container_of(inode-&gt;i_cdev, struct light_dev, cdev);</span><br><span class="line"><span class="comment">/* 让设备结构体作为设备的私有信息 */</span></span><br><span class="line">filp-&gt;private_data = dev;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">light_release</span><span class="params">(struct inode *inode, struct file *filp)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 读写设备: 可以不需要 */</span></span><br><span class="line"><span class="function"><span class="keyword">ssize_t</span> <span class="title">light_read</span><span class="params">(struct file *filp, <span class="keyword">char</span> __user *buf, <span class="keyword">size_t</span> count,<span class="keyword">loff_t</span> *f_pos)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">light_dev</span> *<span class="title">dev</span> = <span class="title">filp</span>-&gt;<span class="title">private_data</span>;</span> <span class="comment">/* 获得设备结构体 */</span></span><br><span class="line"><span class="keyword">if</span> (copy_to_user(buf, &amp;(dev-&gt;value), <span class="number">1</span>))</span><br><span class="line"><span class="keyword">return</span> -EFAULT;</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">ssize_t</span> <span class="title">light_write</span><span class="params">(struct file *filp, <span class="keyword">const</span> <span class="keyword">char</span> __user *buf, <span class="keyword">size_t</span> count,<span class="keyword">loff_t</span> *f_pos)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">light_dev</span> *<span class="title">dev</span> = <span class="title">filp</span>-&gt;<span class="title">private_data</span>;</span></span><br><span class="line"><span class="keyword">if</span> (copy_from_user(&amp;(dev-&gt;value), buf, <span class="number">1</span>))</span><br><span class="line"><span class="keyword">return</span> -EFAULT;</span><br><span class="line"><span class="comment">/* 根据写入的值点亮和熄灭LED */</span></span><br><span class="line"><span class="keyword">if</span> (dev-&gt;value == <span class="number">1</span>)</span><br><span class="line">light_on();</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">light_off();</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* ioctl 函数 */</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">light_ioctl</span><span class="params">(struct inode *inode, struct file *filp, <span class="keyword">unsigned</span> <span class="keyword">int</span> cmd,<span class="keyword">unsigned</span> <span class="keyword">long</span> arg)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">light_dev</span> *<span class="title">dev</span> = <span class="title">filp</span>-&gt;<span class="title">private_data</span>;</span></span><br><span class="line"><span class="keyword">switch</span> (cmd) </span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">case</span> LIGHT_ON:</span><br><span class="line">dev-&gt;value = <span class="number">1</span>;</span><br><span class="line">light_on();</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> LIGHT_OFF:</span><br><span class="line">dev-&gt;value = <span class="number">0</span>;</span><br><span class="line">light_off();</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line"><span class="comment">/* 不能支持的命令 */</span></span><br><span class="line"><span class="keyword">return</span> -ENOTTY;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">file_operations</span> <span class="title">light_fops</span> = &#123;</span></span><br><span class="line">.owner = THIS_MODULE,</span><br><span class="line">.read = light_read,</span><br><span class="line">.write = light_write,</span><br><span class="line">.ioctl = light_ioctl,</span><br><span class="line">.open = light_open,</span><br><span class="line">.release = light_release,</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">/* 设置字符设备cdev 结构体 */</span></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">light_setup_cdev</span><span class="params">(struct light_dev *dev, <span class="keyword">int</span> index)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> err, devno = MKDEV(light_major, index);</span><br><span class="line">cdev_init(&amp;dev-&gt;cdev, &amp;light_fops);</span><br><span class="line">dev-&gt;cdev.owner = THIS_MODULE;</span><br><span class="line">dev-&gt;cdev.ops = &amp;light_fops;</span><br><span class="line">err = cdev_add(&amp;dev-&gt;cdev, devno, <span class="number">1</span>);</span><br><span class="line"><span class="keyword">if</span> (err)</span><br><span class="line">printk(KERN_NOTICE <span class="string">"Error %d adding LED%d"</span>, err, index);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 模块加载函数 */</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">light_init</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> result;</span><br><span class="line"><span class="keyword">dev_t</span> dev = MKDEV(light_major, <span class="number">0</span>);</span><br><span class="line"><span class="comment">/* 申请字符设备号 */</span></span><br><span class="line"><span class="keyword">if</span> (light_major)</span><br><span class="line">result = register_chrdev_region(dev, <span class="number">1</span>, <span class="string">"LED"</span>);</span><br><span class="line"><span class="keyword">else</span> </span><br><span class="line">&#123;</span><br><span class="line">result = alloc_chrdev_region(&amp;dev, <span class="number">0</span>, <span class="number">1</span>, <span class="string">"LED"</span>);</span><br><span class="line">light_major = MAJOR(dev);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (result &lt; <span class="number">0</span>)</span><br><span class="line"><span class="keyword">return</span> result;</span><br><span class="line"><span class="comment">/* 分配设备结构体的内存 */</span></span><br><span class="line">light_devp = kmalloc(<span class="keyword">sizeof</span>(struct light_dev), GFP_KERNEL);</span><br><span class="line"><span class="keyword">if</span> (!light_devp) </span><br><span class="line">&#123;</span><br><span class="line">result = -ENOMEM;</span><br><span class="line"><span class="keyword">goto</span> fail_malloc;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">memset</span>(light_devp, <span class="number">0</span>, <span class="keyword">sizeof</span>(struct light_dev));</span><br><span class="line">light_setup_cdev(light_devp, <span class="number">0</span>);</span><br><span class="line">light_gpio_init();</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">fail_malloc:</span><br><span class="line">unregister_chrdev_region(dev, light_devp);</span><br><span class="line"><span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 模块卸载函数 */</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">light_cleanup</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">cdev_del(&amp;light_devp-&gt;cdev); <span class="comment">/* 删除字符设备结构体 */</span></span><br><span class="line">kfree(light_devp); <span class="comment">/* 释放在light_init 中分配的内存 */</span></span><br><span class="line">unregister_chrdev_region(MKDEV(light_major, <span class="number">0</span>), <span class="number">1</span>); <span class="comment">/* 删除字符设备 */</span></span><br><span class="line">&#125;</span><br><span class="line">module_init(light_init);</span><br><span class="line">module_exit(light_cleanup);</span><br></pre></td></tr></table></figure><p>除了代码3 中的硬件操作函数仍然需要外，代码4 中还包含了大量暂时陌生的元素，如结构体file_operations、cdev，Linux 内核模块声明用的MODULE_AUTHOR、MODULE_LICENSE、module_init、module_exit，以及用于字符设备注册、分配和注销的函数register_chrdev_region()、alloc_chrdev_region()、unregister_chrdev_region() 等。我们也不能理解为什么驱动中要包含light_init ()、light_cleanup ()、light_read()、light_write() 等函数。<br>此时，我们只需要有一个感性认识，那就是，上述暂时陌生的元素都是Linux 内核为字符设备定义的，以实现驱动与内核接口而定义的。Linux 对各类设备的驱动都定义了类似的数据结构和函数。</p><blockquote><p>概括来说：</p><ul><li>没有操作系统的时候，设备驱动编写的函数可以自己定义，对外提供给应用程序调用。</li><li>有了操作系统之后，设备驱动的内容就变多了，除了之前没有操作系统时候写的一些，还需要根据操作系统内核进行适配。这时候的驱动程序并不能直接和应用程序打交道了，而是和操作系统内核打交道，对外呈现出操作系统的API。<ul><li>设备驱动都按照操作系统给出的独立于设备的接口而设计，应用程序将可使用统一的系统调用接口来访问各种设备。</li><li>也就是说这些接口的形式都是操作系统给出的，操作系统会对一类设备给出一致的接口，不会针对一个特定的设备给接口。</li></ul></li></ul></blockquote><h2 id="注解"><a href="#注解" class="headerlink" title="注解"></a>注解</h2><p>C 语言结构体，以点号开头：</p><ul><li>C99标准中的结构体初始化方法 ，结构体的乱许赋值，好像是GCC的扩展。</li><li>和linux无关，是一个C的问题，初始化的时候指定成员的名字，即使在结构体增加，插入字段的时候代码也可以正常工作。</li></ul><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p>《Linux设备驱动开发详解：基于最新的Linux 4.0内核》</p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;同类的东西，学习起来找共性就好了。学习Linux设备驱动，需要寻找各种驱动程序与系统的共性，探索其中的规律；&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="Linux" scheme="https://stemha.github.io/categories/Linux/"/>
    
    
      <category term="Linux" scheme="https://stemha.github.io/tags/Linux/"/>
    
      <category term="内核" scheme="https://stemha.github.io/tags/%E5%86%85%E6%A0%B8/"/>
    
      <category term="驱动程序" scheme="https://stemha.github.io/tags/%E9%A9%B1%E5%8A%A8%E7%A8%8B%E5%BA%8F/"/>
    
      <category term="概述" scheme="https://stemha.github.io/tags/%E6%A6%82%E8%BF%B0/"/>
    
  </entry>
  
  <entry>
    <title>Linux内核驱动</title>
    <link href="https://stemha.github.io/2020/06/29/Linux%E5%86%85%E6%A0%B8%E9%A9%B1%E5%8A%A8/"/>
    <id>https://stemha.github.io/2020/06/29/Linux%E5%86%85%E6%A0%B8%E9%A9%B1%E5%8A%A8/</id>
    <published>2020-06-29T14:36:18.000Z</published>
    <updated>2020-08-10T04:19:21.522Z</updated>
    
    <content type="html"><![CDATA[<h2 id="设备文件"><a href="#设备文件" class="headerlink" title="设备文件"></a><strong>设备文件</strong></h2><p>类Unix操作系统都是基于文件概念的。</p><ul><li>可以直接把I/O设备当作设备文件（device file）来处理。</li><li>操作普通文件的系统调用也可以直接用于I/O设备。<a id="more"></a></li></ul><h3 id="设备文件划分"><a href="#设备文件划分" class="headerlink" title="设备文件划分"></a><strong>设备文件划分</strong></h3><p>根据设备驱动程序的基本特性划分</p><ul><li><code>块设备</code>：块设备的数据可以被随机访问。</li><li><code>字符设备</code>：字符设备的数据不可以随机访问（声卡）。或者可以随机访问但是随机访问数据时间很大程度上依赖于数据在设备内的位置（磁带）。</li><li>网卡是例外，网卡是不直接与设备文件相对应的硬件设备。</li></ul><h3 id="设备文件属性"><a href="#设备文件属性" class="headerlink" title="设备文件属性"></a><strong>设备文件属性</strong></h3><p><code>设备文件的索引节点</code>：</p><ul><li>设备文件是存放在文件系统中的实际文件。它的索引节点并不包含指向磁盘数据块的指针，因为它们是空的。</li><li>它的索引节点必须包含硬件设备的一个标识符，它对应字符或者块设备文件。</li></ul><p><code>设备标识符</code>:</p><ul><li>由设备文件的类型（字符或者块）和一对参数组成（主设备号，从设备号）。<ul><li><code>主设备号</code>：标识了设备的类型。通常，具有相同主设备号和类型的所有设备文件共享相同的文件操作集合，因为它们是由同一个设备驱动程序处理的。</li><li><code>从设备号</code>：标识了主设备号相同的设备组中的一个特定设备。例如相同磁盘控制器下的一组磁盘，有相同的主设备号，但是拥有不同的从设备号码。</li></ul></li></ul><p><strong>创建设备文件</strong>:<br><code>mknod()系统调用</code>用来创建设备文件。参数有设备文件名，设备类型，主设备号以及次设备号。</p><ul><li>设备文件通常在/dev下。</li><li>设备文件通常与硬件设备（比如硬盘/dev/hda）,或者硬件设备的某一个物理或者逻辑分区（比如磁盘分区/dev/hda2）对应。</li><li>有些情况下，设备文件不会和任何的实际硬件对应，而仅仅标识一个虚拟的逻辑设备。<ul><li>比如 /dev/null 。 黑洞</li></ul></li><li><strong>注意</strong>:块设备的编号（3，0）不等同与字符设备的（3，0）</li></ul><h3 id="设备文件的用户态处理"><a href="#设备文件的用户态处理" class="headerlink" title="设备文件的用户态处理"></a><strong>设备文件的用户态处理</strong></h3><p>早期的Unix系统中，设备的主设备号和次设备号是8位长，并不够用。</p><p>真正的问题是设备文件被分配一次并且永远保留在/dev中；系统中的每个逻辑设备都应该有一个与其相对应的，明确定义了设备号的设备文件。</p><ul><li><code>Documentation/devices.txt</code> 存放了官方注册的已经分配的设备号和/dev目录节节点</li><li><code>include/linux/major.h</code> 文件也可能包含了设备的主设备号对应的宏。</li></ul><p>为了解决上述问题：<br>从linux2.6开始，增加了设备号码的大小；</p><ul><li><strong>主设备号为12位</strong></li><li><strong>从设备号为20位</strong></li><li>通常把两个参数合并为一个32位的dev_t变量；</li><li><code>MAJOR宏</code>和 <code>MINOR宏</code> 可以从dev_t中分别提取主设备号和次设备号</li><li><code>MKDEV宏</code>把主设备号和次设备号合并称为一个dev_t值</li></ul><h3 id="动态分配设备号"><a href="#动态分配设备号" class="headerlink" title="动态分配设备号"></a><strong>动态分配设备号</strong></h3><p>分配设备号和创建设备文件来说，倾向做法是高度动态地处理设备文件。</p><ul><li>每个设备驱动程序在注册阶段都会指定它将要处理的设备号范围，驱动程序可以只指定设备号的分配范围，无需指定精确值，在这种情况下，内核会分配一个合适的设备号范围给驱动程序。</li><li>因此，新的硬件设备驱动程序不再需要从官方注册表中分配的一个设备号；它们可以仅仅使用当前系统中空闲的设备号。</li><li>然而这种情形下，就不能永久的创建设备文件，它只在设备驱动程序初始化一个主设备号和次设备号时才创建。</li><li>因此，这就需要一个标准的方法<strong>将每个驱动程序所使用的设备号输出到用户态应用程序中</strong>，为此，设备驱动程序模型提供了一个非常好的解决办法：把<code>主设备号和次设备号存放在/sys/class子目录下的dev属性</code>中。</li></ul><p>概括来说就是，动态分配设备号给设备文件，也就是说设备文件不能永久创建，设备文件的设备号在创建的时候才能确定。那么用户态的应用程序如何才能知道动态分配给设备文件的设备号是什么呢？Linux中通过文件（/sys/class子目录下的dev属性）来传递这个信息给用户态应用程序</p><h3 id="动态创建设备文件"><a href="#动态创建设备文件" class="headerlink" title="动态创建设备文件"></a><strong>动态创建设备文件</strong></h3><p>Linux内核可以动态地创建设备文件：它无需把每一个可能想到的硬件设备的设备文件都填充到/dev目录下，因为设备文件可以按照需要来创建。<br>由于设备驱动程序模型的存在，在Linux2.6内核提供了一个简单的方法来处理：系统中必须安装一组udev工具集的用户态程序。</p><ol><li>系统启动时，/dev目录是清空的，这时udev程序将扫描/sys/class子目录来寻找dev文件。</li><li>对每一个这样的文件（主设备号和次设备号的组合表示一个内核所支持的逻辑设备文件），udev程序都会在/dev目录下为它创建一个相应的设备文件。udev程序也会根据配置文件为其分配一个文件名并创建一个符号链接，该方法类似于Unix设备文件的传统命名模式。</li><li>最后，/dev目录里只存放了系统中内核所支持的所有设备的设备文件，而没有任何其他的文件。</li></ol><p>通常在系统初始化后才创建设备文件。它要么发生在加载设备驱动程序所在的模块时，要么发生在一个热插拔的设备加入系统中时。udev工具集可以自动地创建相应的设备文件，因为设备驱动程序模型支持设备的热插拔。当发现一个新的设备时，内核会产生一个新的进程来执行用户态shell脚本文件/sbin/hotplug，并将新设备上的有用信息作为环境变量传递给shell脚本，用户态脚本文件读取配置文件信息并关注完成新设备初始化所必需的任何操作。如果安装了udev工具集，脚本文件也会在/dev目录下创建适当的设备文件。</p><h2 id="设备文件的-VFS处理"><a href="#设备文件的-VFS处理" class="headerlink" title="设备文件的 VFS处理"></a><strong>设备文件的 VFS处理</strong></h2><p>虽然设备文件也在系统的目录树中，但是它们和普通文件及目录文件有根本的不同:</p><ul><li>进程访问普通文件时，它会通过文件系统访问磁盘分区中的一些数据块。</li><li>进程访问设备文件时，它只要驱动硬件设备就可以了。</li></ul><p>隐藏设备文件和普通文件之间的差异就是<code>vfs的责任</code>：</p><ol><li>为了做到这点，VFS在设备文件打开时改变其缺省文件操作；因此，可把设备文件的每个系统调用都转换成与设备相关的函数的调用，而不是对主文件系统相应函数的调用。</li><li>与设备相关的函数对硬件设备进行操作以完成进程所请求的操作。（注意：在路径名查找中，指向设备文件的符号链接与设备文件的作用相同）。</li></ol><p>例子：<br>假定open()一个设备文件，从本质上来说，相应的服务例程解析到设备文件的路径名，并建立相应的索引节点对象、目录项对象和文件对象。<br>通过适当的文件系统函数（通常为ext2_read_inode()或ext3_read_inode()）读取磁盘上的相应的索引节点来对索引节点对象进行初始化。<br>当这个函数确定磁盘索引节点与设备文件对应时，则调用<code>init_special_inode()</code>，该函数把索引节点对象的i_rdev字段初始化为设备文件的主设备号和次设备号，而把索引节点对象的i_fop字段设置为def_blk_fops或者def_chr_fops文件操作表的地址。<br>因此，open()系统调用的服务例程也调用dentry_open()函数，后者分配一个新的文件对象并把其f_op字段设置为i_fop中存放的地址，即再一次指向<code>def_blk_fops</code>或者<code>def_chr_fops</code>的地址。正是这两个表的引入，才使得在设备文件上所发出的任何系统调用都将激活设备驱动程序的函数而不是基本文件系统的函数。</p><h2 id="设备驱动程序"><a href="#设备驱动程序" class="headerlink" title="设备驱动程序"></a><strong>设备驱动程序</strong></h2><p><code>设备驱动程序</code>是内核例程的集合，它使硬件设备响应控制设备的<code>编程接口</code>。<br>该编程接口是一组规范的VFS函数集合（open read lseek ioctl）。这些函数的实际实现由设备驱动程序全权负责。<br>每一个设备都有自己的I/O控制器，因此就有唯一的命令和唯一的状态信息，所以大部分I/O设备都有自己的驱动程序。</p><p>设备驱动程序的组成？</p><p>使用驱动设备有几个活动肯定是要发生的。</p><ol><li>注册设备驱动程序</li><li>初始化设备驱动程序</li><li>监控I/O操作</li><li>访问I/O共享存储器</li></ol><h3 id="注册设备驱动程序"><a href="#注册设备驱动程序" class="headerlink" title="注册设备驱动程序"></a><strong>注册设备驱动程序</strong></h3><p>为什么要注册设备驱动程序？</p><pre><code>在设备文件上发出的系统调用都由内核转化为相应设备驱动程序的对应函数的调用。为了完成这个操作，设备驱动程序必须注册自己。</code></pre><h4 id="设备驱动程序注册的过程"><a href="#设备驱动程序注册的过程" class="headerlink" title="设备驱动程序注册的过程"></a><strong>设备驱动程序注册的过程</strong></h4><p>注册一个设备驱动程序意味着分配一个新的device_driver描述符，将其插入到设备驱动程序模型的数据结构中，并把它对应的设备文件（可能多个）连接起来。<br>如果设备文件对应的驱动程序以前没有注册，则对该设备文件的访问会返回错误码-ENODEV。</p><ul><li>如果设备驱动程序是静态编译到内核的，则它的注册在内核初始化阶段进行。</li><li>如果是作为一个内核模块来编译的，则它的注册在模块装入的时候进行，而且在模块卸载的时候也会注销自己。</li></ul><p>通用<code>PCI设备的注册示例</code>：<br>该设备必须分配一个pci_driver类型的描述符，pci内核层使用该描述符来处理设备。<br>初始化描述符的一些字段，设备驱动程序调用pci_regester_driver()函数。</p><ul><li>pci_driver描述符包括一个内嵌的<code>device_driver</code>描述符</li><li>pci_regester_driver()函数仅仅初始化内嵌的驱动程序描述符中的字段，然后调用<code>device_register()</code>函数把驱动程序插入设备驱动程序模型的数据结构中。</li></ul><p>注册设备驱动程序的时候 内核会寻找可能由该驱动程序处理但是尚未获得支持的硬件设备:</p><ul><li>主要依靠bus_type的match方法以及device_driver对象的probe方法。如果探测到可被驱动程序处理的硬件设备，内核会分配一个设备对象，然后调用device_register()函数把设备插入设备驱动模型中。</li></ul><h3 id="初始化设备驱动程序"><a href="#初始化设备驱动程序" class="headerlink" title="初始化设备驱动程序"></a><strong>初始化设备驱动程序</strong></h3><p>设备驱动程序的注册和初始化是不同的。<br>设备驱动程序应该尽快被注册，以便用户态应用程序能够通过相应的设备文件来使用它。<br>设备驱动程序在最后可能的时刻才会被初始化。因为，<strong>初始化驱动程序意味着分配宝贵的系统资源</strong>，这些资源因此就对其他驱动程序不可用了。</p><h3 id="监控I-O操作"><a href="#监控I-O操作" class="headerlink" title="监控I/O操作"></a><strong>监控I/O操作</strong></h3><p>I/O操作的持续时间通常不可预知。在任何情况下，启动I/O操作的设备驱动程序都必须依靠一种监控技术在I/O操作终止或超时时候发出信号。</p><ul><li>终止操作的情况下：设备驱动程序读取I/O接口状态寄存器的内容来确定I/O操作是否成功执行。</li><li>超时的情况下：时间过了，驱动程序就知道出了什么问题了。</li></ul><h4 id="轮询模式"><a href="#轮询模式" class="headerlink" title="轮询模式"></a><strong>轮询模式</strong></h4><p>CPU依靠这种技术重复检查（轮询）设备的状态寄存器，直到寄存器的值表明I/O操作完成。有点类似于自旋锁。</p><blockquote><p>如果完成I/O操作需要的时间相对较多，比如说毫秒级别，那么这种模式就变得低效，因为CPU花费宝贵的机器周期去等待I/O操作的完成。</p></blockquote><p>轮询的简单例子：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(;;)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(read_status(device)&amp;DEVICE_END_OPERATION) </span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">if</span>(--count==<span class="number">0</span>)  <span class="comment">//粗略的超时机制，精确的可以使用jiffies</span></span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="中断模式"><a href="#中断模式" class="headerlink" title="中断模式"></a><strong>中断模式</strong></h4><p>如果I/O控制器能够控制IRQ总线发出I/O操作结束的信号，那么中断模式才能被使用。</p><p>例子：实现一个简单的输入字符设备的驱动程序。</p><ul><li>用户在相应的设备文件上发出read()系统调用，一条输入命令被发往设备的控制寄存器。</li><li>在一个不可预知的长时间间隔后，设备把一个字节的数据放进控制寄存器。</li><li>设备驱动程序然后将这个字节作为read()系统调用的结果返回。</li></ul><p>驱动程序包含两个函数：</p><ol><li>实现文件对象read方法的foo_read()函数。</li><li>处理中断的foo_interrupt()函数。</li></ol><p>用户读设备文件，foo_read()函数就触发，foo_read()函数主要操作如下：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//参数filp是设备文件，buf是输入数据缓存，count是输入数据长度，ppos当前位置</span></span><br><span class="line"><span class="function"><span class="keyword">ssize_t</span> <span class="title">foo_read</span><span class="params">(struct file *filp, <span class="keyword">char</span> *buf, <span class="keyword">size_t</span> count, <span class="keyword">loff_t</span> *ppos)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">foo_dev_t</span> * foo_dev = filp-&gt;private_data; <span class="comment">//foo_dev_t 自定义描述符</span></span><br><span class="line">      <span class="keyword">if</span> (down_interruptible(&amp;foo_dev-&gt;sem)     <span class="comment">//获取foo_dev-&gt;sem信号量</span></span><br><span class="line">          <span class="keyword">return</span> -ERESTARTSYS;</span><br><span class="line">      foo_dev-&gt;intr = <span class="number">0</span>;                        <span class="comment">//清intr标志</span></span><br><span class="line">      outb(DEV_FOO_READ, DEV_FOO_CONTROL_PORT); <span class="comment">//对I/O设备发出读命令</span></span><br><span class="line">      wait_event_interruptible(foo_dev-&gt;wait, (foo_dev-&gt;intr = =<span class="number">1</span>)); <span class="comment">//执行wait_event_interruptible以挂起进程，直到intr标志变为1</span></span><br><span class="line">      <span class="keyword">if</span> (put_user(foo_dev-&gt;data, buf))         </span><br><span class="line">          <span class="keyword">return</span> -EFAULT;</span><br><span class="line">      up(&amp;foo_dev-&gt;sem);</span><br><span class="line">      <span class="keyword">return</span> <span class="number">1</span>;</span><br></pre></td></tr></table></figure><p>设备驱动程序依赖类型为<code>foo_dev_t</code>的自定义描述符；</p><ul><li>包含信号量sem（保护硬件设备免受并发访问）</li><li>等待队列wait</li><li>标志intr（当设备发出一个中断时设置）</li><li>单个字节缓冲区data（由中断处理程序写入且由read方法读取）。</li></ul><p>一般而言，所有使用中断的I/O驱动程序都依赖中断处理程序及read和write方法均访问的数据结构。<br><code>foo_dev_t描述符</code>的地址通常存放在设备文件的文件对象的<code>private_data字段</code>中或一个全局变量中。</p><p>foo_read()函数的主要操作如下：</p><ol><li>获取foo_dev-&gt;sem信号量，因此确保没有其他进程访问该设备。</li><li>清intr标志。</li><li>对I/O设备发出读命令。</li><li>执行wait_event_interruptible以挂起进程，直到intr标志变为1。</li></ol><p>一定时间后，我们的设备发出中断信号以通知I/O操作已经完成，数据已经放在适当的DEV_FOO_DATA_PORT数据端口。中断处理程序置intr标志并唤醒进程。<br>当调度程序决定重新执行这个进程时，foo_read()的第二部分被执行，步骤如下：</p><ol><li><p>把准备在foo_dev-&gt;data变量中的字符拷贝到用户地址空间。</p></li><li><p>释放foo_dev-&gt;sem信号量后终止。</p><p>为了简单起见，没有包含任何超时控制。一般来说，超时控制是通过静态或动态定时器实现的；定时器必须设置为启动I/O操作后正确的时间，并在操作结束时删除。</p></li></ol><p>foo_interrupt()函数的代码：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">irqreturn_t</span> <span class="title">foo_interrupt</span><span class="params">(<span class="keyword">int</span> irq, <span class="keyword">void</span> *dev_id, struct pt_regs *regs)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    foo-&gt;data = inb(DEV_FOO_DATA_PORT);<span class="comment">//从设备的输入寄存器中读字符</span></span><br><span class="line">    foo-&gt;intr = <span class="number">1</span>;                     <span class="comment">//设置intr标志</span></span><br><span class="line">    wake_up_interruptible(&amp;foo-&gt;wait); <span class="comment">//调用`wake_up_interruptible()函数`唤醒在`foo-&gt;wait等待队列上`阻塞的进程。</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>中断处理程序从<code>设备的输入寄存器</code>中读字符，并把它存放在<code>foo全局变量</code>指向的<code>驱动程序描述符foo_dev_t</code>的<code>data字段</code>中。<br>然后设置intr标志，并调用<code>wake_up_interruptible()函数</code>唤醒在<code>foo-&gt;wait等待队列上</code>阻塞的进程。<br>注意：三个参数中没有一个被中断处理程序使用，这是其实是相当普遍的情况。</p><h3 id="访问I-O共享存储器（内存映射）"><a href="#访问I-O共享存储器（内存映射）" class="headerlink" title="访问I/O共享存储器（内存映射）"></a><strong>访问I/O共享存储器（内存映射）</strong></h3><p><strong>根据设备和总线的类型，现代PC体系结构里的I/O共享存储器可以被映射到不同的物理地址范围</strong>。主要有：</p><ul><li>对于连接到ISA总线上的大多数设备<ul><li>I/O共享存储器通常被映射到Oxa0000一Oxfffff的16位物理地址范围；这就在640 KB和1 MB之间留出了一段空间。</li></ul></li><li>对连接到PCI总线上的设备<ul><li>I/O共享存储器被映射到接近4GB的32位物理地址范围。这种类型的设备更加容易处理。</li></ul></li></ul><p><code>I/O共享存储器机制</code>是极其重要的，因为建立好这些映射以后，访问设备接口中的存储器如同访问内存一样简单，就不需要那么多纷繁复杂的I/O交换了，大大提升了系统I/O处理的效率。</p><p>设备驱动程序如何访问一个I/O共享存储器单元？让我们从比较简单的PC体系结构开始人手，之后再扩展到其他体系结构。</p><p>不要忘了内核程序作用于线性地址，因此I/O共享存储器单元必须表示成大于<code>PAGE_OFFSET</code>的地址（？？？），这样，才有利于对I/O共享存储器单元的物理地址进行映射。<br>我们假设PAGE_OFFSET等于Oxc0000000（在x86的32为体系中，实际上也是这样干的），也就是说，内核线性地址是在第4个GB。</p><p>设备驱动程序必须把<code>I/O共享存储器单元的物理地址</code>转换成<code>内核空间的线性地址</code>:</p><ul><li>在PC体系结构中，这可以简单地把32位的物理地址和Oxc0000000常量进行或运算得到。</li></ul><p>例如，假设内核需要把物理地址为Ox<code>000b0fe4</code>的I/O单元的值存放在t1中，把物理地址为Ox<code>fc000000</code>的I/O单元的值存放在t2中。你可能认为使用下面的表达式就可以完成这项工作：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">    t1 = *((<span class="keyword">unsigned</span> <span class="keyword">char</span> *)(<span class="number">0xc00b0fe4</span>));   <span class="comment">//括号里面的是线性地址</span></span><br><span class="line">    t2 = *((<span class="keyword">unsigned</span> <span class="keyword">char</span> *)(<span class="number">0xfc000000</span>));   <span class="comment">//强制转换为指针类型，也就是地址，然后再进行取地址所存的值</span></span><br></pre></td></tr></table></figure><p>在初始化阶段，内核已经把可用的RAM物理地址映射到线性地址空间第4个GB的开始部分。<br>因此，分页单元把出现在第一个语句中的线性地址OXCOObOfe4映射回到原来的I/O物理地址OXOOObOfe4，这正好落在从640KB到IMB的这段“ISA洞”中。这工作得很好。</p><p>但是，对于第二个语句来说，这里有一个问题，因为其I/O物理地址超过了系统RAM的最大物理地址（加上Oxc0000000常量会超过32位）。因此，线性地址Oxfc000000就不需要与物理地址Oxfc000000相对应。在这种情况下，为了在内核页表中包括对这个I/O物理地址进行映射的线性地址，必须对页表进行修改。这可以通过调用ioremap()或ioremap_nocache()函数来实现，第一个函数与vmalloc()函数类似，都调用get_vm_area()为所请求的I/O共享存储区的大小建立一个新的vm_struct描述符。然后，这两个函数适当地更新常规内核页表中的对应页表项。ioremap_nocache()不同于ioremap()，因为前者在适当地引用再映射的线性地址时还使硬件高速缓存内容失效。</p><p>因此，第二个语句的正确形式应该为：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">    io_mem = ioremap(<span class="number">0xfb000000</span>, <span class="number">0x200000</span>);</span><br><span class="line">    t2 = *((<span class="keyword">unsigned</span> <span class="keyword">char</span> *)(io_mem + <span class="number">0x100000</span>));</span><br></pre></td></tr></table></figure><p>第一条语句建立一个2MB的新的线性地址区间，该区间映射了从Oxfb000000开始的物理地址，第二条语句读取地址为Oxfc000000的内存单元。设备驱动程序以后要取消这种映射，就必须使用iounmap()函数。</p><p>在其他体系结构（PC之外的体系结构）上，简单地间接引用物理内存单元的线性地址并不能正确访问I/O共享存储器。<br>因此，Linux定义了下列依赖于体系结构的函数，当访问I/O共享存储器时来使用它们：</p><p><code>readb(), readw(), readl()</code>：分别从一个I/O共享存储器单元读取1、2或者4个字节<br><code>writeb(), writew(), writel()</code>：分别向一个I/O共享存储器单元写入1、2或者4个字节<br><code>memcpy_fromio(), memcpy_toio()</code>：把一个数据块从一个I/O共享存储器单元拷贝到动态内存中，另一个函数正好相反<br><code>memset_io()</code>：用一个固定的值填充一个I/O共享存储器区域</p><p>最后，对于Oxfc000000 I/O单元的访问推荐使用这样的方法：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">    io_mem = ioremap(<span class="number">0xfb000000</span>, <span class="number">0x200000</span>);</span><br><span class="line">    t2 = readb(io_mem + <span class="number">0x100000</span>);</span><br></pre></td></tr></table></figure><p>正是由于这些函数，就可以隐藏不同平台访问I/O共享存储器所用方法的差异。</p><p>//上面这一段话实在是太复杂了，现在总结一下；</p><h2 id="一些概念"><a href="#一些概念" class="headerlink" title="一些概念"></a>一些概念</h2><p><code>IO空间与内存空间</code><br>在X86处理器才存在IO空间，是相对于内存空间的概念。目前大多数嵌入式处理器（如ARM、PowerPC等）并不提供IO空间。所以内存空间是必须的，IO空间是可选的。嵌入式开发只关心内存空间即可。<br>IO空间和内存空间是彼此独立的地址空间，在32位的X86处理器中，IO空间大小为64K ，内存空间为4G。</p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p>深入理解LINUX内核<br><a href="https://blog.csdn.net/Linuxxulin/article/details/100175789">Linux下对IO内存的访问</a> //一些概念的介绍<br><a href="https://blog.csdn.net/changexhao/article/details/78120233">Linux内核开发之内存与I/O访问(一)</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;设备文件&quot;&gt;&lt;a href=&quot;#设备文件&quot; class=&quot;headerlink&quot; title=&quot;设备文件&quot;&gt;&lt;/a&gt;&lt;strong&gt;设备文件&lt;/strong&gt;&lt;/h2&gt;&lt;p&gt;类Unix操作系统都是基于文件概念的。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;可以直接把I/O设备当作设备文件（device file）来处理。&lt;/li&gt;
&lt;li&gt;操作普通文件的系统调用也可以直接用于I/O设备。&lt;/li&gt;&lt;/ul&gt;
    
    </summary>
    
    
      <category term="Linux" scheme="https://stemha.github.io/categories/Linux/"/>
    
    
      <category term="Linux" scheme="https://stemha.github.io/tags/Linux/"/>
    
      <category term="内核" scheme="https://stemha.github.io/tags/%E5%86%85%E6%A0%B8/"/>
    
      <category term="驱动程序" scheme="https://stemha.github.io/tags/%E9%A9%B1%E5%8A%A8%E7%A8%8B%E5%BA%8F/"/>
    
  </entry>
  
  <entry>
    <title>STL 算法整理</title>
    <link href="https://stemha.github.io/2020/06/21/STL-%E7%AE%97%E6%B3%95%E6%95%B4%E7%90%86/"/>
    <id>https://stemha.github.io/2020/06/21/STL-%E7%AE%97%E6%B3%95%E6%95%B4%E7%90%86/</id>
    <published>2020-06-21T14:18:24.000Z</published>
    <updated>2020-08-10T04:19:21.623Z</updated>
    
    <content type="html"><![CDATA[<h2 id="标准库中常见的函数与头文件"><a href="#标准库中常见的函数与头文件" class="headerlink" title="标准库中常见的函数与头文件"></a>标准库中常见的函数与头文件</h2><a id="more"></a><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">&lt;cstdlib&gt;: <span class="built_in">abort</span>,</span><br><span class="line">&lt;numeric&gt;: accumulate, inner_product,</span><br><span class="line">&lt;memory&gt;: allocator, <span class="built_in">auto_ptr</span>, uninitialized_copy,</span><br><span class="line">&lt;iterator&gt;: back_inserter, front_inserter, inserter, istream_iterator, ostream_iterator, reverse_iterator,</span><br><span class="line">&lt;<span class="keyword">new</span>&gt;: bad_alloc,</span><br><span class="line">&lt;typeinfo&gt;: bad_cast, type_info,</span><br><span class="line">&lt;functional&gt;: bind2nd, less_equal, negate, not1, plus,</span><br><span class="line">&lt;<span class="built_in">bitset</span>&gt;: <span class="built_in">bitset</span>,</span><br><span class="line">&lt;iostream&gt;: boolalpha, <span class="built_in">cerr</span>, <span class="built_in">cin</span>, <span class="built_in">cout</span>, dec, <span class="built_in">endl</span>, ends, fixed, flush, hex, internal, istream, left, noboolalpha, noshowbase, noskipws, nounitbuf, nouppercase, oct, ostream, right, scientific, showbase, sowpoint, skippws, unitbuf, uppercase</span><br><span class="line">&lt;algorithm&gt;: copy, count, count_if, equal_range, fill, fill_n, find, find_end, find_first_of, for_each, max, main, nth_element, partial_sort, replace, replace_copy, set_difference, set_intersection, set_union, sort, stable_sort, unique, unique_copy, upper_bound,</span><br><span class="line">&lt;<span class="built_in">deque</span>&gt;: <span class="built_in">deque</span>,</span><br><span class="line">&lt;exception&gt;: exception, unexpected,</span><br><span class="line">&lt;fstream&gt;: fstream, ifstream, ofstream,</span><br><span class="line">&lt;<span class="built_in">string</span>&gt;: getline, <span class="built_in">string</span>,</span><br><span class="line">&lt;ios_base&gt;: ios_base,</span><br><span class="line">&lt;cctype&gt;: <span class="built_in">isalpha</span>, <span class="built_in">islower</span>, <span class="built_in">ispunct</span>, <span class="built_in">isspace</span>, <span class="built_in">isupper</span>,</span><br><span class="line">&lt;sstream&gt;: <span class="built_in">istringstream</span>, <span class="built_in">ostringstream</span>, <span class="built_in">stringstream</span>,</span><br><span class="line">&lt;<span class="built_in">list</span>&gt;: <span class="built_in">list</span>,</span><br><span class="line">&lt;stdexcept&gt;: logic_error, out_of_range, range_error, runtime_error,</span><br><span class="line">&lt;utility&gt;: make_pair, pair,</span><br><span class="line">&lt;<span class="built_in">map</span>&gt;: <span class="built_in">map</span>, <span class="built_in">multimap</span></span><br><span class="line">&lt;<span class="built_in">set</span>&gt;: <span class="built_in">multiset</span>, <span class="built_in">set</span></span><br><span class="line">&lt;<span class="built_in">queue</span>&gt;: priority_queue, <span class="built_in">queue</span></span><br><span class="line">&lt;cstddef&gt;: <span class="keyword">ptrdiff_t</span>, <span class="keyword">size_t</span>,</span><br><span class="line">&lt;iomanip&gt;: setfill, setprecision, setw,</span><br><span class="line">&lt;cmath&gt;: <span class="built_in">sqrt</span>,</span><br><span class="line">&lt;<span class="built_in">stack</span>&gt;: <span class="built_in">stack</span>,</span><br><span class="line">&lt;cstring&gt;: <span class="built_in">strcmp</span>, <span class="built_in">strcpy</span>, <span class="built_in">strlen</span>, <span class="built_in">strncpy</span>,</span><br><span class="line">&lt;<span class="built_in">vector</span>&gt;: <span class="built_in">vector</span></span><br></pre></td></tr></table></figure><p>标准库定义了 100多个算法，要学习如何使用它们，需要理解它们的结构，而不是记住每个算法的细节。</p><ul><li>beg和end表示元素范围的迭代器</li><li>beg2表示第二个序列开始位置迭代器，end2表示第二个序列末尾迭代器(如果有)。如没有则假定系列2至少与beg end表示的范围一样大。beg和beg2类型不必匹配，但必须保证两个序列中的元素可以执行特性操作或调用给定的可调用对象。</li><li>des表示目的序列的迭代器，目的序列保证有足够的空间存放算法生成的元素。</li><li>unaryPred和binaryPred是一元和二元谓词，分别接受来自输入序列的元素，两个谓词都返回可用作条件的类型。</li><li>comp是一个二元谓词，满足关联容器中对关键字序的要求</li><li>unaryOp和binaryOp是可调用对象，分别使用来自输入序列的一个和两个实参来调用。</li></ul><h3 id="查找对象的算法："><a href="#查找对象的算法：" class="headerlink" title="查找对象的算法："></a><strong>查找对象的算法：</strong></h3><h4 id="find"><a href="#find" class="headerlink" title="find"></a><strong>find</strong></h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">find(beg,end,val);           在迭代区间[begin,end)内查找等于val的元素，找到返回相应的迭代器，否则返回end。</span><br><span class="line">find_if(beg,end,unaryPred);  函数find的带一个函数参数的_if版本，条件：使函数unaryPred返回<span class="literal">true</span>。</span><br></pre></td></tr></table></figure><h4 id="find-first-of-find-end"><a href="#find-first-of-find-end" class="headerlink" title="find_first_of/find_end"></a><strong>find_first_of/find_end</strong></h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">find_first_of(beg1,end1,beg2,end2);</span><br><span class="line">find_first_of(beg1,end1,beg2,end2,binaryPred); </span><br><span class="line">依次遍历元素,在[beg1, end1)中查找首次出现[beg2, end2)中的任一元素,使用==或unarypred相匹配。<span class="comment">//注意是任意一个匹配即可。</span></span><br></pre></td></tr></table></figure><p>例：vec1 –{1,2,3,4,5}, vec2{3,2,4}, vec3{8,6,7}<br>在vec1中查找vec2，则返回元素2在vec1中的迭代器。<br>在vec1中查找vec3，则返回vec1.end()迭代器。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">find_end(beg1,end1,beg2,end2);</span><br><span class="line">find_end(beg1,end1,beg2,end2,binaryPred);</span><br><span class="line">在[beg1,end1)范围内查找[beg2,end2)最后一次出现。找到则返回最后一对的第一个ForwardIterator，否则返回end1。</span><br><span class="line">依次遍历元素，在[beg1, end1）中查找最后一个匹配的子序列[beg2, end2），若存在，则返回beg2在[beg1, end1）中对应的迭代器，否则返回end1。[beg2, end2)中序列必须完全匹配。</span><br></pre></td></tr></table></figure><p>例：vec1 –{1,2,3,4,5}, vec2{2,3,4}, vec3{3,2,4}<br>在vec1中查找vec2，则返回元素2在vec1中的迭代器。<br>在vec1中查找vec3，则返回vec1.end()迭代器。</p><h4 id="adjacent-find"><a href="#adjacent-find" class="headerlink" title="adjacent_find"></a><strong>adjacent_find</strong></h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">adjacent_find(beg,end);</span><br><span class="line">adjacent_find(beg,end,binaryPred);</span><br></pre></td></tr></table></figure><p>依次遍历元素，查范围内相邻元素，使用==或unarypred相匹配，若存在，返回第一个元素对应的迭代器，否则返回end.</p><h4 id="search"><a href="#search" class="headerlink" title="search"></a><strong>search</strong></h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">search(beg1,end1,beg2,end2);</span><br><span class="line">search(beg1,end1,beg2,end2,binaryPred);</span><br><span class="line">依次遍历元素，在[beg1, end1）中查找第一个匹配的子序列[beg2, end2）。若存在，则返回beg2在[beg1, end1）中对应的迭代器，否则返回end1。[beg2, end2)中序列必须完全匹配。</span><br><span class="line"></span><br><span class="line">search_n(beg,end,count,val);  <span class="comment">//找第n个匹配的</span></span><br><span class="line">search_n(beg,end,count,val,binaryPred);</span><br><span class="line">依次遍历元素，在[beg1, end1）中查找匹配val的元素，使用==或unarypred匹配。若存在，返回count指定的第count个元素所对应的迭代器，否则返回end1。若count指定值为负数或<span class="number">0</span>，则返回beg1。</span><br></pre></td></tr></table></figure><h4 id="count"><a href="#count" class="headerlink" title="count"></a><strong>count</strong></h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">count(beg,end,val);</span><br><span class="line">count_if(beg,end,unaryPred);</span><br><span class="line">依次遍历元素，查找范围内与val相匹配或使unarypred为真的元素个数。</span><br></pre></td></tr></table></figure><h3 id="其他只读算法："><a href="#其他只读算法：" class="headerlink" title="其他只读算法："></a><strong>其他只读算法：</strong></h3><h4 id="for-each"><a href="#for-each" class="headerlink" title="for_each"></a><strong>for_each</strong></h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">for_each(beg,end,f);      </span><br><span class="line">将[beg,end)范围内所有元素依次调用函数func，返回func。不修改序列中的元素。</span><br></pre></td></tr></table></figure><h4 id="mismatch"><a href="#mismatch" class="headerlink" title="mismatch"></a><strong>mismatch</strong></h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">mismatch(beg1,end1,beg2);</span><br><span class="line">mismatch(beg1,end1,beg2,binaryPred);</span><br><span class="line">并行比较[beg1,end1)与[beg2,end2)，指出第一个不匹配的位置，返回一对iterator，标志第一个不匹配元素位置。</span><br><span class="line">如果都匹配，返回每个容器的end。</span><br></pre></td></tr></table></figure><h4 id="equal"><a href="#equal" class="headerlink" title="equal"></a><strong>equal</strong></h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">判断[beg1,end1)与[beg2,end2)内元素都相等</span><br><span class="line">equal(beg1,end1,beg2); </span><br><span class="line">equal(beg1,end1,beg2,binaryPred);</span><br></pre></td></tr></table></figure><h3 id="二分查找算法："><a href="#二分查找算法：" class="headerlink" title="二分查找算法："></a><strong>二分查找算法：</strong></h3><h4 id="lower-bound-upper-bound"><a href="#lower-bound-upper-bound" class="headerlink" title="lower_bound/upper_bound"></a><strong>lower_bound/upper_bound</strong></h4><p>lower_bound( )和upper_bound( )都是利用<code>二分查找</code>的方法在一个<strong>排好序的数组</strong>中进行查找的。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">lower_bound(beg,end,val);</span><br><span class="line">lower_bound(beg,end,val,comp);</span><br><span class="line">从[beg,end)位置二分查找第一个大于或等于val的数字，找到返回该数字的地址，不存在则返回end。</span><br><span class="line">通过返回的地址减去起始地址begin,得到找到数字在数组中的下标。</span><br><span class="line"></span><br><span class="line">upper_bound(beg,end,val);</span><br><span class="line">upper_bound(beg,end,val,comp);</span><br><span class="line">从[beg,end)位置二分查找第一个大于num的数字，找到返回该数字的地址，不存在则返回end。</span><br><span class="line">通过返回的地址减去起始地址begin,得到找到数字在数组中的下标。</span><br></pre></td></tr></table></figure><h4 id="equal-range"><a href="#equal-range" class="headerlink" title="equal_range"></a><strong>equal_range</strong></h4><p>返回一对iterator，第一个表示lower_bound，第二个表示upper_bound。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">equal_range(beg,end,val);</span><br><span class="line">equal_range(beg,end,val,comp);</span><br></pre></td></tr></table></figure><h4 id="binary-search"><a href="#binary-search" class="headerlink" title="binary_search"></a><strong>binary_search</strong></h4><p>在[beg,end)中查找val，找到返回true。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">binary_search(beg,end,val);</span><br><span class="line">binary_search(beg,end,val,comp);</span><br></pre></td></tr></table></figure><h3 id="写容器元素的算法："><a href="#写容器元素的算法：" class="headerlink" title="写容器元素的算法："></a><strong>写容器元素的算法：</strong></h3><h4 id="fill-n-fill"><a href="#fill-n-fill" class="headerlink" title="fill_n/fill"></a>fill_n/fill</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">fill_n(dest,cnt,val); 将值val赋给[beg,beg+n)范围内的所有元素。</span><br><span class="line">fill(beg,end,val); 将值val赋给[beg,end)范围内的所有元素。</span><br></pre></td></tr></table></figure><h4 id="generate-n-generate"><a href="#generate-n-generate" class="headerlink" title="generate_n/generate"></a>generate_n/generate</h4><p>连续调用函数func填充[beg,end)范围内的所有元素。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">generate_n(dest,cnt,Gen);</span><br><span class="line">generate(beg,end,Gen);</span><br></pre></td></tr></table></figure><h4 id="copy-copy-n"><a href="#copy-copy-n" class="headerlink" title="copy/copy_n"></a>copy/copy_n</h4><p>复制[beg,end)到res</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">copy(beg,end,dest);</span><br><span class="line">copy_backward(beg,end,dest);</span><br><span class="line">dest是输出序列的尾后迭代器。输入范围内的元素被拷贝或移动到目的序列的尾元素，然后是倒数第二个，类推。返回从beg拷贝或移动的元素的位置。如范围为空则返回dest</span><br></pre></td></tr></table></figure><h4 id="transform"><a href="#transform" class="headerlink" title="transform"></a>transform</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">将[beg,end)范围内所有元素依次调用函数unary，结果放入res中。</span><br><span class="line">transform(beg,end,dest,unaryOp); </span><br><span class="line">transform(beg,end,beg2,dest,binaryOp);</span><br><span class="line">将[beg,end)范围内所有元素与[beg2,beg2+end-beg)中所有元素依次调用函数unary，结果放入res中。</span><br></pre></td></tr></table></figure><h4 id="replace-copy"><a href="#replace-copy" class="headerlink" title="replace_copy"></a>replace_copy</h4><p>将[beg,end)内所有等于oval的元素都用nval代替.将结果写入res。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">replace_copy(beg,end,dest,old_val,new_val);</span><br><span class="line">replace_copy_if(beg,<span class="keyword">and</span>,dest,unaryPred,new_val);</span><br></pre></td></tr></table></figure><h4 id="replace-if-replace"><a href="#replace-if-replace" class="headerlink" title="replace_if/replace"></a>replace_if/replace</h4><p>将[beg,end)内所有等于old_val的元素都用nval代替</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">replace(beg,end,old_val,new_val);</span><br><span class="line">replace_if(beg,end,unaryPred,new_val);</span><br></pre></td></tr></table></figure><h4 id="merge"><a href="#merge" class="headerlink" title="merge"></a>merge</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">merge(beg1,end1,beg2,end2,dest); 合并[beg1,end1)与[beg2,end2)存放到res。</span><br><span class="line">merge(beg1,end1,beg2,end2,dest,comp);</span><br></pre></td></tr></table></figure><h4 id="swap-swap-ranges"><a href="#swap-swap-ranges" class="headerlink" title="swap/swap_ranges"></a>swap/swap_ranges</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">swap(elem1,elem2);</span><br><span class="line">swap_ranges(beg1,end1,beg2);</span><br><span class="line">iter_swap(iter1,iter2);</span><br></pre></td></tr></table></figure><h4 id="inplace-merge"><a href="#inplace-merge" class="headerlink" title="inplace_merge"></a>inplace_merge</h4><p>合并[beg,mid)与[mid,end)，结果覆盖[beg,end)。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">inplace_merge(beg,mid,end);</span><br><span class="line">inplace_merge(beg,mid,end,comp);</span><br></pre></td></tr></table></figure><h3 id="划分与排序算法："><a href="#划分与排序算法：" class="headerlink" title="划分与排序算法："></a><strong>划分与排序算法：</strong></h3><p>partial_sort和nth_element只进行部分排序，速度比整体排序算法更快。</p><h4 id="partition"><a href="#partition" class="headerlink" title="partition"></a><strong>partition</strong></h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">stable_partition(beg,end,unaryPred); 与partition()类似，保留容器中的相对顺序。</span><br><span class="line">partition(beg,end,unaryPred); 元素重新排序，使用pred函数，把结果为<span class="literal">true</span>的元素放在结果为<span class="literal">false</span>的元素之前。</span><br></pre></td></tr></table></figure><h4 id="sort-stable-sort"><a href="#sort-stable-sort" class="headerlink" title="sort/stable_sort"></a><strong>sort/stable_sort</strong></h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sort(beg,end); 默认升序重新排列元素</span><br><span class="line">sort(beg,end,comp);</span><br><span class="line">stable_sort(beg,end); 与sort()类似，保留相等元素之间的顺序关系。</span><br><span class="line">stable_sort(beg,end,comp);</span><br></pre></td></tr></table></figure><h4 id="partial-sort-partial-sort-copy"><a href="#partial-sort-partial-sort-copy" class="headerlink" title="partial_sort/partial_sort_copy"></a><strong>partial_sort/partial_sort_copy</strong></h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">partial_sort(beg,mid,end); 排序mid-beg个元素。排序后，从beg到mid中的元素都是有序的，mid到end中的元素顺序未指定。</span><br><span class="line">partial_sort(beg,mid,end,comp);</span><br><span class="line">partial_sort_copy(beg,end,destBeg,destEnd);</span><br><span class="line">partial_sort_copy(beg,end,destBeg,destEnd,comp);</span><br><span class="line">排序输入范围内的元素，并将足够多的元素拷贝到destBeg和destEnd所指示的序列中。如果目的序列大于等于输入范围则排序整个输入序列并存入输出序列，若目的序列小于输入范围，则拷贝输入序列中与目的范围一样多的元素。</span><br><span class="line">返回一个迭代器，指向目的范围中已排序部分的尾后迭代器。如目的序列小于等于输入范围，则返回destEnd(此时是否整个输入序列排序？？？)。</span><br></pre></td></tr></table></figure><h4 id="nth-element"><a href="#nth-element" class="headerlink" title="nth_element"></a><strong>nth_element</strong></h4><p>单个元素序列重新排序，使所有小于第n个元素的元素都出现在它前面，而大于它的都出现在后面。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">nth_element(beg,nth,end);</span><br><span class="line">nth_element(beg,nth,end,comp);</span><br></pre></td></tr></table></figure><h3 id="通用重新排序算法："><a href="#通用重新排序算法：" class="headerlink" title="通用重新排序算法："></a><strong>通用重新排序算法：</strong></h3><h4 id="remove-remove-copy"><a href="#remove-remove-copy" class="headerlink" title="remove/remove_copy"></a><strong>remove/remove_copy</strong></h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">删除[beg,end)内所有等于val的元素。注意，该函数不是真正删除函数。</span><br><span class="line">采用的办法是:用保留的元素覆盖要删除的元素。算法返回一个迭代器，指向最后一个保留元素的尾后位置。</span><br><span class="line">remove(beg,end,val); </span><br><span class="line">remove_if(beg,end,unaryPred);</span><br><span class="line">remove_copy(beg,end,dest,val);</span><br><span class="line">remove_copy_if(beg,end,dest,unaryPred);</span><br><span class="line">将所有不等于val元素复制到res，返回OutputIterator指向被拷贝的末元素的下一个位置。</span><br></pre></td></tr></table></figure><h4 id="unique"><a href="#unique" class="headerlink" title="unique"></a><strong>unique</strong></h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">重排序列，对于相邻的满足条件的元素，通过覆盖来进行删除，返回一个迭代器，指向最后一个保留元素的尾后位置。</span><br><span class="line">unique(beg,end);</span><br><span class="line">unique(beg,end,binaryPred);</span><br><span class="line">unique_copy(beg,end,dest);</span><br><span class="line">unique_copy(beg,end,dest,binaryPred);</span><br><span class="line">与unique类似，不过把结果输出到dest。</span><br></pre></td></tr></table></figure><h4 id="rotate"><a href="#rotate" class="headerlink" title="rotate"></a><strong>rotate</strong></h4><p>围绕mid指向的元素进行元素转动。元素mid成为首元素，随后是mid+1-&gt;end之间的之前的元素，再接着是beg到mid之前的元素。返回一个迭代器，指向原来beg位置的元素。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">rotate(beg,mid,end);</span><br><span class="line">rotate_copy(beg,mid,end,dest);</span><br></pre></td></tr></table></figure><h4 id="reverse"><a href="#reverse" class="headerlink" title="reverse"></a><strong>reverse</strong></h4><p>翻转序列中的元素。reverse返回void，reverse_copy返回一个迭代器，指向拷贝到目的序列的元素的尾后位置。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">reverse(beg,end);</span><br><span class="line">reverse_copy(beg,end,dest);</span><br></pre></td></tr></table></figure><h4 id="random-shuffle"><a href="#random-shuffle" class="headerlink" title="random_shuffle"></a><strong>random_shuffle</strong></h4><p>使用随机访问迭代器的重排算法</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">random_shuffle(beg,end); 元素随机调整次序。</span><br><span class="line">random_shuffle(beg,end,rand); 使用函数gen代替随机生成函数执行random_shuffle()。</span><br></pre></td></tr></table></figure><h3 id="排列算法："><a href="#排列算法：" class="headerlink" title="排列算法："></a><strong>排列算法：</strong></h3><p>这些算法假定序列中的元素都是唯一的。要求双向迭代器。</p><h4 id="is-permutation"><a href="#is-permutation" class="headerlink" title="is_permutation"></a><strong>is_permutation</strong></h4><p>判断两个序列是否为同一元素集的不同排列</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">is_permutation(beg1, end1, beg2)</span><br><span class="line">is_permutation(beg1, end1, beg2, binaryPred)</span><br></pre></td></tr></table></figure><h4 id="next-permutation"><a href="#next-permutation" class="headerlink" title="next_permutation"></a><strong>next_permutation</strong></h4><p>生成序列的字典序排列中的下一个,返回要给bool指出是否还有下一个<br>如果序列已经是最后一个排序，则本函数将序列重排为最小的序列，返回false。否则将输入序列转为字典序的下一个排列，返回true。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">next_permutation(beg,end);</span><br><span class="line">next_permutation(beg,end,comp);</span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> a[<span class="number">6</span>]=&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>&#125;;</span><br><span class="line"><span class="keyword">do</span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">6</span>;i++)</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;a[i]&lt;&lt;<span class="string">' '</span>;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125;<span class="keyword">while</span>(next_permutation(a,a+<span class="number">6</span>));</span><br></pre></td></tr></table></figure><h4 id="prev-permutation"><a href="#prev-permutation" class="headerlink" title="prev_permutation"></a><strong>prev_permutation</strong></h4><p>生成序列的字典序排列中的前一个,返回要给bool指出是否还有前一个。<br>若序列已经是第一个排序，则本函数将序列重排为最大的序列，返回false。否则将序列转为字典序的上一个排序，返回true。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">prev_permutation(beg,end);</span><br><span class="line">prev_permutation(beg,end,comp);</span><br></pre></td></tr></table></figure><h3 id="有序序列的集合算法："><a href="#有序序列的集合算法：" class="headerlink" title="有序序列的集合算法："></a><strong>有序序列的集合算法：</strong></h3><h4 id="includes"><a href="#includes" class="headerlink" title="includes"></a><strong>includes</strong></h4><p>判断[beg1,end1)是否包含[beg2,end2)，使用底层元素的&lt;操作符，成功返回true。重载版本使用用户输入的函数。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">includes(beg,end,beg2,end2);</span><br><span class="line">includes(beg,end,beg2,end2,comp);</span><br></pre></td></tr></table></figure><h4 id="set-union"><a href="#set-union" class="headerlink" title="set_union"></a><strong>set_union</strong></h4><p>取[beg1,end1)与[beg2,end2)元素并集存放到dest。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">set_union(beg,end,beg2,end2,dest);</span><br><span class="line">set_union(beg,end,beg2,end2,dest,comp); 将函数comp代替&lt;操作符，执行set_union()</span><br></pre></td></tr></table></figure><h4 id="set-intersection"><a href="#set-intersection" class="headerlink" title="set_intersection"></a><strong>set_intersection</strong></h4><p>取[beg1,end1)与[beg2,end2)元素交集存放到res。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">set_intersection(beg,end,beg2,end2,dest);</span><br><span class="line">set_intersection(beg,end,beg2,end2,dest,comp); 将函数comp代替&lt;操作符</span><br></pre></td></tr></table></figure><h4 id="set-difference"><a href="#set-difference" class="headerlink" title="set_difference"></a><strong>set_difference</strong></h4><p>取[beg1,end1)与[beg2,end2)元素内差集存放到res。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">set_difference(beg,end,beg2,end2,dest);</span><br><span class="line">set_difference(beg,end,beg2,end2,dest,comp); 将函数comp代替&lt;操作符</span><br></pre></td></tr></table></figure><h4 id="set-symmetric-difference"><a href="#set-symmetric-difference" class="headerlink" title="set_symmetric_difference"></a><strong>set_symmetric_difference</strong></h4><p>取[beg1,end1)与[beg2,end2)元素外差集存放到res。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">set_symmetric_difference(beg,end,beg2,end2,dest);</span><br><span class="line">set_symmetric_difference(beg,end,beg2,end2,dest,comp);</span><br></pre></td></tr></table></figure><h3 id="最大值和最小值算法："><a href="#最大值和最小值算法：" class="headerlink" title="最大值和最小值算法："></a><strong>最大值和最小值算法：</strong></h3><h4 id="min-max"><a href="#min-max" class="headerlink" title="min/max"></a><strong>min/max</strong></h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">min(va1,va2);            返回两个元素中较小一个。</span><br><span class="line">min(val1,val2,comp);</span><br><span class="line">max(val1,val2);</span><br><span class="line">max(val1,val2,comp);     返回两个元素中较大一个。</span><br></pre></td></tr></table></figure><h4 id="min-element-max-element"><a href="#min-element-max-element" class="headerlink" title="min_element/max_element"></a><strong>min_element/max_element</strong></h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">min_element(beg,end);    返回一个ForwardIterator，指出[beg,end)中最大的元素。</span><br><span class="line">min_element(beg,end,comp);</span><br><span class="line">max_element(beg,end);    返回一个ForwardIterator，指出[beg,end)中最小的元素。</span><br><span class="line">max_element(beg,end,comp);</span><br></pre></td></tr></table></figure><h4 id="lexicographical-compare"><a href="#lexicographical-compare" class="headerlink" title="lexicographical_compare"></a><strong>lexicographical_compare</strong></h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">lexicographical_compare(beg1,end1,beg2,end2);      按字典序判断[beg1,end1)是否小于[beg2,end2)</span><br><span class="line">lexicographical_compare(beg1,end1,beg2,end2,comp); 将函数comp代替&lt;操作符</span><br></pre></td></tr></table></figure><h3 id="算术算法：-lt-numeric-gt"><a href="#算术算法：-lt-numeric-gt" class="headerlink" title="算术算法：&lt; numeric &gt;"></a><strong>算术算法：&lt; numeric &gt;</strong></h3><h4 id="accumulate"><a href="#accumulate" class="headerlink" title="accumulate"></a><strong>accumulate</strong></h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">对[beg,end)内元素之和，加到初始值val上。</span><br><span class="line">accumulate(beg,end,init);</span><br><span class="line">accumulate(beg,end,init,BinaryOp);</span><br><span class="line">将函数BinaryOp代替加法运算，执行accumulate()。</span><br></pre></td></tr></table></figure><h4 id="partial-sum"><a href="#partial-sum" class="headerlink" title="partial_sum"></a><strong>partial_sum</strong></h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">将[beg,end)内该位置前所有元素之和放进dest中。</span><br><span class="line">partial_sum(beg,end,dest);</span><br><span class="line">partial_sum(beg,end,dest,BinaryOp);</span><br></pre></td></tr></table></figure><h4 id="inner-product"><a href="#inner-product" class="headerlink" title="inner_product"></a><strong>inner_product</strong></h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">对两个序列做内积(对应元素相乘，再求和)并将内积加到初始值init上。</span><br><span class="line">inner_product(beg1,end1,beg2,init);</span><br><span class="line">inner_product(beg1,end1,beg2,init,BinOp1,BinOp2);</span><br></pre></td></tr></table></figure><h4 id="adjacent-difference"><a href="#adjacent-difference" class="headerlink" title="adjacent_difference"></a><strong>adjacent_difference</strong></h4><p>将新序列写入dest，每个新元素(<strong>除了首元素</strong>)的值都为输入范围中当前位置和前一个位置元素之差。第一个版本使用-，第二个版本使用binaryOp。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">adjacent_difference(beg,end,dest);</span><br><span class="line">adjacent_difference(beg,end,dest,BinaryOp);</span><br></pre></td></tr></table></figure><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p>C++ primer 附录<br><a href="https://blog.csdn.net/xyqqwer/article/details/81263060">C++ STL 常见算法(比较详细)</a><br><a href="https://www.jianshu.com/p/eb554b0943ab">C++进阶：STL算法总结</a><br><a href="https://www.cnblogs.com/logchen/p/10188354.html">C/C++基础—算法概览</a><br><a href="https://blog.csdn.net/qq_40160605/article/details/80150252">关于lower_bound( )和upper_bound( )的常见用法</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;标准库中常见的函数与头文件&quot;&gt;&lt;a href=&quot;#标准库中常见的函数与头文件&quot; class=&quot;headerlink&quot; title=&quot;标准库中常见的函数与头文件&quot;&gt;&lt;/a&gt;标准库中常见的函数与头文件&lt;/h2&gt;
    
    </summary>
    
    
      <category term="C++" scheme="https://stemha.github.io/categories/C/"/>
    
    
      <category term="C++标准库" scheme="https://stemha.github.io/tags/C-%E6%A0%87%E5%87%86%E5%BA%93/"/>
    
      <category term="算法" scheme="https://stemha.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>STL 堆常用操作</title>
    <link href="https://stemha.github.io/2020/06/21/STL-%E5%A0%86%E5%B8%B8%E7%94%A8%E6%93%8D%E4%BD%9C/"/>
    <id>https://stemha.github.io/2020/06/21/STL-%E5%A0%86%E5%B8%B8%E7%94%A8%E6%93%8D%E4%BD%9C/</id>
    <published>2020-06-20T16:51:55.000Z</published>
    <updated>2020-08-10T04:19:21.620Z</updated>
    
    <content type="html"><![CDATA[<h2 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h2><ul><li><p>STL中并没有把heap作为一种容器组件，heap的实现亦需要更低一层的容器组件（诸如list,array,vector）作为其底层机制。</p></li><li><p>Heap是一个类属算法，包含在&lt; algorithm &gt;中。</p></li><li><p>STL中关于heap默认调整成的是大顶堆，可以用自定义的compare_fuction函数实现大顶堆或小顶堆。</p></li><li><p>heap的低层机制vector本身就是一个类模板，heap基于vector便实现了对各种数据类型（无论基本数据类型还是用户自定义的数据类型）的堆排（前提是用户自定义的数据类型要提供比较机制compare_fuction函数）。</p><a id="more"></a></li><li><p>堆是一棵树完全二叉树，对于该完全二叉树中的每一个结点x，其关键字大于等于(或小于等于）其左右孩子结点，而其左右子树均为一个二叉堆。</p></li><li><p>在上述的定义中，若堆中父亲结点关键字的值大于等于孩子结点，则称该堆为大顶堆；若堆中父亲结点关键子的值小于等于孩子结点，则称该堆为小顶堆。</p></li><li><p>由于堆是一棵完全二叉树，所以我们可以很轻易地用一个数组存储堆中的每一个元素，并且由子结点访问到其父亲结点和由父亲结点访问到其子结点。</p></li></ul><h2 id="头文件"><a href="#头文件" class="headerlink" title="头文件"></a>头文件</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta"># <span class="meta-keyword">include</span> <span class="meta-string">&lt; algorithm &gt;</span></span></span><br></pre></td></tr></table></figure><h2 id="STL堆操作"><a href="#STL堆操作" class="headerlink" title="STL堆操作"></a>STL堆操作</h2><p>STL里面的堆操作一般用到的只有4个。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">make_heap           Make heap from <span class="title">range</span> <span class="params">(function <span class="keyword">template</span>)</span></span></span><br><span class="line"><span class="function">push_heap           Push element into heap <span class="title">range</span> <span class="params">(function <span class="keyword">template</span>)</span> </span></span><br><span class="line"><span class="function">pop_heap            Pop element from heap <span class="title">range</span> <span class="params">(function <span class="keyword">template</span>)</span> </span></span><br><span class="line"><span class="function">sort_heap           Sort elements of <span class="title">heap</span> <span class="params">(function <span class="keyword">template</span>)</span></span></span><br></pre></td></tr></table></figure><h3 id="make-heap"><a href="#make-heap" class="headerlink" title="make_heap"></a><strong>make_heap</strong></h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">RandomAccessIterator</span>&gt;</span></span><br><span class="line"><span class="class">  <span class="title">void</span> <span class="title">make_heap</span> ( <span class="title">RandomAccessIterator</span> <span class="title">first</span>, <span class="title">RandomAccessIterator</span> <span class="title">last</span> );</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">RandomAccessIterator</span>, <span class="title">class</span> <span class="title">Compare</span>&gt;</span></span><br><span class="line"><span class="class">  <span class="title">void</span> <span class="title">make_heap</span> ( <span class="title">RandomAccessIterator</span> <span class="title">first</span>, <span class="title">RandomAccessIterator</span> <span class="title">last</span>, <span class="title">Compare</span> <span class="title">comp</span> );</span></span><br></pre></td></tr></table></figure><p>一个参数是数组或向量的头指针，第二个向量是尾指针。第三个参数是比较函数的名字。在缺省的时候，默认是大跟堆。<br>作用 ：以[ begin,end )内元素建立堆。</p><h3 id="push-heap"><a href="#push-heap" class="headerlink" title="push_heap"></a><strong>push_heap</strong></h3><p>向堆中插入元素分为两个步骤：</p><ol><li>先将待插入的元素插入到底层容器的末端，通过push_back函数实现。</li><li>再调用push_heap(b,e,cmp)函数堆新插入的元素做向上调整。</li></ol><p>所以，调用push_heap函数之前，先要保证待插入的元素已经放到了原容器的末尾，否则push_heap就做了无用功。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">RandomAccessIterator</span>&gt;</span></span><br><span class="line"><span class="class">  <span class="title">void</span> <span class="title">push_heap</span> ( <span class="title">RandomAccessIterator</span> <span class="title">first</span>, <span class="title">RandomAccessIterator</span> <span class="title">last</span> );</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">RandomAccessIterator</span>, <span class="title">class</span> <span class="title">Compare</span>&gt;</span></span><br><span class="line"><span class="class">  <span class="title">void</span> <span class="title">push_heap</span> ( <span class="title">RandomAccessIterator</span> <span class="title">first</span>, <span class="title">RandomAccessIterator</span> <span class="title">last</span>, <span class="title">Compare</span> <span class="title">comp</span> );</span></span><br></pre></td></tr></table></figure><p>假设由[first,last-1)是一个有效的堆，然后，再把堆中的新元素加进来（新元素放到最后一个位置），做成一个堆。</p><h3 id="sort-heap"><a href="#sort-heap" class="headerlink" title="sort_heap"></a><strong>sort_heap</strong></h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">RandomAccessIterator</span>&gt;</span></span><br><span class="line"><span class="class">  <span class="title">void</span> <span class="title">sort_heap</span> ( <span class="title">RandomAccessIterator</span> <span class="title">first</span>, <span class="title">RandomAccessIterator</span> <span class="title">last</span> );</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">RandomAccessIterator</span>, <span class="title">class</span> <span class="title">Compare</span>&gt;</span></span><br><span class="line"><span class="class">  <span class="title">void</span> <span class="title">sort_heap</span> ( <span class="title">RandomAccessIterator</span> <span class="title">first</span>, <span class="title">RandomAccessIterator</span> <span class="title">last</span>, <span class="title">Compare</span> <span class="title">comp</span> );</span></span><br></pre></td></tr></table></figure><p>sort_heap对[first,last)中的序列进行排序。它假设这个序列是有效堆。（当然，经过排序之后就不是一个有效堆了）</p><h3 id="pop-heap"><a href="#pop-heap" class="headerlink" title="pop_heap"></a><strong>pop_heap</strong></h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">RandomAccessIterator</span>&gt;</span></span><br><span class="line"><span class="class">  <span class="title">void</span> <span class="title">pop_heap</span> ( <span class="title">RandomAccessIterator</span> <span class="title">first</span>, <span class="title">RandomAccessIterator</span> <span class="title">last</span> );</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">RandomAccessIterator</span>, <span class="title">class</span> <span class="title">Compare</span>&gt;</span></span><br><span class="line"><span class="class">  <span class="title">void</span> <span class="title">pop_heap</span> ( <span class="title">RandomAccessIterator</span> <span class="title">first</span>, <span class="title">RandomAccessIterator</span> <span class="title">last</span>, <span class="title">Compare</span> <span class="title">comp</span> );</span></span><br></pre></td></tr></table></figure><p>不是真的把最大（最小）的元素从堆中弹出来,而是重新排序堆，使得第一个和最后一个进行交换，但是并不弹出最大值。它把first和last交换，然后将[first,last-1)的数据再做成一个堆。<br>需要手动删除最后一个元素（a.pop_back()）;</p><h2 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// range heap example</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="keyword">int</span> myints[] = &#123;<span class="number">10</span>,<span class="number">20</span>,<span class="number">30</span>,<span class="number">5</span>,<span class="number">15</span>&#125;;</span><br><span class="line">  <span class="function"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; <span class="title">v</span><span class="params">(myints,myints+<span class="number">5</span>)</span></span>;</span><br><span class="line">  <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;::iterator it;</span><br><span class="line"></span><br><span class="line">  make_heap (v.begin(),v.end());  建立堆</span><br><span class="line">  <span class="built_in">cout</span> &lt;&lt; <span class="string">"initial max heap   : "</span> &lt;&lt; v.front() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">  pop_heap (v.begin(),v.end()); </span><br><span class="line">  v.pop_back(); </span><br><span class="line">  <span class="built_in">cout</span> &lt;&lt; <span class="string">"max heap after pop : "</span> &lt;&lt; v.front() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">  v.push_back(<span class="number">99</span>);               添加元素</span><br><span class="line">  push_heap (v.begin(),v.end());</span><br><span class="line">  <span class="built_in">cout</span> &lt;&lt; <span class="string">"max heap after push: "</span> &lt;&lt; v.front() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">  sort_heap (v.begin(),v.end()); 排序堆中元素</span><br><span class="line"></span><br><span class="line">  <span class="built_in">cout</span> &lt;&lt; <span class="string">"final sorted range :"</span>;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">unsigned</span> i=<span class="number">0</span>; i&lt;v.size(); i++) </span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">" "</span> &lt;&lt; v[i];</span><br><span class="line"></span><br><span class="line">  <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">initial max heap   : <span class="number">30</span></span><br><span class="line">max heap after pop : <span class="number">20</span></span><br><span class="line">max heap after push: <span class="number">99</span></span><br><span class="line"><span class="keyword">final</span> sorted range : <span class="number">5</span> <span class="number">10</span> <span class="number">15</span> <span class="number">20</span> <span class="number">99</span></span><br></pre></td></tr></table></figure><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p>C++ primer<br>C++ Library Reference<br><a href="https://blog.csdn.net/zsc2014030403015/article/details/45872737">STL 堆heap的用法 </a><br><a href="https://blog.csdn.net/xyqqwer/article/details/81263060">C++ STL 常见算法(比较详细)</a><br><a href="https://blog.csdn.net/jxh_123/article/details/34853099?utm_source=tuicool">STL之heap相关操作算法</a> //写的详细</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;基本概念&quot;&gt;&lt;a href=&quot;#基本概念&quot; class=&quot;headerlink&quot; title=&quot;基本概念&quot;&gt;&lt;/a&gt;基本概念&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;STL中并没有把heap作为一种容器组件，heap的实现亦需要更低一层的容器组件（诸如list,array,vector）作为其底层机制。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Heap是一个类属算法，包含在&amp;lt; algorithm &amp;gt;中。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;STL中关于heap默认调整成的是大顶堆，可以用自定义的compare_fuction函数实现大顶堆或小顶堆。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;heap的低层机制vector本身就是一个类模板，heap基于vector便实现了对各种数据类型（无论基本数据类型还是用户自定义的数据类型）的堆排（前提是用户自定义的数据类型要提供比较机制compare_fuction函数）。&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;
    
    </summary>
    
    
      <category term="C++" scheme="https://stemha.github.io/categories/C/"/>
    
    
      <category term="C++标准库" scheme="https://stemha.github.io/tags/C-%E6%A0%87%E5%87%86%E5%BA%93/"/>
    
      <category term="heap" scheme="https://stemha.github.io/tags/heap/"/>
    
  </entry>
  
  <entry>
    <title>数据库常用概念</title>
    <link href="https://stemha.github.io/2020/06/14/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%B8%B8%E7%94%A8%E6%A6%82%E5%BF%B5/"/>
    <id>https://stemha.github.io/2020/06/14/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%B8%B8%E7%94%A8%E6%A6%82%E5%BF%B5/</id>
    <published>2020-06-14T15:36:40.000Z</published>
    <updated>2020-08-10T04:19:21.691Z</updated>
    
    <content type="html"><![CDATA[<h2 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h2><a id="more"></a><p>实体（entity）：客观存在并可相互区别的事物称为实体。<br>实体型（entity type）：用实体名及其属性名集合来抽象和刻画同类实体，称为实体型。<br>实体集（entity set）：同一实体型的集合称为实体集。</p><h2 id="术语对比"><a href="#术语对比" class="headerlink" title="术语对比"></a>术语对比</h2><table><thead><tr><th align="left">关系模型的数据结构术语</th><th align="left">一般表格的术语</th></tr></thead><tbody><tr><td align="left">关系名</td><td align="left">表名</td></tr><tr><td align="left">关系模式</td><td align="left">表头（表格的描述）</td></tr><tr><td align="left">关系</td><td align="left">（一张）二维表</td></tr><tr><td align="left">元组</td><td align="left">记录或者行</td></tr><tr><td align="left">属性</td><td align="left">列</td></tr><tr><td align="left">属性名</td><td align="left">列名</td></tr><tr><td align="left">分量</td><td align="left">一条记录中的一个列值</td></tr><tr><td align="left">域</td><td align="left">值的集合，值的取值范围</td></tr><tr><td align="left">非规范关系</td><td align="left">表中有表</td></tr></tbody></table><h2 id="关系"><a href="#关系" class="headerlink" title="关系"></a>关系</h2><p>关系模型（relational model）</p><ul><li>关系（relation）：一个关系对应通常说的一张表</li><li>元组（tuple）：表中的一行即为一个元组</li><li>属性（attribute）：表中的一列即为一个属性</li><li>主属性（prime attribute）：候选码的诸属性</li><li>码（key）：表中可以唯一确定一个元组的某个属性组，也可以说是主码。<ul><li>候选码（candidate key）：关系的某一属性组的值能唯一地标识一个元组，但是子集不能</li><li>主码（primary key）：若一个关系有多个候选码，选定其中一个为主码</li></ul></li><li>域（domain）：一组具有相同数据类型的值的集合</li><li>笛卡尔积：域之间的排列组合。</li><li>分量：元组中的一个属性值</li><li>关系模式：对关系的描述，一般表示为 关系名(属性1, 属性2, …, 属性n)</li></ul><h3 id="关系的三种类型"><a href="#关系的三种类型" class="headerlink" title="关系的三种类型"></a>关系的三种类型</h3><p>基本表：实际存在的表，实际存储数据的逻辑表示<br>查询表：查询结果对应的表<br>视图表：由基本表或其他视图导出来的表，是虚表，不对应实际存储的数据。</p><h3 id="关系的完整性"><a href="#关系的完整性" class="headerlink" title="关系的完整性"></a>关系的完整性</h3><p>实体完整性 </p><ul><li>主属性不能取空值</li></ul><p>参照完整性：指的是关系之间存在着属性的引用，比如学生（学号，姓名，专业号），专业（专业号，专业名）。学生这个表参照了专业表里的专业号</p><ul><li>上面学生表的专业号可以看作是专业表的专业号的引用，也就是专业表的外码</li><li>外码只有两种情况</li><li>为空值 专业未确定</li><li>非空值 专业确定</li></ul><p>用户定义的完整性<br>用户自己设置的规则，比如某个属性的范围，某个属性必须取为唯一值等。</p><h3 id="关系代数"><a href="#关系代数" class="headerlink" title="关系代数"></a>关系代数</h3><p>并 差 交 笛卡儿积称为集合运算.<br>(1) 并(Union)<br>并是抽取两个表格中所有行的运算,经过并运算后能够抽取两个表格中的所有数据.<br>(2) 差(difference)<br>能够调取两张表中其中一张表独有的数据,这种运算叫做差,以不同的表格为基准会获得不同的运算结果.<br>(3) 交(intersection)<br>能够调取两张表格共有数据的这种运算叫做交.<br>(4) 笛卡儿积(Cartesian product)<br>笛卡儿积是一种可以将两个表格中所有数据排列组合的方法</p><p>(5) 投影(projection)<br>抽取列的运算叫做投影.投影是调取表中某一列.<br>(6) 选择(Selection)<br>选择是调取表中某一行的运算.<br>(7) 连接(join)<br>连接就是将表格连接起来.外键参照其他表中的主键,通过连接,将两个表格粘合起来. 笛卡尔集中选取合适的；<br>等值连接 选取某些属性的值相等的那些元组<br>自然连接 重复的属性列去掉<br>(8) 除<br>除就是从’被除表格’中调取’除表格’中包含的所有行,然后再从中去掉’除表格’中所有行的运算.</p><h2 id="常用-SQL-操作"><a href="#常用-SQL-操作" class="headerlink" title="常用 SQL 操作"></a>常用 SQL 操作</h2><table>  <tr>    <th>对象类型</th>    <th>对象</th>    <th>操作类型</th>  </tr>  <tr>    <td rowspan="4">数据库模式</td>    <td>模式</td>    <td><code>CREATE SCHEMA</code></td>  </tr>  <tr>    <td>基本表</td>    <td><code>CREATE SCHEMA</code>，<code>ALTER TABLE</code></td>  </tr>    <tr>    <td>视图</td>    <td><code>CREATE VIEW</code></td>  </tr>    <tr>    <td>索引</td>    <td><code>CREATE INDEX</code></td>  </tr>    <tr>    <td rowspan="2">数据</td>    <td>基本表和视图</td>    <td><code>SELECT</code>，<code>INSERT</code>，<code>UPDATE</code>，<code>DELETE</code>，<code>REFERENCES</code>，<code>ALL PRIVILEGES</code></td>  </tr>    <tr>    <td>属性列</td>    <td><code>SELECT</code>，<code>INSERT</code>，<code>UPDATE</code>，<code>REFERENCES</code>，<code>ALL PRIVILEGES</code></td>  </tr></table><p><img src="/2020/06/14/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%B8%B8%E7%94%A8%E6%A6%82%E5%BF%B5/SQL%E5%AF%B9%E6%95%B0%E6%8D%AE%E5%BA%93%E6%A8%A1%E5%BC%8F%E7%9A%84%E6%94%AF%E6%8C%81.JPG" alt="SQL对数据库模式的支持"></p><h3 id="一些最重要的-SQL-命令"><a href="#一些最重要的-SQL-命令" class="headerlink" title="一些最重要的 SQL 命令"></a>一些最重要的 SQL 命令</h3><p>SELECT - 从数据库中提取数据<br>UPDATE - 更新数据库中的数据<br>DELETE - 从数据库中删除数据<br>INSERT INTO - 向数据库中插入新数据<br>CREATE DATABASE - 创建新数据库<br>ALTER DATABASE - 修改数据库<br>CREATE TABLE - 创建新表<br>ALTER TABLE - 变更（改变）数据库表<br>DROP TABLE - 删除表<br>CREATE INDEX - 创建索引（搜索键）<br>DROP INDEX - 删除索引</p><h2 id="范式"><a href="#范式" class="headerlink" title="范式"></a>范式</h2><p>一个低一级范式的关系模式通过模式分解可以转换为若干高一级范式的关系模式的集合，这个过程叫<code>规范化</code> 。//通俗的说，就是为了方便增删改查才转为为各种范式。<br>第一范式（1NF）：属性（字段）是最小单位不可再分。 //不可以一个属性里面的值还可以再分为多个值<br>第二范式（2NF）：满足 1NF，每个非主属性完全依赖于主键</p><ul><li>（消除 1NF 非主属性对码的部分函数依赖）。 //<br>第三范式（3NF）：满足 2NF，任何非主属性不依赖于其他非主属性</li><li>（消 除 2NF 非主属性对码的传递函数依赖）。 //<br>鲍依斯-科得范式（BCNF）：满足 3NF，任何非主属性不能对主键子集依赖</li><li>（消除 3NF <strong>主属性</strong>对码的部分和传递函数依赖）。<br>第四范式（4NF）：满足 3NF，属性之间不能有非平凡且非函数依赖的多值依赖</li><li>（消除 3NF 非平凡且非函数依赖的多值依赖）。</li></ul><p>关系模式的简化三元组 R&lt;U,F&gt; F是属性组上面的一组数据依赖。</p><p>数据依赖</p><ul><li>函数依赖（function dependency）：类似于y=f(x) x一旦确定，y就确定了<ul><li>非平凡的函数依赖 比如(Sno,Cno)-&gt;Grade  //Grade不属于码</li><li>平凡的函数依赖  (Sno,Cno)-&gt;Cno         //Cno属于码</li><li>部分函数依赖 Sno-&gt;Sdept,(Sno,Cno)-&gt;Sdept  //Sdept依赖(Sno,Cno)，但是还可以再细分，Sdept依赖于Sdept</li><li>传递函数依赖</li></ul></li><li>多值依赖（multi-value dependency）： // X Y Z 由X Z的值可以确定一组Y的值。而且Z变一下，还是可以确定一组相同的Y的值，这组Y的值只和X有关的</li></ul><h2 id="事务"><a href="#事务" class="headerlink" title="事务"></a>事务</h2><p>事务：用户定义的一个数据库操作序列，这些操作要么做，要么不做，是一个不可分割的工作单位<br>一个程序包含多个事务</p><p>事务的开始可以由用户显式控制。如果用户没有显式义，由DBMS按照默认规定自动划分事务。<br>在SQL中，定义事务的语句一般是三条</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">BEGIN TRANSCTION;   </span><br><span class="line">COMMIT;             &#x2F;&#x2F;提交事务</span><br><span class="line">ROLLBACK;           &#x2F;&#x2F;回滚，之前完成的操作撤销，回滚到事务开始的状态</span><br></pre></td></tr></table></figure><h3 id="事务的ACID特性"><a href="#事务的ACID特性" class="headerlink" title="事务的ACID特性"></a>事务的ACID特性</h3><p>原子性：事务要么做要么不做<br>一致性：事务前后数据的完整性必须保持一致。<br>隔离性：事务的隔离性是多个用户并发访问数据库时，数据库为每一个用户开启的事务，不能被其他事务的操作数据所干扰，多个并发事务之间要相互隔离。<br>持久性：持久性是指一个事务一旦被提交，它对数据库中数据的改变就是永久性的，接下来即使数据库发生故障也不应该对其有任何影响</p><p>恢复的实现技术：建立冗余数据 -&gt; 利用冗余数据实施数据库恢复。<br>建立冗余数据常用技术：数据转储（动态海量转储、动态增量转储、静态海量转储、静态增量转储）、登记日志文件。 </p><h3 id="并发控制"><a href="#并发控制" class="headerlink" title="并发控制"></a>并发控制</h3><p>事务是并发控制的基本单位。<br>并发操作带来的数据不一致性包括：丢失修改、不可重复读、读 “脏” 数据。<br>并发控制主要技术：封锁、时间戳、乐观控制法、多版本并发控制等。<br>基本封锁类型：排他锁（X 锁 / 写锁）、共享锁（S 锁 / 读锁）。<br>活锁死锁：<br>活锁：事务永远处于等待状态，可通过先来先服务的策略避免。<br>死锁：事物永远不能结束<br>预防：一次封锁法、顺序封锁法；<br>诊断：超时法、等待图法；<br>解除：撤销处理死锁代价最小的事务，并释放此事务的所有的锁，使其他事务得以继续运行下去。<br>可串行化调度：多个事务的并发执行是正确的，当且仅当其结果与按某一次序串行地执行这些事务时的结果相同。可串行性时并发事务正确调度的准则</p><h2 id="SQL"><a href="#SQL" class="headerlink" title="SQL"></a>SQL</h2><p>语言简洁，易学易用     </p><ul><li>完成核心功能只用了9个动词。</li></ul><p>SQL的动词</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">数据查询 SELECT                </span><br><span class="line">数据定义 CREATE,DROP,ALTER</span><br><span class="line">数据操纵 INSERT,UPDATE,DELETE</span><br><span class="line">数据控制 GRANT,REVOKE           <span class="comment">//grant 授予 revoke 撤销废除</span></span><br></pre></td></tr></table></figure><p>综合统一</p><ul><li>集数据定义语言（DDL），数据操纵语言（DML），数据控制语言（DCL）功能于一体</li></ul><p>基本操作对象有：模式、表、视图和索引</p><h3 id="数据定义"><a href="#数据定义" class="headerlink" title="数据定义"></a>数据定义</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">操作对象|   创建         |    删除     |   修改</span><br><span class="line">----------------------------------------------------</span><br><span class="line">模式    CREATE SCHEMA      DROP SCHEMA      -</span><br><span class="line">表      CREATE TABLE       DROP TABLE   ALTER TABLE </span><br><span class="line">视图    CREATE VIEW        DROP VIEW        - </span><br><span class="line">索引    CREATE INDEX       DROP INDEX   ALTER INDEX</span><br></pre></td></tr></table></figure><p>SQL不提供修改模式定义和修改视图定义的操作，如果想修改就只能删除然后重建；<br>示例</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">CREATE SCHEMA test AUTHORIZATION zhang</span><br><span class="line">CREATE TABLE tab1(COL1 SMALLINT,</span><br><span class="line">                  COL2 INT,                 </span><br><span class="line">                  COL3 CHAR(20),                                     </span><br><span class="line">                  COL4 NUMERIC(10,3),</span><br><span class="line">                  COL5 DECIMAL(5,2)  </span><br><span class="line">                 );</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">删除模式</span><br><span class="line">DROP SCHEMA &lt;模式名&gt; &lt;CASCADE|RESTRICT&gt; &#x2F;&#x2F;CASCADE和RESTRICT必选1个</span><br><span class="line">CASCADE表示级联，删除模式的时候把模式中的所有数据对象都删除</span><br><span class="line">RESTRICT只有在模式没有任何数据对象的时候才能执行</span><br></pre></td></tr></table></figure><p>索引的建立和删除<br>表太大的时候，查询操作会比较耗时，可以用索引来加快。<br>在基本表上建立一个或者多个索引，加快查找速度</p><p>数据库索引类型</p><ul><li>顺序文件上的索引<ul><li>按属性值降序或者升序的形式建立一个顺序索引文件</li></ul></li><li>B+树索引<ul><li>叶节点为属性值和相应的元组指针</li><li>动态平衡的优点</li></ul></li><li>散列索引<ul><li>hash桶存放相应的索引属性值和元组的指针</li></ul></li><li>位图索引<ul><li>用位向量记录索引属性值中可能出现的值，每个位向量对应一个可能值；</li></ul></li></ul><p>建立索引和删除索引由数据库管理员或者表的建立者负责完成。<br>但是查询时候是由数据库管理系统自动选择合适的索引，用户不能显式选择。</p><h4 id="数据字典"><a href="#数据字典" class="headerlink" title="数据字典"></a>数据字典</h4><p>是数据库管理系统中的一组系统表，记录了数据库所有的定义信息<br>关系数据库执行SQL相关的数据定义语句的时候，实际上就是在更新数据字典表中的信息。</p><h3 id="数据查询"><a href="#数据查询" class="headerlink" title="数据查询"></a>数据查询</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">SELECT [ALL|DISTINCT] &lt;目标列表达式&gt; [&lt;目标列表达式 &gt;]... <span class="comment">//DISTINCT 取消重复值，ALL 不取消重复值</span></span><br><span class="line">FROM &lt;表名或者视图名&gt; </span><br><span class="line">[WHERE &lt;条件表达式&gt;]                                <span class="comment">//代表限制条件</span></span><br><span class="line">[GROUP BY &lt;列名<span class="number">1</span>&gt; [HAVING &lt;条件表达式&gt;] ]           <span class="comment">//Group分组，比方一个表课程号，选课的人，可以根据课程和分组，作用有点像按某个属性来拆分成多个表。HAVING指定筛选条件</span></span><br><span class="line">[ORDER BY &lt;列名<span class="number">2</span>&gt; [ASC|DESC]];                      <span class="comment">//结果按照列名2的值升序或者降序</span></span><br></pre></td></tr></table></figure><h3 id="数据更新"><a href="#数据更新" class="headerlink" title="数据更新"></a>数据更新</h3><h4 id="插入数据"><a href="#插入数据" class="headerlink" title="插入数据"></a>插入数据</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">INSERT </span><br><span class="line">INTO student(Sno,Sname,Ssex,Sdept,Sage)</span><br><span class="line">VALUES(&#39;201215128&#39;,&#39;陈&#39;,&#39;男&#39;,&#39;IS&#39;,18)</span><br></pre></td></tr></table></figure><h4 id="修改数据"><a href="#修改数据" class="headerlink" title="修改数据"></a>修改数据</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">UPDATE student</span><br><span class="line">SET Sage&#x3D;22</span><br><span class="line">WHERE Sno&#x3D;&#39;201215121&#39;;   &#x2F;&#x2F;WHERE可以省略，省略时候表示修改表中所有的元组</span><br></pre></td></tr></table></figure><h4 id="删除数据"><a href="#删除数据" class="headerlink" title="删除数据"></a>删除数据</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;只能删除元组</span><br><span class="line">DELETE </span><br><span class="line">FROM student</span><br><span class="line">WHERE Sno&#x3D;&#39;201215128&#39;;</span><br></pre></td></tr></table></figure><h3 id="视图操作"><a href="#视图操作" class="headerlink" title="视图操作"></a>视图操作</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">CREATE VIEW IS_STUDENT</span><br><span class="line">AS</span><br><span class="line">SELECT Sno,Sname,Sage</span><br><span class="line">FROM student</span><br><span class="line">WHERE Sdept&#x3D;&#39;IS&#39;</span><br><span class="line">WITH CHECK OPTION &#x2F;&#x2F;可以省略，带上这条语句表示对视图插入修改删除时候会满足where中的条件</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">DROP VIEW &lt;视图名&gt;[CASCADE] &#x2F;&#x2F;级联代表删除相关联的视图</span><br></pre></td></tr></table></figure><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p>数据库系统概论 王珊 萨师煊<br><a href="https://www.runoob.com/sql/sql-syntax.html">SQL 语法</a><br><a href="https://zhuanlan.zhihu.com/p/23713529">数据库篇（每位开发者必备）</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;基本概念&quot;&gt;&lt;a href=&quot;#基本概念&quot; class=&quot;headerlink&quot; title=&quot;基本概念&quot;&gt;&lt;/a&gt;基本概念&lt;/h2&gt;
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>计算机网络教程-套接字</title>
    <link href="https://stemha.github.io/2020/06/11/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E6%95%99%E7%A8%8B-%E5%A5%97%E6%8E%A5%E5%AD%97/"/>
    <id>https://stemha.github.io/2020/06/11/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E6%95%99%E7%A8%8B-%E5%A5%97%E6%8E%A5%E5%AD%97/</id>
    <published>2020-06-11T06:48:19.000Z</published>
    <updated>2020-08-10T04:19:21.748Z</updated>
    
    <content type="html"><![CDATA[<h2 id="套接字的数据结构"><a href="#套接字的数据结构" class="headerlink" title="套接字的数据结构"></a>套接字的数据结构</h2><p>C 语言将套接字定义为一个结构（struct）。套接字结构由五个字段组成；每个套接字地址是一个由五部分构成的结构。</p><a id="more"></a><p><img src="/2020/06/11/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E6%95%99%E7%A8%8B-%E5%A5%97%E6%8E%A5%E5%AD%97/%E5%A5%97%E6%8E%A5%E5%AD%97%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84.JPG" alt="图1，套接字数据结构"></p><ul><li><code>族</code>。这个字段定义了协议簇（如何解释地址和端口号）。<ul><li>通常值是<code>PF_INET</code>（用于当前因特网）、PF_INET6（用于下一代因特网）等等。我们在本节使用PF_INET。</li></ul></li><li><code>类型</code>。这个字段定义了四个套接字类型：<ul><li>SOCK_STREAM（用于TCP）</li><li>SOCK_DGRAM（用于UDP）、</li><li>SOCK_SEQPACKET（用于SCTP）</li><li>SOCK_RAW（用于直接使用ISP 服务的应用）。</li></ul></li><li><code>协议</code>。这个字段定义了族中特定协议。对于TCP/IP 协议簇这个字段设置为0，因为它是族中唯一的协议。</li><li><code>本地套接字地址</code>。这个字段定义了本地套接字地址。<ul><li>一个套接字地址是一个结构，它由<code>长度字段</code>、<code>族字段</code>（对于TCP/IP 协议簇，它被设置为<code>常量AF_INET</code>）、<code>端口号字段</code>（定义了进程）以及<code>IP 地址字段</code>（定义了正在运行的进程所在的主机）构成。它也包含未使用字段。</li></ul></li><li><code>远程套接字地址</code>。这个字段定义了远程套接字地址。它的结构与本地套接字地址相同。</li></ul><h2 id="头文件"><a href="#头文件" class="headerlink" title="头文件"></a>头文件</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/socket.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;netinet/in.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;netdb.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;errno.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;signal.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;arpa/innet.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/wait.h&gt;</span></span></span><br></pre></td></tr></table></figure><h2 id="使用-TCP-通信"><a href="#使用-TCP-通信" class="headerlink" title="使用 TCP 通信"></a>使用 TCP 通信</h2><ul><li>TCP 是面向连接的协议。在发送或接收数据之前，需要在客户端和服务器之间建立连接。在连接建立之后，只要它们有数据要发送或接收，两端就可以彼此发送以及接收数据块。</li><li>TCP 连接可以是迭代的（一次服务一个客户）也可以是并发的（一次服务多个客户）。</li></ul><h3 id="TCP-中使用的套接字"><a href="#TCP-中使用的套接字" class="headerlink" title="TCP 中使用的套接字"></a>TCP 中使用的套接字</h3><p>TCP 服务器使用两个不同的套接字:</p><ul><li>一个用于连接建立。称为<code>监听套接字（listen socket）</code>。</li><li>一个用于数据传输。称为<code>套接字（socket）</code>。</li><li>设置两种套接字的目的是将建立阶段和数据交换阶段分开。</li></ul><p>服务器使用监听套接字来监听试图建立连接的新客户。在连接建立之后，服务器创建一个用于和客户交换数据的套接字并且最终终止连接。<br>客户只使用一个套接字用于连接建立以及数据交换。</p><p><img src="/2020/06/11/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E6%95%99%E7%A8%8B-%E5%A5%97%E6%8E%A5%E5%AD%97/TCP%E9%80%9A%E4%BF%A1%E4%B8%AD%E4%BD%BF%E7%94%A8%E7%9A%84%E5%A5%97%E6%8E%A5%E5%AD%97.JPG" alt="图2，TCP 通信中使用的套接字"></p><h2 id="通信流程图"><a href="#通信流程图" class="headerlink" title="通信流程图"></a>通信流程图</h2><p><img src="/2020/06/11/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E6%95%99%E7%A8%8B-%E5%A5%97%E6%8E%A5%E5%AD%97/%E8%BF%AD%E4%BB%A3TCP%E9%80%9A%E4%BF%A1%E6%B5%81%E7%A8%8B%E5%9B%BE.JPG" alt="图3，迭代TCP通信流程图"></p><h3 id="服务器进程"><a href="#服务器进程" class="headerlink" title="服务器进程"></a>服务器进程</h3><ol><li>TCP 服务器进程调用socket 和bind 函数，但是这两个函数创建监听套接字，它只在连接建立阶段被使用。</li><li>之后，服务器进程调用listen函数，允许操作系统开始接收客户、完成连接阶段并把他们放入等待被服务的列表。<ul><li>这个函数也定义了被连接的客户等待列表的大小，这依赖于服务器进程的复杂性，但是通常值为5。</li></ul></li><li>现在，服务器进程开始循环并且逐一对客户进行服务。<ul><li>在每次循环中，服务器进程调用accept函数从已连接客户的等待列表中去除一个客户，对其进行服务。</li><li>如果列表是空的，那么accept 函数进入阻塞状态直到出现一个客户待服务。</li><li>当accept 函数返回，它创建一个新的与监听套接字一样的套接字。</li></ul></li><li>监听套接字现在移入后台，并且新的套接字成为活动套接字。</li><li>服务器进程现在使用连接建立期间获得的客户套接字地址，用它来填充新建套接字的远程套接字地址。</li></ol><p>此时，客户和服务器可以交换数据。我们没有给出数据传输的特定方式，因为这取决于特定的客户-服务器对。</p><ul><li>TCP 使用<code>send</code>以及<code>recv</code>程序在它们之间传输数据字节。这两个函数比UDP 中使用的sendto 和recvfrom 函数更简单，因为它们不提供远程套接字地址；连接已经在客户和服务器之间建立。</li><li>然而，由于TCP 用于传输无边界报文，每个应用需要仔细设计数据传输部分。</li></ul><p>send 和recv 函数可能被调用多次来处理大量数据传输。可以将上图的流程图当作一个通用流程图；如果是特殊用途，需要定义服务器数据传输（sever data-transfer）盒。</p><h3 id="客户进程"><a href="#客户进程" class="headerlink" title="客户进程"></a>客户进程</h3><p>客户进程进行主动开启（active open）。换言之，它开启连接。它调用socket 函数来创建一个套接字并填充前三个字段。<br>尽管某些实现要求客户进程也调用bind 函数来填充本地套接字，但通常这是由操作系统自动完成的，操作系统为客户选择一个临时端口号<br>最终close 函数被调用以销毁套接字。<br>客户流程图与UDP 版本类似，除了客户数据传输（client data-transfer）盒需要为每个特定情况定义。</p><h2 id="套接字接口编程（TCP）"><a href="#套接字接口编程（TCP）" class="headerlink" title="套接字接口编程（TCP）"></a><strong>套接字接口编程（TCP）</strong></h2><p>编写客户和服务器程序来模拟使用TCP的标准回送应用——客户程序发送一个短的字符串给服务器；服务器将相同的字符串回送到客户。在我们这样做之前，需要为客户和服务器数据传输盒提供流程图</p><h3 id="客户和服务器数据传输盒的流程图"><a href="#客户和服务器数据传输盒的流程图" class="headerlink" title="客户和服务器数据传输盒的流程图"></a>客户和服务器数据传输盒的流程图</h3><p><img src="/2020/06/11/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E6%95%99%E7%A8%8B-%E5%A5%97%E6%8E%A5%E5%AD%97/%E5%AE%A2%E6%88%B7%E5%92%8C%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%95%B0%E6%8D%AE%E4%BC%A0%E8%BE%93%E7%9B%92%E7%9A%84%E6%B5%81%E7%A8%8B%E5%9B%BE.JPG" alt="图4，客户和服务器数据传输盒的流程图"><br>（发送消息和回送消息）对于发送和回送短的字符这个特定的情况，因为待发送的字符串很短（小于几个单词），我们可以在客户端调用send函数一次完成。<br>然而，TCP 并不保证把整个报文在一个报文段内发送。因此，我们需要在服务器端调用一组recv（在一个循环内）来接收整个报文并将它们收集到缓冲区内，从而能一次性发送回去。<br>当服务器向客户发送回送报文时，它也可能使用多个报文段，这意味着客户的recv 程序需要调用多少次就会被调用多少次。</p><h3 id="缓冲区设置"><a href="#缓冲区设置" class="headerlink" title="缓冲区设置"></a>缓冲区设置</h3><p>另一个有待解决的问题是设置缓冲区，缓冲区用于在每个站点接收数据。</p><ul><li>我们<strong>需要控制接收的字节数以及下一个数据块存储的位置。</strong></li><li>如图所示，程序设置了一些变量进行控制。</li><li>在每次迭代中，<code>指针（ptr）</code>移动指向下一个要接收的字节，<code>接收字节的长度（len）</code>呈增长趋势并且<code>待接收的最大字节数（maxLen）</code>呈减少趋势。</li></ul><p><img src="/2020/06/11/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E6%95%99%E7%A8%8B-%E5%A5%97%E6%8E%A5%E5%AD%97/%E7%94%A8%E4%BA%8E%E6%8E%A5%E6%94%B6%E7%9A%84%E7%BC%93%E5%86%B2%E5%8C%BA.JPG" alt="图5，用于接收的缓冲区"></p><h3 id="回送服务器程序"><a href="#回送服务器程序" class="headerlink" title="回送服务器程序"></a><strong>回送服务器程序</strong></h3><p>程序遵循迭代TCP通信流程图。<br>第 6 行到第16 行声明并定义了变量。<br>第18 行到第21 行分配内存并且按UDP 情况下所述创建了本地（服务器）套接字地址。<br>第23 行到第27 行创建了监听套接字。第29 行到第33 行将监听套接字绑定到第18 行到第21 行创建的服务器套接字地址上。<br>第35 行到第39 行是TCP 通信中的新内容。调用 listen 函数让操作系统完成连接建立阶段并将客户置入等待列表。<br>第44 行到第48 行调用accept 函数来移除等待列表中的第一个客户并开始为其服务。如果在等待列表中没有客户，那么这个函数处于阻塞状态。<br>第50 行到第56 行对图2-63 中描述的数据传输部分进行编码。最大缓冲区大小与回送字符串长度都和图5中所示相同。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//回送服务器程序</span></span><br><span class="line"><span class="meta"># <span class="meta-keyword">include</span><span class="meta-string">"headerFiles.h"</span>  <span class="comment">//也就是我上面写的那些头文件的集合</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//声明并定义</span></span><br><span class="line"><span class="keyword">int</span> ls;                                        <span class="comment">//监听套接字描述符（引用）</span></span><br><span class="line"><span class="keyword">int</span> s;                                         <span class="comment">//套接字描述符（引用）</span></span><br><span class="line"><span class="keyword">char</span> buffer[<span class="number">256</span>];                              <span class="comment">//数据缓冲区</span></span><br><span class="line"><span class="keyword">char</span> *ptr=buffer;                              <span class="comment">//数据缓冲区</span></span><br><span class="line"><span class="keyword">int</span> len=<span class="number">0</span>;                                     <span class="comment">//等待接收或者发送的字节数</span></span><br><span class="line"><span class="keyword">int</span> maxLen=<span class="keyword">sizeof</span>(buffer);                     <span class="comment">//最大接收字节数</span></span><br><span class="line"><span class="keyword">int</span> n;                                         <span class="comment">//每次调用receive接收的字节数</span></span><br><span class="line"><span class="keyword">int</span> waitSize=<span class="number">16</span>;                               <span class="comment">//等待客户数量</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">sockaddr_in</span> <span class="title">servAddr</span>;</span>                   <span class="comment">//服务器地址</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">sockaddr_in</span> <span class="title">clntAddr</span>;</span>                   <span class="comment">//客户地址</span></span><br><span class="line"><span class="keyword">int</span> clntAddrLen;                               <span class="comment">//客户地址长度</span></span><br><span class="line"><span class="comment">//创建本地（服务器）套接字地址</span></span><br><span class="line"><span class="built_in">memset</span>(&amp;servAddr,<span class="number">0</span>,sieof(servAddr));</span><br><span class="line">servAddr.sin_family=AF_INET;</span><br><span class="line">servAddr.sin_addr.s_addr=htonl(INADDR_ANY);     <span class="comment">//默认IP地址</span></span><br><span class="line">servAddr.sin_port=htonl(SERV_PORT);             <span class="comment">//默认端口</span></span><br><span class="line"><span class="comment">//创建监听套接字</span></span><br><span class="line"><span class="keyword">if</span>(ls=socket(PF_INET,SOCK_STREAM,<span class="number">0</span>)&lt;<span class="number">0</span>)           <span class="comment">//PF_INET族，SOCK_STREAM指套接字类型（tcp）</span></span><br><span class="line">&#123;</span><br><span class="line">perror(<span class="string">"Error:Listen socket failed!"</span>);</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//将套接字绑定到本地套接字地址</span></span><br><span class="line"><span class="keyword">if</span>(bind(ls,&amp;servAddr,<span class="keyword">sizeof</span>(servAddr))&lt;<span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">perror(<span class="string">"Error:binding failed!"</span>);</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">&#125; </span><br><span class="line"><span class="comment">//创建连接请求</span></span><br><span class="line"><span class="keyword">if</span>(listen(ls,waitSize)&lt;<span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">perror(<span class="string">"Error:listening failed!"</span>);</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//处理连接</span></span><br><span class="line"><span class="keyword">for</span>(;;)       <span class="comment">//永远运行</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//接收来自客户的连接</span></span><br><span class="line"><span class="keyword">if</span>(s=accept(ls,&amp;clntAddr,&amp;clntAddrLen)&lt;<span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">perror(<span class="string">"Error:accepting failed!"</span>);</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//数据传输部分</span></span><br><span class="line"><span class="keyword">while</span>((n=recv(s,ptr,maxLen,<span class="number">0</span>))&gt;<span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">ptr+=n;           <span class="comment">//在缓冲区上移动指针</span></span><br><span class="line">maxLen-=n;        <span class="comment">//调整待接收的最大字节数</span></span><br><span class="line">len+=n;           <span class="comment">//更新已经接收的字节数</span></span><br><span class="line">&#125;</span><br><span class="line">send(s,buffer,len,<span class="number">0</span>); <span class="comment">//发回（回送）所有接收的字节</span></span><br><span class="line"><span class="comment">//关闭套接字</span></span><br><span class="line">close(s);</span><br><span class="line">&#125;<span class="comment">//循环结束</span></span><br><span class="line">&#125;<span class="comment">//回送服务器程序结束</span></span><br></pre></td></tr></table></figure><p>tips:</p><ul><li>在C/C++写网络程序的时候，往往会遇到字节的网络顺序和主机顺序的问题。这是就可能用到htonl(), ntohl(), ntohs()，htons()这4个函数。</li><li>htonl()–”Host to Network Long”</li><li>ntohl()–”Network to Host Long”</li><li>htons()–”Host to Network Short”</li><li>ntohs()–”Network to Host Short”</li></ul><h3 id="回送客户程序"><a href="#回送客户程序" class="headerlink" title="回送客户程序"></a><strong>回送客户程序</strong></h3><p>TCP 的客户程序与UDP 的客户程序非常相似，只有些许不同。</p><ul><li>因为TCP 是面向连接的协议第36 行到第40 行调用connect 函数连接服务器。</li><li>第42 行到第48 行使用图3中的思想完成数据传输。</li><li>按图5所示方式完成接收数据的长度调整和指针移动。</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//回送客户程序</span></span><br><span class="line"><span class="meta"># <span class="meta-keyword">include</span><span class="meta-string">"headerFiles.h"</span>  <span class="comment">//也就是我上面写的那些头文件的集合</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc,<span class="keyword">char</span> *argv[])</span>   <span class="comment">//三个参数之后待检验</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//声明并定义</span></span><br><span class="line"><span class="keyword">int</span> s;                                        <span class="comment">//套接字描述符</span></span><br><span class="line"><span class="keyword">int</span> n;                                         <span class="comment">//每次调用recv接收的字节数</span></span><br><span class="line"><span class="keyword">char</span> servName;                                 <span class="comment">//服务器名</span></span><br><span class="line"><span class="keyword">int</span> servPort;                                  <span class="comment">//服务器名</span></span><br><span class="line"><span class="keyword">char</span> *<span class="built_in">string</span>;                                  <span class="comment">//被回送的字符串</span></span><br><span class="line"><span class="keyword">int</span> len;                                       <span class="comment">//被回送的字符串的长度</span></span><br><span class="line"><span class="keyword">char</span> buffer[<span class="number">256</span>+<span class="number">1</span>];                            <span class="comment">//缓冲区</span></span><br><span class="line"><span class="keyword">char</span> *ptr=buffer;                              <span class="comment">//在缓冲区上移动指针</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">sockaddr_in</span> <span class="title">serverAddr</span>;</span>                   <span class="comment">//服务器套接字地址</span></span><br><span class="line"><span class="comment">//检测并设置参数</span></span><br><span class="line"><span class="keyword">if</span>(argc!=<span class="number">3</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"Error:three arguments are needed!"</span>);</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line">servName=argv[<span class="number">1</span>];</span><br><span class="line">servPort=atoi(argv[<span class="number">2</span>]);</span><br><span class="line"><span class="built_in">string</span>=arg[<span class="number">3</span>];</span><br><span class="line"><span class="comment">//创建远程（服务器）套接字地址</span></span><br><span class="line"><span class="built_in">memset</span>(&amp;serverAddr,<span class="number">0</span>,sieof(serverAddr));</span><br><span class="line">servAddr.sin_family=AF_INET;</span><br><span class="line">inet_pton(AF_INET,servName,&amp;serverAddr.sin_addr); <span class="comment">//服务器IP地址</span></span><br><span class="line">serverAddr.sin_port=htons(SERV_PORT);               <span class="comment">//默认端口</span></span><br><span class="line"><span class="comment">//创建套接字</span></span><br><span class="line"><span class="keyword">if</span>(ls=socket(PF_INET,SOCK_STREAM,<span class="number">0</span>)&lt;<span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">perror(<span class="string">"Error: socket creation failed!"</span>);</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//连接到服务器</span></span><br><span class="line"><span class="keyword">if</span>(connect(sd,(struct sockaddr*)&amp;serverAddr,<span class="keyword">sizeof</span>(serverAddr))&lt;<span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">perror(<span class="string">"Error:connection failed!"</span>);</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//数据传输部分</span></span><br><span class="line">send(s,<span class="built_in">string</span>,<span class="built_in">strlen</span>(<span class="built_in">string</span>),<span class="number">0</span>);</span><br><span class="line"><span class="keyword">while</span>((n=recv(s,ptr,maxLen,<span class="number">0</span>))&gt;<span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">ptr+=n;           <span class="comment">//在缓冲区上移动指针</span></span><br><span class="line">maxLen-=n;        <span class="comment">//调整待接收的最大字节数</span></span><br><span class="line">len+=n;           <span class="comment">//更新已经接收的字节数</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//打印并验证回送的字符串</span></span><br><span class="line">buffer[len]=<span class="string">'\0'</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"Echoed string received:"</span>);</span><br><span class="line"><span class="built_in">fputs</span>(buffer,<span class="built_in">stdout</span>);</span><br><span class="line"><span class="comment">//关闭套接字</span></span><br><span class="line">close(s);</span><br><span class="line"><span class="comment">//停止程序</span></span><br><span class="line"><span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">&#125;<span class="comment">//回送客户程序结束</span></span><br></pre></td></tr></table></figure><h2 id="Linux下的socket-函数"><a href="#Linux下的socket-函数" class="headerlink" title="Linux下的socket()函数"></a><strong>Linux下的socket()函数</strong></h2><p>inux中的一切都是文件，每个文件都有一个<code>整数类型的文件描述符</code>；<br>socket也是一个文件，也有文件描述符。使用socket()函数创建套接字以后，返回值就是一个 <strong>int类型的文件描述符</strong>。<br>在 Linux 下使用 &lt;sys/socket.h&gt; 头文件中 socket()函数来创建套接字，原型为：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">socket</span><span class="params">(<span class="keyword">int</span> af, <span class="keyword">int</span> type, <span class="keyword">int</span> protocol)</span></span>;</span><br></pre></td></tr></table></figure><p>1) af 为<code>地址族（Address Family）</code>，也就是 IP 地址类型，常用的有 AF_INET 和 AF_INET6。</p><ul><li>AF 是“Address Family”的简写，INET是“Inetnet”的简写。</li><li>AF_INET 表示 IPv4 地址，例如 127.0.0.1；</li><li>AF_INET6 表示 IPv6 地址，例如 1030::C9B4:FF12:48AA:1A2B。</li><li>也可以使用 PF 前缀，PF 是“Protocol Family”的简写，它和 AF 是一样的。例如，PF_INET 等价于 AF_INET，PF_INET6 等价于 AF_INET6。</li></ul><blockquote><p>需要记住127.0.0.1，它是一个特殊IP地址，表示本机地址</p></blockquote><p>2) type 为数据传输方式/套接字类型，</p><ul><li>常用的有 SOCK_STREAM（流格式套接字/面向连接的套接字） </li><li>SOCK_DGRAM（数据报套接字/无连接的套接字）</li></ul><p>3) protocol 表示传输协议，常用的有 IPPROTO_TCP 和 IPPTOTO_UDP，分别表示 TCP 传输协议和 UDP 传输协议。<br>有了地址类型和数据传输方式，还不足以决定采用哪种协议吗？为什么还需要第三个参数呢？</p><p>正如大家所想，一般情况下有了 af 和 type 两个参数就可以创建套接字了，操作系统会自动推演出协议类型，除非遇到这样的情况：有两种不同的协议支持同一种地址类型和数据传输类型。如果我们不指明使用哪种协议，操作系统是没办法自动推演的。</p><p>本教程使用 IPv4 地址，参数 af 的值为 PF_INET。如果使用 SOCK_STREAM 传输数据，那么满足这两个条件的协议只有 TCP，因此可以这样来调用 socket() 函数：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> tcp_socket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);  <span class="comment">//IPPROTO_TCP表示TCP协议</span></span><br></pre></td></tr></table></figure><p>这种套接字称为 TCP 套接字。</p><p>如果使用 SOCK_DGRAM 传输方式，那么满足这两个条件的协议只有 UDP，因此可以这样来调用 socket() 函数：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> udp_socket = socket(AF_INET, SOCK_DGRAM, IPPROTO_UDP);  <span class="comment">//IPPROTO_UDP表示UDP协议</span></span><br></pre></td></tr></table></figure><p>这种套接字称为 UDP 套接字。</p><p>上面两种情况都只有一种协议满足条件，可以将 protocol 的值设为 0，系统会自动推演出应该使用什么协议，如下所示：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> tcp_socket = socket(AF_INET, SOCK_STREAM, <span class="number">0</span>);  <span class="comment">//创建TCP套接字</span></span><br><span class="line"><span class="keyword">int</span> udp_socket = socket(AF_INET, SOCK_DGRAM, <span class="number">0</span>);  <span class="comment">//创建UDP套接字</span></span><br></pre></td></tr></table></figure><h2 id="Windows下的socket-函数"><a href="#Windows下的socket-函数" class="headerlink" title="Windows下的socket()函数"></a><strong>Windows下的socket()函数</strong></h2><p>Windows 会区分 socket 和普通文件，它把 socket 当做一个网络连接来对待，调用 socket() 以后，返回值是 SOCKET 类型，用来表示一个套接字。<br>Windows 下也使用 socket() 函数来创建套接字，原型为：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">SOCKET <span class="title">socket</span><span class="params">(<span class="keyword">int</span> af, <span class="keyword">int</span> type, <span class="keyword">int</span> protocol)</span></span>;</span><br></pre></td></tr></table></figure><p>除了返回值类型不同，其他都是相同的。Windows 不把套接字作为普通文件对待，而是返回 SOCKET 类型的句柄。</p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p>计算机网络-自顶向下方法<br><a href="http://c.biancheng.net/view/2344.html">bind()和connect()函数：绑定套接字并建立连接</a><br><a href="http://c.biancheng.net/view/2345.html">listen()和accept()函数：让套接字进入监听状态并响应客户端请求</a><br><a href="http://c.biancheng.net/view/2346.html">send()/recv()和write()/read()：发送数据和接收数据</a><br><a href="https://www.cnblogs.com/eping/archive/2009/12/12/1622579.html">TCP协议的无消息边界问题</a><br><a href="http://c.biancheng.net/view/2350.html">TCP协议的粘包问题（数据的无边界性）</a><br><a href="https://blog.csdn.net/hherima/article/details/42921149">TCP网络传输“粘包”问题，经典解决（附代码）</a><br><a href="http://c.biancheng.net/view/2131.html">socket()函数用法详解：创建套接字</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;套接字的数据结构&quot;&gt;&lt;a href=&quot;#套接字的数据结构&quot; class=&quot;headerlink&quot; title=&quot;套接字的数据结构&quot;&gt;&lt;/a&gt;套接字的数据结构&lt;/h2&gt;&lt;p&gt;C 语言将套接字定义为一个结构（struct）。套接字结构由五个字段组成；每个套接字地址是一个由五部分构成的结构。&lt;/p&gt;
    
    </summary>
    
    
      <category term="计算机网络" scheme="https://stemha.github.io/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/"/>
    
    
      <category term="TCP" scheme="https://stemha.github.io/tags/TCP/"/>
    
      <category term="套接字" scheme="https://stemha.github.io/tags/%E5%A5%97%E6%8E%A5%E5%AD%97/"/>
    
  </entry>
  
  <entry>
    <title>计算机网络教程-TCP状态转换</title>
    <link href="https://stemha.github.io/2020/06/10/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E6%95%99%E7%A8%8B-TCP%E7%8A%B6%E6%80%81%E8%BD%AC%E6%8D%A2/"/>
    <id>https://stemha.github.io/2020/06/10/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E6%95%99%E7%A8%8B-TCP%E7%8A%B6%E6%80%81%E8%BD%AC%E6%8D%A2/</id>
    <published>2020-06-10T15:24:02.000Z</published>
    <updated>2020-08-10T04:19:21.708Z</updated>
    
    <content type="html"><![CDATA[<h2 id="TCP状态表"><a href="#TCP状态表" class="headerlink" title="TCP状态表"></a>TCP状态表</h2><table><thead><tr><th align="left">状态</th><th align="left">说明</th><th align="left">状态</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left">CLOSED</td><td align="left">没有连接存在</td><td align="left">FIN-WAIT-2</td><td align="left">首个FIN 的ACK 已被接收；等待第二个FIN</td></tr><tr><td align="left">LISTEN</td><td align="left">接收到被动打开；等待SYN</td><td align="left"><code>CLOSE-WAIT</code></td><td align="left">首个FIN 被接收，ACK 被发送；等待应用关闭</td></tr><tr><td align="left">SYN-SENT</td><td align="left">SYN已被发送；等待ACK</td><td align="left"><code>TIME-WAIT</code></td><td align="left">第二个FIN 被接收，ACK 被发送；等待2MSL 超时</td></tr><tr><td align="left">SYN-RCVD</td><td align="left">SYN + ACK 已被发送；等待ACK</td><td align="left">LAST-ACK</td><td align="left">第二个FIN 被发送；等待ACK</td></tr><tr><td align="left"><code>ESTABLISHED</code></td><td align="left">连接建立；数据传输正在进行</td><td align="left">CLOSING</td><td align="left">双端决定同时关闭</td></tr><tr><td align="left">FIN-WAIT-1</td><td align="left">首个FIN 已被发送；等待ACK</td><td align="left"></td><td align="left"></td></tr><tr><td align="left"><a id="more"></a></td><td align="left"></td><td align="left"></td><td align="left"></td></tr></tbody></table><h2 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h2><p><img src="/2020/06/10/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E6%95%99%E7%A8%8B-TCP%E7%8A%B6%E6%80%81%E8%BD%AC%E6%8D%A2/TCP%E7%8A%B6%E6%80%81%E8%BD%AC%E6%8D%A2.JPG" alt="TCP状态转换"><br>客户进程向它的TCP 发出主动打开命令来请求连接到特定套接字地址。</p><ul><li>TCP 发送一个SYN 段并转移到<code>SYN-SENT</code> 状态。</li><li>在收到SYN + ACK 段后，TCP 发送了一个ACK 段并且进入<code>ESTABLISHED</code>状态。</li><li>数据被传输，可能是双向的，并且被确认。</li></ul><p>当客户进程没有数据要发送了，它发出称为主动关闭的命令。</p><ul><li>TCP 发送FIN 段并进入<code>FIN-WAIT-1</code>状态。</li><li>当它接收到ACK 段，它进入<code>FIN-WAIT-2</code>状态。</li><li>当客户接收到FIN 段时，它发送一个ACK 段并进入<code>TIME-WAIT</code>状态。</li><li>客户保持这种状态2MSL秒（TCP 计时器）。</li><li>当相应计时器超时，客户进入<code>CLOSED</code>状态。</li></ul><p>服务器进程发出被动打开命令。</p><ul><li>服务器TCP 进入<code>LISTEN</code> 状态并且保持这种状态直到它接收到一个SYN 段。</li><li>TCP 之后发送一个SYN + ACK 段并且进入<code>SYN-RCVD</code> 状态，等待客户发送ACK段。</li><li>在接收到ACK 段后，TCP 进入<code>ESTABLISHED</code> 状态，这就开始了数据传输。</li></ul><p>TCP 保持这种状态直到它接收到一个来自客户的FIN 段，这表示没有其他数据要被交换且连接可以被关闭。</p><ul><li>一旦服务器接收到FIN 段，那么它就向客户发送带有虚拟EOF 标记的排队中所有的数据，这意味连接必须被关闭。</li><li>它发送一个ACK 段且进入<code>CLOSE-WAIT</code>状态，但是推迟确认来自客户的FIN 段，直到它接收到来自进程的被动关闭命令。</li><li>在接收到被动关闭命令后，服务器向客户发送FIN 段并进入<code>LAST-ACK</code>状态，等待最终ACK。</li><li>当ACK 段从客户发送后被服务器接收，服务器进入<code>CLOSE</code> 状态。</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;TCP状态表&quot;&gt;&lt;a href=&quot;#TCP状态表&quot; class=&quot;headerlink&quot; title=&quot;TCP状态表&quot;&gt;&lt;/a&gt;TCP状态表&lt;/h2&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&quot;left&quot;&gt;状态&lt;/th&gt;
&lt;th align=&quot;left&quot;&gt;说明&lt;/th&gt;
&lt;th align=&quot;left&quot;&gt;状态&lt;/th&gt;
&lt;th align=&quot;left&quot;&gt;说明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td align=&quot;left&quot;&gt;CLOSED&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;没有连接存在&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;FIN-WAIT-2&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;首个FIN 的ACK 已被接收；等待第二个FIN&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;left&quot;&gt;LISTEN&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;接收到被动打开；等待SYN&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;&lt;code&gt;CLOSE-WAIT&lt;/code&gt;&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;首个FIN 被接收，ACK 被发送；等待应用关闭&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;left&quot;&gt;SYN-SENT&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;SYN已被发送；等待ACK&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;&lt;code&gt;TIME-WAIT&lt;/code&gt;&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;第二个FIN 被接收，ACK 被发送；等待2MSL 超时&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;left&quot;&gt;SYN-RCVD&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;SYN + ACK 已被发送；等待ACK&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;LAST-ACK&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;第二个FIN 被发送；等待ACK&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;left&quot;&gt;&lt;code&gt;ESTABLISHED&lt;/code&gt;&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;连接建立；数据传输正在进行&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;CLOSING&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;双端决定同时关闭&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;left&quot;&gt;FIN-WAIT-1&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;首个FIN 已被发送；等待ACK&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;left&quot;&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
    
    </summary>
    
    
      <category term="计算机网络" scheme="https://stemha.github.io/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/"/>
    
    
      <category term="传输层" scheme="https://stemha.github.io/tags/%E4%BC%A0%E8%BE%93%E5%B1%82/"/>
    
      <category term="TCP" scheme="https://stemha.github.io/tags/TCP/"/>
    
  </entry>
  
  <entry>
    <title>计算机网络教程-HTTP协议</title>
    <link href="https://stemha.github.io/2020/06/09/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E6%95%99%E7%A8%8B-HTTP%E5%8D%8F%E8%AE%AE/"/>
    <id>https://stemha.github.io/2020/06/09/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E6%95%99%E7%A8%8B-HTTP%E5%8D%8F%E8%AE%AE/</id>
    <published>2020-06-09T12:23:53.000Z</published>
    <updated>2020-08-10T04:19:21.699Z</updated>
    
    <content type="html"><![CDATA[<h2 id="HTTP（超文本传输协议）"><a href="#HTTP（超文本传输协议）" class="headerlink" title="HTTP（超文本传输协议）"></a><strong>HTTP（超文本传输协议）</strong></h2><p><code>超文本传输协议（HyperText Transfer Protocol，HTTP）</code>是一种用来定义客户服务器程序如何编写和如何从万维网获取网页的协议。</p><ul><li>一个HTTP 客户发送一个请求；HTTP 服务器返回响应。</li><li>服务器使用80 端口号；客户使用一个临时端口号。</li><li>HTTP 使用TCP 服务。这意味着，在客户和服务器进行任何事务之前，它们之间必须建立连接。</li><li>在事务之后，连接应当终止。然而，客户和服务器不需要担心交换报文中的差错以及报文的丢失，因为TCP 是可靠的而且将处理这个问题。<a id="more"></a></li></ul><h2 id="非持续与持续连接"><a href="#非持续与持续连接" class="headerlink" title="非持续与持续连接"></a><strong>非持续与持续连接</strong></h2><p>嵌入到网页中的超文本概念可能需要多个请求和应答。</p><ul><li>如果网页，这个被获取的对象，位于不同的服务器，那么我们没有其他选择只能每获取一个对象就要创建一个新的TCP 连接。</li><li>然而，如果某些对象是位于同一台服务器的，我们可以有两种选择：<ul><li>一是每次使用一个新的TCP 连接获取一个对象。<code>非持续连接（nonpersistent connection）</code></li><li>二是创建一个TCP 连接获取全部对象。<code>持续连接（persistent connection）</code></li></ul></li><li>在HTTP1.1 版之前指定的是非持续连接，持续连接在1.1 版中是默认的，但是可以被用户改变。</li></ul><h3 id="非持续连接"><a href="#非持续连接" class="headerlink" title="非持续连接"></a><strong>非持续连接</strong></h3><p>在非持续连接中，一个TCP 连接被每一组请求/应答所创建。下面是这个策略的步骤：<br>1．客户开启一个TCP 连接并发送请求。<br>2．服务器发送响应并关闭连接。<br>3．客户读取数据直到它遇到了文件结束标记，然后关闭连接。</p><p>在这种策略中，如果文件包含了N 个位于不同文件的图片连接（全都位于同一台服务器），那么必须开启和关闭连接N+1 (?)次。非持续策略给服务器带来了高额开销，因为每次连接被开启时服器都需要N+1个不同的缓冲区。</p><p>下图展示了一个非持续连接的例子。客户需要访问一个包含图片链接的文件。文本文件和图片位于同一台服务器上。这里我们需要两个连接。对于每一个连接，TCP 需要至少三个握手报文来建立连接，但是请求可以和第三个报文一起发送。在连接建立之后，请求对象可以被发送。在接收到一个对象之后，需要另外三次握手报文来结束连接</p><p><img src="/2020/06/09/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E6%95%99%E7%A8%8B-HTTP%E5%8D%8F%E8%AE%AE/%E9%9D%9E%E6%8C%81%E7%BB%AD%E8%BF%9E%E6%8E%A5%E7%A4%BA%E4%BE%8B-%E4%B8%A4%E4%B8%AA%E6%96%87%E4%BB%B6%E4%BD%8D%E4%BA%8E%E5%90%8C%E4%B8%80%E5%8F%B0%E6%9C%8D%E5%8A%A1%E5%99%A8%E4%B8%8A%E9%9D%A2.JPG" alt="图1，非持续连接示例-两个文件位于同一台服务器上面"></p><h3 id="持续连接"><a href="#持续连接" class="headerlink" title="持续连接"></a><strong>持续连接</strong></h3><ul><li>在持续连接中服务器在<strong>发送一个响应后，为响应更多的请求而将连接置为打开状态</strong>。</li><li>服务器可以在客户的请求下或者在超时情况下将连接关闭。</li><li><strong>文档发送方（通常是服务器）通常在每次响应中发送数据长度</strong>。然而，偶尔情况下发送方不知道数据的长度。这是创建动态文档或活动文档时的情形。在这种情形下，服务器通知客户长度未知并在发送数据后关闭连接，因此客户知道数据已接收完毕。</li><li>通过使用持续连接，可以节省时间和资源。每个站点只需要为连接设定一组缓冲区和变量。同时节省了连接建立和终止的往返时间。</li></ul><p><img src="/2020/06/09/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E6%95%99%E7%A8%8B-HTTP%E5%8D%8F%E8%AE%AE/%E6%8C%81%E7%BB%AD%E8%BF%9E%E6%8E%A5%E7%A4%BA%E4%BE%8B-%E4%B8%A4%E4%B8%AA%E6%96%87%E4%BB%B6%E4%BD%8D%E4%BA%8E%E5%90%8C%E4%B8%80%E5%8F%B0%E6%9C%8D%E5%8A%A1%E5%99%A8%E4%B8%8A%E9%9D%A2.JPG" alt="图2，持续连接示例-两个文件位于同一台服务器上面"></p><h2 id="报文格式"><a href="#报文格式" class="headerlink" title="报文格式"></a><strong>报文格式</strong></h2><p>HTTP 协议定义了请求报文和响应报文的格式。每一种报文由四个部分组成。</p><ul><li><code>请求报文</code>中的第一部分称为请求行；</li><li><code>响应报文</code>的第一部分称为状态行。</li><li>其他三部分在请求报文和响应报文中有相同的名称。然而，这三部分只是名称相似，它们可能含有不同的内容。</li></ul><p><img src="/2020/06/09/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E6%95%99%E7%A8%8B-HTTP%E5%8D%8F%E8%AE%AE/%E8%AF%B7%E6%B1%82%E6%8A%A5%E6%96%87%E5%92%8C%E5%93%8D%E5%BA%94%E6%8A%A5%E6%96%87%E6%A0%BC%E5%BC%8F.JPG" alt="图3，请求报文和响应报文格式"></p><h3 id="请求报文"><a href="#请求报文" class="headerlink" title="请求报文"></a><strong>请求报文</strong></h3><ul><li>请求报文的第一行称为请求行。如图所示，这一行有三部分由空格分隔开并且被两个字符（回车和换行）终止。这些字段称为方法、URL 和版本。</li><li>第一个字段：方法字段定义了请求类型。如下所示，在HTTP1.1 版中定义了若干种方法。</li><li>第二个字段：URL，在本章的前面部分已经讨论过了。它定义了相关网页的地址和名称。</li><li>第三个字段：版本，给出了协议的版本，HTTP 最常用的版本是1.1。</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">HTTP请求报文中的方法</span><br><span class="line">--------------------------------------------------------------------------------------------</span><br><span class="line">GET     向服务器请求文档。</span><br><span class="line">绝大多数情况下，客户使用GET 方法发送一个请求。在这种情况下，报文的主体是空的。</span><br><span class="line">--------------------------------------------------------------------------------------------              </span><br><span class="line">HEAD    请求关于文档的信息，而不是文档本身。</span><br><span class="line">当客户仅需要从服务器获得关于网页的信息，如上次修改的时间，这时使用HEAD 方法。</span><br><span class="line">它也可以用来检测URL 的有效性。这种情况下的响应报文只有头部；主体是空的。 </span><br><span class="line">--------------------------------------------------------------------------------------------</span><br><span class="line">PUT     从客户端向服务器发送文档。</span><br><span class="line">PUT 方法与GET 方法是相反的；它允许客户将一个新的页面发送到服务器上（如果允许的话）。           </span><br><span class="line">--------------------------------------------------------------------------------------------</span><br><span class="line">POST    从客户端向服务器发送一些信息。</span><br><span class="line">POST 方法与PUT 方法类似，但是它用来发送一些信息到服务器上，这些信息被加入网页或用来修改网页</span><br><span class="line">--------------------------------------------------------------------------------------------</span><br><span class="line">TRACE   回送输入的请求。用来调试；客户要求服务器回送请求来检查服务器是否正在获得请求。</span><br><span class="line">DELETE  删除网页。如果客户获得许可，DELETE 方法允许客户删除一个服务器上的网页。</span><br><span class="line">CONNECT 预留。原先作为预留方法；后文会讨论到，这个方法可能被代理服务器使用。          </span><br><span class="line">OPTIONS 询问有关可用的选项。允许客户询问网页属性。</span><br></pre></td></tr></table></figure><ul><li>在请求行之后我们可以有一个或多个<code>请求头部（request header）</code>行。</li><li>每一个头部行都从客户端向服务器发送额外的信息。<ul><li>例如，客户可以请求以某种特定格式发送文档。每个头部行有头部名字、一个冒号、一个空格和一个头部值（见图3）。下面列出了一些请求中常用的头部名字。</li></ul></li><li>值字段定义了与每个头部名字相关的值。</li><li>值列表可以在相应的RFC 中查找到。</li><li>主体可以出现在请求报文中。通常，当使用POST 或PUT 方法时，它包含要发送的评论或要发布到网站上的文档。</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">请求头部名称</span><br><span class="line">-----------------------------------------------------------</span><br><span class="line">User-agent            标识客户端程序 </span><br><span class="line">Accept                给出客户端能够接受的媒体格式 </span><br><span class="line">Accept-charset        给出客户端可以处理的字符集 </span><br><span class="line">Accept-encoding       给出客户端可以处理的编码方案 </span><br><span class="line">Accept-language       给出客户端可以接受的语言</span><br><span class="line">Authorization         给出客户端有哪些许可 </span><br><span class="line">Host                  给出主机及客户端的端口号</span><br><span class="line">Date                  给出当前日期</span><br><span class="line">Upgrade               确定首选的通信协议</span><br><span class="line">Cookie                返回cookie 给服务器（稍后解释）</span><br><span class="line">If-Modified-Since     如果文档在指定的日期之后被更新，则发送文档</span><br></pre></td></tr></table></figure><h3 id="响应报文"><a href="#响应报文" class="headerlink" title="响应报文"></a><strong>响应报文</strong></h3><p>图3给出了响应报文的格式。响应报文包含<code>状态行</code>、<code>头部行</code>并且有时包含<code>主体</code>。</p><ul><li>响应报文的第一行称为<code>状态行</code>。这一行有三个字段，它们由空格分隔开并且被两个字符（回车和换行）终止。</li><li>第一个字段：<code>版本字段</code>，定义了HTTP 协议的版本，通常为1.1。</li><li>第二个字段：<code>状态码字段</code>,定义了请求的状态。<ul><li>它包含三个数字。在100 范围内的代码只代表一个报告</li><li>在200 范围内的代码表示这是一个成功的请求。</li><li>在300范围内的代码表示把客户端重定向到另一个URL</li><li>在400 范围内的代码表示在客户端发生错误。</li><li>最后，在500 范围内的代码表示错误发生在服务器端。</li></ul></li><li>第二个字段：<code>状态短语字段</code>，以文本格式解释了状态码。</li></ul><p>在状态行之后，我们可以有一个或多个<code>响应头部行</code>。每一个头部行都从服务器向客户端发送额外的信息。例如，发送方可以发送关于文档的额外信息。<br>每个头部行都有一个头部名称、一个冒号、一个空格和一个头部值。<br>下面列出了一些常用的头部名称。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">响应头部名称</span><br><span class="line">------------------------------------------------------</span><br><span class="line">Date                 给出当前日期 </span><br><span class="line">Upgrade              确定首选的通信协议 </span><br><span class="line">Server               给出服务器信息 </span><br><span class="line">Set-Cookie           服务器要求客户存储</span><br><span class="line">Content-Encoding     指定编码方案 </span><br><span class="line">Content-Language     指定语言</span><br><span class="line">Content-Length       给出文档长度</span><br><span class="line">Content-Type         指定媒体类型</span><br><span class="line">Location             指明新建或移动后文档的位置</span><br><span class="line">cookie Accept-Ranges 服务器将会接收的被请求的字节范围</span><br><span class="line">Last-modified        给出上次改变的日期和时间</span><br></pre></td></tr></table></figure><p>主体包含了从服务器发送给客户的文档。除非响应是一个错误报文，否则主体是存在的。</p><h2 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h2><h3 id="客户要向服务器发送一个网页"><a href="#客户要向服务器发送一个网页" class="headerlink" title="客户要向服务器发送一个网页"></a><strong>客户要向服务器发送一个网页</strong></h3><p>在这个例子中，客户要向服务器发送一个网页。我们使用PUT 方法。</p><ul><li>请求行给出方法（PUT）、URL 以及HTTP 版本（1.1）。其头部有四行。请求主体包含要发送的网页。</li><li>响应报文包含状态行和四个头部行。被创建的文档是一个CGI 文档，它包含在响应报文的主体中</li></ul><p><img src="/2020/06/09/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E6%95%99%E7%A8%8B-HTTP%E5%8D%8F%E8%AE%AE/%E5%AE%A2%E6%88%B7%E8%A6%81%E5%90%91%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%8F%91%E9%80%81%E4%B8%80%E4%B8%AA%E7%BD%91%E9%A1%B5.JPG" alt="客户要向服务器发送一个网页"></p><h3 id="客户要向服务器获取一个文档"><a href="#客户要向服务器获取一个文档" class="headerlink" title="客户要向服务器获取一个文档"></a><strong>客户要向服务器获取一个文档</strong></h3><p>使用GET 方法来获取一个路径为/usr/bin/image1 的图片。</p><ul><li>请求行给出了使用的方法（GET）、URL 以及HTTP 版本（1.1）。</li><li>头部有两行，它们表示客户可以接收GIF 或JPEG 格式的图片。<strong>请求是没有主体的。</strong></li><li>响应报文包含了状态行以及四个头部行。头部行定义了日期、服务器、内容编码（MIME 版本，在电子邮件部分将会描述）以及文档长度。文档主体在头部之后。</li></ul><p><img src="/2020/06/09/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E6%95%99%E7%A8%8B-HTTP%E5%8D%8F%E8%AE%AE/%E5%AE%A2%E6%88%B7%E8%A6%81%E5%90%91%E6%9C%8D%E5%8A%A1%E5%99%A8%E8%8E%B7%E5%8F%96%E4%B8%80%E4%B8%AA%E6%96%87%E6%A1%A3.JPG" alt="客户要向服务器获取一个文档"></p><h3 id="条件请求"><a href="#条件请求" class="headerlink" title="条件请求"></a><strong>条件请求</strong></h3><p>客户可以在请求中加入条件。在这种情况下，如果条件满足，服务器将会发送被请求的网页或者通知用户。</p><ul><li>客户加入的最常见的一种条件是网页被修改的时间和日期。</li><li>客户可以在发送请求时附带头部行If-Modified-Since，这样来告知服务器客户只需要在指定日期之后更新的页面。</li></ul><p>一个客户在请求中加入了修改日期和时间的条件。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">GET http:&#x2F;&#x2F;www.commonServer.com&#x2F;information&#x2F;file1 HTTP&#x2F;1.1 请求行</span><br><span class="line">If-Modified-Since: Thu, Sept 04 00:00:00 GMT               头部行</span><br><span class="line">                                                           空行</span><br></pre></td></tr></table></figure><p>响应中的状态行表示在指定日期之后文档没有修改。所以响应报文的主体是空的。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">HTTP&#x2F;1.1 304 Not Modified                                  状态行</span><br><span class="line">Date: Sat, Sept 06 08 16:22:46 GMT                         头部第一行</span><br><span class="line">Server: commonServer.com                                   头部第二行</span><br><span class="line">                                                           空行</span><br><span class="line">(Empty Body)                                               空主体</span><br></pre></td></tr></table></figure><h2 id="HTTP-安全"><a href="#HTTP-安全" class="headerlink" title="HTTP 安全"></a><strong>HTTP 安全</strong></h2><p>HTTP 本质上并不提供安全。然而，，HTTP 可以在安全套接层（SSL）上运行。在这种情况下，HTTP 称为HTTPS。<br>HTTPS 提供保密性、客户和服务器鉴别，以及数据完整性。<br>HTTPS 端口号443</p><h2 id="状态码（Status-Code）"><a href="#状态码（Status-Code）" class="headerlink" title="状态码（Status-Code）"></a><strong>状态码（Status-Code）</strong></h2><p>1xx：表示通知信息，如请求收到了或正在进行处理</p><ul><li><strong>100 Continue：继续，客户端应继续其请求</strong></li><li>101 Switching Protocols 切换协议。服务器根据客户端的请求切换协议。只能切换到更高级的协议，例如，切换到 HTTP 的新版本协议</li></ul><p>2xx：表示成功，如接收或知道了</p><ul><li><strong>200 OK: 请求成功</strong></li></ul><p>3xx：表示重定向，如要完成请求还必须采取进一步的行动</p><ul><li>301 Moved Permanently: 永久移动。请求的资源已被永久的移动到新 URL，返回信息会包括新的 URL，浏览器会自动定向到新 URL。今后任何新的请求都应使用新的 URL 代替</li></ul><p>4xx：表示客户的差错，如请求中有错误的语法或不能完成</p><ul><li><strong>400 Bad Request: 客户端请求的语法错误，服务器无法理解</strong></li><li><strong>401 Unauthorized: 请求要求用户的身份认证</strong></li><li><strong>403 Forbidden</strong>: 服务器理解请求客户端的请求，但是拒绝执行此请求（权限不够）</li><li>404 Not Found: 服务器无法根据客户端的请求找到资源（网页）。通过此代码，网站设计人员可设置 “您所请求的资源无法找到” 的个性页面</li><li><strong>408 Request Timeout:</strong> 服务器等待客户端发送的请求时间过长，超时</li></ul><p>5xx：表示服务器的差错，如服务器失效无法完成请求</p><ul><li><strong>500 Internal Server Error</strong>: 服务器内部错误，无法完成请求</li><li>503 Service Unavailable: 由于超载或系统维护，服务器暂时的无法处理客户端的请求。延时的长度可包含在服务器的 Retry-After 头信息中</li><li>504 Gateway Timeout: 充当网关或代理的服务器，未及时从远端服务器获取请求</li></ul><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p><a href="https://www.runoob.com/http/http-status-codes.html">HTTP状态码-菜鸟教程</a><br><a href="https://www.runoob.com/http/http-tutorial.html">HTTP 教程-菜鸟教程</a><br><a href="https://www.cnblogs.com/williamjie/p/9099940.html">浅谈HTTP中GET、POST用法以及它们的区别 </a><br>计算机网络教程-自顶向下方法</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;HTTP（超文本传输协议）&quot;&gt;&lt;a href=&quot;#HTTP（超文本传输协议）&quot; class=&quot;headerlink&quot; title=&quot;HTTP（超文本传输协议）&quot;&gt;&lt;/a&gt;&lt;strong&gt;HTTP（超文本传输协议）&lt;/strong&gt;&lt;/h2&gt;&lt;p&gt;&lt;code&gt;超文本传输协议（HyperText Transfer Protocol，HTTP）&lt;/code&gt;是一种用来定义客户服务器程序如何编写和如何从万维网获取网页的协议。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;一个HTTP 客户发送一个请求；HTTP 服务器返回响应。&lt;/li&gt;
&lt;li&gt;服务器使用80 端口号；客户使用一个临时端口号。&lt;/li&gt;
&lt;li&gt;HTTP 使用TCP 服务。这意味着，在客户和服务器进行任何事务之前，它们之间必须建立连接。&lt;/li&gt;
&lt;li&gt;在事务之后，连接应当终止。然而，客户和服务器不需要担心交换报文中的差错以及报文的丢失，因为TCP 是可靠的而且将处理这个问题。&lt;/li&gt;&lt;/ul&gt;
    
    </summary>
    
    
      <category term="计算机网络" scheme="https://stemha.github.io/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/"/>
    
    
      <category term="HTTP" scheme="https://stemha.github.io/tags/HTTP/"/>
    
      <category term="应用层" scheme="https://stemha.github.io/tags/%E5%BA%94%E7%94%A8%E5%B1%82/"/>
    
  </entry>
  
  <entry>
    <title>计算机网络教程-传输层协议-TCP(2)</title>
    <link href="https://stemha.github.io/2020/06/09/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E6%95%99%E7%A8%8B-%E4%BC%A0%E8%BE%93%E5%B1%82%E5%8D%8F%E8%AE%AE-TCP-2/"/>
    <id>https://stemha.github.io/2020/06/09/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E6%95%99%E7%A8%8B-%E4%BC%A0%E8%BE%93%E5%B1%82%E5%8D%8F%E8%AE%AE-TCP-2/</id>
    <published>2020-06-08T16:57:26.000Z</published>
    <updated>2020-08-10T04:19:21.712Z</updated>
    
    <content type="html"><![CDATA[<h2 id="TCP-连接"><a href="#TCP-连接" class="headerlink" title="TCP 连接"></a>TCP 连接</h2><p>在 TCP 中，面向连接的传输需要三个过程：连接建立、数据传输和连接终止。<br>在TCP 中的分组称为段（segment）</p><a id="more"></a><h2 id="TCP段"><a href="#TCP段" class="headerlink" title="TCP段"></a><strong>TCP段</strong></h2><h3 id="格式"><a href="#格式" class="headerlink" title="格式"></a>格式</h3><p>段包含20~60字节的头部，接着是来自应用程序的数据。如果没有选项，那么头部是20 字节；如果有选项，最多是60 字节。<br><img src="/2020/06/09/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E6%95%99%E7%A8%8B-%E4%BC%A0%E8%BE%93%E5%B1%82%E5%8D%8F%E8%AE%AE-TCP-2/TCP%E6%AE%B5%E6%A0%BC%E5%BC%8F.JPG" alt="TCP段格式"></p><ul><li><code>源端口地址</code>。这是一个16 位的字段，它定义了在主机中发送该段的应用程序的端口号。这与UDP 头部的源端口地址的作用一样。</li><li><code>目的端口地址</code>。这是一个16 位的字段，它定义了在主机中接收该段的应用程序的端口号。这与UDP 头部的目的端口地址的作用一样。</li><li><code>序号</code>。这个32 位的字段定义了一个数，它分配给段中数据的第一个字节。<ul><li>TCP 是一种字节流传输协议。为了确保连通性，对要发送的每一个字节都进行编号。序号告诉目的端，在这个序列中哪一个字节是该段的第一个字节。</li><li>在连接建立时，每一方都使用随机数生成器产生一个<code>初始序号（initial sequence number，ISN）</code>，通常每一个方向的ISN 都不同。</li></ul></li><li><code>确认号</code>。这个32 位的字段定义了段的接收方期望从对方接收的字节号。如果段的接收方成功地接收了对方发来的字节号x，它就将确认号定义为x + 1.<ul><li>确认和数据可捎带一起发送。</li></ul></li><li><code>头部长度</code>。这个4 位的字段指明了TCP 头部中共有多少个4字节长的字。<ul><li>头部的长度可以在20 字节到60 字节之间。因此，这个字段的值在5（5 × 4 = 20）到15（15 × 4 = 60）之间。</li></ul></li><li><code>窗口大小</code>。这个字段定义<strong>对方必须维持的窗口的大小（以字节为单位）</strong>。<ul><li>注意，这个字段的长度是16 位，这意味着窗口的最大长度是65 535 字节。这个值通常称为<code>接收窗口（rwnd）</code>。</li><li>它由接收方确定。此时，发送方必须服从接收端的支配。</li></ul></li><li><code>紧急指示符</code>。这个16 位的字段只有当紧急标志置位时才有效，这个段包含了紧急数据。<ul><li>它定义了一个数，将此数加到序号上就得出此段数据部分中最后一个紧急字节。</li></ul></li><li><code>选项</code>。在TCP 头部中可以有多达40 个字节的可选信息。</li></ul><h3 id="控制字段"><a href="#控制字段" class="headerlink" title="控制字段"></a>控制字段</h3><p>这个字段定义了6 种不同的控制位或标记，如图所示。</p><ul><li>在同一时间可以设置一位或多位。</li><li>这些位用在TCP 的流量控制、连接建立和终止、连接失败和数据传送方式等方面。<br><img src="/2020/06/09/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E6%95%99%E7%A8%8B-%E4%BC%A0%E8%BE%93%E5%B1%82%E5%8D%8F%E8%AE%AE-TCP-2/TCP%E6%AE%B5%E6%8E%A7%E5%88%B6%E5%AD%97%E6%AE%B5.JPG" alt="TCP段控制字段"></li></ul><h3 id="校验和。"><a href="#校验和。" class="headerlink" title="校验和。"></a>校验和。</h3><p>这个16 位的字段包含了校验和。TCP 校验和的计算过程与前面描述的UDP 所采用的计算过程相同。<br>但是，在UDP 数据报中校验和是可选的。</p><ul><li>然而，对TCP 来说，将校验和包含进去是强制的。</li><li>起相同作用的伪头部被加到段上。对TCP 伪头部，协议字段的值是6。如图所示。</li><li>在 TCP 中使用校验和是强制的。<br><img src="/2020/06/09/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E6%95%99%E7%A8%8B-%E4%BC%A0%E8%BE%93%E5%B1%82%E5%8D%8F%E8%AE%AE-TCP-2/%E5%8A%A0%E5%88%B0TCP%E6%95%B0%E6%8D%AE%E6%8A%A5%E4%B8%8A%E7%9A%84%E4%BC%AA%E5%A4%B4%E9%83%A8.JPG" alt="加到TCP 数据报上的伪头部"></li></ul><h2 id="连接建立（三次握手）"><a href="#连接建立（三次握手）" class="headerlink" title="连接建立（三次握手）"></a><strong>连接建立（三次握手）</strong></h2><p>TCP 以全双工方式传输数据。当两个机器中的两个TCP 建立连接后，它们就能够同时向对方发送段。这就表示，在传输数据之前，每一方都必须对通信进行初始化，并得到对方的认可。<br><code>三次握手（three-way handshaking）</code>：<br>客户的应用程序想要与另一个称为服务器的应用程序使用TCP 作为传输层协议建立连接。</p><p>该过程从服务器开始。服务器程序告诉它的TCP，它已准备好接收一个连接。这就称为<code>被动打开（passive open）</code>。<br>虽然TCP 已经准备好接收从世界上任何一个机器发来的连接，但它自己并不能完成这个连接。<br>客户程序发出请求进行<code>主动打开（active open）</code>。想要与服务器进行连接的客户告诉它的TCP，它需要连接到特定的服务器。</p><p>少数几个必须要知道的字段，如果<code>序号</code>、<code>确认号</code>、<code>控制标记</code>（仅仅是其中被置位的）和<code>窗口大小</code>等有值。三个步骤如下:</p><ol><li><code>客户发送的第一个段</code>，即<code>SYN 段</code>。这个段仅有SYN 标志被置位，它用于序号同步。它占用一个序号。当数据传输开始时，在我们的例子中，客户随机选择一个数字作为<code>初始序号（ISN）</code>。注意，这个段不包含确认号。它也没有定义窗口大小；窗口大小的定义只有当段包含确认号时才有意义。段也能包含一些稍后讨论的选项。<ul><li>注意，SYN 段是一个控制段并且不携带数据。然而，它消耗一个序号，因为它需要被确认。我们可以说SYN 段携带了一个假想字节。</li></ul></li></ol><blockquote><p>SYN 段不携带数据，但它占用一个序号。看下面的图就明白了。</p></blockquote><ol start="2"><li><code>服务器发送第二个段</code>，即<code>SYN +ACK 段</code>。这个段有两个目的。<ul><li>首先，它是另一方向通信的SYN 段。服务器使用这个段来初始化序号，这个序号用来给从服务器发向客户的字节编号。</li><li>其次，服务器也通过给ACK 置位并展示下一个序号来确认接收到来自客户的SYN 段，这里的<strong>下一个序号</strong>是服务器预期从客户接收的序号。</li><li>我们将在介绍流量控制那一节看到，因为它包含确认，它也需要定义<code>接收窗口，即rwnd（客户使用）</code>。因为这个段起到SYN段的作用，它需要被确认。因此，它占用一个序号。</li></ul></li></ol><blockquote><p>SYN + ACK 段不携带数据，但它占用一个序号。</p></blockquote><ol start="3"><li><code>客户发送第三个段</code>，即<code>ACK 段</code>。它使用ACK 标志和确认序号字段来确认收到了第二个段。<ul><li>注意，如果不携带数据，ACK 段没有占用任何序号，但是一些实现允许这第三个段在连接阶段从客户端携带第一块数据。在这种情况下，段消耗的序号与数据字节数相同。</li></ul></li></ol><blockquote><p>ACK 段，如果不携带数据，则它不占用序号。</p></blockquote><p><img src="/2020/06/09/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E6%95%99%E7%A8%8B-%E4%BC%A0%E8%BE%93%E5%B1%82%E5%8D%8F%E8%AE%AE-TCP-2/TCP%E4%BD%BF%E7%94%A8%E4%B8%89%E6%AC%A1%E6%8F%A1%E6%89%8B%E5%BB%BA%E7%AB%8B%E8%BF%9E%E6%8E%A5.JPG" alt="TCP使用三次握手建立连接"></p><h2 id="数据传输"><a href="#数据传输" class="headerlink" title="数据传输"></a><strong>数据传输</strong></h2><p>连接建立后，可进行双向数据传输，客户端与服务器双方都可发送数据和确认。<br><code>数据捎带确认</code>：在同一段内携带确认时，在同一方向上也可以传递数据。</p><h3 id="图示"><a href="#图示" class="headerlink" title="图示"></a>图示</h3><p>在这个例子中，在连接建立后，客户端用两个段发送2000 个字节的数据。然后，服务器用一个段发送2000 个字节的数据。客户端发送另一个段。</p><ul><li>前面三个段携带数据与确认，但是最后一个段仅携带确认，这是因为已没有数据发送了。</li><li>注意序号与确认号数值，客户端发送的数据段有<code>PSH（推送）标志</code>，所以服务器TCP 知道在接收到数据时立刻传递给服务器进程。</li><li>另一方面，来自服务器的段没有设置推送标志。大多数TCP 的实现都有可选标志，可设置或不设置。</li></ul><p><img src="/2020/06/09/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E6%95%99%E7%A8%8B-%E4%BC%A0%E8%BE%93%E5%B1%82%E5%8D%8F%E8%AE%AE-TCP-2/TCP%E6%95%B0%E6%8D%AE%E4%BC%A0%E8%BE%93.JPG" alt="TCP数据传输"></p><h3 id="推送数据"><a href="#推送数据" class="headerlink" title="推送数据"></a>推送数据</h3><p>发送方的TCP 使用缓冲区存储来自发送方应用程序的数据流。发送方的TCP 可以选择段的大小。<br>接收方的TCP 在数据到达时也将数据进行缓存，并当应用程序准备就绪时或当接收端TCP 认为方便时将这些数据传递给应用程序。这种灵活性增加了TCP 的效率。</p><p>但是，在有些情况下，应用程序并不需要这种灵活性。例如，应用程序与另一方应用程序进行交互式通信。</p><ul><li>一方的应用程序打算将其信息发给对方应用程序，并希望接收到<strong>立即响应</strong>。数据的延迟传输和延迟传递对这个应用程序来说是不可接受的。</li></ul><p>TCP 可以处理这种情况。</p><ul><li>在发送端的应用程序可请求推送操作。这就表示发送端的TCP 不必等待窗口被填满。</li><li>它创建一个段就立即将其发送。发送端的TCP 还必须设置<code>推送位（PSH）</code>以告诉接收端的TCP，这个段所包含的数据必须尽快地传递给接收应用程序，而不要等待更多数据的到来。</li><li>这意味着将面向字节的TCP 改为面向块的TCP，但是TCP 可以选择使用或不使用这个特性。</li></ul><h2 id="连接终止-四次挥手"><a href="#连接终止-四次挥手" class="headerlink" title="连接终止(四次挥手)"></a><strong>连接终止(四次挥手)</strong></h2><p><img src="/2020/06/09/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E6%95%99%E7%A8%8B-%E4%BC%A0%E8%BE%93%E5%B1%82%E5%8D%8F%E8%AE%AE-TCP-2/TCP%E5%9B%9B%E6%AC%A1%E6%8C%A5%E6%89%8B%E5%85%B3%E9%97%AD%E8%BF%9E%E6%8E%A5.JPG" alt="TCP四次挥手关闭连接"></p><h3 id="半关闭"><a href="#半关闭" class="headerlink" title="半关闭"></a>半关闭</h3><p><code>半关闭（half-close）</code>：指在 TCP 中，一端可以停止发送数据后，还可以接续接收数据。（<strong>关闭发送但是不关闭接收</strong>）<br>虽然任一端都可发出半关闭，但通常都是由客户端发起的。当服务器在开始处理之前需要接收到所有数据，这时就会出现半关闭。<br>例如，排序是一个很好的例子。客户端发送数据给服务器进行排序，在开始排序之前，服务器需要接收到全部数据。</p><ul><li>这就是说，客户端发送全部数据之后，它在客户到服务器方向可关闭连接。（客户端关闭发送）</li><li>但为了返回存储数据，服务器到客户方向必须保持打开。（客户端不关闭接收）</li><li>服务器在接收数据后还需要时间进行排序；它的向外方向必须保持打开。</li></ul><p>从客户到服务器的数据传输停止。客户端通过发送FIN 段实现半关闭连接。服务器通过发送ACK 段确认半关闭。<br>然而，服务器还可以发送数据。当服务器已经发送完被处理的数据时，它发送一个FIN 段。该FIN 段由客户端的ACK 来确认。<br>连接半关闭后，数据可以从服务器传送给客户端，而确认可以从客户端传送给服务器。客户不能再向服务器发送任何数据。</p><h2 id="连接重置"><a href="#连接重置" class="headerlink" title="连接重置"></a><strong>连接重置</strong></h2><p>在一端的TCP 可能拒绝连接请求，可能终止已存在的连接，也可能结束空闲连接。所有这些都通过RST（重置）标志完成。</p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p><a href="http://c.biancheng.net/view/2352.html">详细分析TCP数据的传输过程</a><br><a href="https://zhuanlan.zhihu.com/p/82740675">【网络通信】TCP的通信过程</a><br><a href="https://www.polarxiong.com/archives/%E5%9B%BE%E8%A7%A3TCP%E4%BC%A0%E8%BE%93%E8%BF%87%E7%A8%8B-%E4%B8%89%E6%AC%A1%E6%8F%A1%E6%89%8B-%E6%95%B0%E6%8D%AE%E4%BC%A0%E8%BE%93-%E5%9B%9B%E6%AC%A1%E6%8C%A5%E6%89%8B.html">图解TCP传输过程（三次握手、数据传输、四次挥手）</a><br><a href="https://coolshell.cn/articles/11564.html">TCP 的那些事儿（上）</a><br><a href="https://coolshell.cn/articles/11609.html">TCP 的那些事儿（下）</a><br><a href="https://zhuanlan.zhihu.com/p/76302817">一个TCP连接上能发起多少个HTTP请求吗？</a><br>计算机网络教程-自顶向下方法</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;TCP-连接&quot;&gt;&lt;a href=&quot;#TCP-连接&quot; class=&quot;headerlink&quot; title=&quot;TCP 连接&quot;&gt;&lt;/a&gt;TCP 连接&lt;/h2&gt;&lt;p&gt;在 TCP 中，面向连接的传输需要三个过程：连接建立、数据传输和连接终止。&lt;br&gt;在TCP 中的分组称为段（segment）&lt;/p&gt;
    
    </summary>
    
    
      <category term="计算机网络" scheme="https://stemha.github.io/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/"/>
    
    
      <category term="传输层" scheme="https://stemha.github.io/tags/%E4%BC%A0%E8%BE%93%E5%B1%82/"/>
    
      <category term="TCP" scheme="https://stemha.github.io/tags/TCP/"/>
    
  </entry>
  
  <entry>
    <title>计算机网络教程-传输层协议-TCP(1)</title>
    <link href="https://stemha.github.io/2020/06/08/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E6%95%99%E7%A8%8B-%E4%BC%A0%E8%BE%93%E5%B1%82%E5%8D%8F%E8%AE%AE-TCP/"/>
    <id>https://stemha.github.io/2020/06/08/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E6%95%99%E7%A8%8B-%E4%BC%A0%E8%BE%93%E5%B1%82%E5%8D%8F%E8%AE%AE-TCP/</id>
    <published>2020-06-08T14:39:32.000Z</published>
    <updated>2020-08-10T04:19:21.722Z</updated>
    
    <content type="html"><![CDATA[<h2 id="TCP-传输控制协议"><a href="#TCP-传输控制协议" class="headerlink" title="TCP(传输控制协议)"></a>TCP(传输控制协议)</h2><p><code>传输控制协议（Transmission Control Protocol，TCP）</code>是一个面向连接可靠的协议。</p><ul><li>TCP 显式定义了连接建立、数据传输以及连接拆除阶段来提供面向连接服务。</li><li>TCP 使用GBN 和SR 协议的组合来提供可靠性。</li><li>为了实现这个目的，TCP 使用校验和（为差错发现）、丢失或被破坏分组重传、累积和选择确认以及计时器。<a id="more"></a></li></ul><h2 id="TCP-服务"><a href="#TCP-服务" class="headerlink" title="TCP 服务"></a><strong>TCP 服务</strong></h2><h3 id="进程到进程的通信"><a href="#进程到进程的通信" class="headerlink" title="进程到进程的通信"></a>进程到进程的通信</h3><p>像UDP 一样，TCP 通过使用端口号来提供进程到进程通信。</p><h3 id="流传递服务"><a href="#流传递服务" class="headerlink" title="流传递服务"></a><strong>流传递服务</strong></h3><p>与UDP 不同，<strong>TCP 是一个面向流的协议</strong>。在UDP 中，进程发送一些具有预先规定边界的报文给UDP 进行传递。UDP 将它自己的头部添加到这些报文中并传递到IP 层进行传输。来自进程的每一个报文称为一个用户数据报，最后变成一个IP 数据报。IP 和UDP 都不认识这些数据之间的关系。</p><blockquote><p>而TCP 允许发送进程以字节流形式传递数据，并且接收进程也以字节流形式接收数据。TCP 建立一种环境，在这种环境中，两个进程好像由一个假想的“管道”连接，这个管道通过因特网传送这些进程的数据。</p></blockquote><p>这种假想的环境如图所示。发送进程产生（写入）字节流，而接收进程消费（读出）这些字节流。<br><img src="/2020/06/08/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E6%95%99%E7%A8%8B-%E4%BC%A0%E8%BE%93%E5%B1%82%E5%8D%8F%E8%AE%AE-TCP/%E5%AD%97%E8%8A%82%E6%B5%81%E4%BC%A0%E9%80%92.JPG" alt="字节流传递"></p><h4 id="发送和接收缓冲区"><a href="#发送和接收缓冲区" class="headerlink" title="发送和接收缓冲区"></a><strong>发送和接收缓冲区</strong></h4><p>因为发送和接收进程可能以不同的速度写入和读出数据，所以TCP 需要用于存储的缓冲区。</p><ul><li>每一个方向都存在一个缓冲区：发送缓冲区和接收缓冲区。</li><li>这些缓冲区也用于TCP 流量和差错控制机制。</li><li><code>实现缓冲区的一种方法</code>是<strong>使用以一字节为存储单元的循环数组</strong>。</li></ul><p>实现缓冲区的方法如图所示。为了简化，我们只画出了两个缓冲区，每个缓冲区20个字节。通常情况下，缓冲区是数百甚至数千个字节，这取决于实现方法。这里给出的缓冲区是大小相同的，实际上并非总是如此。<br><img src="/2020/06/08/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E6%95%99%E7%A8%8B-%E4%BC%A0%E8%BE%93%E5%B1%82%E5%8D%8F%E8%AE%AE-TCP/TCP%E5%8F%91%E9%80%81%E5%92%8C%E6%8E%A5%E6%94%B6%E7%BC%93%E5%86%B2%E5%8C%BA.JPG" alt="TCP发送和接收缓冲区"><br>上图表示了在一个方向上数据的移动。在发送端，缓冲区有三种类型的存储单元。</p><ul><li>白色的部分是空存储单元，可以由发送进程（生产者）填充。</li><li>灰色的部分用于保存已经发送但还没有得到确认的字节。TCP 在缓冲区中保留这些字节，直到收到确认为止。</li><li>灰色缓冲区是将要由TCP 发送的字节。但是，在本章的后面将会看到，TCP 可能只发送灰色部分。这可能是由于接收进程缓慢或者网络中可能发生的拥塞造成的。</li><li>灰色存储单元的字节被确认后，这些存储单元可以回收并且对发送进程可用，这就是我们给出一个环形缓冲区的原因。</li></ul><p>接收端的缓冲区操作比较简单。环形缓冲区分成两个区域（表示为白色和灰色）。白色区域包含空存储单元，可以由从网络上接收的字节进行填充。灰色区域表示接收到的字节，可以由接收进<br>程读出。当某个字节被接收进程读出以后，这个存储单元可被回收，并加入到空存储单元池中。</p><h4 id="段"><a href="#段" class="headerlink" title="段"></a><strong>段</strong></h4><p>尽管缓冲能够处理生产进程速度和消费进程速度之间的不相称问题，但在发送数据之前，还需要多个步骤。<br>IP 层作为TCP 服务的提供者，需要以分组的方式而不是字节流的方式发送数据。<br>在传输层，TCP 将多个字节组合在一起成为一个分组，这个分组称为段（segment）。<br>TCP 给每个段添加头部（为了达到控制目的），并将该段传递给IP 层。段被封装到IP 数据报中，然后再进行传输。整个操作对接收进程是透明的。<br>这些段可能被无序接收、丢失，或者损坏和重发。所有这些均由TCP 处理，接收进程不会察觉到任何操作。<br>下图表示了在缓冲区中如何从字节生成段。<br><img src="/2020/06/08/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E6%95%99%E7%A8%8B-%E4%BC%A0%E8%BE%93%E5%B1%82%E5%8D%8F%E8%AE%AE-TCP/TCP%E6%AE%B5.JPG" alt="TCP段"><br>注意，段的大小不必相同。为了简单起见，我们在图中只表示了一个包含3 个字节的段和另一个包含5 个字节的段。实际的段可能包含数百（或者数千）个字节。</p><h3 id="全双工通信"><a href="#全双工通信" class="headerlink" title="全双工通信"></a><strong>全双工通信</strong></h3><p>TCP 提供全双工服务（full-dupler service），即数据可以在同一时间双向流动。<strong>每一方向TCP都有发送和接收缓冲区</strong>，它们能在双向发送和接收段。</p><h3 id="多路复用和多路分解"><a href="#多路复用和多路分解" class="headerlink" title="多路复用和多路分解"></a><strong>多路复用和多路分解</strong></h3><p>与UDP 类似，TCP 在发送端执行多路复用，在接收端执行多路分解。然而，由于TCP 是一个面向连接协议，因此需要为每对进程建立连接。</p><h3 id="面向连接的服务"><a href="#面向连接的服务" class="headerlink" title="面向连接的服务"></a><strong>面向连接的服务</strong></h3><p>与UDP 不同，TCP 是一种面向连接的协议。位于站点A 的一个进程与站点B 的另外一个进程想要进行数据的发送和接收，步骤如下：<br>1．在两个TCP 之间建立一个连接。<br>2．在两个方向交换数据。<br>3．连接终止。<br>注意，这是一个逻辑连接，而不是一个物理连接。TCP 段封装成IP 数据段，并且可能被无序地发送，或丢失，或被破坏，然后重发。每个段都可以通过不同的路径到达目的端。<br>TCP 建立一种面向字节流的环境，在这种环境中，TCP 能承担按顺序传递这些字节到其他站点的任务。</p><h3 id="可靠的服务"><a href="#可靠的服务" class="headerlink" title="可靠的服务"></a><strong>可靠的服务</strong></h3><p>TCP 是一种可靠的传输协议。它使用确认机制来检查数据是否安全和完整地到达。</p><h2 id="TCP与UDP基本区别"><a href="#TCP与UDP基本区别" class="headerlink" title="TCP与UDP基本区别"></a><strong>TCP与UDP基本区别</strong></h2><ol><li>基于连接与无连接</li><li>TCP要求系统资源较多，UDP较少</li><li>UDP程序结构较简单</li><li>字节流模式（TCP）与数据报模式(UDP);</li><li>TCP保证数据正确性，UDP可能丢包</li><li>TCP保证数据顺序，UDP不保证</li></ol><h2 id="TCP-的特点"><a href="#TCP-的特点" class="headerlink" title="TCP 的特点"></a>TCP 的特点</h2><h3 id="序号系统"><a href="#序号系统" class="headerlink" title="序号系统"></a>序号系统</h3><p>虽然TCP 软件能够记录发送或接收的段，但是在段的头部没有段序号字段。<br>TCP 在段的头部采用称为<code>序号（sequence number）</code>和<code>确认号（acknowledgment number）</code>的两个字段。这两个字段指的是字节序号，而不是段序号。</p><h4 id="字节序号"><a href="#字节序号" class="headerlink" title="字节序号"></a>字节序号</h4><p>TCP 为在一个连接中传输的所有数据字节（八位字节）编号。在每个方向上序号都是独立的。<br>当TCP 接收来自进程的一些数据字节时，TCP 将它们存储在发送缓冲区中并给它们编号。不必从0 开始编码，TCP 在0到2<sup>32</sup>−1 之间生成一个随机数作为第一个字节的序号，例如，如果随机数是<br>1057，并且发送的全部字节个数是6000，那么这些字节序号是1057~7056。下面将会看到字节序号是用于流量和差错控制。</p><blockquote><p>在每个连接中传送的字节都由TCP 编号，序号开始于一个随机产生的数。</p></blockquote><h4 id="序号"><a href="#序号" class="headerlink" title="序号"></a>序号</h4><p>字节被编号后，TCP 对发送的每一个段分配一个序号。在每一个方向上的序号定义如下：<br>1．第一段的序号是<code>初始序号（initial sequence number，ISN）</code>，这是一个随机数。<br>2．其他段的序号是之前段的序号加之前段携带的字节数（实际上的或想象的）。之后，我们将给出一些控制段，它们被认为携带了一个想象字节。</p><blockquote><p>一个段的序号字段的值定义了该段包含的第一个字节的序号。</p></blockquote><p>当一个段携带数据和控制信息（捎带）时，它使用一个序号。如果一个段没有携带用户数据，那么它逻辑上不定义序号。虽然字段存在，但是值是无效的。然而，当有些段仅携带控制信息时也<br>需要有一个序号用于接收方的确认。这些段用作连接建立、连接终止或连接废弃。这些段中的每一个好像携带一个字节那样使用一个序号，但都没有实际的数据。</p><h4 id="确认号"><a href="#确认号" class="headerlink" title="确认号"></a>确认号</h4><p>TCP 中的通信是全双工的；当建立一个连接时，双方同时都能发送和接收数据。</p><ul><li>每一方为字节编号，每一方经常使用不同的起始字节号。</li><li>每一方向的序号表明了该段所携带的第一个字节的序号。</li><li>每一方也使用确认号来确认它已收到的字节。<br>但是，<strong>确认号定义了该方预期接收的下一个字节的序号(也就是序号+1)。</strong>另外，确认号是累积的，这意味着接收方记下它已安全而且完整地接收到最后一个字节的序号，然后将它加1，并将这个结果作为确认号进行通告。<br>在这里，术语“累积”指的是，如果一方使用5643 作为确认号，则表示它已经接收了所有从开始到序号为5 642 的字节。但要注意，这并不是指接收方已经接收了5 642 个字节，因为第一个字节的编号通常并不是从0 开始的。</li></ul><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p>计算机网络教程-自顶向下方法<br><a href="https://blog.csdn.net/m_xiaoer/article/details/72885418">TCP与UDP的区别</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;TCP-传输控制协议&quot;&gt;&lt;a href=&quot;#TCP-传输控制协议&quot; class=&quot;headerlink&quot; title=&quot;TCP(传输控制协议)&quot;&gt;&lt;/a&gt;TCP(传输控制协议)&lt;/h2&gt;&lt;p&gt;&lt;code&gt;传输控制协议（Transmission Control Protocol，TCP）&lt;/code&gt;是一个面向连接可靠的协议。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;TCP 显式定义了连接建立、数据传输以及连接拆除阶段来提供面向连接服务。&lt;/li&gt;
&lt;li&gt;TCP 使用GBN 和SR 协议的组合来提供可靠性。&lt;/li&gt;
&lt;li&gt;为了实现这个目的，TCP 使用校验和（为差错发现）、丢失或被破坏分组重传、累积和选择确认以及计时器。&lt;/li&gt;&lt;/ul&gt;
    
    </summary>
    
    
      <category term="计算机网络" scheme="https://stemha.github.io/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/"/>
    
    
      <category term="传输层" scheme="https://stemha.github.io/tags/%E4%BC%A0%E8%BE%93%E5%B1%82/"/>
    
      <category term="TCP" scheme="https://stemha.github.io/tags/TCP/"/>
    
  </entry>
  
  <entry>
    <title>计算机网络教程-传输层协议-UDP</title>
    <link href="https://stemha.github.io/2020/06/08/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E6%95%99%E7%A8%8B-%E4%BC%A0%E8%BE%93%E5%B1%82%E5%8D%8F%E8%AE%AE-UDP/"/>
    <id>https://stemha.github.io/2020/06/08/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E6%95%99%E7%A8%8B-%E4%BC%A0%E8%BE%93%E5%B1%82%E5%8D%8F%E8%AE%AE-UDP/</id>
    <published>2020-06-08T09:51:52.000Z</published>
    <updated>2020-08-10T04:19:21.730Z</updated>
    
    <content type="html"><![CDATA[<h2 id="传输层协议"><a href="#传输层协议" class="headerlink" title="传输层协议"></a>传输层协议</h2><p>UDP ：不可靠的无连接传输层协议，由于在应用中简单高效而被使用，在那些应用中差错控制由应用层进程提供。<br>TCP ：可靠的面向连接协议，可用于可靠性重要的任何应用。</p><a id="more"></a><p>TCP/IP协议簇协议示意图<br><img src="/2020/06/08/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E6%95%99%E7%A8%8B-%E4%BC%A0%E8%BE%93%E5%B1%82%E5%8D%8F%E8%AE%AE-UDP/tcp-ip%E5%8D%8F%E8%AE%AE%E7%B0%87%E5%8D%8F%E8%AE%AE%E7%A4%BA%E6%84%8F%E5%9B%BE.JPG" alt="tcp-ip协议簇协议示意图"><br>UDP 和TCP 使用的熟知端口</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">端口     协议     UDP     TCP     说明</span><br><span class="line">7        Echo     √             将接收到的数据报回送到发送方</span><br><span class="line">9        Discard  √             丢弃接收到的任何数据报</span><br><span class="line">11       Users    √      √     活跃的用户</span><br><span class="line">13       Daytime  √      √     返回日期和时间</span><br><span class="line">17       Quote    √      √     返回每日引用</span><br><span class="line">19       Chargen  √      √     返回一字符串</span><br><span class="line">20,21    FTP              √     文件传输协议</span><br><span class="line">23       TELNET           √     终端网络</span><br><span class="line">25       SMTP             √     简单邮件传输协议</span><br><span class="line">53       DNS      √      √     域名服务</span><br><span class="line">67       DHCP     √      √     动态主机设置协议</span><br><span class="line">69       TFTP     √             简单文件传输协议</span><br><span class="line">80       HTTP             √     超文本传输协议</span><br><span class="line">111      RPC      √      √     远程过程调用</span><br><span class="line">123      NTP      √      √     网络时间协议</span><br><span class="line">161,162  SNMP             √     简单网络管理协议</span><br></pre></td></tr></table></figure><h2 id="UDP-用户数据报协议"><a href="#UDP-用户数据报协议" class="headerlink" title="UDP(用户数据报协议)"></a><strong>UDP(用户数据报协议)</strong></h2><p><code>用户数据报协议（User Datagram Protocol，UDP）</code>:</p><ul><li>无连接不可靠传输层协议。</li><li>不提供主机到主机通信，它除了提供进程到进程之间的通信之外，就没有给IP 服务增加任何东西。</li><li>此外，它进行非常有限的差错检验。</li></ul><p><strong>如果UDP 功能是如此之差，那么为什么进程还要使用它？</strong><br>它有缺点也有优点。UDP 是一个非常简单的协议，开销最小。如果一个进程想发送很短的报文，而且不在意可靠性，就可以使用UDP。使用UDP 发送一个很短的报文，在发送方和接收方之间的交互要比使用TCP 时少得多。</p><h3 id="用户数据报"><a href="#用户数据报" class="headerlink" title="用户数据报"></a><strong>用户数据报</strong></h3><p>UDP 分组称为<code>用户数据报（user datagram）</code>，有<code>8 字节的固定头部</code>，这个头部由4 个字段组成，每个字段2 字节（16 位）。<br><code>8 字节的固定头部的四个字段</code>：每个字段两个字节。<br>头两个字段定义了源和目的端口号。<br>第三个字段定义了用户数据报的总长，即头部加数据的长度。16 位可以定义的总长度范围是0 到65 535。然而，总长度需要更小一些，这是因为UDP数据报存储在总长度为65 535 的IP 数据报中。<br>最后一个字段可以携带可选校验和。<br><img src="/2020/06/08/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E6%95%99%E7%A8%8B-%E4%BC%A0%E8%BE%93%E5%B1%82%E5%8D%8F%E8%AE%AE-UDP/%E7%94%A8%E6%88%B7%E6%95%B0%E6%8D%AE%E6%8A%A5%E6%A0%BC%E5%BC%8F.JPG" alt="用户数据报格式"></p><h3 id="UDP-服务"><a href="#UDP-服务" class="headerlink" title="UDP 服务"></a><strong>UDP 服务</strong></h3><h4 id="进程到进程的通信"><a href="#进程到进程的通信" class="headerlink" title="进程到进程的通信"></a>进程到进程的通信</h4><p>UDP 使用套接字地址提供进程到进程通信，这是IP 地址和端口号的组合。</p><h4 id="无连接服务"><a href="#无连接服务" class="headerlink" title="无连接服务"></a><strong>无连接服务</strong></h4><ul><li>UDP 提供无连接服务。这就表示UDP 发送出去的每一个用户数据报都是一个独立的数据报。不同的用户数据报之间没有关系，即使它们都是来自相同的源进程并发送到相同的目的程序。</li><li><strong>用户数据报不进行编号</strong>。此外，也没有像TCP 协议那样的连接建立和连接终止，这就表示每一个用户数据报可以沿着不同的路径传递。</li><li>无连接的一个结果就是使用UDP 的进程不能够向UDP 发送数据流，并期望它将这个数据流分割成许多不同的相关联的用户数据报。相反，每一个<strong>请求必须足够小，使其能够装入用户数据报</strong>中，只有那些发送短报文的进程才应当使用UDP。短报文小于65507字节（65535减去UDP头部的8字节再减去IP头部的20 字节）。</li></ul><h4 id="无流量控制"><a href="#无流量控制" class="headerlink" title="无流量控制"></a><strong>无流量控制</strong></h4><p>UDP 是一个非常简单的协议。它没有流量控制（flow control），因而也没有窗口机制。如果到来的报文太多时，接收方可能会溢出。缺乏流量控制意味着如果需要的话，使用UDP 的进程应该提供这个服务。</p><h4 id="差错控制（仅有校验和）"><a href="#差错控制（仅有校验和）" class="headerlink" title="差错控制（仅有校验和）"></a><strong>差错控制（仅有校验和）</strong></h4><p>除校验和外，UDP 也没有差错控制（error control）机制，这就表示<strong>发送方不知道报文是丢失还是重传</strong>。当接收方使用校验和检测出差错时，它就悄悄地将此用户数据报丢弃。缺乏差错控制意味着如果需要的话，使用UDP 的进程应该提供这个服务。</p><h4 id="校验和"><a href="#校验和" class="headerlink" title="校验和"></a><strong>校验和</strong></h4><p>UDP 校验和包含三部分：伪头部、UDP 头部和从应用层来的数据。<br><code>伪头部（psedoheader）</code>是IP 分组的头部的一部分（第4 章讨论），其中有些字段要填入0，用户数据报分装在IP分组中</p><ul><li>如果校验和不包括伪头部，用户数据报也可能是安全完整地到达。但是，如果IP 头部受到损坏，那么它可能被提交到错误的主机。</li></ul><p><code>协议字段</code>可确保这个分组是属于UDP，而不是属于其他传输层协议。</p><ul><li><p>如果一个进程既可用UDP 又可用TCP，则端口号可以是相同的。</p></li><li><p>UDP 的协议字段值是17。如果在传输过程中这个值改变了，在接收端计算校验和时就可检测出来，UDP 就可丢弃这个分组。这样就不会传递给错误的协议。</p><p>  <img src="/2020/06/08/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E6%95%99%E7%A8%8B-%E4%BC%A0%E8%BE%93%E5%B1%82%E5%8D%8F%E8%AE%AE-UDP/%E7%94%A8%E4%BA%8E%E6%A0%A1%E9%AA%8C%E5%92%8C%E8%AE%A1%E7%AE%97%E7%9A%84%E4%BC%AA%E5%A4%B4%E9%83%A8.JPG" alt="用于校验和计算的伪头部"></p></li></ul><h5 id="可选校验和"><a href="#可选校验和" class="headerlink" title="可选校验和"></a>可选校验和</h5><p>UDP 分组的发送方可以选择不计算校验和。这种情况下，在发送前，校验和字段就全填入0。在发送方决定计算校验和的情况下，如果碰巧结果全是0，那么在发送前校验和全改为1。换言之，发送方填充两次校验和。注意，这不会产生混淆，因为校验和的值在正常情况下不会全为1。</p><h4 id="无拥塞控制"><a href="#无拥塞控制" class="headerlink" title="无拥塞控制"></a><strong>无拥塞控制</strong></h4><p>由于UDP 是无连接协议，它不提供拥塞控制。UDP 假设被发送的分组很小且零星，不会在网络中造成拥塞。今天当UDP 被用做音频和视频的交互实时传输时，这个假设可能对也可能不对。</p><h4 id="封装和解封装"><a href="#封装和解封装" class="headerlink" title="封装和解封装"></a><strong>封装和解封装</strong></h4><p>要将报文从一个进程发送到另一个进程时，UDP 协议就要对报文进行封装和解封装。</p><h4 id="排队"><a href="#排队" class="headerlink" title="排队"></a><strong>排队</strong></h4><p>我们已经讨论过端口，但是没有讨论端口的实际实现。在UDP 中，队列是与端口联系在一起的。在客户端，当进程启动时，它从操作系统请求一个端口号。有些实现是创建一个入队列和一个出队列与每一个进程相关联。而有些实现只创建与每一个进程相关的入队列。</p><h4 id="多路复用与多路分解"><a href="#多路复用与多路分解" class="headerlink" title="多路复用与多路分解"></a><strong>多路复用与多路分解</strong></h4><p>在<strong>运行TCP/IP 协议簇的主机上只有一个UDP</strong>，但可能有多个想使用UDP 服务的进程。处理这种情况，UDP 采用多路复用和多路分解。</p><h4 id="UDP-和通用简单协议比较"><a href="#UDP-和通用简单协议比较" class="headerlink" title="UDP 和通用简单协议比较"></a>UDP 和通用简单协议比较</h4><p>我们可以将UDP 与之前讨论的无连接简单协议进行比较。唯一的区别就是UDP 提供可选校验和来在接收端发现被破坏分组。如果校验和被加入分组，接收UDP 可以检测分组，如果分组被破坏可以丢弃它。然而，没有反馈被发向发送方。<br>UDP 是我们之前讨论的无连接简单协议的一个例子，区别在于它为差错检测加入了可选校验和。</p><h3 id="UDP应用"><a href="#UDP应用" class="headerlink" title="UDP应用"></a><strong>UDP应用</strong></h3><blockquote><p>一位应用设计师有时需要折中来得到最佳情况。例如，在日常生活中，我们都知道一日递送包裹比三日递送要贵。尽管时间和代价在递送包裹中都是想要获取的特性，但是它们是彼此矛盾的。我们需要选择最佳值。</p></blockquote><p>尽管UDP 不满足我们之前讨论的可靠传输层协议标准，但是，UDP 更适合某些应用,因为其他某些服务可能有副作用，这些副作用或许是不可接受的或许是不称心的</p><h4 id="UDP特性"><a href="#UDP特性" class="headerlink" title="UDP特性"></a><strong>UDP特性</strong></h4><ol><li><p>无连接服务：UDP 是无连接协议。同一个应用程序发送的UDP 分组之间是独立的。</p><p> 例如，如果一个客户应用需要向服务器发送一个短的请求并接收一个短的响应，那么这就是优势。如果请求和响应各自可以填充进一个数据报，那么无连接服务可能更可取。在这种情况下，建立和关闭连接的开销可能很可观。在面向连接服务中，要达到以上目标，至少需要在客户和服务器之间交换9 个分组；在无连接服务中只需要交换2 个分组。无连接服务提供了更小的延迟；面向连接服务造成了更多的延迟。如果延迟是应用的重要问题，那么无连接服务更可取。</p></li><li><p>缺乏差错控制：它提供的是不可靠服务。</p></li><li><p>缺乏拥塞控制：UDP 不提供拥塞控制。然而，在倾向于出错的网络中UDP 没有创建额外的通信量。TCP 可能多次重发一个分组，因此这个行为促使拥塞发生或者使得拥塞状况加重。因此，在某些情况下，当拥塞是一个大问题时，UDP 中缺乏差错控制可以看做是一个优势</p></li></ol><h4 id="应用"><a href="#应用" class="headerlink" title="应用"></a><strong>应用</strong></h4><ol><li><code>DNS</code>，它使用UDP 服务，因为客户需要向服务器发送一个短的请求，并从服务器接收快速响应。请求和响应可以填充进一个用户数据报。由于在每个方向上只交换一个报文，因此无连接特性不是问题；客户或服务器不担心报文会失序传递。</li><li>UDP 可用于某些路由选择更新协议，如<code>路由选择信息协议（RIP）</code></li><li>UDP 可用于管理进程，如<code>SNMP</code></li><li>UDP 适用于具有内部流量控制和差错控制机制的进程。例如，<code>简单文件传输协议（TFTP）</code>的进程就包含流量控制和差错控制。它可很容易地使用UDP。</li><li>UDP 适合于这样的进程：它需要简单的请求-响应通信，而较少考虑流量控制和差错控制。对于需要传送成块数据的进程（如FTP）则通常不使用UDP</li></ol><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p>计算机网络教程-自顶向下方法</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;传输层协议&quot;&gt;&lt;a href=&quot;#传输层协议&quot; class=&quot;headerlink&quot; title=&quot;传输层协议&quot;&gt;&lt;/a&gt;传输层协议&lt;/h2&gt;&lt;p&gt;UDP ：不可靠的无连接传输层协议，由于在应用中简单高效而被使用，在那些应用中差错控制由应用层进程提供。&lt;br&gt;TCP ：可靠的面向连接协议，可用于可靠性重要的任何应用。&lt;/p&gt;
    
    </summary>
    
    
      <category term="计算机网络" scheme="https://stemha.github.io/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/"/>
    
    
      <category term="传输层" scheme="https://stemha.github.io/tags/%E4%BC%A0%E8%BE%93%E5%B1%82/"/>
    
      <category term="UDP" scheme="https://stemha.github.io/tags/UDP/"/>
    
  </entry>
  
  <entry>
    <title>计算机网络教程-传输层概述</title>
    <link href="https://stemha.github.io/2020/06/08/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E6%95%99%E7%A8%8B-%E4%BC%A0%E8%BE%93%E5%B1%82%E6%A6%82%E8%BF%B0/"/>
    <id>https://stemha.github.io/2020/06/08/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E6%95%99%E7%A8%8B-%E4%BC%A0%E8%BE%93%E5%B1%82%E6%A6%82%E8%BF%B0/</id>
    <published>2020-06-08T08:47:53.000Z</published>
    <updated>2020-08-10T04:19:21.735Z</updated>
    
    <content type="html"><![CDATA[<h2 id="传输层"><a href="#传输层" class="headerlink" title="传输层"></a><strong>传输层</strong></h2><ul><li>传输层是客户程序和服务器程序之间的联络人，是一个进程到进程的连接。</li><li>传输层是TCP/IP 协议簇中的核心；</li><li>它是因特网上从一点到另一个点传输数据的端到端逻辑传输媒介。<a id="more"></a></li></ul><h2 id="传输层提供的一般服务"><a href="#传输层提供的一般服务" class="headerlink" title="传输层提供的一般服务"></a><strong>传输层提供的一般服务</strong></h2><h3 id="进程到进程通信"><a href="#进程到进程通信" class="headerlink" title="进程到进程通信"></a><strong>进程到进程通信</strong></h3><p>传输层协议的首要任务是提供<code>进程到进程通信（process-to-process communication）</code>。</p><p><code>主机间通信与进程间通信的不同</code>:<br>网络层负责计算机层次的通信（主机到主机通信）。网络层协议只把报文传递到目的计算机。<br>然而，这是不完整的传递。报文仍然需要递交给正确的进程。这正是传输层接管的部分。<br>传输层协议负责将报文传输到正确的进程。</p><h4 id="寻址：端口号"><a href="#寻址：端口号" class="headerlink" title="寻址：端口号"></a><strong>寻址：端口号</strong></h4><p>对通信来说，我们必须定义本地主机、本地进程、远程主机以及远程进程。<br>IP 地址来定义本地主机和远程主机。<br><code>端口号（port number）</code>来定义进程。TCP/IP 协议簇中，端口号是在0 到65 535 之间的16 位整数。</p><p><strong>客户程序</strong>用端口号定义它自己，这称为<code>临时端口号（ephemeral port number）</code>。临时这个词表示短期的（short-lived），它之所以被使用是因为客户的生命周期通常很短。为了客户-服务器程序能<br>正常工作，临时端口号推荐值为大于1023。</p><p>服务器进程端口号不能随机选择。（因为随机分配的话导致客户端不知道端口号），TCP/IP 决定使用全局端口号，它们称为<code>熟知端口号（well-known port number）</code>。</p><h4 id="ICANN-端口范围"><a href="#ICANN-端口范围" class="headerlink" title="ICANN 端口范围"></a><strong>ICANN 端口范围</strong></h4><p>ICANN已经把端口号编码划分为三种范围：熟知的、注册的和动态的（或私有的）</p><ul><li><code>熟知端口</code>：端口号0~1023，由ICANN 分配和控制。这些是熟知端口号。<ul><li>在 UNIX 中，熟知端口号存储在/etc/services 文件中，这个文件的每行给出服务器名和熟知端口号</li></ul></li><li><code>注册端口</code>：端口号1024~49151，ICANN 不分配也不控制。它们可在ICANN 注册以防重复。</li><li><code>动态端口</code>：端口号49152~65535。这一范围内的端口号既不受控制又不需要注册，可以由任何进程使用。它们是临时或私有端口号。49152是2的14次方乘3</li></ul><p><img src="/2020/06/08/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E6%95%99%E7%A8%8B-%E4%BC%A0%E8%BE%93%E5%B1%82%E6%A6%82%E8%BF%B0/ICANN%E8%8C%83%E5%9B%B4.JPG" alt="ICANN范围"></p><h4 id="套接字地址"><a href="#套接字地址" class="headerlink" title="套接字地址"></a><strong>套接字地址</strong></h4><p>在 TCP 协议簇中的传输层协议需要IP 地址和端口号，它们各在一端建立一条连接。<br>一个IP地址和一个端口号结合起来称为<code>套接字地址（socket address）</code>。<br>客户套接字地址唯一定义了客户进程;<br>服务器套接字地址唯一地定义了服务器进程;<br>为了使用因特网中的传输层服务，我们需要一对套接字地址：客户套接字地址和服务器套接字地址。<br><img src="/2020/06/08/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E6%95%99%E7%A8%8B-%E4%BC%A0%E8%BE%93%E5%B1%82%E6%A6%82%E8%BF%B0/%E4%B8%80%E5%AF%B9%E5%A5%97%E6%8E%A5%E5%AD%97%E5%9C%B0%E5%9D%80.JPG" alt="一对套接字地址"></p><h3 id="多路复用和多路分解"><a href="#多路复用和多路分解" class="headerlink" title="多路复用和多路分解"></a><strong>多路复用和多路分解</strong></h3><p><code>多路复用（multiplexing，多对一）</code>：</p><ul><li>多个数据项从多个源发出，一个实体接收它们，然后负责传输。；</li><li>指多个应用程序共享同一个传输层建立的连接进行数据的传送，在传输层是通过什么来区分不同的应用程序的（通过端口）</li><li>源端的传输层执行复用；</li></ul><p><code>多路分解（demultiplexing，一对多）</code>：</p><ul><li>每当一个实体将数据项传递到一个以上的源时。</li><li>目的端的传输层执行多路分解</li></ul><h3 id="流量控制"><a href="#流量控制" class="headerlink" title="流量控制"></a><strong>流量控制</strong></h3><p>每当一个实体创建数据项并且有另一个实体消耗它们时，就存在生产速率和消费速率的平衡问题。</p><ol><li>如果数据项生产比消费快，那么消费者可能被淹没并且可能要<strong>丢弃一些数据项</strong>。</li><li>如果数据项生产比消费慢，那么消费者必须等待，系统就会变得<strong>低效</strong>。</li></ol><p>流量控制与第一种情况相关。我们需要在消费者端防止丢失数据项。</p><h4 id="生产者到消费者消息传输两种方式"><a href="#生产者到消费者消息传输两种方式" class="headerlink" title="生产者到消费者消息传输两种方式"></a><strong>生产者到消费者消息传输两种方式</strong></h4><p><code>推（push）</code>:每当发送方生产数据项时，它无须事前获得消费者的请求就会发送它们——这种传递称为推。<br>需要流量控制：当生产者推数据项时，消费者可能被淹没并需要相反方向的流量控制，以此来防止丢弃这些数据项。</p><p><code>拉（pull）</code>:如果生产者在消费者请求这些数据项之后进行发送，这种传递称为拉。<br>不需要流量控制：当消费者拉数据项，它会在自身做好准备时进行请求。在这种情况下，不需要流量控制。<br><img src="/2020/06/08/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E6%95%99%E7%A8%8B-%E4%BC%A0%E8%BE%93%E5%B1%82%E6%A6%82%E8%BF%B0/%E6%95%B0%E6%8D%AE%E4%BC%A0%E9%80%92%E6%A8%A1%E5%9E%8B.JPG" alt="数据传递模型"></p><h4 id="传输层流量控制"><a href="#传输层流量控制" class="headerlink" title="传输层流量控制"></a><strong>传输层流量控制</strong></h4><p>在传输层通信中，我们需要处理四个实体：发送方进程、发送方传输层、接收方传输层和接收方进程。<br>应用层的发送方进程仅仅是一个生产者。它生产报文块，并把它们推到传输层。<br>发送方传输层有两个作用：<br>是消费者：它消费生产者推来的报文。<br>也是生产者：它将报文封装进分组并传递到接收方传输层。<br>接收方传输有两个作用：<br>是消费者：消费从发送方那里接收来的分组；<br>也是生产者：解封装报文并传递到应用层。然而，最后的传递通常是拉传递；传输层等待直到应用层进程请求报文。</p><p>我们至少需要两种流量控制：</p><ol><li>从发送方传输层到发送方应用层的流量控制。</li><li>从接收方传输层到发送方传输层的流量控制。</li></ol><p>这里看图即可：<br><img src="/2020/06/08/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E6%95%99%E7%A8%8B-%E4%BC%A0%E8%BE%93%E5%B1%82%E6%A6%82%E8%BF%B0/%E4%BC%A0%E8%BE%93%E5%B1%82%E6%B5%81%E9%87%8F%E6%8E%A7%E5%88%B6.JPG" alt="传输层流量控制"></p><h4 id="缓冲区"><a href="#缓冲区" class="headerlink" title="缓冲区"></a><strong>缓冲区</strong></h4><p>流量控制可以用多种方式实现，但通常的方式是使用两个缓冲区：一个位于发送方传输层，另一个位于接收方传输层。<br>缓冲区是一组内存单元，它可以在发送端和接收端存储分组。<br>消费者向生产者发送信号从而进行流量控制通信。</p><p><strong>当发送方传输层的缓冲区已满</strong>，它就通知应用层停止传输报文块；当有空闲位置时，它通知应用层可以再次传输报文块。<br><strong>当接收方传输层的缓冲区已满</strong>，它就通知发送方传输层停止传输分组；当有空闲位置时，它通知发送方传输层可以再次传输分组。</p><h3 id="传输层差错控制"><a href="#传输层差错控制" class="headerlink" title="传输层差错控制"></a><strong>传输层差错控制</strong></h3><p>由于网络层（IP）是不可靠的，如果应用层需要可靠性，我们需要使传输层变得可靠。可靠性可以通过在传输层加入差错控制服务来实现。</p><p><strong>传输层的差错控制负责以下几个方面：</strong></p><ol><li><strong>发现</strong>并丢弃被破坏的分组。</li><li><strong>记录</strong>丢失和丢弃的分组并重传它们。</li><li><strong>识别重复分组</strong>并丢弃它们。</li><li><strong>缓冲失序分组</strong>直到丢失的分组到达。</li></ol><p>差错控制不像流量控制，它仅涉及发送方和接收方传输层。我们假设在应用层和传输层之间交换的报文块是不会产生差错的。<br><img src="/2020/06/08/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E6%95%99%E7%A8%8B-%E4%BC%A0%E8%BE%93%E5%B1%82%E6%A6%82%E8%BF%B0/%E4%BC%A0%E8%BE%93%E5%B1%82%E5%B7%AE%E9%94%99%E6%8E%A7%E5%88%B6.JPG" alt="传输层差错控制"></p><h4 id="序号"><a href="#序号" class="headerlink" title="序号"></a><strong>序号</strong></h4><p>差错控制需要发送方传输层知道哪个分组要被重传并且接收方传输层需要知道哪个分组是重复的、哪个分组是失序的。如果分组是编号的，这个就可以实现。我们可以在传输层分组中加入一个字段来保存分组的序号（sequence number）。<br>分组一般按序编号。然而，由于我们需要在头部包含每个分组的序号，因此需要设置一个界限。如果分组的头部允许序号最多为m 比特位，那么序号范围就是0 到2m−1。例如，如果m 是4，序<br>号范围是0 到15 的闭区间。然而，我们可以回绕。<br>序号是模2^m 的。<br>对于差错控制，序号是模2m 的，这里m 是序号字段的大小，单位是比特。</p><h4 id="确认"><a href="#确认" class="headerlink" title="确认"></a><strong>确认</strong></h4><p>接收方可以为每一组正确到达的分组发送一个确认（ACK）。接收方可以简单地丢弃被破坏的分组。发送方如果使用<strong>计时器</strong>，它就可以发现丢失分组。当一个分组被发送，发送方就开启一个计时器。如<br>果ACK 在计时器超时之前没有到达，那么发送方重发这个分组。重复的分组可以被接收方默默丢弃。失序的分组既可以被丢弃（被发送方当做丢失报文对待），也可以存储直到丢失的那个分组到来。</p><h3 id="流量和差错控制的组合"><a href="#流量和差错控制的组合" class="headerlink" title="流量和差错控制的组合"></a><strong>流量和差错控制的组合</strong></h3><p><code>流量控制</code>要求使用两个缓冲区，一个在发送端另一个在接收端。<br><code>差错控制</code>要求两端均使用序号和确认号。<br><code>流量和差错控制的组合</code>：使用两个带序号的缓冲区：一个位于发送端，一个位于接收端，那么这两个需要可以结合起来。<br>在<strong>发送端</strong>，当分组准备发送时，我们使用下一个缓冲区空闲位置号码x 作为分组的序号。当分组被发送，一个分组的备份存储在内存位置x，等待来自另一端的确认。当与被发送分组相关的确认到达时，分组被清除，内存位置空闲出来。<br>在<strong>接收端</strong>，当带有序号y 的分组到达时，它被存储在内存位置y 上，直到应用层准备好接收它。这时发送一个确认表明分组y 的到达。</p><h4 id="滑动窗口"><a href="#滑动窗口" class="headerlink" title="滑动窗口"></a><strong>滑动窗口</strong></h4><p>由于序号进行模2<sup>m</sup> 操作，因此一个环可以代表从0 到2<sup>m−1</sup> 的序号。<br>缓冲区由一组片段代表，称为<code>滑动窗口（sliding window）</code>，它随时占据环的一部分。<br>在发送端，当一个报文被发送，相应的片段就被标记。当有所片段都被标记时，意味着缓冲区满且不能从应用层进一步接收报文。<br>当确认到达时，相应片段被取消标记。如果从窗口开始处有一些连续的片段没有被标记，那么窗口滑过这些相应序号的范围，允许更多的片段进入窗口尾部。<br>下图 给出发送方的滑动窗口。<br><img src="/2020/06/08/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E6%95%99%E7%A8%8B-%E4%BC%A0%E8%BE%93%E5%B1%82%E6%A6%82%E8%BF%B0/%E5%9C%86%E5%BD%A2%E6%BB%91%E5%8A%A8%E7%AA%97%E5%8F%A3.JPG" alt="圆形滑动窗口"></p><p>序号以16 为模（m = 4）且窗口大小为7。请注意滑动窗口仅仅是一个抽象：实际情况是使用计算机变量来保存下一个和最后一个待发送的分组。<br>大多数协议使用线性形式来表示滑动窗口。虽然想法是相同的，但是它通常占用更少的页面空间。下图给出这种表示方法。这两种表示方法告诉我们相同的事情。如果拿起下图每一幅图的两个端点，并且弯曲它们，我们就可以得到与圆形滑动窗口相同的图。<br><img src="/2020/06/08/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E6%95%99%E7%A8%8B-%E4%BC%A0%E8%BE%93%E5%B1%82%E6%A6%82%E8%BF%B0/%E7%BA%BF%E6%80%A7%E5%BD%A2%E5%BC%8F%E6%BB%91%E5%8A%A8%E7%AA%97%E5%8F%A3.JPG" alt="线性形式滑动窗口"></p><h3 id="拥塞控制"><a href="#拥塞控制" class="headerlink" title="拥塞控制"></a><strong>拥塞控制</strong></h3><p><code>拥塞（congestion）</code>:因特网之类的分组交换网络中存在一个重要问题，这就是拥塞。如果网络中的负载（load，即发送到网络的分组数）大于网络的容量（网络可以处理的分组数），那么网络就可能发生拥塞。<br><code>拥塞控制（congestion control）</code>指的是一种机制和技术，它控制拥塞并将负载保持在容量以内。</p><h3 id="无连接和面向连接服务"><a href="#无连接和面向连接服务" class="headerlink" title="无连接和面向连接服务"></a><strong>无连接和面向连接服务</strong></h3><p>传输层协议就像网络层协议一样，可以提供两种类型的服务：</p><ul><li>无连接服务</li><li>面向连接服务</li></ul><p>然而，这些传输层服务的本质与网络层不同。</p><ul><li>在<code>网络层，无连接服务</code>可能意味着属于同一个报文的不同数据报有不同路径。</li><li>在<code>网络层，面向连接服务</code>意味着两个终端主机以及这之间的所有路由器都进行协调。</li><li>在传输层，我们不关心分组的物理路径（我们假设两个传输层之间有一条逻辑连接）。</li></ul><blockquote><p>传输层的无连接服务意味着分组之间的独立；面向连接服务意味着依赖。</p></blockquote><h4 id="无连接服务"><a href="#无连接服务" class="headerlink" title="无连接服务"></a><strong>无连接服务</strong></h4><p>在无连接服务中，源进程（应用程序）需要将报文分成传输层可接受大小的数据块，并把它们一个一个地传递到传输层。<br><strong>传输层将每一个数据块看做彼此没有关系的单元。</strong>当一个块从应用层到达时，传输层将其封装在分组中并发送。</p><p>为了展示分组的独立，我们假设客户进程有三个报文块要发送给服务器进程。这些块被按序交给无连接传输协议。<br>然而，由于传输层的这些分组之间没有联系，分组可能失序到达目的地并且被失序传递给服务器进程<br>在客户端，三个报文块按序传递给客户传输层<br>（0、1 和2）。由于第二个分组在传输中的额外延迟，服务器报文的传递失序（0、2 和1）。如果这三个数据块属于同一个报文，那么服务器进程可能会收到一个奇怪的报文。<br>如果一个分组丢了情况就更糟糕了。由于分组没有序号，接收方传输层不知道一个报文已经丢失。它仅仅将两个数据块传送到服务器进程。<br>以上两个问题是由于双方传输层没有互相协调所致。接收方传输层不知道第一个分组将要到来，也不知道所有的分组已经到来。<br>我们可以说，流量控制、差错控制以及拥塞控制都不能在无连接服务中有效实现。</p><p>无连接的服务是不可靠的服务，无法许诺不会出现的交付和重复的差错，但这种协议代价很小，更适应于某些服务，比如内部的数据采集、向外的数据分发、请求一响应，以及实时应用等。因此在运输层既有面向连接的位置，也有无连接的用武之地。每一个分组独立地建立和释放逻辑连接，也适合传送大量的数据。<br>无连接的服务的通信线路不都是预设的。<br>无连接的服务需要将目标地址信息加在每个发送的分组上，便于每个分组路由到达目的地。<br>UDP在电路交换或租用专线网络上也能运行。</p><h4 id="面向连接服务"><a href="#面向连接服务" class="headerlink" title="面向连接服务"></a><strong>面向连接服务</strong></h4><p>面向连接的服务中，首先需要建立客户和服务器之间的逻辑连接。只有连接建立之后才能进行数据交换。在数据交换之后，连接需要拆除</p><ol><li>连接建立</li><li>数据传输</li><li>拆除阶段。</li></ol><p>在面向连接协议中，我们可以实现流量控制、差错控制以及拥塞控制。<br>面向连接的方式功能强大，允许流量控制、差错控制以及顺序交付等。</p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p>计算机网络教程-自顶向下方法 </p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;传输层&quot;&gt;&lt;a href=&quot;#传输层&quot; class=&quot;headerlink&quot; title=&quot;传输层&quot;&gt;&lt;/a&gt;&lt;strong&gt;传输层&lt;/strong&gt;&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;传输层是客户程序和服务器程序之间的联络人，是一个进程到进程的连接。&lt;/li&gt;
&lt;li&gt;传输层是TCP/IP 协议簇中的核心；&lt;/li&gt;
&lt;li&gt;它是因特网上从一点到另一个点传输数据的端到端逻辑传输媒介。&lt;/li&gt;&lt;/ul&gt;
    
    </summary>
    
    
      <category term="计算机网络" scheme="https://stemha.github.io/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/"/>
    
    
      <category term="计算机网络" scheme="https://stemha.github.io/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/"/>
    
      <category term="传输层" scheme="https://stemha.github.io/tags/%E4%BC%A0%E8%BE%93%E5%B1%82/"/>
    
      <category term="设计方法" scheme="https://stemha.github.io/tags/%E8%AE%BE%E8%AE%A1%E6%96%B9%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>《复杂》阅读笔记</title>
    <link href="https://stemha.github.io/2020/06/06/%E3%80%8A%E5%A4%8D%E6%9D%82%E3%80%8B%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0/"/>
    <id>https://stemha.github.io/2020/06/06/%E3%80%8A%E5%A4%8D%E6%9D%82%E3%80%8B%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0/</id>
    <published>2020-06-06T14:55:35.000Z</published>
    <updated>2020-08-10T04:19:21.663Z</updated>
    
    <content type="html"><![CDATA[<p>《复杂》简单讲述了复杂系统科学尝试去回答的迷人与令人费解的问题的一部分。</p><h3 id="度量一个事物或过程的复杂性的三个维度"><a href="#度量一个事物或过程的复杂性的三个维度" class="headerlink" title="度量一个事物或过程的复杂性的三个维度"></a>度量一个事物或过程的复杂性的三个维度</h3><pre><code>描述它有多困难产生它有多困难其组织程度如何</code></pre><a id="more"></a><p>物理学家克劳德</p><h3 id="模型是什么？"><a href="#模型是什么？" class="headerlink" title="模型是什么？"></a>模型是什么？</h3><p>科学中是某种实在现象的简化表述<br>模型是我们的思维方式 是用我们熟悉的思维概念解释观察到的现象；</p><h3 id="无尺度特性"><a href="#无尺度特性" class="headerlink" title="无尺度特性"></a>无尺度特性</h3><p>《复杂性》这本书详细解释了什么是无尺度；改变图的尺度，图的形状是不变化的；<br>例子：给定一个大型的样例网络，使用直方图来观察度的分布<br>入度作为横轴，频率作为纵轴<br>1000-10000<br>10000-100000<br>100000-1000000<br>然上面几个图的分布情况曲线的形状几乎一样。<br>这样的分布是自相似的，因为不管在哪种尺度下进行绘制，形状都是一样的——也就是在不同的尺度下具有不变性——就是无尺度一词的由来（无标度）<br>无尺度网络对节点的随机删除具有稳健性，但是如果中心节点失效或是受到攻击就会非常脆弱。</p><p>如果你发现某种量遵循幂律分布，你就可以猜想这是某种自相似或分形系统导致的；<br>尽可能填充空间的几何对象其实就是分形分支结构——在所有尺度上的自相似意味着空间在所有尺度上都被同等填充。</p><h3 id="偏好依附（Preferential-attachment）"><a href="#偏好依附（Preferential-attachment）" class="headerlink" title="偏好依附（Preferential attachment）"></a>偏好依附（Preferential attachment）</h3><p>接下来一个很重要的概念是偏好依附。<br>偏好依附（Preferential attachment）//一种网络生长机制<br>巴拉巴西和艾伯特提出了一种他们称之为“偏好依附”的生成机制，用来解释幂律分布；<br>其中的思想是：网络在生长的时候。连接度高的节点比连接度低的节点更有可能得到新的连接；//直观上说，朋友越多的人，越可能认识新的朋友。网页的入度越高，就越容易被找到；</p><h3 id="连锁失效"><a href="#连锁失效" class="headerlink" title="连锁失效"></a>连锁失效</h3><p>如果某个节点失效了，它的工作就会转移到其他节点，这有可能使得其他节点因为负荷过重而失效，它的工作就会转移到未失效的顶点~</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;《复杂》简单讲述了复杂系统科学尝试去回答的迷人与令人费解的问题的一部分。&lt;/p&gt;
&lt;h3 id=&quot;度量一个事物或过程的复杂性的三个维度&quot;&gt;&lt;a href=&quot;#度量一个事物或过程的复杂性的三个维度&quot; class=&quot;headerlink&quot; title=&quot;度量一个事物或过程的复杂性的三个维度&quot;&gt;&lt;/a&gt;度量一个事物或过程的复杂性的三个维度&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;描述它有多困难
产生它有多困难
其组织程度如何&lt;/code&gt;&lt;/pre&gt;
    
    </summary>
    
    
      <category term="读书笔记" scheme="https://stemha.github.io/categories/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="网络" scheme="https://stemha.github.io/tags/%E7%BD%91%E7%BB%9C/"/>
    
  </entry>
  
  <entry>
    <title>string常用操作</title>
    <link href="https://stemha.github.io/2020/06/06/string%E5%B8%B8%E7%94%A8%E6%93%8D%E4%BD%9C/"/>
    <id>https://stemha.github.io/2020/06/06/string%E5%B8%B8%E7%94%A8%E6%93%8D%E4%BD%9C/</id>
    <published>2020-06-06T14:46:38.000Z</published>
    <updated>2020-08-10T04:19:21.658Z</updated>
    
    <content type="html"><![CDATA[<h2 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h2><p>标准库 string 类型：string 类型支持长度可变的字符串，C++ 标准库将负责管理与存储字符相关的内存，以及提供各种有用的操作。<br>可以使用输入输出流方式直接进行操作，也可以通过文件等手段进行操作。<br>size_type是一个依赖于实现的整型，是在string中定义的。<br>string类将<code>string::npos</code>定义为字符串的最大长度，通常为unsigned int的最大值。<br>另外，使用缩写<code>NBTS（null-terminated string）</code>来表示以空字符结束的字符串。</p><a id="more"></a><h2 id="头文件"><a href="#头文件" class="headerlink" title="头文件"></a>头文件</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br></pre></td></tr></table></figure><h2 id="模板"><a href="#模板" class="headerlink" title="模板"></a>模板</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//The string class is an instantiation of the basic_string class template, defined in &lt;string&gt; as:</span></span><br><span class="line"><span class="keyword">typedef</span> basic_string&lt;<span class="keyword">char</span>&gt; <span class="built_in">string</span>;</span><br><span class="line"><span class="built_in">string</span>实际上是basic_string&lt;<span class="keyword">char</span>&gt;的一个<span class="keyword">typedef</span>，同时省略了与内存管理相关的参数。</span><br></pre></td></tr></table></figure><h2 id="string初始化方法"><a href="#string初始化方法" class="headerlink" title="string初始化方法"></a><strong>string初始化方法</strong></h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">string</span> s1;        默认构造函数 s1 为空串</span><br><span class="line"><span class="function"><span class="built_in">string</span> <span class="title">s2</span><span class="params">(s1)</span></span>;    将 s2初始化为 s1 的一个副本</span><br><span class="line"><span class="function"><span class="built_in">string</span> <span class="title">s3</span><span class="params">(“value”)</span></span>;将 s3 初始化为一个字符串字面值副本</span><br><span class="line"><span class="function"><span class="built_in">string</span> <span class="title">s4</span><span class="params">(n, ‘c’)</span></span>;将 s4 初始化为字符 ‘c’ 的 n 个副本</span><br></pre></td></tr></table></figure><p>注意！因为历史原因以及为了与 C 语言兼容，字符串字面值与标准库 string 类型不是同一种类型。这一点很容易引起混乱，编程时一定要注意区分字符串字面值和 string 数据类型的使用，这很重要。</p><h2 id="c-style字符转换"><a href="#c-style字符转换" class="headerlink" title="c-style字符转换"></a>c-style字符转换</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">s.c_str();返回指向以null结尾的字符数组的指针，其数据与存储在字符串中的数据相同</span><br></pre></td></tr></table></figure><h2 id="交换"><a href="#交换" class="headerlink" title="交换"></a><strong>交换</strong></h2><p><code>swap(string&amp; other)</code>：和参数的元素进行交换，所包含对象的类型必须相同。：将当前 string中的元素和参数 string 中的元素交换。它们需要包含相同类型的元素。也可以调用全局函数模板 swap() 来完成同样的操作。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">void swap(string &amp;x)　重载1：x.swap(y)</span><br><span class="line">void swap (string&amp; x, string&amp; y)  重载2: swap(x, y)</span><br><span class="line">q.swap(p) <span class="comment">//交换两个string</span></span><br><span class="line">所有迭代器和引用都可能无效</span><br></pre></td></tr></table></figure><h2 id="常用操作"><a href="#常用操作" class="headerlink" title="常用操作"></a><strong>常用操作</strong></h2><h3 id="读写操作"><a href="#读写操作" class="headerlink" title="读写操作"></a><strong>读写操作</strong></h3><p>对于string类型变量s的输入：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cin</span> &gt;&gt; s;</span><br></pre></td></tr></table></figure><p>从标准输入读取 string 并将读入的串存储在 s 中。string 类型的输入操作符：</p><ul><li>读取并忽略开头所有的空白字符（如空格，换行符，制表符）。</li><li>读取字符直至再次遇到空白字符，读取终止。</li></ul><h4 id="读入未知数目的string-对象"><a href="#读入未知数目的string-对象" class="headerlink" title="读入未知数目的string 对象"></a>读入未知数目的string 对象</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">string</span> word;</span><br><span class="line">程序将从标准输入读取一组 <span class="built_in">string</span> 对象，然后在标准输出上逐行输出：</span><br><span class="line"><span class="keyword">while</span> (<span class="built_in">cin</span> &gt;&gt; word)</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; word &lt;&lt; <span class="built_in">endl</span>;</span><br></pre></td></tr></table></figure><p>上例中，用输入操作符来读取 string 对象。该操作符返回所读的istream 对象，并在读取结束后，作为 while 的判断条件。如果输入流是有效的，即还未到达文件尾且未遇到无效输入，则执行 while 循环体，并将读取到的字符串输出到标准输出。如果到达了文件尾，则跳出 while 循环。</p><h4 id="使用getline-读取整行文本"><a href="#使用getline-读取整行文本" class="headerlink" title="使用getline 读取整行文本"></a>使用getline 读取整行文本</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">string</span> line; <span class="comment">// read line at time until end-of-file</span></span><br><span class="line"><span class="keyword">while</span> (getline(<span class="built_in">cin</span>, line))  <span class="comment">//循环读取输入流</span></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; line &lt;&lt; <span class="built_in">endl</span>;</span><br></pre></td></tr></table></figure><h3 id="赋值"><a href="#赋值" class="headerlink" title="赋值"></a><strong>赋值</strong></h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// st1 is an empty string, st2 is a copy of the literal</span></span><br><span class="line"><span class="built_in">string</span> st1, st2 = <span class="string">"The expense of spirit"</span>;</span><br><span class="line">st1 = st2; <span class="comment">// replace st1 by a copy of st2</span></span><br><span class="line">它必须先把 st1 占用的相关内存释放掉，然后再分配给 st2 足够存放 st2 副本的内存空间，最后把 st2 中的所有字符复制到新分配的内存空间。</span><br></pre></td></tr></table></figure><h3 id="和字符串字面值的连接"><a href="#和字符串字面值的连接" class="headerlink" title="和字符串字面值的连接"></a><strong>和字符串字面值的连接</strong></h3><p>当进行 string 对象和字符串字面值混合连接操作时，<strong>+ 操作符的左右操作数必须至少有一个是 string 类型的</strong>：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">string</span> s1 = <span class="string">"hello"</span>; <span class="comment">// no punctuation</span></span><br><span class="line"><span class="built_in">string</span> s2 = <span class="string">"world"</span>;</span><br><span class="line"><span class="built_in">string</span> s3 = s1 + <span class="string">", "</span>; <span class="comment">// ok: adding a string and a literal</span></span><br><span class="line"><span class="built_in">string</span> s4 = <span class="string">"hello"</span> + <span class="string">", "</span>; <span class="comment">// error: no string operand s4 的初始化试图将两个字符串字面值相加，因此是非法的</span></span><br><span class="line"><span class="built_in">string</span> s5 = s1 + <span class="string">", "</span> + <span class="string">"world"</span>; <span class="comment">// ok: each + has string operand</span></span><br><span class="line"><span class="built_in">string</span> s6 = <span class="string">"hello"</span> + <span class="string">", "</span> + s2; <span class="comment">// error: can't add string literals</span></span><br><span class="line"> s6 的初始化是非法的。依次来看每个子表达式，则第一个子表达式试图把两个字符串字面值连接起来。这是不允许的，因此这个语句是错误的。</span><br></pre></td></tr></table></figure><h3 id="大小与是否为空"><a href="#大小与是否为空" class="headerlink" title="大小与是否为空"></a>大小与是否为空</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">s.empty();    <span class="literal">true</span>如果字符串为空, 否则返回<span class="literal">false</span></span><br><span class="line">s.size();       字符串中CharT元素的数量</span><br><span class="line">s.length();    字符串中CharT元素的数量</span><br><span class="line">s.capacity();返回字符串当前为其分配空间的字符数</span><br><span class="line">s.max_size();   返回<span class="built_in">string</span>对象能够容纳的字符的最大数目</span><br><span class="line">s.resize(<span class="keyword">size_t</span> n, <span class="keyword">char</span> c);  用来改变<span class="built_in">string</span>的大小，如果size小于原来<span class="built_in">string</span>的size大小，则截取前面的size个字符，如果大于，则用空格填充。</span><br><span class="line">s.resize(<span class="keyword">size_t</span> n); </span><br><span class="line">s.reserve(<span class="keyword">size_t</span> res_arg=<span class="number">0</span>);为<span class="built_in">string</span>预留空间，不改变有效元素个数，当reserve的参数小于<span class="built_in">string</span>的底层空间总大小时，reserve不会改变容量大小。 </span><br><span class="line">s.shrink_to_fit()请求删除未使用的容量</span><br></pre></td></tr></table></figure><p>注意：</p><ul><li>resize在改变元素个数时，如果是将元素个数增多，可能会改变底层容量的大小，如果是将元素个数减少，底层空间总大小不变。</li><li>size()与length()方法底层实现原理完全相同，引入size()的原因是为了与其他容器的接口保持一致，一般情况下基本都是用size()。</li></ul><h3 id="插入追加覆盖"><a href="#插入追加覆盖" class="headerlink" title="插入追加覆盖"></a>插入追加覆盖</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">s.append(args);将args追加到s.返回一个指向s的引用.</span><br><span class="line">s.assign(args);将s中的字符替换为args指定的字符.返回一个指向s的引用.</span><br><span class="line">s.push_back(<span class="keyword">char</span> c); 在末尾添加一个元素，返回值为空</span><br><span class="line"><span class="function"><span class="built_in">string</span>&amp; <span class="title">insert</span> <span class="params">( <span class="keyword">size_t</span> pos1, <span class="keyword">size_t</span> n, <span class="keyword">char</span> c )</span></span>; 在字符串pos1位置，插入n次c字符。 </span><br><span class="line"><span class="function"><span class="keyword">size_t</span> <span class="title">copy</span> <span class="params">( <span class="keyword">char</span>* s, <span class="keyword">size_t</span> n, <span class="keyword">size_t</span> pos = <span class="number">0</span>)</span> <span class="keyword">const</span></span>; 从pos位置开始，复制n个字符到s指针指向的内存；</span><br></pre></td></tr></table></figure><h4 id="insert"><a href="#insert" class="headerlink" title="insert"></a>insert</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">  <span class="built_in">string</span> str=<span class="string">"to be question"</span>;</span><br><span class="line">  <span class="built_in">string</span> str2=<span class="string">"the "</span>;</span><br><span class="line">  <span class="built_in">string</span> str3=<span class="string">"or not to be"</span>;</span><br><span class="line">  <span class="built_in">string</span>::iterator it;</span><br><span class="line">  <span class="comment">// used in the same order as described above:</span></span><br><span class="line">  str.insert(<span class="number">6</span>,str2);                 <span class="comment">// to be (the )question</span></span><br><span class="line">  str.insert(<span class="number">6</span>,str3,<span class="number">3</span>,<span class="number">4</span>);             <span class="comment">// to be (not )the question</span></span><br><span class="line">  str.insert(<span class="number">10</span>,<span class="string">"that is cool"</span>,<span class="number">8</span>);    <span class="comment">// to be not (that is )the question</span></span><br><span class="line">  str.insert(<span class="number">10</span>,<span class="string">"to be "</span>);            <span class="comment">// to be not (to be )that is the question</span></span><br><span class="line">  str.insert(<span class="number">15</span>,<span class="number">1</span>,<span class="string">':'</span>);               <span class="comment">// to be not to be(:) that is the question</span></span><br><span class="line">  it = str.insert(str.begin()+<span class="number">5</span>,<span class="string">','</span>); <span class="comment">// to be(,) not to be: that is the question</span></span><br><span class="line">  str.insert (str.end(),<span class="number">3</span>,<span class="string">'.'</span>);       <span class="comment">// to be, not to be: that is the question(...)</span></span><br><span class="line">  str.insert (it+<span class="number">2</span>,str3.begin(),str3.begin()+<span class="number">3</span>); <span class="comment">// (or )</span></span><br><span class="line">Output:to be, <span class="keyword">or</span> <span class="keyword">not</span> to be: that is the question...</span><br></pre></td></tr></table></figure><h4 id="append"><a href="#append" class="headerlink" title="append()"></a>append()</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">  <span class="built_in">string</span> str;</span><br><span class="line">  <span class="built_in">string</span> str2=<span class="string">"Writing "</span>;</span><br><span class="line">  <span class="built_in">string</span> str3=<span class="string">"print 10 and then 5 more"</span>;</span><br><span class="line"></span><br><span class="line">  str.append(str2);                       <span class="comment">// "Writing "</span></span><br><span class="line">  str.append(str3,<span class="number">6</span>,<span class="number">3</span>);                   <span class="comment">// "10 "</span></span><br><span class="line">  str.append(<span class="string">"dots are cool"</span>,<span class="number">5</span>);          <span class="comment">// "dots "</span></span><br><span class="line">  str.append(<span class="string">"here: "</span>);                   <span class="comment">// "here: "</span></span><br><span class="line">  str.append(<span class="number">10</span>,<span class="string">'.'</span>);                     <span class="comment">// ".........."</span></span><br><span class="line">  str.append(str3.begin()+<span class="number">8</span>,str3.end());  <span class="comment">// " and then 5 more"</span></span><br><span class="line">  str.append&lt;<span class="keyword">int</span>&gt;(<span class="number">5</span>,<span class="number">0x2E</span>);                <span class="comment">// "....."</span></span><br><span class="line">Output:  Writing <span class="number">10</span> dots here: .......... <span class="keyword">and</span> then <span class="number">5</span> more.....</span><br></pre></td></tr></table></figure><h3 id="查找"><a href="#查找" class="headerlink" title="查找"></a>查找</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">s[index]; </span><br><span class="line">s.at(index); index是下标 </span><br><span class="line"><span class="function"><span class="keyword">size_t</span> <span class="title">find</span> <span class="params">(<span class="keyword">char</span> c, <span class="keyword">size_t</span> pos =<span class="number">0</span>)</span> <span class="keyword">const</span></span>; 从字符串pos位置开始往后找字符c，返回该字符在字符串中的位置</span><br><span class="line"><span class="function"><span class="keyword">size_t</span> <span class="title">rfind</span><span class="params">(<span class="keyword">char</span> c, <span class="keyword">size_t</span> pos = npos)</span></span>; 反向查找，从字符串pos位置开始往前找字符c，返回该字符在字符串中的位置</span><br><span class="line"><span class="function"><span class="built_in">string</span> <span class="title">substr</span><span class="params">(<span class="keyword">size_t</span> pos = <span class="number">0</span>, <span class="keyword">size_t</span> n= npos)</span><span class="keyword">const</span></span>;在str中从pos位置开始，截取n个字符，然后将其返回</span><br></pre></td></tr></table></figure><h3 id="删除与清空"><a href="#删除与清空" class="headerlink" title="删除与清空"></a>删除与清空</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">s.clear()从字符串中删除所有字符, clear()只是将<span class="built_in">string</span>中有效字符清空，不改变底层空间大小。</span><br><span class="line">s.erase(pos,len); 删除从位置pos开始的len个字符,如果len被省略,则删除从pos开始直至s末尾的所有字符.返回一个指向s的引用.</span><br><span class="line"><span class="function">iterator <span class="title">erase</span> <span class="params">(const_iterator p)</span></span>; 删除源字符串中迭代器p指向的字符，返回删除后迭代器的位置。</span><br><span class="line"><span class="function">iterator <span class="title">erase</span> <span class="params">(const_iterator first, const_iterator last)</span></span>; 删除源字符串迭代器范围为[first，last）内的所有字符，返回删除后迭代器的位置。</span><br><span class="line">s.pop_back(); 删除源字符串的最后一个字符，有效的减少它的长度。</span><br></pre></td></tr></table></figure><h3 id="数值转换为string"><a href="#数值转换为string" class="headerlink" title="数值转换为string"></a>数值转换为string</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">s=<span class="built_in">std</span>::to_string(<span class="keyword">int</span>/<span class="keyword">double</span>/...);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="built_in">string</span> <span class="title">to_string</span> <span class="params">(<span class="keyword">int</span> val)</span></span>;</span><br><span class="line"><span class="function"><span class="built_in">string</span> <span class="title">to_string</span> <span class="params">(<span class="keyword">long</span> val)</span></span>;</span><br><span class="line"><span class="function"><span class="built_in">string</span> <span class="title">to_string</span> <span class="params">(<span class="keyword">long</span> <span class="keyword">long</span> val)</span></span>;</span><br><span class="line"><span class="function"><span class="built_in">string</span> <span class="title">to_string</span> <span class="params">(<span class="keyword">unsigned</span> val)</span></span>;</span><br><span class="line"><span class="function"><span class="built_in">string</span> <span class="title">to_string</span> <span class="params">(<span class="keyword">unsigned</span> <span class="keyword">long</span> val)</span></span>;</span><br><span class="line"><span class="function"><span class="built_in">string</span> <span class="title">to_string</span> <span class="params">(<span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> val)</span></span>;</span><br><span class="line"><span class="function"><span class="built_in">string</span> <span class="title">to_string</span> <span class="params">(<span class="keyword">float</span> val)</span></span>;</span><br><span class="line"><span class="function"><span class="built_in">string</span> <span class="title">to_string</span> <span class="params">(<span class="keyword">double</span> val)</span></span>;</span><br><span class="line"><span class="function"><span class="built_in">string</span> <span class="title">to_string</span> <span class="params">(<span class="keyword">long</span> <span class="keyword">double</span> val)</span></span>;</span><br></pre></td></tr></table></figure><h3 id="迭代器与指针"><a href="#迭代器与指针" class="headerlink" title="迭代器与指针"></a>迭代器与指针</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">s.data();返回指向字符串第一个字符的指针</span><br><span class="line">s.begin();  返回字符串第一个字符的迭代器,<span class="keyword">const</span></span><br><span class="line">s.cbegin(); 返回字符串第一个字符的迭代器</span><br><span class="line">s.end();    返回字符串最后一个字符的后面一个位置的迭代器</span><br><span class="line">s.cend();   返回字符串最后一个字符的后面一个位置的迭代器,<span class="keyword">const</span></span><br><span class="line">s.rbegin(); 反向迭代器</span><br><span class="line">s.rend();   反向迭代器</span><br><span class="line"><span class="built_in">string</span>::npos     相当于s.end()</span><br></pre></td></tr></table></figure><h2 id="string-对象中字符的处理"><a href="#string-对象中字符的处理" class="headerlink" title="string 对象中字符的处理"></a><strong>string 对象中字符的处理</strong></h2><p>我们经常要对 string 对象中的单个字符进行处理，例如，通常需要知道某个特殊字符是否为空白字符、字母或数字。下表列出了各种字符操作函数，适用于 string 对象的字符（或其他任何 char 值）。这些函数都在 cctype 头文件中定义。<br>注意这里的”cctype”就是C++中使用C标准的头文件的写法，等价于”ctype.h”</p><table><thead><tr><th align="left">操作</th><th align="left">功能描述</th></tr></thead><tbody><tr><td align="left"><code>isalnum( c )</code></td><td align="left">如果 c 是字母或数字，则为 True。</td></tr><tr><td align="left"><code>isalpha( c )</code></td><td align="left">如果 c 是字母，则为 true。</td></tr><tr><td align="left">iscntrl( c )</td><td align="left">如果 c 是控制字符，则为 true</td></tr><tr><td align="left"><code>isdigit( c )</code></td><td align="left">如果 c 是数字，则为 true。</td></tr><tr><td align="left">isgraph( c )</td><td align="left">如果 c 不是空格，但可打印，则为 true。</td></tr><tr><td align="left">islower( c )</td><td align="left">如果 c 是小写字母，则为 true。</td></tr><tr><td align="left">isprint( c )</td><td align="left">如果 c 是可打印的字符，则为 true。</td></tr><tr><td align="left">ispunct( c )</td><td align="left">如果 c 是标点符号，则 true。</td></tr><tr><td align="left">isspace( c )</td><td align="left">如果 c 是空白字符，则为 true。</td></tr><tr><td align="left">isupper( c )</td><td align="left">如果 c 是大写字母，则 true。</td></tr><tr><td align="left">isxdigit( c )</td><td align="left">如果是 c 十六进制数，则为 true。</td></tr><tr><td align="left"><code>tolower( c )</code></td><td align="left">如果 c 大写字母，返回其小写字母形式，否则直接返回 c。</td></tr><tr><td align="left"><code>toupper( c )</code></td><td align="left">如果 c 是小写字母，则返回其大写字母形式，否则直接返回 c。</td></tr></tbody></table><center>列出了各种字符操作函数</center>表中的大部分函数是测试一个给定的字符是否符合条件，并返回一个 int 作为真值。如果测试失败，则该函数返回 0 ，否则<u>返回一个（无意义的）非 0 ，表示被测字符符合条件</u>。<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p><a href="https://blog.csdn.net/engineerxin/article/details/104545571">《C++Primer》第三章-标准库类型-学习笔记(1)-string&amp;vector&amp;迭代器</a><br><a href="https://blog.csdn.net/MissXy_/article/details/88547282">C++ STL丨string 基本使用（一）</a><br><a href="https://www.cnblogs.com/c4isr/p/stl_string.html">STL string常用操作指令</a><br><a href="https://www.cnblogs.com/mupiaomiao/p/4725628.html">C++——string类和标准模板库</a><br><a href="https://blog.csdn.net/miss_monster/article/details/88343910">【C++】String类、String类的常用接口说明及其使用、STL中的迭代器使用</a><br><a href="http://www.cplusplus.com/reference/">c/c++ reference</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;基本概念&quot;&gt;&lt;a href=&quot;#基本概念&quot; class=&quot;headerlink&quot; title=&quot;基本概念&quot;&gt;&lt;/a&gt;基本概念&lt;/h2&gt;&lt;p&gt;标准库 string 类型：string 类型支持长度可变的字符串，C++ 标准库将负责管理与存储字符相关的内存，以及提供各种有用的操作。&lt;br&gt;可以使用输入输出流方式直接进行操作，也可以通过文件等手段进行操作。&lt;br&gt;size_type是一个依赖于实现的整型，是在string中定义的。&lt;br&gt;string类将&lt;code&gt;string::npos&lt;/code&gt;定义为字符串的最大长度，通常为unsigned int的最大值。&lt;br&gt;另外，使用缩写&lt;code&gt;NBTS（null-terminated string）&lt;/code&gt;来表示以空字符结束的字符串。&lt;/p&gt;
    
    </summary>
    
    
      <category term="C++" scheme="https://stemha.github.io/categories/C/"/>
    
    
      <category term="C++标准库" scheme="https://stemha.github.io/tags/C-%E6%A0%87%E5%87%86%E5%BA%93/"/>
    
      <category term="string" scheme="https://stemha.github.io/tags/string/"/>
    
  </entry>
  
  <entry>
    <title>B树与B+树详解</title>
    <link href="https://stemha.github.io/2020/06/03/B%E6%A0%91%E4%B8%8EB+%E6%A0%91%E8%AF%A6%E8%A7%A3/"/>
    <id>https://stemha.github.io/2020/06/03/B%E6%A0%91%E4%B8%8EB+%E6%A0%91%E8%AF%A6%E8%A7%A3/</id>
    <published>2020-06-02T17:10:47.000Z</published>
    <updated>2020-08-10T04:19:21.202Z</updated>
    
    <content type="html"><![CDATA[<h2 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a><strong>基本概念</strong></h2><p><code>多路搜索树（multi-way search tree）</code>：</p><ul><li>将传统的二叉搜索树，改造为多路搜索树——在中序的遍历下，这也是一种等价变换</li><li>以k层为间隔如此重组，可以将二叉搜索树转化为等价的2^k路搜索树，统称为多路搜索树。</li><li>多路搜索树同样支持查找等操作，而且效果与原来的二叉树完全等同；但是重要的是，其对外存的访问方式已经发生本质变化，是以大节点为单位从外存读取一组（而不是单个）关键码。</li></ul><p><code>B树就是B-树</code>：</p><ul><li>B-树就是B树，中间的横线不是减号，直接读成B树即可。</li><li>有的文章里出现的B-树，即为B树。因为B树的原英文名称为B-tree，而国内很多人喜欢把B-tree译作B-树，而事实上是，B-tree就是指的B树。</li><li>B树是一种多路平衡搜索树，它的每一个节点最多包含K个孩子，k被称为<code>B树的阶</code>。</li><li>k的大小取决于磁盘页的大小</li><li>B树比较矮胖，扁平化，B-树的宽度往往大于其高度</li></ul><p><code>B+树</code>：</p><ul><li>是应文件系统所需而产生的一种B-tree的变形树。<a id="more"></a></li></ul><h2 id="应用"><a href="#应用" class="headerlink" title="应用"></a><strong>应用</strong></h2><p><strong>数据库索引主要基于什么数据结构？</strong><br>hash表和B+树</p><p><strong>数据库索引为什么要用B+树结构来存储呢？</strong><br>树的查询效率高。而且可以保持有序。但是为什么不用二叉查找树呢？主要是因为磁盘I/O的影响，数据库索引是存储在磁盘上的，当数据量比较大的时候，索引的大小可能有几个G甚至更多。当我们利用索引查询时候，能把整个索引全部加载到内存吗？很显然不可能的，我们能做的是逐一加载每一个磁盘页，这里的磁盘页面对应着索引树的节点。这样的话，每遍历到一个节点就需要进行一次I/O操作。<br>磁盘这种外部存储器适合批量式的访问，为了减少I/O，我们需要把原本<strong>瘦高</strong>的树结构变得<strong>矮胖</strong>，这就是B-树的特征之一。</p><p><strong>大规模数据存储中，实现索引查询这样一个实际背景下，树节点存储的元素数量是有限的，如何减少树的深度？</strong><br>一个基本的想法就是：采用多叉树结构（由于树节点元素数量是有限的，自然该节点的子树数量也就是有限的）</p><p>B-树主要应用于文件系统以及部分数据库索引，比如著名的非关系型数据库MongoDB。</p><h2 id="B-树（Balance-Tree）"><a href="#B-树（Balance-Tree）" class="headerlink" title="B-树（Balance Tree）"></a><strong>B-树（Balance Tree）</strong></h2><p>所谓m阶B-树，即为<code>m路平衡搜索树</code>（m大于等于2）,除了根节点，各个节点的分支数目介于[M/2向上取整, M]。<br>M为设定的非叶子结点最多子树个数，N为关键字总数。<br>由于限制了除根结点以外的非叶子结点，至少含有M/2个儿子，确保了结点的利用率，其最底搜索性能为：O(log n)</p><ol><li>根结点至少有两个子女。</li><li><strong>子节点数</strong>：每个<code>中间节点</code>都包含k-1个元素和k个孩子，其中 m/2 &lt;= k &lt;= m</li><li><strong>关键字数</strong>：每一个<code>叶子节点</code>都包含k-1个元素，其中 m/2 &lt;= k &lt;= m</li><li><strong>所有的叶子结点都位于同一层。</strong>叶子节点除了包含了关键字和关键字记录的指针外也有指向其子节点的指针只不过其指针地址都为null（可以把这些null看成外部节点）</li><li><strong>排序方式</strong>：每个<strong>节点中的元素从小到大排列</strong>，节点当中k-1个元素正好是k个孩子包含的元素的<strong>值域分划</strong>。</li></ol><h3 id="B-树的特性"><a href="#B-树的特性" class="headerlink" title="B-树的特性"></a><strong>B-树的特性</strong></h3><ol><li>关键字集合分布在整颗树中；</li><li>任何一个关键字出现且只出现在一个结点中；          </li><li>搜索有可能在非叶子结点结束；          </li><li>其搜索性能等价于在关键字全集内做一次二分查找；          </li><li>自动层次控制；</li></ol><p>举一个B-树的例子，一个<code>3阶的B-树</code>，也就是<code>(2,3)-树</code><br><img src="https://pic2.zhimg.com/80/v2-2d9600b19f93ef2dccf61409eea395bd_720w.jpg" alt="3阶的B-树"><br>对于这颗树查询的过程比较次数不比二叉查找树少，尤其当单一节点中的元素数量很多的时候，可是相对于磁盘I/O，内存中的比较耗时几乎可以忽略，所以可以提升查找的性能。</p><h3 id="B-树插入"><a href="#B-树插入" class="headerlink" title="B-树插入"></a>B-树插入</h3><p>优势，自平衡<br><strong>遵循规则</strong>：</p><ol><li>节点拆分规则：当前是要组成一个3路查找树，那么此时m=3,关键字数必须&lt;=3-1（这里关键字数&gt;2就要进行节点拆分，拆分的规则是把中间的元素提取出，放到父节点上，左边的单独构成一个节点，右边的单独构成一个节点）；</li><li>排序规则：满足节点本身比左边节点大，比右边节点小的排序规则;</li></ol><p><img src="https://files.cnblogs.com/yangecnu/btreebuild.gif" alt="插入的数据依次是6 10 4 14 5 11 15 3 2 12 1 7 8 8 6 3 6 21 5 15 15 6 32 23 45 65 7 8 6 5 4"></p><p>自顶向下查找4的节点位置，发现4应当插入到节点元素3，5之间。<br><img src="https://pic1.zhimg.com/80/v2-08492d931b071967954f9015aff41c68_720w.jpg" alt="插入元素4"><br>节点3，5已经是两元素节点，无法再增加。父亲节点 2， 6 也是两元素节点，也无法再增加。根节点9是单元素节点，可以升级为两元素节点。于是拆分节点3，5与节点2，6，让根节点9升级为两元素节点4，9。节点6独立为根节点的第二个孩子。<br><img src="https://pic1.zhimg.com/80/v2-ad1a6424649128def32f5d313c3f8e90_720w.jpg" alt="维持多路平衡"></p><h3 id="B-树删除"><a href="#B-树删除" class="headerlink" title="B-树删除"></a>B-树删除</h3><p><strong>遵循规则</strong>：</p><ol><li>节点合并规则：当前是要组成一个3路查找树，那么此时m=3,关键字数必须大于等于ceil（3/2）（这里关键字数&lt;1就要进行节点合并）；</li><li>满足节点本身比左边节点大，比右边节点小的排序规则;</li><li><strong>关键字数小于1时先从子节点取，子节点没有符合条件时就向向父节点取，取中间值往父节点放；</strong></li></ol><p>自顶向下查找元素11的节点位置。<br><img src="https://pic4.zhimg.com/80/v2-0208612586cf5a92abe02f92d2260ca7_720w.jpg" alt="删除元素11"><br>删除11后，节点12只有一个孩子，不符合B树规范。因此找出12,13,15三个节点的中位数13，取代节点12，而节点12自身下移成为第一个孩子。（这个过程称为<strong>左旋</strong><br><img src="https://pic2.zhimg.com/80/v2-de8036ff5e9b13acdff7aebcbb6a9575_720w.jpg" alt="左旋"><br><img src="https://pic3.zhimg.com/80/v2-fd9dd8cfe314137da1d88ee0aba7a59a_720w.jpg" alt="左旋"></p><h3 id="B-树中的卫星数据"><a href="#B-树中的卫星数据" class="headerlink" title="B-树中的卫星数据"></a><strong>B-树中的卫星数据</strong></h3><p><code>卫星数据（Satellite Information）</code>:指的是索引元素所指向的数据记录，比如数据的某一行。在B-树中，无论中间节点还是叶子节点都带有卫星数据。<br>B-树中的卫星数据（Satellite Information）:无论是叶子节点还是中间节点都带有卫星数据。<br><img src="https://pic2.zhimg.com/80/v2-ba3efdd8525facefc81189ed6a958b4d_720w.jpg" alt="B-树中的卫星数据"></p><h3 id="B-树的范围查找过程"><a href="#B-树的范围查找过程" class="headerlink" title="B-树的范围查找过程"></a><strong>B-树的范围查找过程</strong></h3><p>比方对于上面的B-树，我们想查找3到11的元素，只能依靠繁琐的中序遍历。</p><h2 id="B-树（-Tree）"><a href="#B-树（-Tree）" class="headerlink" title="B+树（ Tree）"></a><strong>B+树（ Tree）</strong></h2><p>B+树是B树的一个升级版，相对于B树来说B+树更充分的利用了节点的空间，让查询速度更加稳定，其速度完全接近于二分法查找。<br>B+树是对B树的一种变形树，它与B树的差异在于：</p><ul><li>有k个子结点的结点必然有k个关键码；</li><li>非叶结点仅具有索引作用，跟记录有关的信息均存放在叶结点中。</li><li>树的所有叶结点构成一个有序链表，可以按照关键码排序的次序遍历全部记录。</li></ul><p><strong>一个<code>m阶的B+树</code>具有如下几个特征：</strong></p><ol><li>有k个子树的中间节点包含有k个元素（B树中是k-1个元素），<strong>每个元素不保存数据，只用来索引，所有数据都保存在叶子节点</strong>。</li><li>所有的叶子结点中包含了全部元素的信息，及指向含这些元素记录的指针，且叶子结点本身依关键字的大小自小而大顺序链接。</li><li><strong>所有的中间节点元素都同时存在于子节点，在子节点元素中是最大（或最小）元素。</strong></li></ol><p>示例<br><img src="https://p-blog.csdn.net/images/p_blog_csdn_net/manesking/5.JPG" alt></p><h3 id="B-的特性"><a href="#B-的特性" class="headerlink" title="B+的特性"></a><strong>B+的特性</strong></h3><ol><li>所有关键字都出现在叶子结点的链表中（稠密索引），且链表中的关键字恰好是有序的；</li><li>不可能在非叶子结点命中；</li><li>非叶子结点相当于是叶子结点的索引（稀疏索引），叶子结点相当于是存储（关键字）数据的数据层；</li><li>更适合文件索引系统；</li></ol><h3 id="B-树插入-1"><a href="#B-树插入-1" class="headerlink" title="B+树插入"></a>B+树插入</h3><p><img src="https://files.cnblogs.com/yangecnu/Bplustreebuild.gif" alt="插入的数据依次是6 10 4 14 5 11 15 3 2 12 1 7 8 8 6 3 6 21 5 15 15 6 32 23 45 65 7 8 6 5 4"></p><h3 id="B-树中的卫星数据-1"><a href="#B-树中的卫星数据-1" class="headerlink" title="B+树中的卫星数据"></a>B+树中的卫星数据</h3><p><code>卫星数据（Satellite Information）</code>:指的是索引元素所指向的数据记录，比如数据的某一行。在B-树中，无论中间节点还是叶子节点都带有卫星数据。<br>B+树中的卫星数据（Satellite Information）:只有叶子节点带有卫星数据。中间节点仅仅是索引，没有任何关联数据。<br><img src="https://pic3.zhimg.com/80/v2-36d5aa8eeb765d559ba8d5e136d0b402_720w.jpg" alt="B+树中的卫星数据"><br>需要补充的是，在数据库的聚集索引（Clustered Index）中，叶子节点直接包含卫星数据。在非聚集索引（NonClustered Index）中，叶子节点带有指向卫星数据的指针。</p><h3 id="B-树的范围查找过程-1"><a href="#B-树的范围查找过程-1" class="headerlink" title="B+树的范围查找过程"></a>B+树的范围查找过程</h3><p>相对于B-树要简单的多，只需要在链表上做遍历即可！</p><h2 id="B树与B-树的优点"><a href="#B树与B-树的优点" class="headerlink" title="B树与B+树的优点"></a><strong>B树与B+树的优点</strong></h2><p><code>B+树的优点</code>：<br>由于B+树在内部节点上不好含数据信息，因此在内存页中能够存放更多的key。 数据存放的更加紧密，具有更好的空间局部性。因此访问叶子几点上关联的数据也具有更好的缓存命中率。<br>B+树的叶子结点都是相链的，因此对整棵树的便利只需要一次线性遍历叶子结点即可。而且由于数据顺序排列并且相连，所以便于区间查找和搜索。而B树则需要进行每一层的递归遍历。相邻的元素可能在内存中不相邻，所以缓存命中性没有B+树好。</p><ol><li><strong>B+树的层级更少：</strong>单一节点存储更多的元素，使得查询的IO次数更少，相较于B树B+每个非叶子节点存储的关键字数更多，树的层级更少所以查询数据更快；。</li><li><strong>B+树查询速度更稳定：</strong>所有查询都要查找到叶子节点，查询性能稳定。</li><li><strong>B+树天然具备排序功能：</strong>所有叶子节点形成有序链表，<strong>便于范围查询</strong>。</li><li><strong>B+树全节点遍历更快：</strong>B+树遍历整棵树只需要遍历所有的叶子节点即可，，而不需要像B树一样需要对每一层进行遍历，这有利于数据库做全表扫描。</li></ol><p><code>B树的优点</code>:</p><ol><li>由于B树的每一个节点都包含key和value，因此经常访问的元素可能离根节点更近，因此访问也更迅速。</li></ol><h2 id="B树和B-树的区别"><a href="#B树和B-树的区别" class="headerlink" title="B树和B+树的区别"></a><strong>B树和B+树的区别</strong></h2><ul><li><strong>B+树的非叶子结点只包含导航信息，不包含实际的值</strong>，所有的叶子结点和相连的节点使用链表相连，便于区间查找和遍历。</li><li>B+树只有达到叶子结点才命中（B-树可以在非叶子结点命中），其性能也等价于在关键字全集做一次二分查找；</li></ul><ol><li>B+树的中间节点没有卫星数据，所以同样大小的磁盘页可以容纳更多的节点元素。这就意味着，数据量相同的情况下，B+树的结构比B树更加矮胖，因此查询时候的I/O次数也越少。</li><li>B+树的查询必须查到叶子节点，而B-树只要找到匹配元素即可。因此B-树的查找性能并不稳定，最坏情况是查找到叶子节点。而B+树的每一次查找都是稳定的。</li></ol><h2 id="为什么说B-树比B树更适合数据库索引？"><a href="#为什么说B-树比B树更适合数据库索引？" class="headerlink" title="为什么说B+树比B树更适合数据库索引？"></a><strong>为什么说B+树比B树更适合数据库索引？</strong></h2><p><strong>B+树的磁盘读写代价更低</strong>：B+树的内部节点并没有指向关键字具体信息的指针，因此其内部节点相对B树更小，如果把所有同一内部节点的关键字存放在同一盘块中，那么盘块所能容纳的关键字数量也越多，一次性读入内存的需要查找的关键字也就越多，相对IO读写次数就降低了。<br><strong>B+树的查询效率更加稳定</strong>：由于非终结点并不是最终指向文件内容的结点，而只是叶子结点中关键字的索引。所以任何关键字的查找必须走一条从根结点到叶子结点的路。所有关键字查询的路径长度相同，导致每一个数据的查询效率相当。<br><strong>B+树的范围查询更加方便</strong>：由于B+树的数据都存储在叶子结点中，分支结点均为索引，方便扫库，只需要扫一遍叶子结点即可，但是B树因为其分支结点同样存储着数据，我们要找到具体的数据，需要进行一次中序遍历按序来扫，所以B+树更加适合在区间查询的情况，所以通常B+树用于数据库索引。<br>B树在提高了IO性能的同时并没有解决元素遍历的我效率低下的问题，正是为了解决这个问题，B+树应用而生。B+树只需要去遍历叶子节点就可以实现整棵树的遍历。而且在数据库中基于范围的查询是非常频繁的，而B树不支持这样的操作或者说效率太低。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a><strong>总结</strong></h2><blockquote><p>B-树和B+树都是很基础的概念，需要掌握好啊！</p></blockquote><p><strong>二叉搜索树</strong>：</p><ul><li>二叉树，每个结点只存储一个关键字，等于则命中，小于走左结点，大于走右结点；</li></ul><p><strong>B（B-）树</strong>：</p><ul><li>多路搜索树，每个结点存储M/2到M个关键字，非叶子结点存储指向关键字范围的子结点；</li><li>所有关键字在整颗树中出现，且只出现一次，非叶子结点可以命中；</li></ul><p><strong>B+树</strong>：</p><ul><li>在B-树基础上，为叶子结点增加链表指针，所有关键字都在叶子结点中出现，非叶子结点作为叶子结点的索引；B+树总是到叶子结点才命中；</li></ul><p><strong>B*树</strong>：</p><ul><li>在B+树基础上，为非叶子结点也增加链表指针，将结点的最低利用率从1/2提高到2/3</li></ul><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p><a href="https://zhuanlan.zhihu.com/p/54102723">漫画：什么是B+树？</a><br><a href="https://blog.csdn.net/v_JULY_v/article/details/6530142">从B树、B+树、B*树谈到R 树</a><br><a href="https://zhuanlan.zhihu.com/p/27700617">平衡二叉树、B树、B+树、B*树 理解其中一种你就都明白了</a><br><a href="https://zhuanlan.zhihu.com/p/54084335">漫画：什么是B-树？</a><br><a href="https://www.cnblogs.com/godoforange/p/11618643.html">从二叉查找树到B+树中间的各种树</a> //写的相当不错<br><a href="https://baike.baidu.com/item/B-%E6%A0%91/1975968?fr=aladdin">B-树 百度百科</a><br><a href="https://blog.csdn.net/JAck_chen0309/article/details/105268976">阿里面试，问了B+树，这个回答让我通过了</a><br>数据结构 邓俊辉</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;基本概念&quot;&gt;&lt;a href=&quot;#基本概念&quot; class=&quot;headerlink&quot; title=&quot;基本概念&quot;&gt;&lt;/a&gt;&lt;strong&gt;基本概念&lt;/strong&gt;&lt;/h2&gt;&lt;p&gt;&lt;code&gt;多路搜索树（multi-way search tree）&lt;/code&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;将传统的二叉搜索树，改造为多路搜索树——在中序的遍历下，这也是一种等价变换&lt;/li&gt;
&lt;li&gt;以k层为间隔如此重组，可以将二叉搜索树转化为等价的2^k路搜索树，统称为多路搜索树。&lt;/li&gt;
&lt;li&gt;多路搜索树同样支持查找等操作，而且效果与原来的二叉树完全等同；但是重要的是，其对外存的访问方式已经发生本质变化，是以大节点为单位从外存读取一组（而不是单个）关键码。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;B树就是B-树&lt;/code&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;B-树就是B树，中间的横线不是减号，直接读成B树即可。&lt;/li&gt;
&lt;li&gt;有的文章里出现的B-树，即为B树。因为B树的原英文名称为B-tree，而国内很多人喜欢把B-tree译作B-树，而事实上是，B-tree就是指的B树。&lt;/li&gt;
&lt;li&gt;B树是一种多路平衡搜索树，它的每一个节点最多包含K个孩子，k被称为&lt;code&gt;B树的阶&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;k的大小取决于磁盘页的大小&lt;/li&gt;
&lt;li&gt;B树比较矮胖，扁平化，B-树的宽度往往大于其高度&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;B+树&lt;/code&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;是应文件系统所需而产生的一种B-tree的变形树。&lt;/li&gt;&lt;/ul&gt;
    
    </summary>
    
    
      <category term="数据结构" scheme="https://stemha.github.io/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
      <category term="B-树" scheme="https://stemha.github.io/tags/B-%E6%A0%91/"/>
    
      <category term="B+树" scheme="https://stemha.github.io/tags/B-%E6%A0%91/"/>
    
  </entry>
  
  <entry>
    <title>红黑树详解</title>
    <link href="https://stemha.github.io/2020/06/02/%E7%BA%A2%E9%BB%91%E6%A0%91%E8%AF%A6%E8%A7%A3/"/>
    <id>https://stemha.github.io/2020/06/02/%E7%BA%A2%E9%BB%91%E6%A0%91%E8%AF%A6%E8%A7%A3/</id>
    <published>2020-06-02T13:14:52.000Z</published>
    <updated>2020-08-10T04:19:21.698Z</updated>
    
    <content type="html"><![CDATA[<h2 id="二叉查找树"><a href="#二叉查找树" class="headerlink" title="二叉查找树"></a>二叉查找树</h2><p>学习红黑树之前，先理解一下二叉查找树。</p><a id="more"></a><h3 id="二叉查找树（BST）具备什么特性呢？"><a href="#二叉查找树（BST）具备什么特性呢？" class="headerlink" title="二叉查找树（BST）具备什么特性呢？"></a><strong>二叉查找树（BST）具备什么特性呢？</strong></h3><ol><li>左子树上<strong>所有结点</strong>的值均小于或等于它的根结点的值。</li><li>右子树上<strong>所有结点</strong>的值均大于或等于它的根结点的值。</li><li>左、右子树也分别为二叉排序树。</li><li>查找和插入的过程类似于二分查找的思想，查找所需的最大次数等于二叉树的深度</li></ol><h3 id="二叉查找树（BST）缺点有哪些？"><a href="#二叉查找树（BST）缺点有哪些？" class="headerlink" title="二叉查找树（BST）缺点有哪些？"></a><strong>二叉查找树（BST）缺点有哪些？</strong></h3><p>主要体现在插入新的节点的时候<br>假设初始的二叉查找树只有三个结点，根结点值为9，左孩子值为8，右孩子值为12：<br>接下来我们依次插入如下五个结点：7,6,5,4,3。依照二叉查找树的特性，结果会变成什么样呢？<br>最终的二叉查找树会非常的不平衡，左子树的深度为6，右边子树的深度为1（一棵好端端的树变成了瘸子，两边的子树不均衡了），这样会导致查找的性能大打折扣，几乎变成了线性查找；</p><h3 id="二叉查找树的删除操作"><a href="#二叉查找树的删除操作" class="headerlink" title="二叉查找树的删除操作"></a><strong>二叉查找树的删除操作</strong></h3><ol><li>待删除的结点没有子结点：节点没有孩子，因此直接删除即可。</li><li>待删除的结点有一个孩子：只有左孩子，于是我们让左孩子结点A取代被删除的结点，结点A以下的结点关系无需变动。（右孩子也是一样的）</li><li>待删除的结点有两个孩子：这种情况比较复杂。此时，我们需要选择与待删除结点最接近的结点来取代它。</li></ol><h2 id="AVL树与红黑树的差别"><a href="#AVL树与红黑树的差别" class="headerlink" title="AVL树与红黑树的差别"></a><strong>AVL树与红黑树的差别</strong></h2><p>AVL是严格平衡的二叉树，要求每个节点的左右子树高度差不超过1；<br>红黑树更宽松一些，要求任一一条路径的长度都不超过其他路径长度的两倍。<br>正因为这个差别AVL的查找效率更高，但是平衡调整的成本也更高。在需要频繁查找时，选用AVL树更合适，频繁插入删除时，选用红黑树更合适。</p><h2 id="红黑树"><a href="#红黑树" class="headerlink" title="红黑树"></a><strong>红黑树</strong></h2><h3 id="目的"><a href="#目的" class="headerlink" title="目的"></a><strong>目的</strong></h3><p>红黑树主要是为了解决上面的问题（可以说是一种策略，通过红黑树算法，让二叉查找树变成平衡二叉查找树）</p><h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a><strong>概念</strong></h3><p>红黑树就是一种平衡的二叉查找树，说他平衡的意思是他不会变成“瘸子”，左腿特别长或者右腿特别长。<br>红黑树针对<code>AVL树的不足</code>（AVL树删除操作之后的重新平衡可能需要做到多达O(lon n)次旋转，从而频繁地导致全树的整体拓扑结构的大幅变化）进行了改进。<br><code>红黑树保证</code>：每次插入或者删除之后的重新平衡过程，全树拓扑结构的更新仅仅涉及常数个节点。尽管最坏情况下也需要对多达O(lon n)个节点重新染色，但是就分摊意义而言，仅仅为O(1)个。<br><code>红黑树的适度平衡标准</code>：任一节点左右子树的高度不得超过两倍。（由下面这五条规则来保证）<br>除了符合二叉查找树的特性之外，还具体下列的<code>特性</code>：</p><ol><li>结点是红色或者黑色</li><li>根结点是黑色</li><li>每个叶子的节点都是黑色的空结点（NULL）//这些是引入的外部节点，使得二叉树扩展为真二叉树</li><li>每个红色结点的两个子结点都是黑色的。（从每个叶子到根的所有路径上不能有两个连续的红色结点）</li><li>从任意结点到其每个叶子的所有路径都包含相同的黑色结点。</li></ol><p><code>引申</code>:</p><ol><li>红节点都是树的内部结点，根节点和外部结点（叶结点）都是黑结点//由第(1)(2)两条规则可知</li><li>红节点的孩子不可能是红节点，也就是说红节点的父亲必为黑节点，从每个叶子到根的所有路径上不能有两个连续的红色结点//由第(3)两条规则可知</li><li>从根节点到任一节点的途中，黑节点都不少于红节点</li><li>从任一节点到其任一后代外部节点的沿途，黑节点的总数亦必相等。//由第(4)两条规则可知</li></ol><p>//根节点深度解释为1，更好理解；解释为0，更好计算；我们在这里采用后者<br><code>黑深度（black depth）</code>从上向下描述：</p><ul><li>从根节点到任一节点的途中，黑节点都不少于红节点，除去根节点本身，沿途所经过的黑节点的总数成为黑深度</li><li>所有外部节点的黑深度统一</li></ul><p><code>黑高度（black height）</code>从下向上描述：</p><ul><li>从任一节点到其任一后代外部节点的沿途，除去外部节点（黑色），沿途所经过的黑节点的总数称为该节点的黑高度。</li><li>所有外部节点的黑高度统一，均为0</li></ul><h2 id="插入和删除"><a href="#插入和删除" class="headerlink" title="插入和删除"></a><strong>插入和删除</strong></h2><p>当插入和删除节点的时候，红黑树的规则可能会被打破，这时候就需要做出一些调整，从而继续维持我们的规则<br>什么情况下会破坏红黑树的规则，什么情况下不会破坏规则呢？我们举两个简单的例子：<br>这个例子去找一下图吧<br><img src="https://ss.csdn.net/p?https://mmbiz.qpic.cn/mmbiz_png/7aAwtBAnkeWuLdsJjhUIH6zSdibEuPmO0icObg27WWD4rOiaWDjFicBxLDc5Zhia6L9CdukoegDTziaPoV7bcMWdVN3w/640?wx_fmt=png" alt="黑色的NULL节点可忽略"><br>例如上面标准的红黑树，插入值为14的节点。插入之后发现仍然满足红黑树的要求！<br><img src="https://pic2.zhimg.com/80/v2-333eecc13e9396954bcf31e23d2611a9_720w.jpg" alt="插入值为14的节点"><br>但是如果插入值为21的节点呢？<br><img src="https://pic1.zhimg.com/80/v2-ea137ceadfdbed94969aee9ee92dba00_720w.jpg" alt="插入值为21的节点"><br>由于父结点22是红色结点（插入的节点默认是红色是因为如果是黑色可能会影响规则5），因此这种情况打破了红黑树的规则4（每个红色结点的两个子结点都是黑色），必须进行调整，使之重新符合红黑树的规则。</p><h3 id="调整红黑树的方法"><a href="#调整红黑树的方法" class="headerlink" title="调整红黑树的方法"></a><strong>调整红黑树的方法</strong></h3><blockquote><p>开始玩魔方都是要照着魔方公式一点点玩的，多玩几次就熟悉了。红黑树也和玩魔方一样。<br>红黑树有两大操作:</p></blockquote><ul><li>recolor (重新标记黑色或红色)</li><li>rotation (旋转，这是树达到平衡的关键)<pre><code>- 左旋转 - 右旋转</code></pre></li></ul><h3 id="左旋的示意图"><a href="#左旋的示意图" class="headerlink" title="左旋的示意图"></a><strong>左旋的示意图</strong></h3><p>逆时针旋转红黑树的两个结点，使得父结点被自己的右孩子取代，而自己成为自己的左孩子。<br><img src="https://pic2.zhimg.com/80/v2-0b3dbdbbcd00f51279dbdebd52b4ae31_720w.jpg" alt="左旋的示意图"></p><h3 id="右旋的示意图"><a href="#右旋的示意图" class="headerlink" title="右旋的示意图"></a><strong>右旋的示意图</strong></h3><p>顺时针旋转红黑树的两个结点，使得父结点被自己的左孩子取代，而自己成为自己的右孩子。<br><img src="https://pic4.zhimg.com/80/v2-8616d6af5228e2ec754ce00f978a26e3_720w.jpg" alt="右旋的示意图"></p><h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a><strong>示例</strong></h3><p>为了符合红黑树的规则，会把节点红变黑或者黑变红。<br>下图展示的是红黑树的部分，需要注意节点25并非根节点。因为21和22链接出现红色，不符合规则4，所以把22红变黑：<br><img src="https://ss.csdn.net/p?https://mmbiz.qpic.cn/mmbiz_png/7aAwtBAnkeWuLdsJjhUIH6zSdibEuPmO0hiamsAGkdo8kj14yiciaibrbFTyAf51HZA7fP1MO3hrsAg2G8SQs1VNtVw/640?wx_fmt=png" alt="把22红变黑"><br>但这样还是不符合规则5（但是，仅仅把一个结点变色，会导致相关路径凭空多出一个黑色结点，这样就打破了规则5。），所以需要把25黑变红，看下图：<br><img src="https://ss.csdn.net/p?https://mmbiz.qpic.cn/mmbiz_png/7aAwtBAnkeWuLdsJjhUIH6zSdibEuPmO0HOZicH7iaKX9RicZMulmsQXzVvUWtMjy1SPT85jwemWIvKZnrtia5BFvLg/640?wx_fmt=png" alt="把25黑变红"><br>但是25和27仍然是红色，不满规则4，所以需要将27变为黑色<br><img src="https://ss.csdn.net/p?https://mmbiz.qpic.cn/mmbiz_png/7aAwtBAnkeWuLdsJjhUIH6zSdibEuPmO01nVGUtichXicFElC0RQAqC0npkicByK6V90twxlNkh5icZhrRghpsribib0g/640?wx_fmt=png" alt="将27变为黑色"><br>但这只是局部结束了，全局仍然不能满足条件，15和17仍然是两个连续的红节点，不满足规则4，把17变黑也不行，因为13根节点为黑色，其子节点必为红色。<br><strong>只能进行旋转了！</strong><br>按照左旋转，对上边已经变色完成之后图进行左旋转。<br><img src="https://ss.csdn.net/p?https://mmbiz.qpic.cn/mmbiz_png/7aAwtBAnkeWuLdsJjhUIH6zSdibEuPmO0tnhtib62xibE4S6w15Eic3KX96VmklZjFSaLbD7p55lOfbW9qXuVFdjhw/640?wx_fmt=png" alt="左旋转"><br>旋转之后，由于根节点是红色，需要变黑色<br><img src="https://ss.csdn.net/p?https://mmbiz.qpic.cn/mmbiz_png/7aAwtBAnkeWuLdsJjhUIH6zSdibEuPmO0KRexJich3zEAw5ZHpB33FLbM38iaHhpNkmiaCHcdxfQTG96zoh4Y50HdA/640?wx_fmt=png" alt="根节点是红色，需要变黑色"><br>但是仍然不满足规则5，接下来使用右旋转<br><img src="https://ss.csdn.net/p?https://mmbiz.qpic.cn/mmbiz_png/7aAwtBAnkeWuLdsJjhUIH6zSdibEuPmO0hCL7dicLiaA1JJMeqibRw1A4U1kOlSNkX7KbR1ykHds5VvYlbWOEfnxuQ/640?wx_fmt=png" alt="右旋转"><br><img src="https://ss.csdn.net/p?https://mmbiz.qpic.cn/mmbiz_png/7aAwtBAnkeWuLdsJjhUIH6zSdibEuPmO0VhKic8z8XSZZ84ibEFXtNcT3pQeS9co1tldvWUNiaq8CAFA7a6DJe6fIw/640?wx_fmt=png" alt="avatar"><br>最后一个步骤，变色<br><img src="https://ss.csdn.net/p?https://mmbiz.qpic.cn/mmbiz_png/7aAwtBAnkeWuLdsJjhUIH6zSdibEuPmO0pE7v9kLqscvjFvEPCX4W88Xquq6E25zWEQQMVMhByD1KFbqbvp6U5w/640?wx_fmt=png" alt="最后一个步骤，变色"><br>我晕，这也太复杂了！！！！</p><h3 id="红黑树插入节点的5种情况"><a href="#红黑树插入节点的5种情况" class="headerlink" title="红黑树插入节点的5种情况"></a><strong>红黑树插入节点的5种情况</strong></h3><ol><li>新结点（A）位于树根，没有父结点。 //这种局面，直接让新结点变色为黑色，</li><li>新结点（B）的父结点是黑色。 //这种局面，新插入的红色结点B并没有打破红黑树的规则，所以不需要做任何调整。</li><li>新结点（D）的父结点和叔叔(父节点的兄弟)结点都是红色。 //参照下面的总结</li><li>新结点（D）的父结点是红色，叔叔结点是黑色或者没有叔叔，且新结点是父结点的右孩子，父结点（B）是祖父结点的左孩子。<br> 4.1 以结点B为轴，做一次左旋转，使得新结点D成为父结点，原来的父结点B成为D的左孩子,变成了局面5.</li><li>新结点（D）的父结点是红色，叔叔结点是黑色或者没有叔叔，且新结点是父结点的左孩子，父结点（B）是祖父结点的左孩子。<br> 5.1 我们以结点A为轴，做一次右旋转，使得结点B成为祖父结点，结点A成为结点B的右孩子。接下来，我们让结点B变为黑色，结点A变为红色。</li></ol><p><a href="https://zhuanlan.zhihu.com/p/79980618">红黑树，超强动静图详解，简单易懂</a><br>概括起来就是<br>假设我们插入的新节点为 X</p><ol><li>将新插入的节点标记为红色</li><li>如果 X 是根结点(root)，则标记为黑色</li><li>如果 X 的 parent 不是黑色，同时 X 也不是 root:<br> 3.1. 如果 X 的 uncle (叔叔) 是红色<pre><code>3.11.  将 parent 和 uncle 标记为黑色3.12. 将 grand parent (祖父) 标记为红色3.13. 让 X 节点的颜色与 X 祖父的颜色相同，然后重复步骤 2、3</code></pre> 3.2. 如果 X 的 uncle (叔叔) 是黑色，我们要分四种情况处理。//刚刚说了 X 的 uncle 是红色的情况，接下来要说是黑色的情况<pre><code>3.21.  左左 (P 是 G 的左孩子，并且 X 是 P 的左孩子)3.22.  左右 (P 是 G 的左孩子，并且 X 是 P 的右孩子)3.23.  右右 (和 3.21镜像过来，恰好相反)3.24.  右左 (和 3.22镜像过来，恰好相反)</code></pre></li></ol><p>上面的描述过于复杂，还是看图解吧！<a href="https://zhuanlan.zhihu.com/p/143396578">漫画：什么是红黑树？（完整版）</a></p><h3 id="红黑树删除节点的5种情况"><a href="#红黑树删除节点的5种情况" class="headerlink" title="红黑树删除节点的5种情况"></a><strong>红黑树删除节点的5种情况</strong></h3><p>第一步：如果待删除结点有两个非空的孩子结点，转化成待删除结点只有一个孩子（或没有孩子）的情况。</p><p>第二步：根据待删除结点和其唯一子结点的颜色，分情况处理。</p><ol><li>自身是红色，子结点是黑色：</li><li>自身是黑色，子结点是红色：</li><li>自身是黑色，子结点也是黑色，或者子结点是空叶子结点：</li></ol><p>第三步：遇到双黑结点，在子结点顶替父结点之后，分成6种子情况处理。</p><ol><li>结点2是红黑树的根结点：</li><li>结点2的父亲、兄弟、侄子结点都是黑色：</li><li>结点2的兄弟结点是红色：</li><li>结点2的父结点是红色，兄弟和侄子结点是黑色：</li><li>结点2的父结点随意，兄弟结点B是黑色右孩子，左侄子结点是红色，右侄子结点是黑色：</li><li>结点2的父结点随意，兄弟结点B是黑色右孩子，右侄子结点是红色：</li></ol><p>上面的描述过于复杂，还是看图解吧！<a href="https://zhuanlan.zhihu.com/p/143396578">漫画：什么是红黑树？（完整版）</a></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p><a href="https://zhuanlan.zhihu.com/p/143396578">漫画：什么是红黑树？（完整版）</a><br><a href="https://blog.csdn.net/zandaoguang/article/details/100117456">漫画算法：5分钟搞明白红黑树到底是什么？</a><br><a href="https://www.jianshu.com/p/e136ec79235c">30张图带你彻底理解红黑树</a><br><a href="https://www.cnblogs.com/skywang12345/p/3245399.html">红黑树(一)之 原理和算法详细介绍</a><br><a href="https://zhuanlan.zhihu.com/p/79980618">红黑树，超强动静图详解，简单易懂</a>//这个讲的比较好<br>数据结构 邓俊辉</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;二叉查找树&quot;&gt;&lt;a href=&quot;#二叉查找树&quot; class=&quot;headerlink&quot; title=&quot;二叉查找树&quot;&gt;&lt;/a&gt;二叉查找树&lt;/h2&gt;&lt;p&gt;学习红黑树之前，先理解一下二叉查找树。&lt;/p&gt;
    
    </summary>
    
    
      <category term="数据结构" scheme="https://stemha.github.io/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
      <category term="红黑树" scheme="https://stemha.github.io/tags/%E7%BA%A2%E9%BB%91%E6%A0%91/"/>
    
  </entry>
  
  <entry>
    <title>deque常用操作</title>
    <link href="https://stemha.github.io/2020/06/01/deque%E5%B8%B8%E7%94%A8%E6%93%8D%E4%BD%9C/"/>
    <id>https://stemha.github.io/2020/06/01/deque%E5%B8%B8%E7%94%A8%E6%93%8D%E4%BD%9C/</id>
    <published>2020-06-01T08:17:03.000Z</published>
    <updated>2020-08-10T04:19:21.629Z</updated>
    
    <content type="html"><![CDATA[<h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a><strong>概念</strong></h2><p><code>Deque（双向队列）</code></p><ul><li>和Queue差不多 ,但是特殊的是Deque可是扩充内存。（实际上连续内存的容器不能随意扩充，所以Deque也不是真正意义上的扩充内存，而是封装了底层的表象。</li><li>Deque是由一段段构成的，当走到尾端时自动跳到下一段，（支持迭代器++操作）。</li><li>每次扩充，就会申请一个段，从而实现了内存连续的假象。</li></ul><p>默认的stack 和 queue 都基于 deque 容器实现， priority_queue 则基于 vector 容器实现。<br>对于给定的适配器，其关联的容器必须满足一定的约束条件。</p><ul><li>stack 适配器所关联的基础容器可以是任意一种顺序容器类型。因此，stack 栈可以建立在vector、list 或者 deque 容器之上。</li><li>queue 适配器要求其关联的基础容器必须提供 push_front 运算，因此只能建立在 list 或deque容器上，而不能建立在vector 容器上。</li><li>priority_queue 适配器要求提供随机访问功能，因此可建立在vector 或 deque 容器上，但不能建立在 list 容器上。<a id="more"></a></li></ul><h2 id="特性"><a href="#特性" class="headerlink" title="特性"></a><strong>特性</strong></h2><ul><li>deque 容器也擅长在序列尾部添加或删除元素（时间复杂度为O(1)），而不擅长在序列中间添加或删除元素。</li><li>deque 容器也可以根据需要修改自身的容量和大小。</li><li><code>缺点</code>：频繁的插入删除时候，Deque并不适合。</li><li>Deque采用分块线型结构存储数据，两个迭代器分别指向首尾元素，而且拥有具有高效的push_back(),push_front()函数。 正因如此，所以Deque不易实现capacity和reverse函数。</li></ul><h2 id="头文件"><a href="#头文件" class="headerlink" title="头文件"></a>头文件</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;deque&gt;</span></span></span><br></pre></td></tr></table></figure><h2 id="模板"><a href="#模板" class="headerlink" title="模板"></a>模板</h2><p>deque 容器以模板类 deque<T>（T 为存储元素的类型）的形式在 <deque> 头文件中，并位于 std 命名空间中。</deque></T></p><h2 id="set初始化方法"><a href="#set初始化方法" class="headerlink" title="set初始化方法"></a><strong>set初始化方法</strong></h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> num[] = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>&#125;;</span><br><span class="line"><span class="built_in">deque</span>&lt;<span class="keyword">int</span>&gt; di&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>&#125;;</span><br><span class="line"><span class="built_in">deque</span>&lt;<span class="keyword">int</span>&gt;q; 创建一个空双向队列 <span class="built_in">deque</span>&lt;T&gt; deqT;默认构造形式</span><br><span class="line"><span class="built_in">deque</span>&lt;<span class="keyword">int</span>&gt;p(<span class="number">5</span>); 创建一个具有<span class="number">5</span>个成员的双向队列</span><br><span class="line"><span class="built_in">deque</span>&lt;<span class="keyword">int</span>&gt;s(<span class="number">5</span>,<span class="number">1</span>);       创建一个具有<span class="number">5</span>个成员且初始值为<span class="number">1</span>的双向队列 <span class="built_in">deque</span>(n, elem);构造函数将n个elem拷贝给本身</span><br><span class="line"><span class="built_in">deque</span>&lt;<span class="keyword">int</span>&gt;s2(s);  创建一个双向队列s2，并拷贝s中所有成员 <span class="built_in">deque</span>(<span class="keyword">const</span> <span class="built_in">deque</span> &amp;deq);拷贝构造函数。</span><br><span class="line"><span class="built_in">deque</span>&lt;<span class="keyword">int</span>&gt;n(num,num+<span class="number">5</span>); 创建一个双向队列n，并拷贝num至num+<span class="number">5</span>中元素入队 <span class="built_in">deque</span>(beg, end);构造函数将[beg, end)区间中的元素拷贝给本身。</span><br></pre></td></tr></table></figure><h2 id="交换"><a href="#交换" class="headerlink" title="交换"></a>交换</h2><p><code>swap(deque&lt;T&gt;&amp; other)</code>：和参数的元素进行交换，所包含对象的类型必须相同。：将当前 deque 中的元素和参数 deque 中的元素交换。它们需要包含相同类型的元素。也可以调用全局函数模板 swap() 来完成同样的操作。</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">void swap(deque&lt;T&gt; &amp;x)　重载1：x.swap(y)</span><br><span class="line">void swap(deque&lt;T&gt; &amp;x, deque&lt;T&gt; &amp;y)  重载2: swap(x, y)</span><br></pre></td></tr></table></figure><h2 id="常用操作"><a href="#常用操作" class="headerlink" title="常用操作"></a><strong>常用操作</strong></h2><h3 id="插入操作"><a href="#插入操作" class="headerlink" title="插入操作"></a>插入操作</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">q.push_front(a);  头部入队</span><br><span class="line">q.push_back(b);   尾部入队</span><br><span class="line">q.insert(iter,x); 在iter位置插入x，iter为迭代器</span><br></pre></td></tr></table></figure><h3 id="覆盖"><a href="#覆盖" class="headerlink" title="覆盖"></a>覆盖</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">q.assign(n,x); 将n个x赋值到<span class="built_in">deque</span>中，并清空<span class="built_in">deque</span>容器之前的内容。</span><br><span class="line">q.assign(iter1,iter2); 将区间[iter1，iter2)内元素赋值给<span class="built_in">deque</span>，并清空<span class="built_in">deque</span>容器之前的内容。</span><br></pre></td></tr></table></figure><h3 id="删除与清空操作"><a href="#删除与清空操作" class="headerlink" title="删除与清空操作"></a>删除与清空操作</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">q.pop_front();   头部出队</span><br><span class="line">q.pop_back();    尾部出队</span><br><span class="line">q.clear();   清空双向队列</span><br><span class="line">q.erase(iter);   删除iter元素，iter为迭代器</span><br><span class="line">q.erase(beg,end);删除[beg,end)区间的数据，返回下一个数据的位置。</span><br></pre></td></tr></table></figure><h3 id="deque数据存取"><a href="#deque数据存取" class="headerlink" title="deque数据存取"></a>deque数据存取</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">q.front();  返回头成员</span><br><span class="line">q.back();   返回尾元素</span><br><span class="line">q.at(idx);  返回索引idx所指的数据，如果idx越界，抛出out_of_range。</span><br><span class="line"><span class="keyword">operator</span>[]; 返回索引idx所指的数据，如果idx越界，不抛出异常，直接出错。</span><br></pre></td></tr></table></figure><h3 id="大小-是否为空"><a href="#大小-是否为空" class="headerlink" title="大小/是否为空"></a>大小/是否为空</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">q.size();     返回双向队列成员个数</span><br><span class="line">q.max_size(); 返回系统支持成员最大个数</span><br><span class="line">q.empty();    判断双向队列是否为空</span><br></pre></td></tr></table></figure><h3 id="迭代器"><a href="#迭代器" class="headerlink" title="迭代器"></a>迭代器</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">q.begin();  返回头部迭代器</span><br><span class="line">q.end();    返回尾部迭代器</span><br><span class="line">q.rbegin(); 返回尾部反向迭代器</span><br><span class="line">q.rend();   返回头部反向迭代器</span><br><span class="line">q.cbegin(); 和 begin() 功能相同，只不过在其基础上，增加了 <span class="keyword">const</span> 属性，不能用于修改元素。</span><br><span class="line">q.cend();   和 end() 功能相同，只不过在其基础上，增加了 <span class="keyword">const</span> 属性，不能用于修改元素。</span><br><span class="line">q.crbegin();和rbegin() 功能相同，只不过在其基础上，增加了 <span class="keyword">const</span> 属性，不能用于修改元素。</span><br><span class="line">q.crend();  和 rend() 功能相同，只不过在其基础上，增加了 <span class="keyword">const</span> 属性，不能用于修改元素。</span><br></pre></td></tr></table></figure><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p><a href="http://c.biancheng.net/view/6860.html">C++ STL deque容器底层实现原理（深度剖析）</a><br><a href="http://c.biancheng.net/stl/">STL教程：C++ STL快速入门（非常详细）</a><br><a href="https://www.cnblogs.com/linuxAndMcu/p/10260124.html">[C++ STL]deque使用详解</a><br><a href="https://blog.csdn.net/weixin_42462202/article/details/87537503">C++ deque的用法与示例</a>//解释的图片不错<br><a href="https://blog.csdn.net/engineerxin/article/details/104818657">《C++Primer》第九章-顺序容器-学习笔记(3)-容器适配器&amp;栈&amp;队列</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;概念&quot;&gt;&lt;a href=&quot;#概念&quot; class=&quot;headerlink&quot; title=&quot;概念&quot;&gt;&lt;/a&gt;&lt;strong&gt;概念&lt;/strong&gt;&lt;/h2&gt;&lt;p&gt;&lt;code&gt;Deque（双向队列）&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;和Queue差不多 ,但是特殊的是Deque可是扩充内存。（实际上连续内存的容器不能随意扩充，所以Deque也不是真正意义上的扩充内存，而是封装了底层的表象。&lt;/li&gt;
&lt;li&gt;Deque是由一段段构成的，当走到尾端时自动跳到下一段，（支持迭代器++操作）。&lt;/li&gt;
&lt;li&gt;每次扩充，就会申请一个段，从而实现了内存连续的假象。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;默认的stack 和 queue 都基于 deque 容器实现， priority_queue 则基于 vector 容器实现。&lt;br&gt;对于给定的适配器，其关联的容器必须满足一定的约束条件。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;stack 适配器所关联的基础容器可以是任意一种顺序容器类型。因此，stack 栈可以建立在vector、list 或者 deque 容器之上。&lt;/li&gt;
&lt;li&gt;queue 适配器要求其关联的基础容器必须提供 push_front 运算，因此只能建立在 list 或deque容器上，而不能建立在vector 容器上。&lt;/li&gt;
&lt;li&gt;priority_queue 适配器要求提供随机访问功能，因此可建立在vector 或 deque 容器上，但不能建立在 list 容器上。&lt;/li&gt;&lt;/ul&gt;
    
    </summary>
    
    
      <category term="C++" scheme="https://stemha.github.io/categories/C/"/>
    
    
      <category term="C++标准库" scheme="https://stemha.github.io/tags/C-%E6%A0%87%E5%87%86%E5%BA%93/"/>
    
      <category term="deque" scheme="https://stemha.github.io/tags/deque/"/>
    
  </entry>
  
  <entry>
    <title>多线程编程-按序打印（leetcode 1114）</title>
    <link href="https://stemha.github.io/2020/05/26/%E5%A4%9A%E7%BA%BF%E7%A8%8B%E7%BC%96%E7%A8%8B-%E6%8C%89%E5%BA%8F%E6%89%93%E5%8D%B0%EF%BC%88leetcode-1114%EF%BC%89/"/>
    <id>https://stemha.github.io/2020/05/26/%E5%A4%9A%E7%BA%BF%E7%A8%8B%E7%BC%96%E7%A8%8B-%E6%8C%89%E5%BA%8F%E6%89%93%E5%8D%B0%EF%BC%88leetcode-1114%EF%BC%89/</id>
    <published>2020-05-26T08:40:05.000Z</published>
    <updated>2020-08-10T04:19:21.674Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a><strong>题目描述</strong></h2><a id="more"></a><p>提供了一个类：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Foo</span> &#123;</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">one</span><span class="params">()</span> </span>&#123; print(<span class="string">"one"</span>); &#125;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">two</span><span class="params">()</span> </span>&#123; print(<span class="string">"two"</span>); &#125;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">three</span><span class="params">()</span> </span>&#123; print(<span class="string">"three"</span>); &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>三个不同的线程将会共用一个 Foo 实例。</p><ul><li>线程 A 将会调用 one() 方法</li><li>线程 B 将会调用 two() 方法</li><li>线程 C 将会调用 three() 方法</li></ul><p>请设计修改程序，以确保 two() 方法在 one() 方法之后被执行，three() 方法在 two() 方法之后被执行。</p><h2 id="题目解析"><a href="#题目解析" class="headerlink" title="题目解析"></a><strong>题目解析</strong></h2><p>多个线程在cpu中执行，运行不同的程序段，但是这些程序之间有先后关系：</p><ul><li>one()方法如果不运行完毕啊，就不能运行two()方法。</li><li>two()方法如果不运行完毕啊，就不能运行three()方法。</li></ul><p>也属于并发的问题：<br>并发主要为多任务情况设计。但如果应用不当，可能会引发一些漏洞。按照情况不同，可以分为三种：</p><ul><li><code>竞态条件（Race Condition）</code>：由于多进程之间的竞争执行，导致程序未按照期望的顺序输出。</li><li><code>死锁</code>：并发程序等待一些必要资源，导致没有程序可以执行。</li><li><code>资源不足</code>：进程被永久剥夺了运行所需的资源。</li></ul><p><code>竞态条件</code>是指同一个程序多线程访问同一个资源，如果对资源的访问顺序敏感，就称存在竞态条件，代码区成为临界区。<br>最常见的竞态条件为：先检测后执行。（比如有一个if判断语句，多个线程都通过这个判断时候，下一步的执行可能造成各种奇怪的结果）</p><p><code>竞态条件的解决方案</code>为：需要某些关键部分代码具有排他性，即在给定的时间内，只有一个线程可以进入关键部分代码。(可以将这种机制看做限制关键部分代码访问的锁)</p><ul><li>在该机制下，一旦一个线程进入关键部分，它就可以阻止其他线程进入该关键部分。</li><li>如果该线程未被授权进入关键代码，可以认为该线程被阻塞或进入睡眠状态。</li><li>这种机制还具有唤醒其他等待线程的功能。</li></ul><p>总之，为了<code>防止出现并发竞争状态</code>，需要一种具有两种功能的机制：</p><ol><li>关键部分的访问控制。</li><li>通知阻塞线程。</li></ol><h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a><strong>代码实现</strong></h2><h3 id="方法1：使用-synchronization"><a href="#方法1：使用-synchronization" class="headerlink" title="方法1：使用 synchronization"></a><strong>方法1：使用 synchronization</strong></h3><p>信号量和互斥锁(mutex)的区别：互斥锁只允许一个线程进入临界区，而信号量允许多个线程同时进入临界区。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;semaphore.h&gt;  信号量Semaphore头文件</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Foo</span> &#123;</span></span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line">    <span class="keyword">sem_t</span> firstJobDone; 信号量的数据类型为结构<span class="keyword">sem_t</span>，它本质上是一个长整型的数。</span><br><span class="line">    <span class="keyword">sem_t</span> secondJobDone;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"></span><br><span class="line">    Foo() &#123;</span><br><span class="line">        sem_init(&amp;firstJobDone, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">        sem_init(&amp;secondJobDone, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">first</span><span class="params">(function&lt;<span class="keyword">void</span>()&gt; printFirst)</span> </span>&#123;</span><br><span class="line">        printFirst();</span><br><span class="line">        sem_post(&amp;firstJobDone);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">second</span><span class="params">(function&lt;<span class="keyword">void</span>()&gt; printSecond)</span> </span>&#123;</span><br><span class="line">        sem_wait(&amp;firstJobDone);</span><br><span class="line">        printSecond();</span><br><span class="line">        sem_post(&amp;secondJobDone);</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">third</span><span class="params">(function&lt;<span class="keyword">void</span>()&gt; printThird)</span> </span>&#123;</span><br><span class="line">        sem_wait(&amp;secondJobDone);</span><br><span class="line">        printThird();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><code>semaphore</code>是由操作系统提供的。</p><ul><li>LINUX下，一般是＃include&lt;asm/semaphore.h&gt; 或 ＃include&lt;semaphore.h&gt;</li><li>Windows下，一般是windows.h</li></ul><p>信号量的数据类型为结构sem_t，它本质上是一个长整型的数。<br><a href="https://baike.baidu.com/item/sem_init/4280487?fr=aladdin">sem_init</a>：<code>sem_init</code>函数是Posix信号量操作中的函数。sem_init() 初始化一个定位在 sem 的匿名信号量。value 参数指定信号量的初始值。 pshared 参数指明信号量是由进程内线程共享，还是由进程之间共享。如果 pshared 的值为 0，那么信号量将被进程内的线程共享，并且应该放置在这个进程的所有线程都可见的地址上(如全局变量，或者堆上动态分配的变量)。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">sem_init</span><span class="params">(<span class="keyword">sem_t</span> *sem, <span class="keyword">int</span> pshared, <span class="keyword">unsigned</span> <span class="keyword">int</span> value)</span></span>;</span><br><span class="line">sem ：指向信号量对象</span><br><span class="line">pshared : 指明信号量的类型。不为<span class="number">0</span>时此信号量在进程间共享，否则只能为当前进程的所有线程共享。</span><br><span class="line">value : 指定信号量值的大小</span><br><span class="line">sem_init() 成功时返回 <span class="number">0</span>；错误时，返回 <span class="number">-1</span>，并把 errno 设置为合适的值。</span><br></pre></td></tr></table></figure><p><a href="https://baike.baidu.com/item/sem_post">sem_post</a>：<code>sem_post</code>是给信号量的值加上一个“1”，它是一个“原子操作”－－－即同时对同一个信号量做加“1”操作的两个线程是不会冲突的；</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">sem_post</span><span class="params">(<span class="keyword">sem_t</span> *sem)</span></span>;</span><br><span class="line">sem_post() 成功时返回 <span class="number">0</span>；错误时，信号量的值没有更改，<span class="number">-1</span> 被返回，并设置 errno 来指明错误</span><br></pre></td></tr></table></figure><p><a href="https://baike.baidu.com/item/sem_wait">sem_wait</a>: <code>sem_wait</code>是一个函数，也是一个原子操作，它的作用是从信号量的值减去一个“1”，但它永远会先等待该信号量为一个非零值才开始做减法。也就是说，如果你对一个值为2的信号量调用sem_wait()，线程将会继续执行，将信号量的值将减到1。<br>如果对一个值为0的信号量调用sem_wait()，这个函数就会原地等待直到有其它线程增加了这个值使它不再是0为止。(也就是说是等于0时会阻塞操作)</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">sem_wait</span><span class="params">(<span class="keyword">sem_t</span> *sem)</span></span></span><br></pre></td></tr></table></figure><h3 id="方法2：使用mutex加锁解锁"><a href="#方法2：使用mutex加锁解锁" class="headerlink" title="方法2：使用mutex加锁解锁"></a><strong>方法2：使用mutex加锁解锁</strong></h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Foo</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    Foo() &#123;</span><br><span class="line"><span class="comment">//构造函数先执行，将mutex变量进行加锁初始化。</span></span><br><span class="line">        m2.lock();  /首先给second()和third()上锁</span><br><span class="line">        m3.lock(); </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">first</span><span class="params">(function&lt;<span class="keyword">void</span>()&gt; printFirst)</span> </span>&#123;</span><br><span class="line">        printFirst();</span><br><span class="line">        m2.unlock();  /first()运行完了就解开second()的锁</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">second</span><span class="params">(function&lt;<span class="keyword">void</span>()&gt; printSecond)</span> </span>&#123;</span><br><span class="line">        m2.lock();    这里是锁的入口，如果已经上锁了，就不能执行了，如果没有，就可以执行下一步，并把锁值<span class="number">0</span>置为<span class="number">1</span></span><br><span class="line">        printSecond();</span><br><span class="line">        m3.unlock();  <span class="comment">//second()运行完了就解开third()的锁</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">third</span><span class="params">(function&lt;<span class="keyword">void</span>()&gt; printThird)</span> </span>&#123;</span><br><span class="line">        m3.lock();</span><br><span class="line">        printThird();</span><br><span class="line">        m3.unlock();</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="built_in">std</span>::mutex m2, m3;</span><br><span class="line">    </span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p><a href="https://leetcode-cn.com/problems/print-in-order/solution/an-xu-da-yin-by-leetcode/">力扣（LeetCode）</a><br><a href="https://www.cnblogs.com/lenmom/p/7998969.html">C++多线程同步之Semaphore(信号量)</a><br><a href="https://blog.csdn.net/skyroben/article/details/72513985">进程间通信方式——信号量（Semaphore）</a><br><a href="https://www.cnblogs.com/zhengAloha/p/8665719.html">线程同步之信号量（sem_init,sem_post,sem_wait）</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;题目描述&quot;&gt;&lt;a href=&quot;#题目描述&quot; class=&quot;headerlink&quot; title=&quot;题目描述&quot;&gt;&lt;/a&gt;&lt;strong&gt;题目描述&lt;/strong&gt;&lt;/h2&gt;
    
    </summary>
    
    
      <category term="算法" scheme="https://stemha.github.io/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="C++" scheme="https://stemha.github.io/tags/C/"/>
    
      <category term="leetcode" scheme="https://stemha.github.io/tags/leetcode/"/>
    
      <category term="多线程" scheme="https://stemha.github.io/tags/%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
    
      <category term="信号量" scheme="https://stemha.github.io/tags/%E4%BF%A1%E5%8F%B7%E9%87%8F/"/>
    
      <category term="互斥锁" scheme="https://stemha.github.io/tags/%E4%BA%92%E6%96%A5%E9%94%81/"/>
    
  </entry>
  
  <entry>
    <title>STL排序相关库</title>
    <link href="https://stemha.github.io/2020/05/24/STL%E6%8E%92%E5%BA%8F%E7%9B%B8%E5%85%B3%E5%BA%93/"/>
    <id>https://stemha.github.io/2020/05/24/STL%E6%8E%92%E5%BA%8F%E7%9B%B8%E5%85%B3%E5%BA%93/</id>
    <published>2020-05-24T14:05:45.000Z</published>
    <updated>2020-08-10T04:19:21.626Z</updated>
    
    <content type="html"><![CDATA[<h2 id="sort"><a href="#sort" class="headerlink" title="sort"></a>sort</h2><p>函数声明</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">RandomAccessIterator</span>&gt;</span></span><br><span class="line"><span class="class">  <span class="title">void</span> <span class="title">sort</span> (<span class="title">RandomAccessIterator</span> <span class="title">first</span>, <span class="title">RandomAccessIterator</span> <span class="title">last</span>);</span></span><br><span class="line">  </span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">RandomAccessIterator</span>, <span class="title">class</span> <span class="title">Compare</span>&gt;</span></span><br><span class="line"><span class="class">  <span class="title">void</span> <span class="title">sort</span> (<span class="title">RandomAccessIterator</span> <span class="title">first</span>, <span class="title">RandomAccessIterator</span> <span class="title">last</span>, <span class="title">Compare</span> <span class="title">comp</span>);</span></span><br></pre></td></tr></table></figure><a id="more"></a><p>cmp()函数的返回值要是bool，核心要义也是比较。<br>sort默认是从小到大，所以在cmp如果还是要从小到大，那就a &lt; b，返回值bool为true，不改变；<br>如果想要从大到小排，那么就要return a &gt; b，因为默认a小于b，所以此时返回的bool就是false，要改变排序。<br>也就是说，</p><ul><li>返回的值是true的话，代表a先放，b后放</li><li>返回的值是false的话，代表b先放，a后放</li></ul><h2 id="stable-sort"><a href="#stable-sort" class="headerlink" title="stable_sort"></a>stable_sort</h2><p>排序的时候保持相对位置，即相同的数字相对位置是不变的。</p><h2 id="partition"><a href="#partition" class="headerlink" title="partition"></a>partition</h2><p>函数声明</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">ForwardIterator</span>, <span class="title">class</span> <span class="title">UnaryPredicate</span>&gt;</span></span><br><span class="line"><span class="class">  <span class="title">ForwardIterator</span> <span class="title">partition</span> (<span class="title">ForwardIterator</span> <span class="title">first</span>, <span class="title">ForwardIterator</span> <span class="title">last</span>, <span class="title">UnaryPredicate</span> <span class="title">pred</span>);</span></span><br></pre></td></tr></table></figure><p>作用：<br>对[first, last)元素进行处理，使得满足p的元素移到[first, last)前部，不满足的移到后部，返回第一个不满足p元素所在的迭代器，如果都满足的话返回last</p><h2 id="stable-partition"><a href="#stable-partition" class="headerlink" title="stable_partition"></a>stable_partition</h2><p>排序的时候保持相对位置，即相同的数字相对位置是不变的</p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p>C++ STL<br><a href="https://blog.csdn.net/SmartLoveyu/article/details/90445129">算法随记：C++ sort()函数，自定义cmp()的使用理解</a><br><a href="https://blog.csdn.net/weixin_43743711/article/details/105694973">STL—–排序类——sort与partition</a><br><a href="https://blog.csdn.net/drecik__/article/details/79268840">C++ stl算法——partition</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;sort&quot;&gt;&lt;a href=&quot;#sort&quot; class=&quot;headerlink&quot; title=&quot;sort&quot;&gt;&lt;/a&gt;sort&lt;/h2&gt;&lt;p&gt;函数声明&lt;/p&gt;
&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;template&lt;/span&gt; &amp;lt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;RandomAccessIterator&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;  &lt;span class=&quot;title&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;sort&lt;/span&gt; (&lt;span class=&quot;title&quot;&gt;RandomAccessIterator&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;first&lt;/span&gt;, &lt;span class=&quot;title&quot;&gt;RandomAccessIterator&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;last&lt;/span&gt;);&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  	&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;template&lt;/span&gt; &amp;lt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;RandomAccessIterator&lt;/span&gt;, &lt;span class=&quot;title&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Compare&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;  &lt;span class=&quot;title&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;sort&lt;/span&gt; (&lt;span class=&quot;title&quot;&gt;RandomAccessIterator&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;first&lt;/span&gt;, &lt;span class=&quot;title&quot;&gt;RandomAccessIterator&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;last&lt;/span&gt;, &lt;span class=&quot;title&quot;&gt;Compare&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;comp&lt;/span&gt;);&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="C++" scheme="https://stemha.github.io/categories/C/"/>
    
    
      <category term="C++" scheme="https://stemha.github.io/tags/C/"/>
    
      <category term="C++标准库" scheme="https://stemha.github.io/tags/C-%E6%A0%87%E5%87%86%E5%BA%93/"/>
    
  </entry>
  
  <entry>
    <title>音标发音</title>
    <link href="https://stemha.github.io/2020/05/24/%E9%9F%B3%E6%A0%87%E5%8F%91%E9%9F%B3/"/>
    <id>https://stemha.github.io/2020/05/24/%E9%9F%B3%E6%A0%87%E5%8F%91%E9%9F%B3/</id>
    <published>2020-05-24T12:49:11.000Z</published>
    <updated>2020-08-10T04:19:21.758Z</updated>
    
    <content type="html"><![CDATA[<h2 id="清辅音与浊辅音"><a href="#清辅音与浊辅音" class="headerlink" title="清辅音与浊辅音"></a>清辅音与浊辅音</h2><a id="more"></a><table><thead><tr><th align="left">分类</th><th align="left">音标</th></tr></thead><tbody><tr><td align="left">清辅音</td><td align="left">发音时声带不振动的辅音，有/p/ /t/ /k/ /f/ /θ/ /s/ /ʃ/ /h/ /tʃ/ /ts/ /tr/</td></tr><tr><td align="left">浊辅音</td><td align="left">发音时声带振动的辅音，有/b/ /d/ /g/ /v/ /ð/ /z/ /ʒ/ /r/ /dʒ/ /dz/ /dr/ /j/ /w/ /m/ /n/ /ŋ/ /l/</td></tr><tr><td align="left">二者区别</td><td align="left">读一下/v/和/f/感受一下就知道了</td></tr></tbody></table><h3 id="ts"><a href="#ts" class="headerlink" title="/ts/"></a>/ts/</h3><ul><li>清辅音  声带不震动 发<strong>“次”</strong>的音   牙齿轻咬，舌端贴住齿龈，堵住气流。然后舌尖略微下降，气流泄出。</li></ul><h3 id="ð"><a href="#ð" class="headerlink" title="/ð/"></a>/ð/</h3><ul><li>浊辅音，发音时声带要稍微振动，发出声来，但不要送气。</li><li>口型助记： 外形则像舌头顶在上下牙齿之间。</li><li>英语中只有字母组合“th”会发这个音。</li><li>容易把它发成舌尖齿龈摩擦音/z/；还有些人误把它发成舌端齿龈破擦音/dz/，其实只要记住轻轻舌头顶住，就不会错。</li></ul><h3 id="θ"><a href="#θ" class="headerlink" title="/θ/"></a>/θ/</h3><ul><li>清辅音，发音时把舌尖放在上下齿之间，舌尖轻触上齿，略略露出齿外，气流由舌齿间泻出，摩擦成音</li><li>口型助记：外形像上下牙齿咬着舌头。</li><li>英语中只有字母组合“th”发这个音。</li><li>容易把它发成“舌尖齿龈摩擦音”/s/，其实只要记住轻轻咬住舌尖，就不会错。</li></ul><p>音标中辅音并不难，发音基本和汉语一样，需要注意的是[θ]和[ð]这两个，因为这两个发音在汉语里是没有的。可以毫不客气地说，在中国，80%以上学英语的人这两个发音都是发成[s]和[z]的</p><h2 id="相关资源"><a href="#相关资源" class="headerlink" title="相关资源"></a>相关资源</h2><p><a href="https://en-yinbiao.xiao84.com/yinbiaofayin/ts.html">清辅音/ts/的发音方法</a><br><a href="https://en-yinbiao.xiao84.com/yinbiaofayin/qq.html">浊辅音/ð/的发音方法</a><br><a href="https://www.bkw.cn/zszbks/ask/2590576.html">如何用英语48个音标发音用中文谐音标示</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;清辅音与浊辅音&quot;&gt;&lt;a href=&quot;#清辅音与浊辅音&quot; class=&quot;headerlink&quot; title=&quot;清辅音与浊辅音&quot;&gt;&lt;/a&gt;清辅音与浊辅音&lt;/h2&gt;
    
    </summary>
    
    
      <category term="英语学习" scheme="https://stemha.github.io/categories/%E8%8B%B1%E8%AF%AD%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="音标" scheme="https://stemha.github.io/tags/%E9%9F%B3%E6%A0%87/"/>
    
  </entry>
  
  <entry>
    <title>单例模式C++实现</title>
    <link href="https://stemha.github.io/2020/05/21/%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8FC-%E5%AE%9E%E7%8E%B0/"/>
    <id>https://stemha.github.io/2020/05/21/%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8FC-%E5%AE%9E%E7%8E%B0/</id>
    <published>2020-05-20T16:03:09.000Z</published>
    <updated>2020-08-10T04:19:21.671Z</updated>
    
    <content type="html"><![CDATA[<h2 id="单例模式"><a href="#单例模式" class="headerlink" title="单例模式"></a>单例模式</h2><p>singleton pattern<br>purpose：使得一个类只能有一个实例，并提供一个全局访问的位置<br>probliem：遇到实例的频繁创建和销毁时，效率低<br>solution：创建时候检测实例是否存在<br>key code：构造函数是私有的</p><a id="more"></a><h2 id="如何选择懒汉和饿汉模式："><a href="#如何选择懒汉和饿汉模式：" class="headerlink" title="如何选择懒汉和饿汉模式："></a>如何选择懒汉和饿汉模式：</h2><p>特点与选择：<br>懒汉：在访问量较小时，采用懒汉实现。这是以时间换空间。<br>饿汉：由于要进行线程同步，所以在访问量比较大，或者可能访问的线程比较多时，采用饿汉实现，可以实现更好的性能。这是以空间换时间。</p><h2 id="懒汉式单例模式代码（线程不安全）"><a href="#懒汉式单例模式代码（线程不安全）" class="headerlink" title="懒汉式单例模式代码（线程不安全）"></a>懒汉式单例模式代码（线程不安全）</h2><p>顾名思义，该模式只在你需要对象时才会生成单例对象(意思是太懒了，懒汉不到万不得已就不会去实例化类)<br>缺点：</p><ul><li>懒汉式是以时间换空间的方式。（在getInstance中new instance然后返回）</li><li>适用于单线程的环境！</li><li>不是线程安全的！<ul><li>它不是线程安全的。假设当前有N个线程同时调用getInstance（）方法，由于当前还没有对象生成，所以一部分同时都进入步骤 2,那么就会由多个线程创建多个多个singleton对象。</li></ul></li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">懒汉式单例模式</span><br><span class="line">- 私有静态指针，指向单例</span><br><span class="line">- 私有构造函数</span><br><span class="line">- 公有获取实例的静态函数</span><br><span class="line"><span class="meta"># <span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">singleton</span>&#123;</span></span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">        <span class="function"><span class="keyword">static</span> singleton *<span class="title">getinstance</span><span class="params">()</span></span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (instance == <span class="literal">NULL</span>)                   步骤 <span class="number">1</span></span><br><span class="line">            &#123;</span><br><span class="line">                instance = <span class="keyword">new</span> singleton();         步骤 <span class="number">2</span>   </span><br><span class="line">                <span class="keyword">return</span> instance;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;   </span><br><span class="line">                <span class="built_in">cout</span> &lt;&lt; <span class="string">"instance has already initialized"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">                <span class="keyword">return</span> instance;</span><br><span class="line">            &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span>:</span><br><span class="line">        <span class="keyword">static</span> singleton * instance ;</span><br><span class="line">        singleton()</span><br><span class="line">        &#123;   </span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; <span class="string">"instance initialized"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;;</span><br><span class="line">singleton *  singleton::instance = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    singleton * singleton1 = singleton::getinstance();</span><br><span class="line">    singleton * singleton2 = singleton::getinstance();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//输出</span></span><br><span class="line"><span class="comment">//instance initialized</span></span><br><span class="line"><span class="comment">//instance has already initialized</span></span><br></pre></td></tr></table></figure><h2 id="饿汉式单例模式代码（线程安全）"><a href="#饿汉式单例模式代码（线程安全）" class="headerlink" title="饿汉式单例模式代码（线程安全）"></a>饿汉式单例模式代码（线程安全）</h2><p>顾名思义，该模式在类被加载时就会实例化一个对象。（意思是有就吃，有加载个类的话，饿汉就直接在类里面建立）</p><ul><li>饿汉式是以空间换时间的方式。（在静态区初始化instance，然后通过getInstance返回）</li><li>该模式能简单快速的创建一个单例对象，而且是线程安全的(只在类加载时才会初始化，以后都不会)。</li><li>缺点，就是不管你要不要都会直接创建一个对象，会消耗一定的性能(当然很小很小，几乎可以忽略不计，所以这种模式在很多场合十分常用而且十分简单)</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta"># <span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">singleton</span>&#123;</span></span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">static</span> singleton *<span class="title">getinstance</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span>    instance;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span>:</span><br><span class="line">        <span class="keyword">static</span> singleton *instance;</span><br><span class="line">        singleton()</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; <span class="string">"instance initialized"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">singleton * singleton::instance = <span class="keyword">new</span> singleton();  <span class="comment">//关键的一步</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    singleton *singleton1 = singleton::getinstance();</span><br><span class="line">    singleton *singleton2 = singleton::getinstance();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意，这个单例在主函数之前就已经加载了，比如下面主函数输出的结果就是instance initialized。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">int main()&#123;</span><br><span class="line">return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="线程安全的懒汉式单例模式代码"><a href="#线程安全的懒汉式单例模式代码" class="headerlink" title="线程安全的懒汉式单例模式代码"></a>线程安全的懒汉式单例模式代码</h2><p>加了一个互斥锁</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta"># <span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta"># <span class="meta-keyword">include</span> <span class="meta-string">&lt;mutex&gt;</span></span></span><br><span class="line"><span class="meta"># <span class="meta-keyword">include</span> <span class="meta-string">&lt;pthread.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">singleton</span>&#123;</span></span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">        <span class="keyword">static</span> <span class="keyword">pthread_mutex_t</span> mutex;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">static</span> singleton *<span class="title">getinstance</span><span class="params">()</span></span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">           pthread_mutex_lock(&amp;mutex);</span><br><span class="line">            <span class="keyword">if</span> (instance == <span class="literal">NULL</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                instance = <span class="keyword">new</span> singleton();</span><br><span class="line">                <span class="keyword">return</span> instance;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;   </span><br><span class="line">                <span class="built_in">cout</span> &lt;&lt; <span class="string">"instance has already initialized"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">                <span class="keyword">return</span> instance;</span><br><span class="line">            &#125;</span><br><span class="line">            pthread_mutex_unlock(&amp;mutex);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span>:</span><br><span class="line">        <span class="keyword">static</span> singleton * instance ;</span><br><span class="line">        singleton()</span><br><span class="line">        &#123;   </span><br><span class="line">            pthread_mutex_init(&amp;mutex,<span class="literal">NULL</span>); <span class="comment">//初始化为一个互斥锁</span></span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; <span class="string">"instance initialized"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        &#125;      </span><br><span class="line">&#125;;</span><br><span class="line">singleton *  singleton::instance = <span class="literal">NULL</span>;</span><br><span class="line"><span class="keyword">pthread_mutex_t</span> singleton::mutex;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    singleton * singleton1 = singleton::getinstance();</span><br><span class="line">    singleton * singleton2 = singleton::getinstance();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意：<br>互斥变量使用特定的数据类型：pthread_mutex_t<br>线程函数编译时需要添加特殊编译选项：<br>gcc read.c -lpthread  比如最简单的编译命令，记住要在后加-lpthread选项，<br>否则会出现undefined reference to ‘pthread_mutex_lock’报错。</p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p><a href="https://www.cnblogs.com/william-dai/p/10938666.html">饿汉式和懒汉式（单例模式详解)</a><br><a href="https://www.cnblogs.com/xuelisheng/p/9744301.html">C++ 单例模式(懒汉、饿汉模式)</a><br><a href="https://www.cnblogs.com/fenghualong/p/11568398.html">C++关于锁的总结（一）</a><br><a href="https://blog.csdn.net/weixin_43913500/article/details/106038580">windows下std 没有成员 thread、thread not member of std</a><br><a href="https://blog.csdn.net/Allen_Walker_QAQ/article/details/80637010">c++线程中的几种锁</a></p><h2 id="本文许可证"><a href="#本文许可证" class="headerlink" title="本文许可证"></a>本文许可证</h2><p>本文遵循 <a href="https://github.com/huihut/interview/blob/master/LICENSE">CC BY-NC-SA 4.0</a>（署名 - 非商业性使用 - 相同方式共享） 协议，转载请注明出处，不得用于商业目的。<br><a href="LICENSE"><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9pLmNyZWF0aXZlY29tbW9ucy5vcmcvbC9ieS1uYy1zYS80LjAvODh4MzEucG5n?x-oss-process=image/format,png" alt="CC BY-NC-SA 4.0"></a></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;单例模式&quot;&gt;&lt;a href=&quot;#单例模式&quot; class=&quot;headerlink&quot; title=&quot;单例模式&quot;&gt;&lt;/a&gt;单例模式&lt;/h2&gt;&lt;p&gt;singleton pattern&lt;br&gt;purpose：使得一个类只能有一个实例，并提供一个全局访问的位置&lt;br&gt;probliem：遇到实例的频繁创建和销毁时，效率低&lt;br&gt;solution：创建时候检测实例是否存在&lt;br&gt;key code：构造函数是私有的&lt;/p&gt;
    
    </summary>
    
    
      <category term="软件工程" scheme="https://stemha.github.io/categories/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/"/>
    
    
      <category term="C++" scheme="https://stemha.github.io/tags/C/"/>
    
      <category term="单例模式" scheme="https://stemha.github.io/tags/%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>C++变量初始化</title>
    <link href="https://stemha.github.io/2020/05/20/C-%E5%8F%98%E9%87%8F%E5%88%9D%E5%A7%8B%E5%8C%96/"/>
    <id>https://stemha.github.io/2020/05/20/C-%E5%8F%98%E9%87%8F%E5%88%9D%E5%A7%8B%E5%8C%96/</id>
    <published>2020-05-20T13:45:42.000Z</published>
    <updated>2020-08-10T04:19:21.221Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>声明只是表明了变量的数据类型和属性，并不分配内存；定义则是需要分配内存的。 </p></blockquote><a id="more"></a><h2 id="静态成员"><a href="#静态成员" class="headerlink" title="静态成员"></a>静态成员</h2><p>类的静态成员（static member）必须在类内声明，在类外初始化<br>比如：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span>&#123;</span></span><br><span class="line"> <span class="keyword">private</span>: </span><br><span class="line"><span class="keyword">static</span> <span class="keyword">int</span> count ; <span class="comment">// 类内声明 </span></span><br><span class="line">&#125;; </span><br><span class="line"><span class="keyword">int</span> A::count = <span class="number">0</span> ;  类外初始化，不必再加<span class="keyword">static</span>关键字</span><br></pre></td></tr></table></figure><p>为什么？因为静态成员属于整个类，而不属于某个对象，如果在类内初始化，会导致每个对象都包含该静态成员，这是矛盾的。</p><h2 id="类内初始化的成员"><a href="#类内初始化的成员" class="headerlink" title="类内初始化的成员"></a>类内初始化的成员</h2><p><strong>能在类中初始化的成员只有一种，那就是<code>静态常量成员</code></strong>。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span>&#123;</span></span><br><span class="line"> <span class="keyword">private</span>: </span><br><span class="line"><span class="keyword">static</span> <span class="keyword">const</span> <span class="keyword">int</span> count = <span class="number">0</span>;  静态常量成员可以在类内初始化 </span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>静态成员和常量成员不能在类内初始化。比如const int count = 0; 和static int count = 0;是不能在类里面初始化的。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a><strong>总结</strong></h2><p><code>静态常量数据成员</code>static const int count:</p><ul><li>可以在类内初始化(即类内声明的同时初始化)，也可以在类外，即类的实现文件中初始化。</li><li>不能在构造函数中初始化，也不能在构造函数的初始化列表中初始化；</li></ul><p><code>静态非常量数据成员</code>static int count:</p><ul><li><strong>只能在类外，即类的实现文件中初始化</strong></li><li>不能在构造函数中初始化</li><li>不能在构造函数的初始化列表中初始化</li></ul><p><code>非静态的常量数据成员</code>const int count:</p><ul><li>不能在类内初始化，也不能在构造函数中初始化，</li><li><strong>只能且必须在构造函数的初始化列表中初始化</strong>；</li></ul><p><code>非静态的非常量数据成员</code>int count:</p><ul><li>不能在类内初始化,不能在类外。</li><li>可以在构造函数中初始化</li><li>可以在构造函数的初始化列表中初始化</li></ul><p><strong>在类外定义的成员变量肯定是有static 关键字的。</strong></p><h2 id="初始化规则"><a href="#初始化规则" class="headerlink" title="初始化规则"></a><strong>初始化规则</strong></h2><p>系统如何初始化取决于变量的类型以及变量定义的位置。</p><h2 id="内置类型变量初始化"><a href="#内置类型变量初始化" class="headerlink" title="内置类型变量初始化　"></a>内置类型变量初始化　</h2><p>内置类型变量是否自动初始化取决于变量定义的位置。</p><ul><li>函数体外定义的变量初始成0；（注意是主函数外）</li><li>函数体内定义的变量不进行自动初始化。</li></ul><h2 id="类类型变量初始化"><a href="#类类型变量初始化" class="headerlink" title="类类型变量初始化"></a>类类型变量初始化</h2><p>类类型变量在定义时，如果没有提供初始化式，则会自动调用默认构造函数进行初始化（不论变量在哪里定义，都会被初始化，只不过初始化为什么样子由编译器决定了）。<br>如果某类型没有默认构造函数，则定义该类型对象时必须提供显示初始化式。</p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p><a href="https://blog.csdn.net/Clengupup/article/details/83059231">C++中静态变量的声明与初始化</a><br><a href="https://www.jb51.net/article/91234.htm">详解C++中变量的初始化规则</a><br><a href="https://www.cnblogs.com/caidi/p/9679673.html">C++的变量初始化</a></p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;声明只是表明了变量的数据类型和属性，并不分配内存；定义则是需要分配内存的。 &lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="C++" scheme="https://stemha.github.io/categories/C/"/>
    
    
      <category term="C++" scheme="https://stemha.github.io/tags/C/"/>
    
      <category term="初始化" scheme="https://stemha.github.io/tags/%E5%88%9D%E5%A7%8B%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>C++运算符重载</title>
    <link href="https://stemha.github.io/2020/05/20/C-%E8%BF%90%E7%AE%97%E7%AC%A6%E9%87%8D%E8%BD%BD/"/>
    <id>https://stemha.github.io/2020/05/20/C-%E8%BF%90%E7%AE%97%E7%AC%A6%E9%87%8D%E8%BD%BD/</id>
    <published>2020-05-19T17:32:45.000Z</published>
    <updated>2020-08-10T04:19:21.222Z</updated>
    
    <content type="html"><![CDATA[<h2 id="运算符重载"><a href="#运算符重载" class="headerlink" title="运算符重载"></a>运算符重载</h2><p><code>重载的运算符</code>是<code>带有特殊名称的函数</code></p><ul><li>函数名是由关键字 operator 和其后要重载的运算符符号构成的。</li><li>与其他函数一样，重载运算符有一个<strong>返回类型</strong>和一个<strong>参数列表</strong>。</li></ul><p>大多数的重载运算符可被定义为普通的非成员函数或者被定义为类成员函数。</p><a id="more"></a><h2 id="保持语义不变"><a href="#保持语义不变" class="headerlink" title="保持语义不变"></a>保持语义不变</h2><ul><li>不改变运算符的优先级</li><li>不改变运算符的结合性</li><li>不改变运算符需要的操作数</li><li>不能创建新的运算符</li></ul><h2 id="定义为类成员函数-令运算符重载函数作为类的成员函数"><a href="#定义为类成员函数-令运算符重载函数作为类的成员函数" class="headerlink" title="定义为类成员函数(令运算符重载函数作为类的成员函数)"></a>定义为类成员函数(令运算符重载函数作为类的成员函数)</h2><p>例子,这里是二元运算符，在类的内部，只需要传入一个外部元素。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Box <span class="keyword">operator</span>+(<span class="keyword">const</span> Box&amp;);</span><br></pre></td></tr></table></figure><p>声明加法运算符用于把两个 Box 对象相加，返回最终的 Box 对象。</p><h2 id="定义为普通的非成员函数-令运算符重载函数作为类的友元函数"><a href="#定义为普通的非成员函数-令运算符重载函数作为类的友元函数" class="headerlink" title="定义为普通的非成员函数(令运算符重载函数作为类的友元函数)"></a>定义为普通的非成员函数(令运算符重载函数作为类的友元函数)</h2><p>例子,这里是二元运算符，不在类里面，需要传入两个元素。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Box <span class="keyword">operator</span>+(<span class="keyword">const</span> Box&amp;, <span class="keyword">const</span> Box&amp;);</span><br></pre></td></tr></table></figure><p>声明加法运算符用于把两个 Box 对象相加，返回最终的 Box 对象。</p><p>这时候，就需要作为友元函数来操作类的对象了；</p><h2 id="两种方式的区别"><a href="#两种方式的区别" class="headerlink" title="两种方式的区别"></a>两种方式的区别</h2><p>区别在于令运算符重载函数作为类的成员函数在调用时只需输入一个被操作数参数即可，另一个操作数参数则不需要输入；令运算符重载函数作为类的友元函数在调用时不仅要求输入被操作数参数，还要求输入被操作数参数。</p><pre><code>产生了这个区别的原因在于令运算符重载函数作为类的成员函数和令运算符重载函数作为类的友元函数有本质区别：(1)调用作为类的成员函数的运算符重载函数时，类对象肯定已经被建立了，这时对象中对应的私有数据成员存在。(2)调用作为类的友元函数的运算符重载函数时，类对象还未被建立，这时对象中对应私有数据成员不存在。</code></pre><h2 id="运算符重载的方法步骤"><a href="#运算符重载的方法步骤" class="headerlink" title="运算符重载的方法步骤"></a>运算符重载的方法步骤</h2><p>运算符重载函数的参数个数 等于 运算符操作数的个数。<br>但要注意，用成员函数重载时，对应于运算符左操作数的参数是默认传递的。</p><p>参数的顺序和左右操作数的顺序是一样的，这一点看看&lt;&lt; 和 &gt;&gt; 的重载就知道了。</p><h2 id="tips"><a href="#tips" class="headerlink" title="tips"></a>tips</h2><p>重载一元运算符，在类的内部，不需要传入元素，参数为0。</p><h2 id="重载-和–运算符号"><a href="#重载-和–运算符号" class="headerlink" title="重载++和–运算符号"></a>重载++和–运算符号</h2><p>int类型参数只是用来区别后置++与前置++，此外没有任何其他作用。</p><p>令运算符重载函数作为类的友元函数重载前置运算符和重载后置运算符分别如何实现？<br>答：也是一样的，传入参数多加一个int即可了</p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p><a href="https://blog.csdn.net/jacket_/article/details/89714947">C++的运算符重载</a><br><a href="https://www.runoob.com/cplusplus/cpp-overloading.html">C++ 重载运算符和重载函数</a><br><a href="https://blog.csdn.net/baidu_35679960/article/details/79592318">STL 中list的sort()方法使用总结</a><br><a href="https://blog.csdn.net/holdsky/article/details/8880962">STL 如何使用list::remove_if</a><br><a href="https://blog.csdn.net/Dreamer_lsf/article/details/84344174">C++ list.merge()使用方法</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;运算符重载&quot;&gt;&lt;a href=&quot;#运算符重载&quot; class=&quot;headerlink&quot; title=&quot;运算符重载&quot;&gt;&lt;/a&gt;运算符重载&lt;/h2&gt;&lt;p&gt;&lt;code&gt;重载的运算符&lt;/code&gt;是&lt;code&gt;带有特殊名称的函数&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;函数名是由关键字 operator 和其后要重载的运算符符号构成的。&lt;/li&gt;
&lt;li&gt;与其他函数一样，重载运算符有一个&lt;strong&gt;返回类型&lt;/strong&gt;和一个&lt;strong&gt;参数列表&lt;/strong&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;大多数的重载运算符可被定义为普通的非成员函数或者被定义为类成员函数。&lt;/p&gt;
    
    </summary>
    
    
      <category term="C++" scheme="https://stemha.github.io/categories/C/"/>
    
    
      <category term="C++" scheme="https://stemha.github.io/tags/C/"/>
    
      <category term="运算符" scheme="https://stemha.github.io/tags/%E8%BF%90%E7%AE%97%E7%AC%A6/"/>
    
      <category term="重载" scheme="https://stemha.github.io/tags/%E9%87%8D%E8%BD%BD/"/>
    
  </entry>
  
  <entry>
    <title>list常用操作</title>
    <link href="https://stemha.github.io/2020/05/20/list%E5%B8%B8%E7%94%A8%E6%93%8D%E4%BD%9C/"/>
    <id>https://stemha.github.io/2020/05/20/list%E5%B8%B8%E7%94%A8%E6%93%8D%E4%BD%9C/</id>
    <published>2020-05-19T16:29:24.000Z</published>
    <updated>2020-08-10T04:19:21.642Z</updated>
    
    <content type="html"><![CDATA[<h2 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h2><p>list</p><ul><li>底层数据结构为双向链表，支持快速增删</li><li>缺点是无法通过位置来直接访问序列中的元素，也就是说，不能索引元素。为了访问 list 内部的一个元素，必须一个一个地遍历元素，通常从第一个元素或最后一个元素开始遍历。</li><li>节点对象维护了两个指针，一个指向前一个节点，另一个指向下一个节点。</li><li>第一个元素的前向指针总是为 null,因为它前面没有元素，尾部元素的后向指针也总为 null。<a id="more"></a></li></ul><h2 id="头文件"><a href="#头文件" class="headerlink" title="头文件"></a>头文件</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;list&gt;</span></span></span><br></pre></td></tr></table></figure><h2 id="模板"><a href="#模板" class="headerlink" title="模板"></a>模板</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt; <span class="class"><span class="keyword">class</span> <span class="title">T</span>, <span class="title">class</span> <span class="title">Alloc</span> = <span class="title">allocator</span>&lt;T&gt; &gt; <span class="title">class</span> <span class="title">list</span>;</span></span><br></pre></td></tr></table></figure><h2 id="list初始化方法"><a href="#list初始化方法" class="headerlink" title="list初始化方法"></a><strong>list初始化方法</strong></h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">list</span>&lt;<span class="keyword">int</span>&gt;q; <span class="comment">//创建空List</span></span><br><span class="line"><span class="built_in">list</span>&lt;<span class="keyword">int</span>&gt;p(<span class="number">5</span>);     创建拥有<span class="number">5</span>个成员的List</span><br><span class="line"><span class="built_in">list</span>&lt;<span class="keyword">int</span>&gt;s(<span class="number">5</span>,<span class="number">1</span>);   创建拥有<span class="number">5</span>个成员，且初始值为<span class="number">1</span>的List</span><br><span class="line"><span class="built_in">list</span>&lt;<span class="keyword">int</span>&gt;s2(s);    创建s2，并拷贝s元素给s2</span><br><span class="line"><span class="built_in">list</span>&lt;<span class="keyword">int</span>&gt;s3(s.begin(),s.end());  创建s3，拷贝s.begin()至s.end()中元素给s3</span><br></pre></td></tr></table></figure><h2 id="交换"><a href="#交换" class="headerlink" title="交换"></a>交换</h2><p><code>swap(list&lt;T&gt;&amp; other)</code>：和参数的元素进行交换，所包含对象的类型必须相同。：将当前 map 中的元素和参数 map 中的元素交换。它们需要包含相同类型的元素。也可以调用全局函数模板 swap() 来完成同样的操作。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">void swap(list&lt;T&gt; &amp;x)　重载1：x.swap(y)</span><br><span class="line">void swap (list&lt;T&gt;&amp; x, list&lt;T&gt;&amp; y)  重载2: swap(x, y)</span><br><span class="line">q.swap(p) <span class="comment">//交换两个list</span></span><br></pre></td></tr></table></figure><h2 id="常用操作"><a href="#常用操作" class="headerlink" title="常用操作"></a><strong>常用操作</strong></h2><h2 id="插入"><a href="#插入" class="headerlink" title="插入"></a>插入</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">q.push_front(num)        返回值空  在<span class="built_in">list</span>的头部添加一个元素 </span><br><span class="line">q.push_back(num)         返回值空  在<span class="built_in">list</span>末尾增加一个元素。</span><br><span class="line">q.insert(iter,num)       在iter位置插入元素num。</span><br><span class="line">q.insert(iter,n,num)     在iter位置插入n个元素num。</span><br><span class="line">q.insert(iter,beg,end)   在iter位置插入区间为[beg,end)的元素。</span><br></pre></td></tr></table></figure><h3 id="大小与是否为空"><a href="#大小与是否为空" class="headerlink" title="大小与是否为空"></a>大小与是否为空</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">q.empty()      如果<span class="built_in">list</span>是空的则返回<span class="literal">true</span></span><br><span class="line">q.max_size()   返回<span class="built_in">list</span>能容纳的最大元素数量</span><br><span class="line">q.size()       返回<span class="built_in">list</span>中的元素个数</span><br><span class="line">q.resize(n)    从新定义链表的长度,超出原始长度部分用<span class="number">0</span>代替,小于原始部分删除。</span><br><span class="line">q.resize(n,num)从新定义链表的长度,超出原始长度部分用num代替。</span><br></pre></td></tr></table></figure><h3 id="删除与清空"><a href="#删除与清空" class="headerlink" title="删除与清空"></a>删除与清空</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">q.clear()     返回值空，删除所有元素 </span><br><span class="line">q.pop_back()  返回值空 删除最后一个元素</span><br><span class="line">q.pop_front() 返回值空 删除第一个元素</span><br><span class="line">q.erase(iter) 删除一个元素，并且返回下一个位置的迭代器</span><br><span class="line">q.remove(value)    从<span class="built_in">list</span>删除元素 <span class="function"><span class="keyword">void</span> <span class="title">remove</span> <span class="params">( <span class="keyword">const</span> T&amp; value )</span></span>;</span><br><span class="line">q.remove_if(MATCH) 按指定条件删除元素 返回值为空<span class="function"><span class="keyword">void</span>  <span class="title">list::remove_if</span><span class="params">( MATCH )</span></span></span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">iterator <span class="title">erase</span> <span class="params">( iterator position )</span></span>;</span><br><span class="line"><span class="function">iterator <span class="title">erase</span> <span class="params">( iterator first, iterator last )</span></span>;</span><br></pre></td></tr></table></figure><p>list中remove和erase都是删除一个元素，其中remove参数类型和数据类型一致，而erase参数类型是迭代器。<br>remove（aim）是删除链表中的aim元素，若有多个aim，都会删除，而<br>erase（it）是删除迭代器指定位置的元素，并且返回下一个位置的迭代器来看例子。</p><h3 id="查找"><a href="#查找" class="headerlink" title="查找"></a>查找</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">q.back()  返回最后一个元素 <span class="function">reference <span class="title">back</span> <span class="params">( )</span></span>;</span><br><span class="line">q.front() 返回第一个元素   <span class="function">reference <span class="title">front</span> <span class="params">( )</span></span>;</span><br></pre></td></tr></table></figure><h3 id="迭代器"><a href="#迭代器" class="headerlink" title="迭代器"></a>迭代器</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">q.begin() <span class="comment">//返回指向第一个元素的迭代器</span></span><br><span class="line">q.end() <span class="comment">//返回末尾的迭代器</span></span><br><span class="line">q.rbegin() <span class="comment">//返回指向第一个元素的逆向迭代器</span></span><br><span class="line">q.rend() <span class="comment">//指向list末尾的逆向迭代器</span></span><br></pre></td></tr></table></figure><h3 id="查找迭代器"><a href="#查找迭代器" class="headerlink" title="查找迭代器"></a>查找迭代器</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">q.get_allocator() <span class="comment">//返回list的配置器</span></span><br></pre></td></tr></table></figure><h2 id="反转list"><a href="#反转list" class="headerlink" title="反转list"></a>反转list</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">q.reverse() &#x2F;&#x2F;把list的元素倒转 void reverse ( );</span><br></pre></td></tr></table></figure><h2 id="合并两个list"><a href="#合并两个list" class="headerlink" title="合并两个list"></a>合并两个list</h2><p>STL list容器由于采用了双向迭代器，不支持随机访问，所以标准库的merge(), sort()等功能函数都不适用，list单独实现了merge()，sort()等函数。<br><code>splice与merge</code></p><ul><li>最大的不同:不用排序，也不要求原始链表有序。</li><li>相同点:被合并的链表或元素将消失。</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">q.merge(p);       合并2个有序的链表并使之有序,从新放到q中,释放p。</span><br><span class="line">q.merge(p,comp);  合并2个有序的链表并使之按照自定义规则排序之后从新放到q中,释放p。</span><br><span class="line">q.splice() &#x2F;&#x2F;合并两个list</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">list1.merge(list2)</span><br><span class="line">在使用merge前，必须使list1和list2已经排好顺序。并且，合并之后list1仍然是有序的</span><br></pre></td></tr></table></figure><p>splice是剪切，粘贴。用splice时当B与A合并后，B就为空。但是要记住：迭代器仍然指向原来的位置，即使原来的元素不存在了。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">将list2中的所有元素拷贝到list1中。在list1中的起始位置是it1.复制结束后，list2将为空。</span><br><span class="line">list1.splice(it1, list2); </span><br><span class="line"></span><br><span class="line">将list2中的元素，从it2开始，剪切到list1的it1起始的地方。</span><br><span class="line">list1.splice(it1, list2, it2);</span><br><span class="line"></span><br><span class="line">将链表list2从开始到结束都合并到it1开始的位置。</span><br><span class="line">list1.splice(it1, list2, it2begin, it2end);</span><br></pre></td></tr></table></figure><h2 id="排序sort"><a href="#排序sort" class="headerlink" title="排序sort()"></a>排序sort()</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">q.sort()     给list排序  返回值为空</span><br></pre></td></tr></table></figure><p>一个自定义的类，那么如果想为这个类所生成的对象排序的话，因为list.sort()默认排序需要重载 &lt; 操作符。所以我们必须在类对象里重载这个操作符</p><h2 id="删除list中重复的元素unique"><a href="#删除list中重复的元素unique" class="headerlink" title="删除list中重复的元素unique()"></a>删除list中重复的元素unique()</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">q.unique()  删除<span class="built_in">list</span>中重复的元素 返回值为空</span><br></pre></td></tr></table></figure><h2 id="输出"><a href="#输出" class="headerlink" title="输出"></a>输出</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">copy(q.begin(),q.end(),ostream_iterator&lt;<span class="keyword">int</span>&gt;(<span class="built_in">cout</span>,<span class="string">""</span>));</span><br></pre></td></tr></table></figure><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p><a href="https://blog.csdn.net/holdsky/article/details/8880962">STL 如何使用list::remove_if</a><br><a href="https://blog.csdn.net/fengguowuhengwin/article/details/12979327">容器链表中splice()、merge()、insert()方法的区别</a><br><a href="https://www.cnblogs.com/yelongsan/p/4049698.html">c++ list 合并list</a><br><a href="https://blog.csdn.net/baidu_35679960/article/details/79592318">STL 中list的sort()方法使用总结(运算符重载)</a><br><a href="https://blog.csdn.net/Dreamer_lsf/article/details/84">C++ list.merge()使用方法</a><br><a href="https://blog.csdn.net/qq_42673507/article/details/86678625">stl list中erase和remove区别</a><br><a href="https://blog.csdn.net/u010913001/article/details/78272751">std::list::sort()排序分析</a><br><a href="http://c.biancheng.net/view/440.html">C++ list(STL list)使用、创建和初始化</a><br><a href="https://stemha.github.io/2020/05/10/C++%E6%A0%87%E5%87%86%E5%BA%93%E5%AE%B9%E5%99%A8%E7%B1%BB%E6%A6%82%E8%BF%B0/#more">C++标准库容器类概述</a></p><h2 id="本文许可证"><a href="#本文许可证" class="headerlink" title="本文许可证"></a>本文许可证</h2><p>本文遵循 <a href="https://github.com/huihut/interview/blob/master/LICENSE">CC BY-NC-SA 4.0</a>（署名 - 非商业性使用 - 相同方式共享） 协议，转载请注明出处，不得用于商业目的。<br><a href="LICENSE"><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9pLmNyZWF0aXZlY29tbW9ucy5vcmcvbC9ieS1uYy1zYS80LjAvODh4MzEucG5n?x-oss-process=image/format,png" alt="CC BY-NC-SA 4.0"></a></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;基本概念&quot;&gt;&lt;a href=&quot;#基本概念&quot; class=&quot;headerlink&quot; title=&quot;基本概念&quot;&gt;&lt;/a&gt;基本概念&lt;/h2&gt;&lt;p&gt;list&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;底层数据结构为双向链表，支持快速增删&lt;/li&gt;
&lt;li&gt;缺点是无法通过位置来直接访问序列中的元素，也就是说，不能索引元素。为了访问 list 内部的一个元素，必须一个一个地遍历元素，通常从第一个元素或最后一个元素开始遍历。&lt;/li&gt;
&lt;li&gt;节点对象维护了两个指针，一个指向前一个节点，另一个指向下一个节点。&lt;/li&gt;
&lt;li&gt;第一个元素的前向指针总是为 null,因为它前面没有元素，尾部元素的后向指针也总为 null。&lt;/li&gt;&lt;/ul&gt;
    
    </summary>
    
    
      <category term="C++" scheme="https://stemha.github.io/categories/C/"/>
    
    
      <category term="C++标准库" scheme="https://stemha.github.io/tags/C-%E6%A0%87%E5%87%86%E5%BA%93/"/>
    
      <category term="list" scheme="https://stemha.github.io/tags/list/"/>
    
  </entry>
  
  <entry>
    <title>map常用操作</title>
    <link href="https://stemha.github.io/2020/05/19/map%E5%B8%B8%E7%94%A8%E6%93%8D%E4%BD%9C/"/>
    <id>https://stemha.github.io/2020/05/19/map%E5%B8%B8%E7%94%A8%E6%93%8D%E4%BD%9C/</id>
    <published>2020-05-19T09:55:56.000Z</published>
    <updated>2020-08-10T04:19:21.646Z</updated>
    
    <content type="html"><![CDATA[<h2 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h2><p>map</p><ul><li>map不能直接修改关键字，只能通过修改关键字的值间接修改关键字。</li><li>底层数据结构为红黑树，有序，不重复</li><li>map&lt;K，T&gt; 类模板定义在 map 文件头中，它定义了一个保存 T 类型对象的 map，每个 T 类型的对象都有一个关联的 K 类型的键。容器内对象的位置是通过比较键决定的。<a id="more"></a></li></ul><h2 id="头文件"><a href="#头文件" class="headerlink" title="头文件"></a>头文件</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta"># <span class="meta-keyword">include</span><span class="meta-string">&lt;map&gt;</span></span></span><br></pre></td></tr></table></figure><h2 id="模板"><a href="#模板" class="headerlink" title="模板"></a>模板</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt; <span class="class"><span class="keyword">class</span> <span class="title">Key</span>, <span class="title">class</span> <span class="title">T</span>, <span class="title">class</span> <span class="title">Pred</span> = <span class="title">less</span>&lt;Key&gt;, <span class="title">class</span> <span class="title">A</span> = <span class="title">allocator</span>&lt;T&gt; &gt;</span></span><br><span class="line"><span class="class"><span class="title">class</span> <span class="title">map</span>&#123;</span></span><br><span class="line">    ...</span><br><span class="line">    <span class="keyword">typedef</span> pair&lt; <span class="keyword">const</span> Key, T &gt; value_type;</span><br><span class="line">    ...</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">经常使用的，默认是less</span><br><span class="line"><span class="built_in">map</span>&lt;<span class="keyword">int</span>,<span class="keyword">double</span>,less&lt;<span class="keyword">int</span>&gt; &gt; MYMAP;      元素升序</span><br><span class="line"><span class="built_in">map</span>&lt;<span class="keyword">int</span>,<span class="keyword">double</span>,greater&lt;<span class="keyword">int</span>&gt; &gt; MYMAP;   元素降序</span><br></pre></td></tr></table></figure><h2 id="pair初始化方法"><a href="#pair初始化方法" class="headerlink" title="pair初始化方法"></a><strong>pair初始化方法</strong></h2><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">map</span>&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt; q;</span><br><span class="line"><span class="built_in">map</span>&lt;k, v&gt; m;    创建一个名为 m 的空 <span class="built_in">map</span> 对象，其键和值的类型分别为 k 和 v</span><br><span class="line">map&lt;k, v&gt; m(m2);创建 m2 的副本 m，m 与 m2 必须有相同的键类型和值类型</span><br><span class="line">map&lt;k, v&gt; m(b, e);创建 map 类型的对象 m，存储迭代器 b 和 e 标记的范围内所有元素的副本。元素的类型必须能转换为 pair&lt;const k, v&gt;</span><br></pre></td></tr></table></figure><h2 id="交换"><a href="#交换" class="headerlink" title="交换"></a>交换</h2><p><code>swap(map&lt;K,V&gt;&amp; other)</code>：和参数的元素进行交换，所包含对象的类型必须相同。：将当前 map 中的元素和参数 map 中的元素交换。它们需要包含相同类型的元素。也可以调用全局函数模板 swap() 来完成同样的操作。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T1</span>, <span class="title">class</span> <span class="title">T2</span>&gt; <span class="title">void</span> <span class="title">swap</span>(<span class="title">map</span>&lt;K,V&gt; &amp;<span class="title">x</span>)　重载1：<span class="title">x</span>.<span class="title">swap</span>(<span class="title">y</span>)</span></span><br><span class="line"><span class="class"><span class="title">template</span> &lt;class T1, class T2&gt; <span class="title">void</span> <span class="title">swap</span> (<span class="title">map</span>&lt;K,V&gt;&amp; <span class="title">x</span>, <span class="title">map</span>&lt;K,V&gt;&amp; <span class="title">y</span>)  重载2:</span> swap(x, y)</span><br></pre></td></tr></table></figure><h2 id="map定义的类型"><a href="#map定义的类型" class="headerlink" title="map定义的类型"></a>map定义的类型</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">map</span>&lt;K,V&gt;::key_type    在 <span class="built_in">map</span> 容器中，用做索引的键的类型</span><br><span class="line"><span class="built_in">map</span>&lt;K,V&gt;::mapped_type在 <span class="built_in">map</span> 容器中，键所关联的值的类型</span><br><span class="line"><span class="built_in">map</span>&lt;K,V&gt;::value_type一个 pair 类型，它的first 元素具有 <span class="keyword">const</span> <span class="built_in">map</span>&lt;K,V&gt;::key_type 类型，而 second 元素则为 <span class="built_in">map</span>&lt;K,V&gt;::mapped_type 类型</span><br></pre></td></tr></table></figure><h2 id="常用操作"><a href="#常用操作" class="headerlink" title="常用操作"></a><strong>常用操作</strong></h2><h2 id="使用下标访问-map-对象"><a href="#使用下标访问-map-对象" class="headerlink" title="使用下标访问 map 对象"></a>使用下标访问 map 对象</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">map</span> &lt;<span class="built_in">string</span>, <span class="keyword">int</span>&gt; word_count; <span class="comment">// empty map</span></span><br><span class="line"><span class="comment">// insert default initialzed element with key Anna; then assign 1 to its value</span></span><br><span class="line">word_count[<span class="string">"Anna"</span>] = <span class="number">1</span>;  存在则改变，不存在则加入</span><br></pre></td></tr></table></figure><h3 id="查找"><a href="#查找" class="headerlink" title="查找"></a>查找</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">map</span>&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt;q;</span><br><span class="line"></span><br><span class="line">q.insert(pair&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt;(<span class="number">1</span>,<span class="number">2</span>)); <span class="comment">//通过pair进行插入操作</span></span><br><span class="line">q.insert(<span class="built_in">map</span>&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt;::value_type (<span class="number">1</span>,<span class="number">2</span>));<span class="comment">//通过value_type进行插入</span></span><br><span class="line">q[<span class="number">1</span>] = <span class="number">2</span>; <span class="comment">//用数组方式进行插入</span></span><br><span class="line">三者不同的是，当<span class="built_in">map</span>存在这个关键字时数组方式会覆盖关键字的值，而insert操作无法插入。</span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">m.insert(e)e 是一个用在 m 上的 value_type 类型的值。如果键（e.first）不在 m 中，则插入一个值为 e.second 的新元素；如果该键在 m 中已存在，则保持 m 不变。该函数返回一个pair 类型对象，包含指向键为 e.first 的元素的 <span class="built_in">map</span> 迭代器，以及一个 <span class="keyword">bool</span> 类型的对象，表示是否插入了该元素</span><br><span class="line">m.insert(beg,end)beg 和 end 是标记元素范围的迭代器，其中的元素必须为m.value_type 类型的键－值对。对于该范围内的所有元素，如果它的键在 m 中不存在，则将该键及其关联的值插入到 m。(返回 <span class="keyword">void</span> 类型)</span><br><span class="line">m.insert(iter,e)e 是一个用在 m 上的 value_type 类型的值。如果键（e.first）不在 m 中，则创建新元素，并以迭代器 iter 为起点搜索新元素存储的位置。(返回一个迭代器，指向 m 中具有给定键的元素)。</span><br></pre></td></tr></table></figure><h2 id="比较函数"><a href="#比较函数" class="headerlink" title="比较函数"></a>比较函数</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">q.key_comp();   返回比较元素key的函数</span><br><span class="line">q.value_comp(); 返回比较元素value的函数</span><br></pre></td></tr></table></figure><h3 id="大小与是否为空"><a href="#大小与是否为空" class="headerlink" title="大小与是否为空"></a>大小与是否为空</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">q.size();      返回容器内元素个数</span><br><span class="line">q.empty();     判断容器是否为空</span><br><span class="line">q.max_size();  返回可以容纳的最大元素个数</span><br></pre></td></tr></table></figure><h3 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">q.erase(iter); 删除迭代器iter的元素</span><br><span class="line">q.erase(iter1,iter2);删除[iter1,iter2)区间内的元素</span><br><span class="line">q.erase(key);  删除关键字为key的元素</span><br><span class="line">q.clear();     清空容器</span><br></pre></td></tr></table></figure><h3 id="查找和计数"><a href="#查找和计数" class="headerlink" title="查找和计数"></a>查找和计数</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">q.count(k)返回 m 中 k 的出现次数,（<span class="built_in">map</span>中有则返回<span class="number">1</span>，否则<span class="number">0</span>）</span><br><span class="line">q.find(k)如果 m 容器中存在按 k 索引的元素，则返回指向该元素的迭代器。如果不存在，则返回超出末端迭代器</span><br></pre></td></tr></table></figure><h2 id="使用-count-检查-map-对象中某键是否存在"><a href="#使用-count-检查-map-对象中某键是否存在" class="headerlink" title="使用 count 检查 map 对象中某键是否存在"></a>使用 count 检查 map 对象中某键是否存在</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> occurs = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span> (word_count.count(<span class="string">"foobar"</span>))</span><br><span class="line">occurs = word_count[<span class="string">"foobar"</span>];</span><br></pre></td></tr></table></figure><h3 id="迭代器"><a href="#迭代器" class="headerlink" title="迭代器"></a>迭代器</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">q.begin(); <span class="comment">//返回头位置迭代器</span></span><br><span class="line">q.end(); <span class="comment">//返回尾位置迭代器</span></span><br><span class="line">q.rbegin(); <span class="comment">//返回尾部反向迭代器</span></span><br><span class="line">q.rend(); <span class="comment">//返回头部反向迭代器</span></span><br></pre></td></tr></table></figure><h3 id="查找迭代器"><a href="#查找迭代器" class="headerlink" title="查找迭代器"></a>查找迭代器</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">m.lower_bound();返回键值&gt;=给定元素的第一个位置 返回一个迭代器</span><br><span class="line">m.upper_bound();返回键值&gt;给定元素的第一个位置 返回一个迭代器</span><br><span class="line">m.equal_range();返回一个迭代器的 pair 对象。它的 first 成员等价于 m.lower_bound(k)。而 second 成员则等价于 m.upper_bound(k)</span><br></pre></td></tr></table></figure><h3 id="初始化为0"><a href="#初始化为0" class="headerlink" title="初始化为0"></a>初始化为0</h3><p>使用C++中的map容器定义一个mp，当你执行if语句判断mp[3]是否为1时，那么如果mp[3]以前不存在，此时mp[3]就会被无参初始化，second赋值为0。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; numbers;</span><br><span class="line"><span class="keyword">int</span> n = numbers.size();</span><br><span class="line"></span><br><span class="line">    <span class="built_in">map</span>&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; m;</span><br><span class="line">    <span class="keyword">int</span> count;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        count = ++m[numbers[i]]; <span class="comment">//这里原来元素是不存在的，但是却可以直接加1；</span></span><br><span class="line">        <span class="keyword">if</span> (count &gt; n/<span class="number">2</span>) <span class="keyword">return</span> numbers[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p><a href="https://www.cnblogs.com/forcheryl/p/3986026.html">关于map容器的元素被无参初始化</a><br><a href="https://blog.csdn.net/engineerxin/article/details/104779786">《C++Primer》第十章-关联容器-学习笔记(1)-pair&amp;map</a><br><a href="http://c.biancheng.net/view/488.html">C++ map是什么</a><br><a href="https://stemha.github.io/2020/05/10/C++%E6%A0%87%E5%87%86%E5%BA%93%E5%AE%B9%E5%99%A8%E7%B1%BB%E6%A6%82%E8%BF%B0/#more">C++标准库容器类概述</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;基本概念&quot;&gt;&lt;a href=&quot;#基本概念&quot; class=&quot;headerlink&quot; title=&quot;基本概念&quot;&gt;&lt;/a&gt;基本概念&lt;/h2&gt;&lt;p&gt;map&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;map不能直接修改关键字，只能通过修改关键字的值间接修改关键字。&lt;/li&gt;
&lt;li&gt;底层数据结构为红黑树，有序，不重复&lt;/li&gt;
&lt;li&gt;map&amp;lt;K，T&amp;gt; 类模板定义在 map 文件头中，它定义了一个保存 T 类型对象的 map，每个 T 类型的对象都有一个关联的 K 类型的键。容器内对象的位置是通过比较键决定的。&lt;/li&gt;&lt;/ul&gt;
    
    </summary>
    
    
      <category term="C++" scheme="https://stemha.github.io/categories/C/"/>
    
    
      <category term="C++标准库" scheme="https://stemha.github.io/tags/C-%E6%A0%87%E5%87%86%E5%BA%93/"/>
    
      <category term="map" scheme="https://stemha.github.io/tags/map/"/>
    
  </entry>
  
  <entry>
    <title>pair常用操作</title>
    <link href="https://stemha.github.io/2020/05/19/pair%E5%B8%B8%E7%94%A8%E6%93%8D%E4%BD%9C/"/>
    <id>https://stemha.github.io/2020/05/19/pair%E5%B8%B8%E7%94%A8%E6%93%8D%E4%BD%9C/</id>
    <published>2020-05-19T08:34:01.000Z</published>
    <updated>2020-08-10T04:19:21.649Z</updated>
    
    <content type="html"><![CDATA[<h2 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h2><p>pair</p><ul><li>pair 是一个比较简单的模板类型，它只有两个 public 数据成员 first 和 second。</li><li>pair 对象可以封装任意类型的对象，可以生成任何想生成的 pair&lt;T1,T2&gt; 对象，可以是数组对象或者包含 pair&lt;T1,T2&gt; 的 vector 容器。例如，pair 可以封装两个序列容器或两个序列容器的指针。pair&lt;T1，T2&gt; 模板定义在 utility 头文件中，如果不想使用 map 而只想使用 pair 对象，可以包含这个头文件。 </li></ul><h2 id="头文件"><a href="#头文件" class="headerlink" title="头文件"></a>头文件</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta"># <span class="meta-keyword">include</span><span class="meta-string">&lt;utility&gt;</span></span></span><br><span class="line">或者</span><br><span class="line"><span class="meta"># <span class="meta-keyword">include</span><span class="meta-string">&lt;map&gt;</span></span></span><br></pre></td></tr></table></figure><a id="more"></a><h2 id="模板"><a href="#模板" class="headerlink" title="模板"></a>模板</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pair&lt;const K, T&gt; q;</span><br></pre></td></tr></table></figure><h2 id="pair初始化方法"><a href="#pair初始化方法" class="headerlink" title="pair初始化方法"></a><strong>pair初始化方法</strong></h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">pair&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt;q;       创建一个空对</span><br><span class="line">pair&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt;p(<span class="number">2</span>,<span class="number">3</span>);  创建一个对p，并分别赋值<span class="number">2</span>，<span class="number">3</span></span><br><span class="line">pair&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt;s(p);    创建一个对s，拷贝p给s</span><br><span class="line">pair&lt;<span class="built_in">string</span>, <span class="built_in">string</span>&gt; anon; <span class="comment">// holds two strings</span></span><br><span class="line">pair&lt;<span class="built_in">string</span>, <span class="keyword">int</span>&gt; word_count; <span class="comment">// holds a string and an int</span></span><br><span class="line">pair&lt;<span class="built_in">string</span>, <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &gt; line; <span class="comment">// holds string and vector&lt;int&gt;</span></span><br><span class="line"></span><br><span class="line">赋值利用make_pair函数</span><br><span class="line">q = make_pair(<span class="number">1</span>,<span class="number">2</span>);</span><br></pre></td></tr></table></figure><p>如果在创建 pair 对象时不提供初始化式，则调用默认构造函数对其成员采用值初始化。int初始化为0，string初始化为空；</p><h2 id="交换"><a href="#交换" class="headerlink" title="交换"></a>交换</h2><p><code>swap(pair&lt;T1,T2&gt;&amp; other)</code>：和参数的元素进行交换，所包含对象的类型必须相同。：将当前 set 中的元素和参数 set 中的元素交换。它们需要包含相同类型的元素。也可以调用全局函数模板 swap() 来完成同样的操作。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T1</span>, <span class="title">class</span> <span class="title">T2</span>&gt; <span class="title">void</span> <span class="title">swap</span>(<span class="title">pair</span>&lt;T1,T2&gt; &amp;<span class="title">x</span>)　重载1：<span class="title">x</span>.<span class="title">swap</span>(<span class="title">y</span>)</span></span><br><span class="line"><span class="class"><span class="title">template</span> &lt;class T1, class T2&gt; <span class="title">void</span> <span class="title">swap</span> (<span class="title">pair</span>&lt;T1,T2&gt;&amp; <span class="title">x</span>, <span class="title">pair</span>&lt;T1,T2&gt;&amp; <span class="title">y</span>)  重载2:</span> swap(x, y)</span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">std::pair&lt;int,char&gt; foo (10,'a');</span><br><span class="line">std::pair&lt;int,char&gt; bar (90,'z');</span><br><span class="line">swap (foo,bar);</span><br></pre></td></tr></table></figure><h2 id="常用操作"><a href="#常用操作" class="headerlink" title="常用操作"></a><strong>常用操作</strong></h2><h3 id="查找"><a href="#查找" class="headerlink" title="查找"></a>查找</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">访问pair内元素操作</span><br><span class="line"> q.first;  返回成员第一个数据</span><br><span class="line"> q.second; 返回成员第二个数据</span><br></pre></td></tr></table></figure><h3 id="比较"><a href="#比较" class="headerlink" title="比较"></a>比较</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">p1 == p2如果两个 pair 对象的 first 和 second 成员依次相等，则这两个对象相等。该运算使用其元素的 == 操作符</span><br></pre></td></tr></table></figure><p>在<utility>中已经定义了pair上的六个比较运算符：<code>&lt;、&gt;、&lt;=、&gt;=、==、!=</code>，其规则是先比较first，first相等时再比较second，这符合大多数应用的逻辑</utility></p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p><a href="https://blog.csdn.net/mlm5678/article/details/82721331">STL之pair类型详细分析</a><br><a href="http://c.biancheng.net/view/537.html">C++ set初始化（STL set初始化）详解</a><br><a href="https://stemha.github.io/2020/05/10/C++%E6%A0%87%E5%87%86%E5%BA%93%E5%AE%B9%E5%99%A8%E7%B1%BB%E6%A6%82%E8%BF%B0/#more">C++标准库容器类概述</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;基本概念&quot;&gt;&lt;a href=&quot;#基本概念&quot; class=&quot;headerlink&quot; title=&quot;基本概念&quot;&gt;&lt;/a&gt;基本概念&lt;/h2&gt;&lt;p&gt;pair&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;pair 是一个比较简单的模板类型，它只有两个 public 数据成员 first 和 second。&lt;/li&gt;
&lt;li&gt;pair 对象可以封装任意类型的对象，可以生成任何想生成的 pair&amp;lt;T1,T2&amp;gt; 对象，可以是数组对象或者包含 pair&amp;lt;T1,T2&amp;gt; 的 vector 容器。例如，pair 可以封装两个序列容器或两个序列容器的指针。pair&amp;lt;T1，T2&amp;gt; 模板定义在 utility 头文件中，如果不想使用 map 而只想使用 pair 对象，可以包含这个头文件。 &lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;头文件&quot;&gt;&lt;a href=&quot;#头文件&quot; class=&quot;headerlink&quot; title=&quot;头文件&quot;&gt;&lt;/a&gt;头文件&lt;/h2&gt;&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;# &lt;span class=&quot;meta-keyword&quot;&gt;include&lt;/span&gt;&lt;span class=&quot;meta-string&quot;&gt;&amp;lt;utility&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;或者&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;# &lt;span class=&quot;meta-keyword&quot;&gt;include&lt;/span&gt;&lt;span class=&quot;meta-string&quot;&gt;&amp;lt;map&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="C++" scheme="https://stemha.github.io/categories/C/"/>
    
    
      <category term="C++标准库" scheme="https://stemha.github.io/tags/C-%E6%A0%87%E5%87%86%E5%BA%93/"/>
    
      <category term="pair" scheme="https://stemha.github.io/tags/pair/"/>
    
  </entry>
  
  <entry>
    <title>set常用操作</title>
    <link href="https://stemha.github.io/2020/05/19/set%E5%B8%B8%E7%94%A8%E6%93%8D%E4%BD%9C/"/>
    <id>https://stemha.github.io/2020/05/19/set%E5%B8%B8%E7%94%A8%E6%93%8D%E4%BD%9C/</id>
    <published>2020-05-19T07:30:19.000Z</published>
    <updated>2020-08-10T04:19:21.655Z</updated>
    
    <content type="html"><![CDATA[<h2 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h2><p>set是一个关联容器类型，用于以升序方式存储唯一值。</p><ul><li>属于关联容器（关联容器通过键（key）存储和读取元素，而顺序容器则通过元素在容器中的位置顺序存储和访问元素。）<a id="more"></a> </li></ul><h3 id="特性"><a href="#特性" class="headerlink" title="特性"></a><strong>特性</strong></h3><ul><li>遵循数学集合三特性，互异性、无序性、确定性。</li><li>底层数据结构为红黑树，有序，不重复</li><li>set 容器只是单纯的键的集合。每个元素仅包含一个键(key)，并有效地支持关于某个键是否存在的查询</li><li>set 容器存储的键也必须唯一，而且不能修改</li><li>set 容器以<strong>升序方式存储唯一值</strong></li><li>set 不支持下标操作符</li><li>和map一样，set无法存储无法比较大小的数据；</li></ul><h2 id="头文件"><a href="#头文件" class="headerlink" title="头文件"></a>头文件</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta"># <span class="meta-keyword">include</span><span class="meta-string">&lt;set&gt;</span></span></span><br></pre></td></tr></table></figure><h2 id="模板"><a href="#模板" class="headerlink" title="模板"></a>模板</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">set&lt;int,greater&lt;int&gt; &gt;q;</span><br></pre></td></tr></table></figure><h2 id="set初始化方法"><a href="#set初始化方法" class="headerlink" title="set初始化方法"></a><strong>set初始化方法</strong></h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">set</span>&lt;<span class="keyword">int</span>&gt;q;</span><br><span class="line"><span class="built_in">set</span>&lt;<span class="keyword">int</span>&gt; numbers &#123;<span class="number">8</span>, <span class="number">7</span>, <span class="number">6</span>, <span class="number">5</span>, <span class="number">4</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">1</span>&#125;;</span><br></pre></td></tr></table></figure><h3 id="小的在前（less）-大的在前（greater）"><a href="#小的在前（less）-大的在前（greater）" class="headerlink" title="小的在前（less）/大的在前（greater）"></a>小的在前（less）/大的在前（greater）</h3><p><strong>默认的比较函数是 less<int>，因此容器中的元素会升序排列。</int></strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">set</span>&lt;<span class="keyword">int</span>, less&lt;<span class="keyword">int</span>&gt;&gt; set1;    小的在前（less），升序</span><br><span class="line"><span class="built_in">set</span>&lt;<span class="keyword">int</span>, greater&lt;<span class="keyword">int</span>&gt;&gt; set1; 大的在前（greater），降序</span><br></pre></td></tr></table></figure><p>参考：<a href="https://blog.csdn.net/m0_45867846/article/details/105448065">C++ STL set greater less详解</a></p><h2 id="交换"><a href="#交换" class="headerlink" title="交换"></a>交换</h2><p><code>swap(set&lt;T&gt;&amp; other)</code>：和参数的元素进行交换，所包含对象的类型必须相同。：将当前 set 中的元素和参数 set 中的元素交换。它们需要包含相同类型的元素。也可以调用全局函数模板 swap() 来完成同样的操作。</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">void swap(set&lt;T&gt; &amp;x)　重载1：x.swap(y)</span><br><span class="line">void swap(set&lt;T&gt; &amp;x, set&lt;T&gt; &amp;y)  重载2: swap(x, y)</span><br></pre></td></tr></table></figure><h2 id="常用操作"><a href="#常用操作" class="headerlink" title="常用操作"></a><strong>常用操作</strong></h2><h3 id="插入"><a href="#插入" class="headerlink" title="插入"></a>插入</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> a[] = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>&#125;;</span><br><span class="line"><span class="built_in">set</span>&lt;<span class="keyword">int</span>&gt;q;</span><br><span class="line"></span><br><span class="line">q.insert(elem));     集合中插入元素</span><br><span class="line">q.insert(a,a+<span class="number">5</span>);     插入数组a至a+<span class="number">5</span>的元素</span><br><span class="line">q.insert(pos, elem); 在容器中插入元素elem的一份拷贝，并返回新元素的iterator位置； </span><br><span class="line">q.insert(beg, end);  在容器中插入[beg, end)范围中所有元素的拷贝，没有返回值。</span><br></pre></td></tr></table></figure><h3 id="删除与清空"><a href="#删除与清空" class="headerlink" title="删除与清空"></a>删除与清空</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">q.erase(iterator pos); 删除集合中的元素 无返回值</span><br><span class="line">删除后pos不会自动++！被删除元素的迭代器，在删除之后失效！这里是和<span class="built_in">vector</span>的区别</span><br><span class="line"></span><br><span class="line">q.erase(iterator first, iterator last); 移除迭代区间[first,last)内的所有元素，无返回值</span><br><span class="line">q.erase(value);         移除<span class="built_in">set</span>容器内元素值为value的所有元素，返回移除元素的个数(size_type类型)</span><br><span class="line">q.clear();              删除<span class="built_in">set</span>容器中的所有的元素，无返回值</span><br></pre></td></tr></table></figure><h3 id="大小-是否为空"><a href="#大小-是否为空" class="headerlink" title="大小/是否为空"></a>大小/是否为空</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">q.size();     返回当前<span class="built_in">set</span>容器中的元素个数</span><br><span class="line">q.max_size(); 返回<span class="built_in">set</span>容器可能包含的元素最大个数</span><br><span class="line">q.empty();    判断<span class="built_in">set</span>容器是否为空</span><br></pre></td></tr></table></figure><h3 id="find和count"><a href="#find和count" class="headerlink" title="find和count"></a>find和count</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">q.find(element); 返回element值位置的迭代器，找不到返回q.end()</span><br><span class="line">q.count();       返回某个值元素的个数(根据<span class="built_in">set</span>的特性，就是判断这个元素在不在，返回<span class="number">0</span>或<span class="number">1</span>)</span><br></pre></td></tr></table></figure><h3 id="迭代器"><a href="#迭代器" class="headerlink" title="迭代器"></a>迭代器</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">q.begin();   <span class="comment">//返回头位置迭代器</span></span><br><span class="line">q.end();     <span class="comment">//返回尾位置迭代器</span></span><br><span class="line">q.rbegin();  <span class="comment">//返回尾部反向迭代器 注意是set&lt;int,greater&lt;int&gt;&gt;::reverse_iterator</span></span><br><span class="line">q.rend();    <span class="comment">//返回头部反向迭代器</span></span><br></pre></td></tr></table></figure><h3 id="大于等于元素的迭代器"><a href="#大于等于元素的迭代器" class="headerlink" title="大于等于元素的迭代器"></a>大于等于元素的迭代器</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">q.lower_bound(); 返回指向大于（或等于）某值的第一个元素的迭代器</span><br><span class="line">q.upper_bound(); 返回大于某个值元素的迭代器</span><br></pre></td></tr></table></figure><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p><a href="http://c.biancheng.net/view/537.html">C++ set初始化（STL set初始化）详解</a><br><a href="https://stemha.github.io/2020/05/10/C++%E6%A0%87%E5%87%86%E5%BA%93%E5%AE%B9%E5%99%A8%E7%B1%BB%E6%A6%82%E8%BF%B0/#more">C++标准库容器类概述</a><br><a href="https://blog.csdn.net/m0_45867846/article/details/105448065">C++ STL set greater less详解</a></p><h2 id="本文许可证"><a href="#本文许可证" class="headerlink" title="本文许可证"></a>本文许可证</h2><p>本文遵循 <a href="https://github.com/huihut/interview/blob/master/LICENSE">CC BY-NC-SA 4.0</a>（署名 - 非商业性使用 - 相同方式共享） 协议，转载请注明出处，不得用于商业目的。<br><a href="LICENSE"><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9pLmNyZWF0aXZlY29tbW9ucy5vcmcvbC9ieS1uYy1zYS80LjAvODh4MzEucG5n?x-oss-process=image/format,png" alt="CC BY-NC-SA 4.0"></a></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;基本概念&quot;&gt;&lt;a href=&quot;#基本概念&quot; class=&quot;headerlink&quot; title=&quot;基本概念&quot;&gt;&lt;/a&gt;基本概念&lt;/h2&gt;&lt;p&gt;set是一个关联容器类型，用于以升序方式存储唯一值。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;属于关联容器（关联容器通过键（key）存储和读取元素，而顺序容器则通过元素在容器中的位置顺序存储和访问元素。）&lt;/li&gt;&lt;/ul&gt;
    
    </summary>
    
    
      <category term="C++" scheme="https://stemha.github.io/categories/C/"/>
    
    
      <category term="C++标准库" scheme="https://stemha.github.io/tags/C-%E6%A0%87%E5%87%86%E5%BA%93/"/>
    
      <category term="set" scheme="https://stemha.github.io/tags/set/"/>
    
  </entry>
  
  <entry>
    <title>priority_queue常用操作</title>
    <link href="https://stemha.github.io/2020/05/19/priority-queue%E5%B8%B8%E7%94%A8%E6%93%8D%E4%BD%9C/"/>
    <id>https://stemha.github.io/2020/05/19/priority-queue%E5%B8%B8%E7%94%A8%E6%93%8D%E4%BD%9C/</id>
    <published>2020-05-18T18:24:43.000Z</published>
    <updated>2020-08-10T04:19:21.652Z</updated>
    
    <content type="html"><![CDATA[<h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><p><code>priority_queue容器适配器</code>定义了一个元素有序排列的队列。</p><ul><li>默认队列头部的元素优先级最高。<ul><li>因为它是一个队列，所以只能访问第一个元素，这也意味着优先级最高的元素总是第一个被处理。</li></ul></li><li>如何定义“优先级”完全取决于我们自己。<a id="more"></a></li></ul><h2 id="模板"><a href="#模板" class="headerlink" title="模板"></a>模板</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">priority_queue&lt;int,vector&lt;int&gt;,greater&lt;int&gt; &gt;q;</span><br></pre></td></tr></table></figure><h2 id="priority-queue初始化方法"><a href="#priority-queue初始化方法" class="headerlink" title="priority_queue初始化方法"></a><strong>priority_queue初始化方法</strong></h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">队列的排序，右边是出队列的地方</span><br><span class="line">priority_queue&lt;<span class="keyword">int</span>&gt;q;  经常使用的，默认是less，元素大的优先级高。</span><br><span class="line">priority_queue&lt;<span class="keyword">int</span>,<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;,greater&lt;<span class="keyword">int</span>&gt; &gt;q; 元素小的优先级高。</span><br></pre></td></tr></table></figure><h2 id="交换"><a href="#交换" class="headerlink" title="交换"></a>交换</h2><p><code>swap(priority_queue&lt;T&gt;&amp; other)</code>：和参数的元素进行交换，所包含对象的类型必须相同。：将当前 queue 中的元素和参数 priority_queue 中的元素交换。它们需要包含相同类型的元素。也可以调用全局函数模板 swap() 来完成同样的操作。</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">void swap(priority_queue&lt;T&gt; &amp;x)　重载1：x.swap(y)</span><br><span class="line">void swap(priority_queue&lt;T&gt; &amp;x, priority_queue&lt;T&gt; &amp;y)  重载2: swap(x, y)</span><br></pre></td></tr></table></figure><h2 id="常用操作"><a href="#常用操作" class="headerlink" title="常用操作"></a><strong>常用操作</strong></h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">q.push(element); 入优先级队列</span><br><span class="line">q.pop();         出优先级队列</span><br><span class="line">q.top();         返回优先级队列头成员</span><br><span class="line">q.size();        返回优先级队列成员个数</span><br><span class="line">q.empty();       是否为空</span><br></pre></td></tr></table></figure><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p><a href="http://c.biancheng.net/view/480.html">C++ priority_queue(STL priority_queue)用法详解</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;概念&quot;&gt;&lt;a href=&quot;#概念&quot; class=&quot;headerlink&quot; title=&quot;概念&quot;&gt;&lt;/a&gt;概念&lt;/h2&gt;&lt;p&gt;&lt;code&gt;priority_queue容器适配器&lt;/code&gt;定义了一个元素有序排列的队列。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;默认队列头部的元素优先级最高。&lt;ul&gt;
&lt;li&gt;因为它是一个队列，所以只能访问第一个元素，这也意味着优先级最高的元素总是第一个被处理。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;如何定义“优先级”完全取决于我们自己。&lt;/li&gt;&lt;/ul&gt;
    
    </summary>
    
    
      <category term="C++" scheme="https://stemha.github.io/categories/C/"/>
    
    
      <category term="C++标准库" scheme="https://stemha.github.io/tags/C-%E6%A0%87%E5%87%86%E5%BA%93/"/>
    
      <category term="priority_queue" scheme="https://stemha.github.io/tags/priority-queue/"/>
    
  </entry>
  
  <entry>
    <title>queue常用操作</title>
    <link href="https://stemha.github.io/2020/05/19/queue%E5%B8%B8%E7%94%A8%E6%93%8D%E4%BD%9C/"/>
    <id>https://stemha.github.io/2020/05/19/queue%E5%B8%B8%E7%94%A8%E6%93%8D%E4%BD%9C/</id>
    <published>2020-05-18T18:10:50.000Z</published>
    <updated>2020-08-10T04:19:21.653Z</updated>
    
    <content type="html"><![CDATA[<h2 id="queue初始化方法"><a href="#queue初始化方法" class="headerlink" title="queue初始化方法"></a><strong>queue初始化方法</strong></h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt;q;</span><br></pre></td></tr></table></figure><a id="more"></a><h2 id="交换"><a href="#交换" class="headerlink" title="交换"></a>交换</h2><p><code>swap(queue&lt;T&gt; &amp;other_q)</code>：将当前 queue 中的元素和参数 queue 中的元素交换。它们需要包含相同类型的元素。也可以调用全局函数模板 swap() 来完成同样的操作。</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">void swap(queue&lt;T&gt; &amp;x)　重载1：x.swap(y)</span><br><span class="line">void swap(queue&lt;T&gt; &amp;x, queue&lt;T&gt; &amp;y)  重载2: swap(x, y)</span><br></pre></td></tr></table></figure><h2 id="常用操作"><a href="#常用操作" class="headerlink" title="常用操作"></a><strong>常用操作</strong></h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">q.push(<span class="number">1</span>);  入队列，无返回值</span><br><span class="line">q.pop();    出队列，无返回值</span><br><span class="line">q.front();  返回最上面（最后进入）的成员的引用</span><br><span class="line">q.back()    返回 <span class="built_in">queue</span> 中最后一个元素的引用，但不删除该元素。</span><br><span class="line">q.size();   返回队列成员个数</span><br><span class="line">q.empty();  判断是否为空队列，<span class="keyword">bool</span></span><br></pre></td></tr></table></figure><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p><a href="http://c.biancheng.net/view/479.html">C++ queue(STL queue)用法详解</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;queue初始化方法&quot;&gt;&lt;a href=&quot;#queue初始化方法&quot; class=&quot;headerlink&quot; title=&quot;queue初始化方法&quot;&gt;&lt;/a&gt;&lt;strong&gt;queue初始化方法&lt;/strong&gt;&lt;/h2&gt;&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;queue&lt;/span&gt;&amp;lt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;&amp;gt;q;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="C++" scheme="https://stemha.github.io/categories/C/"/>
    
    
      <category term="C++标准库" scheme="https://stemha.github.io/tags/C-%E6%A0%87%E5%87%86%E5%BA%93/"/>
    
      <category term="queue" scheme="https://stemha.github.io/tags/queue/"/>
    
  </entry>
  
  <entry>
    <title>stack常用操作</title>
    <link href="https://stemha.github.io/2020/05/19/stack%E5%B8%B8%E7%94%A8%E6%93%8D%E4%BD%9C/"/>
    <id>https://stemha.github.io/2020/05/19/stack%E5%B8%B8%E7%94%A8%E6%93%8D%E4%BD%9C/</id>
    <published>2020-05-18T17:54:51.000Z</published>
    <updated>2020-08-10T04:19:21.657Z</updated>
    
    <content type="html"><![CDATA[<h2 id="stack初始化方法"><a href="#stack初始化方法" class="headerlink" title="stack初始化方法"></a><strong>stack初始化方法</strong></h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">std</span>::<span class="built_in">stack</span>&lt;<span class="keyword">int</span>&gt; q;</span><br><span class="line"><span class="function"><span class="built_in">std</span>::<span class="built_in">stack</span>&lt;<span class="keyword">int</span>&gt; <span class="title">second</span><span class="params">(first)</span></span>; </span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">stack</span>&lt;<span class="keyword">int</span>, <span class="built_in">std</span>;:<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; third; 使用<span class="built_in">vector</span>初始化<span class="built_in">stack</span></span><br></pre></td></tr></table></figure><a id="more"></a><h2 id="交换"><a href="#交换" class="headerlink" title="交换"></a>交换</h2><p>swap将两个 stack的内容交换。这两个 stack的模板参数 T和 Container必须都相同。</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">void swap(stack&amp; x)　重载1：x.swap(y)</span><br><span class="line">void swap(stack&amp; x, stack&amp; y)  重载2: swap(x, y)</span><br></pre></td></tr></table></figure><h2 id="常用操作"><a href="#常用操作" class="headerlink" title="常用操作"></a><strong>常用操作</strong></h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">q.push(element); 入栈</span><br><span class="line">q.pop();   出栈</span><br><span class="line">q.top();   返回栈顶成员</span><br><span class="line">q.size();  返回栈成员个数</span><br><span class="line">q.empty(); 判断是否为空栈</span><br></pre></td></tr></table></figure><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p><a href="https://www.cnblogs.com/MarkKobs-blog/p/10347746.html">C++ STL容器——stack用法介绍</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;stack初始化方法&quot;&gt;&lt;a href=&quot;#stack初始化方法&quot; class=&quot;headerlink&quot; title=&quot;stack初始化方法&quot;&gt;&lt;/a&gt;&lt;strong&gt;stack初始化方法&lt;/strong&gt;&lt;/h2&gt;&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;std&lt;/span&gt;::&lt;span class=&quot;built_in&quot;&gt;stack&lt;/span&gt;&amp;lt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;&amp;gt; q;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;std&lt;/span&gt;::&lt;span class=&quot;built_in&quot;&gt;stack&lt;/span&gt;&amp;lt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;&amp;gt; &lt;span class=&quot;title&quot;&gt;second&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(first)&lt;/span&gt;&lt;/span&gt;; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;std&lt;/span&gt;::&lt;span class=&quot;built_in&quot;&gt;stack&lt;/span&gt;&amp;lt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;, &lt;span class=&quot;built_in&quot;&gt;std&lt;/span&gt;;:&lt;span class=&quot;built_in&quot;&gt;vector&lt;/span&gt;&amp;lt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;&amp;gt;&amp;gt; third; 使用&lt;span class=&quot;built_in&quot;&gt;vector&lt;/span&gt;初始化&lt;span class=&quot;built_in&quot;&gt;stack&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="C++" scheme="https://stemha.github.io/categories/C/"/>
    
    
      <category term="C++标准库" scheme="https://stemha.github.io/tags/C-%E6%A0%87%E5%87%86%E5%BA%93/"/>
    
      <category term="stack" scheme="https://stemha.github.io/tags/stack/"/>
    
  </entry>
  
  <entry>
    <title>vector常用操作</title>
    <link href="https://stemha.github.io/2020/05/19/vector%E5%B8%B8%E7%94%A8%E6%93%8D%E4%BD%9C/"/>
    <id>https://stemha.github.io/2020/05/19/vector%E5%B8%B8%E7%94%A8%E6%93%8D%E4%BD%9C/</id>
    <published>2020-05-18T17:30:04.000Z</published>
    <updated>2020-08-10T04:19:21.660Z</updated>
    
    <content type="html"><![CDATA[<h2 id="vector初始化方法"><a href="#vector初始化方法" class="headerlink" title="vector初始化方法"></a><strong>vector初始化方法</strong></h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; vec;       初始化size为<span class="number">0</span>的<span class="built_in">vector</span></span><br><span class="line"><span class="function"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; <span class="title">vec</span><span class="params">(<span class="number">10</span>)</span></span>;   初始化size为<span class="number">10</span>，默认值都为<span class="number">0</span>的<span class="built_in">vector</span></span><br><span class="line"><span class="function"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; <span class="title">vec</span><span class="params">(<span class="number">10</span>,<span class="number">1</span>)</span></span>; 初始化size为<span class="number">10</span>，值都为<span class="number">1</span>的<span class="built_in">vector</span></span><br></pre></td></tr></table></figure><a id="more"></a><h3 id="通过数组初始化"><a href="#通过数组初始化" class="headerlink" title="通过数组初始化"></a><strong>通过数组初始化</strong></h3><p>通过数组a的地址初始化，注意地址是从0到5（左闭右开区间），类似迭代器</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> a[<span class="number">5</span>] = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>&#125;;</span><br><span class="line"><span class="function"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; <span class="title">vec</span><span class="params">(a, a+<span class="number">5</span>)</span></span>;</span><br></pre></td></tr></table></figure><h3 id="通过vector初始化"><a href="#通过vector初始化" class="headerlink" title="通过vector初始化"></a><strong>通过vector初始化</strong></h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; <span class="title">a</span><span class="params">(<span class="number">5</span>,<span class="number">1</span>)</span></span>;</span><br><span class="line"><span class="function"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; <span class="title">b</span><span class="params">(a)</span></span>;</span><br></pre></td></tr></table></figure><h3 id="通过insert初始化"><a href="#通过insert初始化" class="headerlink" title="通过insert初始化"></a><strong>通过insert初始化</strong></h3><p>insert初始化方式将同类型的迭代器对应的始末区间（<strong>左闭右开区间</strong>）内的值插入到vector中<br><strong>//助记，插入开始的地方</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; <span class="title">a</span><span class="params">(<span class="number">6</span>,<span class="number">6</span>)</span></span>;</span><br><span class="line">vecot&lt;<span class="keyword">int</span>&gt; b;</span><br><span class="line">b.insert(b.begin(), a.begin(), a.begin() + <span class="number">3</span>); 将a[<span class="number">0</span>]~a[<span class="number">2</span>]插入到b中，b.size()由<span class="number">0</span>变为<span class="number">3</span></span><br></pre></td></tr></table></figure><p>insert还可以插入m个值为n的元素</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">在b开始位置处插入<span class="number">6</span>个<span class="number">6</span></span><br><span class="line">b.insert(b.begin(), <span class="number">6</span>, <span class="number">6</span>);</span><br></pre></td></tr></table></figure><h3 id="通过copy函数赋值"><a href="#通过copy函数赋值" class="headerlink" title="通过copy函数赋值"></a><strong>通过copy函数赋值</strong></h3><p><strong>//助记，拷贝到目标地</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; <span class="title">a</span><span class="params">(<span class="number">5</span>,<span class="number">1</span>)</span></span>;</span><br><span class="line"><span class="keyword">int</span> a1[<span class="number">5</span>] = &#123;<span class="number">2</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">2</span>&#125;;</span><br><span class="line"><span class="function"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; <span class="title">b</span><span class="params">(<span class="number">10</span>)</span></span>;</span><br><span class="line">将a中元素全部拷贝到b开始的位置中,注意拷贝的区间为a.begin() ~ a.end()的左闭右开的区间</span><br><span class="line">copy(a.begin(), a.end(), b.begin());</span><br><span class="line">拷贝区间也可以是数组地址构成的区间</span><br><span class="line">copy(a1, a1+<span class="number">5</span>, b.begin() + <span class="number">5</span>);</span><br></pre></td></tr></table></figure><h2 id="常用操作"><a href="#常用操作" class="headerlink" title="常用操作"></a><strong>常用操作</strong></h2><p>注意：<br>std::vector 不支持 push_front，，它的目的是为了O(1)的push_back(),对它来说O(n)次的insert()就能做到push_front。<br>支持push_front()的是deque支持的是deque。</p><h3 id="加入元素"><a href="#加入元素" class="headerlink" title="加入元素"></a><strong>加入元素</strong></h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">q.push_back(x);     尾部加入元素</span><br><span class="line">q.insert(iter,x);   在iter位置插入x，传回新数据位置</span><br><span class="line">q.insert(iter,n,x); 在iter位置插入n个x，无返回值</span><br><span class="line">q.insert(iter,l,r); 在iter位置插入[l,r)区间内的数据，无返回值</span><br></pre></td></tr></table></figure><h3 id="vector交换"><a href="#vector交换" class="headerlink" title="vector交换"></a><strong>vector交换</strong></h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">q.swap(p); 交换p，q容器内元素</span><br><span class="line">q.assign(iter1,iter2); <span class="comment">//将区间[iter1，iter2)内元素赋值给vector，并清空vector容器之前的内容。</span></span><br></pre></td></tr></table></figure><h3 id="删除元素"><a href="#删除元素" class="headerlink" title="删除元素"></a><strong>删除元素</strong></h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">q.pop_back(); 删除最后一个元素</span><br><span class="line">q.erase(iter1); 删除iter位置元素，返回值是指向被删元素之后的那个元素(即下一个元素)的迭代器。</span><br><span class="line">q.erase(iter1,iter2); 删除[iter1，iter2)区间内的元素</span><br></pre></td></tr></table></figure><h3 id="清空-覆盖"><a href="#清空-覆盖" class="headerlink" title="清空/覆盖"></a><strong>清空/覆盖</strong></h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">q.clear(); <span class="comment">//清空Vector</span></span><br><span class="line">q.assign(n,x); <span class="comment">//将n个x赋值到vector中，并清空vector容器之前的内容。</span></span><br></pre></td></tr></table></figure><h3 id="返回元素"><a href="#返回元素" class="headerlink" title="返回元素"></a><strong>返回元素</strong></h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">q.front(); 返回第一个数据</span><br><span class="line">q.back(); 返回最后一个数据</span><br><span class="line">q.at(i); <span class="comment">//返回第i个元素</span></span><br></pre></td></tr></table></figure><h3 id="vector元素个数-是否为空"><a href="#vector元素个数-是否为空" class="headerlink" title="vector元素个数/是否为空"></a><strong>vector元素个数/是否为空</strong></h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">q.size(); 返回容器内成员个数</span><br><span class="line">q.resize(x); <span class="comment">//重新指定容器大小</span></span><br><span class="line">q.empty(); 判断Vector是否为空</span><br></pre></td></tr></table></figure><h3 id="迭代器"><a href="#迭代器" class="headerlink" title="迭代器"></a><strong>迭代器</strong></h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">q.begin();  <span class="comment">//返回头位置迭代器</span></span><br><span class="line">q.end();    <span class="comment">//返回尾位置迭代器</span></span><br><span class="line">q.rbegin(); <span class="comment">//返回尾部反向迭代器</span></span><br><span class="line">q.rend();   <span class="comment">//返回头部反向迭代器</span></span><br></pre></td></tr></table></figure><h3 id="vector内存容量"><a href="#vector内存容量" class="headerlink" title="vector内存容量"></a><strong>vector内存容量</strong></h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">q.capacity(); <span class="comment">//返回Vector可用空间的大小</span></span><br><span class="line">q.reserve(); <span class="comment">//重新指定空间大小，小于当前capacity时保持为原本的capacity值</span></span><br></pre></td></tr></table></figure><h2 id="二维vector的初始化"><a href="#二维vector的初始化" class="headerlink" title="二维vector的初始化"></a>二维vector的初始化</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; vec1;</span><br><span class="line"><span class="keyword">int</span> row = <span class="number">3</span>;</span><br><span class="line"><span class="keyword">int</span> col = <span class="number">3</span>;</span><br><span class="line">vec1.resize(row);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;vec1.size();i++)</span><br><span class="line">    vec1[i].resize(col);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;row;i++)</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;col;j++)  </span><br><span class="line">        vec1[i][j]=<span class="number">5</span>;</span><br></pre></td></tr></table></figure><p>或者</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &gt;vec(row,<span class="built_in">vector</span>&lt;<span class="keyword">char</span>&gt;(col,<span class="number">5</span>));</span><br></pre></td></tr></table></figure><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p><a href="https://blog.csdn.net/xiangxianghehe/article/details/90637998">C++ 给vector去重的两种方法</a><br><a href="https://www.cnblogs.com/quyc/p/12857054.html">vector的几种初始化及赋值方式</a><br><a href="https://www.cnblogs.com/wangkundentisy/p/9023977.html">STL中erase()的用法</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;vector初始化方法&quot;&gt;&lt;a href=&quot;#vector初始化方法&quot; class=&quot;headerlink&quot; title=&quot;vector初始化方法&quot;&gt;&lt;/a&gt;&lt;strong&gt;vector初始化方法&lt;/strong&gt;&lt;/h2&gt;&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;vector&lt;/span&gt;&amp;lt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;&amp;gt; vec;       初始化size为&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;的&lt;span class=&quot;built_in&quot;&gt;vector&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;vector&lt;/span&gt;&amp;lt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;&amp;gt; &lt;span class=&quot;title&quot;&gt;vec&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;;   初始化size为&lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;，默认值都为&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;的&lt;span class=&quot;built_in&quot;&gt;vector&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;vector&lt;/span&gt;&amp;lt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;&amp;gt; &lt;span class=&quot;title&quot;&gt;vec&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;; 初始化size为&lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;，值都为&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;的&lt;span class=&quot;built_in&quot;&gt;vector&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="C++" scheme="https://stemha.github.io/categories/C/"/>
    
    
      <category term="C++标准库" scheme="https://stemha.github.io/tags/C-%E6%A0%87%E5%87%86%E5%BA%93/"/>
    
      <category term="vector" scheme="https://stemha.github.io/tags/vector/"/>
    
  </entry>
  
  <entry>
    <title>使用栈实现的队列</title>
    <link href="https://stemha.github.io/2020/05/14/%E4%BD%BF%E7%94%A8%E6%A0%88%E5%AE%9E%E7%8E%B0%E7%9A%84%E9%98%9F%E5%88%97/"/>
    <id>https://stemha.github.io/2020/05/14/%E4%BD%BF%E7%94%A8%E6%A0%88%E5%AE%9E%E7%8E%B0%E7%9A%84%E9%98%9F%E5%88%97/</id>
    <published>2020-05-14T15:27:32.000Z</published>
    <updated>2020-08-10T04:19:21.667Z</updated>
    
    <content type="html"><![CDATA[<h2 id="算法思想"><a href="#算法思想" class="headerlink" title="算法思想"></a>算法思想</h2><a id="more"></a><ul><li>其中一个栈A作为队列的入口，用于插入新元素；另一个栈B作为队列的出口，用于移除老元素。</li><li>当B为空的时候需要及时将A中的数据转移进去。</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="comment">/*   stack&lt;int&gt;q;</span></span><br><span class="line"><span class="comment">     q.push(1);   //入栈</span></span><br><span class="line"><span class="comment">     q.pop();     //出栈</span></span><br><span class="line"><span class="comment">     q.top();     //返回栈顶成员</span></span><br><span class="line"><span class="comment">     q.size();    //返回栈成员个数</span></span><br><span class="line"><span class="comment">     q.empty();   //判断是否为空栈</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">stackqueue</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">private</span>:</span><br><span class="line">    <span class="built_in">stack</span>&lt;<span class="keyword">int</span>&gt; stacka;</span><br><span class="line">    <span class="built_in">stack</span>&lt;<span class="keyword">int</span>&gt; stackb;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">enqueue</span><span class="params">(<span class="keyword">int</span> a)</span></span>;</span><br><span class="line">        <span class="function"><span class="keyword">int</span> <span class="title">dequeue</span><span class="params">()</span></span>;</span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">transfer</span><span class="params">()</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">stackqueue::dequeue</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(!stackb.empty())</span><br><span class="line">&#123;   </span><br><span class="line">    <span class="keyword">int</span> tmp = stackb.top();</span><br><span class="line">    stackb.pop();</span><br><span class="line">    <span class="keyword">return</span> tmp;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span>(stacka.empty())</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    transfer();</span><br><span class="line">    <span class="keyword">int</span> tmp = stackb.top();</span><br><span class="line">    stackb.pop();</span><br><span class="line">    <span class="keyword">return</span> tmp;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">stackqueue::transfer</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(!stacka.empty())</span><br><span class="line">    &#123;</span><br><span class="line">        stackb.push(stacka.top());</span><br><span class="line">        stacka.pop();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">stackqueue::enqueue</span><span class="params">(<span class="keyword">int</span> a)</span></span>&#123;</span><br><span class="line">    stacka.push(a);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    stackqueue *que = <span class="keyword">new</span> stackqueue();</span><br><span class="line">    que-&gt;enqueue(<span class="number">1</span>);</span><br><span class="line">    que-&gt;enqueue(<span class="number">2</span>);</span><br><span class="line">    que-&gt;enqueue(<span class="number">3</span>);</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; que-&gt;dequeue() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; que-&gt;dequeue() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    que-&gt;enqueue(<span class="number">4</span>);</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; que-&gt;dequeue() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; que-&gt;dequeue() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;算法思想&quot;&gt;&lt;a href=&quot;#算法思想&quot; class=&quot;headerlink&quot; title=&quot;算法思想&quot;&gt;&lt;/a&gt;算法思想&lt;/h2&gt;
    
    </summary>
    
    
      <category term="算法" scheme="https://stemha.github.io/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="算法" scheme="https://stemha.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="队列" scheme="https://stemha.github.io/tags/%E9%98%9F%E5%88%97/"/>
    
      <category term="栈" scheme="https://stemha.github.io/tags/%E6%A0%88/"/>
    
  </entry>
  
  <entry>
    <title>无序数组排序后的最大相邻差</title>
    <link href="https://stemha.github.io/2020/05/14/%E6%97%A0%E5%BA%8F%E6%95%B0%E7%BB%84%E6%8E%92%E5%BA%8F%E5%90%8E%E7%9A%84%E6%9C%80%E5%A4%A7%E7%9B%B8%E9%82%BB%E5%B7%AE/"/>
    <id>https://stemha.github.io/2020/05/14/%E6%97%A0%E5%BA%8F%E6%95%B0%E7%BB%84%E6%8E%92%E5%BA%8F%E5%90%8E%E7%9A%84%E6%9C%80%E5%A4%A7%E7%9B%B8%E9%82%BB%E5%B7%AE/</id>
    <published>2020-05-14T14:25:41.000Z</published>
    <updated>2020-08-10T04:19:21.696Z</updated>
    
    <content type="html"><![CDATA[<p>解法1：</p><a id="more"></a><p>使用任意一种时间复杂度为O（nlogn）的排序算法（如快速排序）给原数组排序，然后遍历排好序的数组，并对每两个相邻元素求差。<br>复杂度：时间O（nlogn），在不改变原数组的情况下，空间复杂度是O(n)</p><p>解法2：基数排序的思想</p><ol><li>利用计数排序的思想，先求出原数组的最大值max与最小值min的区间长度k（k=max-min+1），以及偏移量d=min。</li><li>创建一个长度为k的新数组Array。</li><li>遍历原数组，每遍历一个元素，就把新数组Array对应下标的值+1。例如原数组元素的值为n，则将Array[n-min]的值加1。遍历结束<br>后，Array的一部分元素值变成了1或更高的数值，一部分元素值仍然是0。</li><li>遍历新数组Array，统计出Array中最大连续出现0值的次数+1，即为相邻元素最大差值。</li></ol><p>解法3：桶排序的思想<br>解法3：</p><ol><li>利用桶排序的思想，根据原数组的长度n，创建出n个桶，每一个桶代表一个区间范围。其中第1个桶从原数组的最小值min开始，区间跨<br>度是（max-min）/（n-1）。</li><li>遍历原数组，把原数组每一个元素插入到对应的桶中，记录每一个桶的最大和最小值。</li><li>遍历所有的桶，统计出每一个桶的最大值，和这个桶右侧非空桶的最小值的差，数值最大的差即为原数组排序后的相邻最大差值。<br>时间复杂度是O（n），空间复杂度是O（n*k）</li></ol><p>代码C++版本：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//获取数组中数字之间的最大差值</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">"memory.h"</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">bucket</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> min;</span><br><span class="line">    <span class="keyword">int</span> max;</span><br><span class="line">    bucket():min(<span class="literal">NULL</span>),max(<span class="literal">NULL</span>)&#123;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">getmaxdtce</span><span class="params">(<span class="keyword">int</span> *a,<span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;   </span><br><span class="line">    <span class="comment">//1.找到数列的最大最下值</span></span><br><span class="line">    <span class="keyword">int</span> *max = max_element(a,a+n);</span><br><span class="line">    <span class="keyword">int</span> *min = min_element(a,a+n);</span><br><span class="line">    <span class="keyword">int</span> d = *max - *min;</span><br><span class="line">    <span class="keyword">if</span>(d==<span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//2.初始化桶</span></span><br><span class="line">    <span class="keyword">int</span> bucketnum = n;</span><br><span class="line">    bucket *buckets = <span class="keyword">new</span> bucket[n];</span><br><span class="line"></span><br><span class="line">    <span class="comment">//3.遍历原始数组，确定每个桶的最大最小值</span></span><br><span class="line">    <span class="comment">//注意，最大点独占一个桶</span></span><br><span class="line">    <span class="comment">//所以前面n-1个桶的间隙是(a[i] - *min) / (d / bucketnum - 1);</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> index = (a[i] - *min) / (d / (bucketnum - <span class="number">1</span>));</span><br><span class="line">        <span class="keyword">if</span>(buckets[index].min==<span class="literal">NULL</span>||buckets[index].min&gt;a[i])</span><br><span class="line">        &#123;</span><br><span class="line">            buckets[index].min = a[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(buckets[index].max==<span class="literal">NULL</span>||buckets[index].max&gt;a[i])</span><br><span class="line">        &#123;</span><br><span class="line">            buckets[index].max = a[i];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//4. 遍历所有的桶，统计出每一个桶的最大值，和这个桶右侧非空桶的最小值的差，数值最大的差即为原数组排序后的相邻最大差值。</span></span><br><span class="line">    <span class="keyword">int</span> leftmax = buckets[<span class="number">0</span>].max;</span><br><span class="line">    <span class="keyword">int</span> maxdistance = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(buckets[i].min==<span class="literal">NULL</span>)&#123;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(buckets[i].min-leftmax&gt;maxdistance)</span><br><span class="line">        &#123;</span><br><span class="line">            maxdistance = buckets[i].min - leftmax;</span><br><span class="line">        &#125;</span><br><span class="line">        leftmax = buckets[i].max;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> maxdistance;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc,<span class="keyword">char</span> *argv[] )</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> *test = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">5</span>];</span><br><span class="line">    <span class="built_in">memset</span>(test, <span class="number">0</span>, <span class="keyword">sizeof</span>(<span class="keyword">int</span>) * <span class="number">5</span>);</span><br><span class="line">    test[<span class="number">0</span>] = <span class="number">1</span>;test[<span class="number">1</span>] = <span class="number">6</span>;</span><br><span class="line">    test[<span class="number">2</span>] = <span class="number">3</span>;</span><br><span class="line">    test[<span class="number">3</span>] = <span class="number">8</span>;</span><br><span class="line">    test[<span class="number">4</span>] = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt;getmaxdtce(test,<span class="number">5</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;解法1：&lt;/p&gt;
    
    </summary>
    
    
      <category term="算法" scheme="https://stemha.github.io/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="算法" scheme="https://stemha.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="桶排序" scheme="https://stemha.github.io/tags/%E6%A1%B6%E6%8E%92%E5%BA%8F/"/>
    
  </entry>
  
  <entry>
    <title>环状链表判断算法</title>
    <link href="https://stemha.github.io/2020/05/14/%E7%8E%AF%E7%8A%B6%E9%93%BE%E8%A1%A8%E5%88%A4%E6%96%AD%E7%AE%97%E6%B3%95/"/>
    <id>https://stemha.github.io/2020/05/14/%E7%8E%AF%E7%8A%B6%E9%93%BE%E8%A1%A8%E5%88%A4%E6%96%AD%E7%AE%97%E6%B3%95/</id>
    <published>2020-05-14T10:21:03.000Z</published>
    <updated>2020-08-10T04:19:21.697Z</updated>
    
    <content type="html"><![CDATA[<h2 id="判断该链表是否有环"><a href="#判断该链表是否有环" class="headerlink" title="判断该链表是否有环"></a>判断该链表是否有环</h2><ol><li>采用两个指针，一个用来遍历，一个用来从头到当前遍历位置的数据对比。<br>思想：比较元素是否出过；<br>复杂度：时间O(n^2),空间O(1)</li><li>hash表的方法，记录元素，一旦在hash表中出现过,就证明有环<br>复杂度：时间O(n),空间O(n)</li><li><code>双指针类型方法</code>：两个指针p1和p2，让它们同时指向这个链表的头节点。然后开始一个大循环，在循环体中，让指针p1每次向后移动1个节点，让指针p2每次向后移动2个节点，然后比较<br>两个指针指向的节点是否相同。如果相同，则可以判断出链表有环，如果不同，则继续下一次循环。<br>思想：追及问题，让快的先跑，如果有环，快的绕一圈后肯定会追上慢的。<br>复杂度：时间O(n),空间O(1)<a id="more"></a></li></ol><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span>&#123;</span></span><br><span class="line"> <span class="keyword">int</span> value;</span><br><span class="line"> node *next;</span><br><span class="line"> node(<span class="keyword">int</span> a):value(a),next(<span class="literal">NULL</span>)&#123;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">typedef</span> node <span class="built_in">list</span>;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">iscycle</span><span class="params">(<span class="built_in">list</span> * head)</span></span>&#123;</span><br><span class="line">    node *p1,*p2;</span><br><span class="line">    p1 = head;</span><br><span class="line">    p2= head;</span><br><span class="line">    <span class="keyword">while</span>(p1!=<span class="literal">NULL</span>&amp;&amp;p1-&gt;next!=<span class="literal">NULL</span>) <span class="comment">//因为p1每次走两步，所以需要判断一下最后两个是否为空，以便决定是否循环；</span></span><br><span class="line">    &#123;</span><br><span class="line">        p1 = p1-&gt;next-&gt;next;</span><br><span class="line">        p2 = p2-&gt;next;</span><br><span class="line">        <span class="keyword">if</span>(p1==p2)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line"> node * node1 = <span class="keyword">new</span> node(<span class="number">5</span>);</span><br><span class="line"> node * node2 = <span class="keyword">new</span> node(<span class="number">3</span>);</span><br><span class="line"> node * node3 = <span class="keyword">new</span> node(<span class="number">7</span>);</span><br><span class="line"> node * node4 = <span class="keyword">new</span> node(<span class="number">2</span>);</span><br><span class="line"> node * node5 = <span class="keyword">new</span> node(<span class="number">6</span>);</span><br><span class="line"> node1-&gt;next = node2;</span><br><span class="line"> node2-&gt;next = node3;</span><br><span class="line"> node3-&gt;next = node4;</span><br><span class="line"> node4-&gt;next = node5;</span><br><span class="line"> node5-&gt;next = node2;</span><br><span class="line"> <span class="comment">//cout &lt;&lt; node5-&gt;next &lt;&lt; endl;</span></span><br><span class="line"> <span class="built_in">cout</span> &lt;&lt; iscycle(node1) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="如何求出环的长度？"><a href="#如何求出环的长度？" class="headerlink" title="如何求出环的长度？"></a>如何求出环的长度？</h2><p>当两个指针首次相遇，证明链表有环的时候，让两个指针从相遇点继续循环前进，并统计前进的循环次数，直到两个指针第2次相遇。此<br>时，统计出来的前进次数就是环长。<br>因为指针p1每次走1步，指针p2每次走2步，两者的速度差是1步。当两个指针再次相遇时，p2比p1多走了整整1圈。<br>因此，环长 = 每一次速度差 × 前进次数 = 前进次数<br>也就是 环长=1×前进次数</p><h2 id="如何求出入环节点？"><a href="#如何求出入环节点？" class="headerlink" title="如何求出入环节点？"></a>如何求出入环节点？</h2><p>如果链表有环，如何求出入环节点？<br>答：只要把其中一个指针放回到头节点位置，另一个指针保持在首次相遇点，两个指针都是每次向前走1步。那么，它们最终相遇的节点，就是入环节点。<br>以上答案根据一个走两步一个走一步计算出的。</p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p>漫画算法</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;判断该链表是否有环&quot;&gt;&lt;a href=&quot;#判断该链表是否有环&quot; class=&quot;headerlink&quot; title=&quot;判断该链表是否有环&quot;&gt;&lt;/a&gt;判断该链表是否有环&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;采用两个指针，一个用来遍历，一个用来从头到当前遍历位置的数据对比。&lt;br&gt;思想：比较元素是否出过；&lt;br&gt;复杂度：时间O(n^2),空间O(1)&lt;/li&gt;
&lt;li&gt;hash表的方法，记录元素，一旦在hash表中出现过,就证明有环&lt;br&gt;复杂度：时间O(n),空间O(n)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;双指针类型方法&lt;/code&gt;：两个指针p1和p2，让它们同时指向这个链表的头节点。然后开始一个大循环，在循环体中，让指针p1每次向后移动1个节点，让指针p2每次向后移动2个节点，然后比较&lt;br&gt;两个指针指向的节点是否相同。如果相同，则可以判断出链表有环，如果不同，则继续下一次循环。&lt;br&gt;思想：追及问题，让快的先跑，如果有环，快的绕一圈后肯定会追上慢的。&lt;br&gt;复杂度：时间O(n),空间O(1)&lt;/li&gt;&lt;/ol&gt;
    
    </summary>
    
    
      <category term="算法" scheme="https://stemha.github.io/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="链表" scheme="https://stemha.github.io/tags/%E9%93%BE%E8%A1%A8/"/>
    
      <category term="算法" scheme="https://stemha.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>数据结构总结</title>
    <link href="https://stemha.github.io/2020/05/11/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E6%80%BB%E7%BB%93/"/>
    <id>https://stemha.github.io/2020/05/11/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E6%80%BB%E7%BB%93/</id>
    <published>2020-05-10T17:17:20.000Z</published>
    <updated>2020-08-10T04:19:21.694Z</updated>
    
    <content type="html"><![CDATA[<p>（未完待续）</p><a id="more"></a><h2 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a><strong>基本概念</strong></h2><p><code>数据结构</code>：</p><ul><li>是数据项的结构化集合。</li><li>结构性的表现<ul><li>数据项之间的相互联系和作用</li><li>或者理解为定义于数据项之间的某种<code>逻辑次序</code></li></ul></li><li>依据逻辑次序的复杂程度划分：<ul><li><code>线性结构</code></li><li><code>半线性结构</code></li><li><code>非线性结构</code></li></ul></li></ul><h2 id="序列（sequence）"><a href="#序列（sequence）" class="headerlink" title="序列（sequence）"></a><strong>序列（sequence）</strong></h2><p><code>序列（sequence）</code>：最基本的线性结构的统称。<br>序列（sequence）依据数据项之间的逻辑次序与其物理存储的对应关系不同，又可以进一步划分向量和列表：</p><h3 id="向量（vector）"><a href="#向量（vector）" class="headerlink" title="向量（vector）"></a><strong>向量（vector）</strong></h3><p><code>向量（vector）</code>:所有数据项之间物理存储位置与逻辑次序完全吻合。此时的逻辑次序也称为<code>秩（rank）</code></p><ul><li><code>循秩访问（call-by-rank）</code>，静态存储策略。</li></ul><h3 id="列表（list）"><a href="#列表（list）" class="headerlink" title="列表（list）"></a><strong>列表（list）</strong></h3><p><code>列表（list）</code>:所有数据项之间物理存储位置与逻辑次序不一定吻合。采用间接定址的方法通过封装后的<code>位置（position）</code>相互引用。</p><ul><li><code>循位置访问（call-by-position）</code>或者称为<code>循链接访问（call-by-link）</code>，动态存储策略。</li></ul><h2 id="栈（stack）"><a href="#栈（stack）" class="headerlink" title="栈（stack）"></a><strong>栈（stack）</strong></h2><p><code>栈（stack）</code>：线性数据结构的一种，视作向量与列表的特例。对象的插入和删除限制在栈的一端。禁止操作的一端称为<code>盲端</code>。<br><code>栈顶（stack top）</code>：可操作（插入和删除）的一端。<code>入栈（push）</code>与<code>出栈（pop）</code>。<br><code>栈底（stack bottom）</code>：无法直接操作的盲端。</p><h3 id="栈与递归"><a href="#栈与递归" class="headerlink" title="栈与递归"></a>栈与递归</h3><h4 id="函数调用栈"><a href="#函数调用栈" class="headerlink" title="函数调用栈"></a>函数调用栈</h4><p><code>调用栈（call stack）</code>和<code>执行栈（execution）</code>:大部分操作系统中，每个运行的二进制程序都都配有一个调用栈，用来跟踪属于同一个程序的所有函数，记录它们之间的调用关系，并保证在每一个调用实例执行完毕之后，可以准确返回。<br><code>帧（frame）</code>：调用栈的基本单位，每次函数调用时，都会相应的创建一帧：</p><ul><li>记录了函数实例在二进制程序中的返回地址，局部变量，传入参数，还有上一帧的栈中地址。</li></ul><h4 id="逆序输出"><a href="#逆序输出" class="headerlink" title="逆序输出"></a>逆序输出</h4><p>进制转换</p><h4 id="递归嵌套"><a href="#递归嵌套" class="headerlink" title="递归嵌套"></a>递归嵌套</h4><p><code>栈混洗（stack permutation）</code>：栈的数据从stackA——&gt;stackS——&gt;stackB。</p><p>括号匹配：</p><p>延迟缓冲：</p><p><code>逆波兰表达式（reverse Polish notation，RPN）</code>：</p><h2 id="试探回溯法"><a href="#试探回溯法" class="headerlink" title="试探回溯法"></a>试探回溯法</h2><p>剪枝<br>试探<br>回溯</p><h3 id="八皇后"><a href="#八皇后" class="headerlink" title="八皇后"></a>八皇后</h3><h3 id="迷宫寻径"><a href="#迷宫寻径" class="headerlink" title="迷宫寻径"></a>迷宫寻径</h3><h2 id="队列（queue）"><a href="#队列（queue）" class="headerlink" title="队列（queue）"></a><strong>队列（queue）</strong></h2><p>视作向量与列表的特例</p><h3 id="基本概念-1"><a href="#基本概念-1" class="headerlink" title="基本概念"></a>基本概念</h3><p>队列（queue）：线性数据结构的一种，对象的插入和删除限制在队列的两端。<br><code>队头（front）</code>：允许取出元素的一端。<code>出队（dequeue）</code>:元素的删除操作。<br><code>队尾（rear）</code>：允许插入元素的一端。<code>入队（enqueue）</code>：元素的插入操作。</p><h3 id="队列应用"><a href="#队列应用" class="headerlink" title="队列应用"></a>队列应用</h3><h4 id="循环分配器"><a href="#循环分配器" class="headerlink" title="循环分配器"></a>循环分配器</h4><h4 id="银行服务模拟"><a href="#银行服务模拟" class="headerlink" title="银行服务模拟"></a>银行服务模拟</h4><h2 id="树"><a href="#树" class="headerlink" title="树"></a><strong>树</strong></h2><ul><li>半线性结构（semi-linear structure）</li><li>其中的元素之间并不存在天然的直接后继或者直接前驱关系。但是只要附加某种约束（比如遍历），就可以在树的元素之间确定某种线性次序关系。因此树属于半线性结构</li></ul><p><code>叶节点（leaf）</code>：无孩子的节点。<br><code>树的高度（height）</code>:树的所有节点深度的最大值称作该树的高度。教材中约定，单个节点的树高度为0，空树的高度为-1。</p><ul><li>如果根结点第0，层数=深度=高度-1</li><li>如果根结点第1，层数=深度=高度</li></ul><p><code>节点的高度</code>：任一节点V的高度对应于<code>子树的高度</code>subtree（V）。</p><h3 id="多叉树（k-ary-tree）"><a href="#多叉树（k-ary-tree）" class="headerlink" title="多叉树（k-ary tree）"></a><strong>多叉树（k-ary tree）</strong></h3><p><code>k叉树（k-ary tree）</code>：每个节点的孩子均不超过k个的有根树。</p><h4 id="多叉树的表示法"><a href="#多叉树的表示法" class="headerlink" title="多叉树的表示法"></a><strong>多叉树的表示法</strong></h4><p><code>父节点表示法</code>：一个向量表，存两个属性，一个是data，一个是parent<br><code>孩子节点表示法</code>：一个向量表，存两个属性，一个是data，一个是children（组织成vector或者list）<br><code>父亲+孩子节点表示法</code>：一个向量表，存三个属性，一个是data，一个是parent，最后一个是children（组织成vector或者list）</p><h4 id="有序树（ordered-tree）"><a href="#有序树（ordered-tree）" class="headerlink" title="有序树（ordered tree）"></a><strong>有序树（ordered tree）</strong></h4><p>有序树（ordered tree）：同一节点的所有孩子之间必须具有某一线性次序。这个约束条件使得作为多叉树特例的二叉树有足够的能力表示任何一颗多叉树。</p><h4 id="长子-兄弟转换法"><a href="#长子-兄弟转换法" class="headerlink" title="长子+兄弟转换法"></a>长子+兄弟转换法</h4><p>同一列的是长子，同一行的是兄弟</p><h3 id="二叉树（binary-tree）"><a href="#二叉树（binary-tree）" class="headerlink" title="二叉树（binary tree）"></a><strong>二叉树（binary tree）</strong></h3><p><code>二叉树（binary tree）</code>：每个节点的读书均不超过2。<br><code>有序二叉树（ordered binary tree）</code>：同一父节点的孩子都可以左右相互切分。<br><code>真二叉树（proper binary tree）</code>：不含一度节点的二叉树</p><h4 id="完全二叉树（complete-binary-tree）"><a href="#完全二叉树（complete-binary-tree）" class="headerlink" title="完全二叉树（complete binary tree）"></a><strong>完全二叉树（complete binary tree）</strong></h4><p>完全二叉树（complete binary tree）：</p><ul><li>对于使用队列操作的层次遍历，前(n/2向下取整）次迭代中都有左孩子入队，前(n/2向上取整然后-1）次迭代中都有右孩子入队</li><li>叶节点只出现在最底部的两层。</li><li>高度为：h=（log n）的向下取整 //根节点设置为高度0的情况下</li><li>规模介于2^h与2^(h+1)-1</li><li>根节点为1，左孩子编号等于2v,右孩子编号2v+1</li></ul><h3 id="满二叉树（full-binary-tree）"><a href="#满二叉树（full-binary-tree）" class="headerlink" title="满二叉树（full binary tree）"></a><strong>满二叉树（full binary tree）</strong></h3><ul><li>规模2^(h+1)-1</li></ul><h4 id="遍历"><a href="#遍历" class="headerlink" title="遍历"></a>遍历</h4><p>递归式遍历<br>迭代版先序遍历<br>迭代版中序遍历<br>迭代版后续遍历<br>层次遍历</p><h3 id="编码树"><a href="#编码树" class="headerlink" title="编码树"></a>编码树</h3><p>编码<br>解码<br>前缀无歧义编码（PFC）<br>huffman编码</p><h4 id="二叉编码树"><a href="#二叉编码树" class="headerlink" title="二叉编码树"></a>二叉编码树</h4><p>根通路串（root path string）</p><h2 id="搜索树"><a href="#搜索树" class="headerlink" title="搜索树"></a><strong>搜索树</strong></h2><p>对线性数据结构查找性能的改进。<br>如果既要求对象集合的组成可以高效率地动态调整，同时也要求能够高效率的查找，对于向量和列表这类线性结构是难以胜任的。<br>兼顾高效率的动态修改和高效率的静态查找，可以使用搜索树。<br>理想平衡和适度平衡，引入平衡二叉树结构，比如AVL树即使在最坏情况下，单次动态查找和静态查找也均在O（log n）时间内完成。</p><h3 id="理想平衡和适度平衡"><a href="#理想平衡和适度平衡" class="headerlink" title="理想平衡和适度平衡"></a><strong>理想平衡和适度平衡</strong></h3><p>理想平衡：如果树的高度恰好为log n，向下取整，则成为理想平衡树 ，比如完全二叉树和满二叉树</p><p>适度平衡：渐进意义下适当放松标准的平衡性。渐进的不超过O(log n)<br>下面介绍的红黑树，AVL树，伸展树，kd-树都是适度平衡的变种。也可以归入平衡二叉搜索树之列。</p><h3 id="搜索树的局部性"><a href="#搜索树的局部性" class="headerlink" title="搜索树的局部性"></a><strong>搜索树的局部性</strong></h3><ol><li>刚刚被访问的节点，可能不久后就能访问到</li><li>将被访问的下一个顶点，极可能就在不久之前被访问的某个节点附近</li></ol><h3 id="二叉搜索树（BST）"><a href="#二叉搜索树（BST）" class="headerlink" title="二叉搜索树（BST）"></a><strong>二叉搜索树（BST）</strong></h3><p><code>二叉搜索树（binary search tree）</code>：处处都满足<strong>顺序性</strong>——任一节点r的左（右）子树中，所有节点均不大于（不小于）节点r<br><code>二叉搜索树的判定</code>:任何一棵二叉树是二叉搜索树，当且仅当其中序遍历序列单调非降。</p><p>复杂度分析：<br>insert，remove，search时间：线性正比于查找路径的长度或者最终返回节点的深度。最坏情况下可能退化成为链表。</p><h4 id="等价二叉搜索树"><a href="#等价二叉搜索树" class="headerlink" title="等价二叉搜索树"></a><strong>等价二叉搜索树</strong></h4><p>若两个二叉搜索树的中序遍历相同，则称它们彼此等价。<br>概括一下就是：上下可变，左右不乱。也就是说节点的左右相对关系是不变的，但是上下关系是可以改变的。<br>局部性：</p><ol><li>经过单词动态修改操作，至多只有O(log n)处局部不再满足限制条件。</li><li>可以在O(log n)时间内，使这O(log n)处局（乃至全树）重新满足限制条件。</li></ol><h4 id="旋转调整（修复）"><a href="#旋转调整（修复）" class="headerlink" title="旋转调整（修复）"></a>旋转调整（修复）</h4><p><code>zig</code> 顺时针旋转<br><code>zag</code> 逆时针旋转</p><h3 id="平衡二叉搜索树（BBST）"><a href="#平衡二叉搜索树（BBST）" class="headerlink" title="平衡二叉搜索树（BBST）"></a><strong>平衡二叉搜索树（BBST）</strong></h3><h4 id="AVL树"><a href="#AVL树" class="headerlink" title="AVL树"></a><strong>AVL树</strong></h4><p><code>平衡因子(balance factor)</code>：其左，右子树的高度差。<br>各个节点的平衡因子绝对值不超过1。也就是各个节点左右子树高度差不超过1。</p><p>失重与重新平衡：<br>单旋与双旋：<br>统一重平衡算法：</p><h4 id="伸展树（splay-tree）"><a href="#伸展树（splay-tree）" class="headerlink" title="伸展树（splay tree）"></a><strong>伸展树（splay tree）</strong></h4><p>伸展树（splay tree）：</p><ul><li>无须时刻都保持全树的平衡，但是却能够在任何足够长的序列上，保持分摊意义上的效率。</li><li>不需要对基本的二叉树节点结构，做任何附加的要求或者改动，不需要记录平衡因子或者高度之类的额外信息，故适用范围更广</li></ul><p>利用了数据局部性，将刚刚被访问的节点，转移至树根附近。</p><p><code>伸展（splaying）</code>：随着节点e的不断上升，两侧子树的结构也在不断的调整，这种过程也形象地称为伸展。</p><h5 id="单层伸展树"><a href="#单层伸展树" class="headerlink" title="单层伸展树"></a><strong>单层伸展树</strong></h5><p>节点e每次提升1层，直至成为树根</p><h5 id="双层伸展树"><a href="#双层伸展树" class="headerlink" title="双层伸展树"></a><strong>双层伸展树</strong></h5><p>节点e每次提升2层，直至成为树根。</p><p>zig-zig/zag-zag<br>zig-zig/zag-zag<br>zig/zag</p><p>复杂度分析：分摊的情况下，O（log n）</p><h4 id="红黑数（red-black-tree）"><a href="#红黑数（red-black-tree）" class="headerlink" title="红黑数（red-black tree）"></a><strong>红黑数（red-black tree）</strong></h4><p>通过假想地引入外部节点（黑色），将二叉树真正扩展为真二叉树。</p><ol><li>根节点始终为黑色</li><li>外部节点均为黑色</li><li>其余节点若为红色，其孩子节点必为黑色</li><li>从任一外部节点到根节点的沿途，黑节点的数目相等</li><li>由1，2可知，红节点属于内部节点，且红节点的父节点和左右孩子肯定存在</li><li>由3可知，红节点之父必为黑色，树的任一通路不会包含相邻的红节点。<br>7  由4可知，所有外部节点的黑高度统一</li></ol><p>所有外部节点的黑高度统一<br>特别的，根节点的黑高度也称为全树的黑高度，在数值上与外部节点的黑高度相等。<br>所有外部节点的黑高度为0.</p><p>双红修正<br>双黑修正</p><h3 id="平衡多路搜索树"><a href="#平衡多路搜索树" class="headerlink" title="平衡多路搜索树"></a><strong>平衡多路搜索树</strong></h3><p>平衡二叉搜索树（BBST）的推广<br>当数据规模大到内存已经不足以容纳时候，常规平衡二叉搜索树的效率会大打折扣。其原因在于查找过程对外存的访问次数过多。</p><blockquote><p>外部存储适合于批量式访问，不妨通过时间成本较低的多次内存操作，来替代时间成本相对较高的单次外存操作。</p></blockquote><p>结合上面的思想，我们可以将通常的二叉树搜索树，改造为多路搜索树（等价变换）</p><p><code>四路搜索树</code>：每个大节点拥有四个外部的分支。</p><ul><li>通常是将二叉搜索树以两层为间隔合并。</li><li>一个大节点包含3个关键码和4个外部分支.</li></ul><p><code>多路搜索树（multi-way search tree）</code>：一般地，以k层为间隔如此重组，可以将二叉搜索树转化为等价的2^k路搜索树。</p><p><strong>优点</strong>：</p><ul><li>访问外存的方式相对于二叉搜索树已经发生了本质的变化，可以以大节点为单位读取一组（而不是一个）关键码。</li><li>这组关键码在逻辑上与物理上都彼此相邻，故可以以批量方式从外存一次性读出，且需要的时间与读取单个关键码几乎一样。</li><li>每组关键码的最佳数目，取决于不同外存的批量访问特性。可以根据扇区的容量等因素来计算。</li></ul><h4 id="B-树"><a href="#B-树" class="headerlink" title="B- 树"></a><strong>B- 树</strong></h4><p>平衡多路搜索树的典型代表<br>B-树（B-tree）：m阶B-树，也就是m路平衡搜索树</p><p><strong>所有外部节点的深度都相等</strong>，每个内部节点都存有<strong>不超过</strong>m-1个关键码，以及用以指示对应分支不超过m个引用。<br>各个节点的分支数应该介于m/2（向上取整）与m之间，故也称为(m/2向上取整，m)-树<br>B-树的外部节点：<br>B-树的宽度<br>B-树的叶节点</p><ul><li>非常适合在相对较小的内存中，实现对大规模数据的高效操作。</li></ul><p>复杂度：O(log<sub>m</sub>N)</p><h4 id="kd-树（k-dimensional-tree）"><a href="#kd-树（k-dimensional-tree）" class="headerlink" title="kd-树（k-dimensional tree）"></a><strong>kd-树（k-dimensional tree）</strong></h4><p>四叉树与八叉树的一般性推广<br>递归定义的平衡二叉树<br>一维范围查询（range query）：给定直线L上的点集P={p<sub>0</sub>,p<sub>n-1</sub>},对于任一区间R=[x<sub>1</sub>,x<sub>2</sub>],P中的哪些顶点落在其中？<br>离线方式和在线方式<br><code>输出敏感（output sensitive）</code>的算法<br>平衡二叉搜索树解决一维度范围i查询问题， 找到最低共同祖先，忽略<br>分割成为矩形，举行左边底边开，右边和顶边封闭<br>每次切分都在中位点（对应的坐标排序居中者）。 以保证全树的高度不超过O(log n)<br>复杂度O（根号n）</p><h2 id="图"><a href="#图" class="headerlink" title="图"></a><strong>图</strong></h2><p>非线性结构</p><h3 id="邻接矩阵"><a href="#邻接矩阵" class="headerlink" title="邻接矩阵"></a>邻接矩阵</h3><h3 id="邻接表"><a href="#邻接表" class="headerlink" title="邻接表"></a>邻接表</h3><h3 id="BFS"><a href="#BFS" class="headerlink" title="BFS"></a>BFS</h3><h3 id="DFS"><a href="#DFS" class="headerlink" title="DFS"></a>DFS</h3><h3 id="拓扑排序"><a href="#拓扑排序" class="headerlink" title="拓扑排序"></a>拓扑排序</h3><h2 id="优先级队列与堆"><a href="#优先级队列与堆" class="headerlink" title="优先级队列与堆"></a>优先级队列与堆</h2><p>二叉堆是一种特殊的完全二叉树，分为最大堆和最小堆。<br><code>最大堆:</code>，任何一个父节点的值，都大于或等于它左、右孩子节点的值。<br><code>最小堆:</code>，任何一个父节点的值，都小于或等于它左、右孩子节点的值。</p><h3 id="完全二叉堆"><a href="#完全二叉堆" class="headerlink" title="完全二叉堆"></a>完全二叉堆</h3><h4 id="上滤与下滤"><a href="#上滤与下滤" class="headerlink" title="上滤与下滤"></a>上滤与下滤</h4><h3 id="左式堆"><a href="#左式堆" class="headerlink" title="左式堆"></a>左式堆</h3><h2 id="串"><a href="#串" class="headerlink" title="串"></a>串</h2><h3 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h3><h3 id="串匹配"><a href="#串匹配" class="headerlink" title="串匹配"></a>串匹配</h3><h2 id="散列表"><a href="#散列表" class="headerlink" title="散列表"></a>散列表</h2><p>看这篇文章即可：<a href="https://stemha.github.io/2020/04/14/%E5%93%88%E5%B8%8C%E8%A1%A8%EF%BC%88%E6%95%A3%E5%88%97%E8%A1%A8%EF%BC%89%E8%AF%A6%E8%A7%A3/#more">哈希表（散列表）详解</a></p><h2 id="注解"><a href="#注解" class="headerlink" title="注解"></a>注解</h2><p>偏序只对部分元素成立关系R，全序对集合中任意两个元素都有关系R。</p><ul><li>集合的包含关系是偏序，因为两个集合可以互不包含。</li><li>复数中的大小就是偏序，其中虚数不能比较大小。</li><li>实数中的大小关系是全序，两个实数必有一个大于等于另一个。</li></ul><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p>数据结构 邓俊辉</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;（未完待续）&lt;/p&gt;
    
    </summary>
    
    
      <category term="数据结构" scheme="https://stemha.github.io/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
      <category term="数据结构" scheme="https://stemha.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>C++标准库容器类概述</title>
    <link href="https://stemha.github.io/2020/05/10/C++%E6%A0%87%E5%87%86%E5%BA%93%E5%AE%B9%E5%99%A8%E7%B1%BB%E6%A6%82%E8%BF%B0/"/>
    <id>https://stemha.github.io/2020/05/10/C++%E6%A0%87%E5%87%86%E5%BA%93%E5%AE%B9%E5%99%A8%E7%B1%BB%E6%A6%82%E8%BF%B0/</id>
    <published>2020-05-10T13:34:48.000Z</published>
    <updated>2020-08-10T04:19:21.218Z</updated>
    
    <content type="html"><![CDATA[<h2 id="基础概念"><a href="#基础概念" class="headerlink" title="基础概念"></a><strong>基础概念</strong></h2><p><code>容器（container）</code>：</p><ul><li>容纳特定类型对象的集合。</li><li>C++中所有的容器都是类模板。</li><li>所有容器类型都定义了默认构造函数，用于创建指定类型的空容器对象。容器默认构造函数不带参数。</li><li>为了使程序更清晰、简短，容器类型最常用的构造函数是默认构造函数。在大多数的程序中，使用默认构造函数能达到最佳运行时性能，并且使容器更容易使用。<a id="more"></a></li></ul><p>容器都是类模板。它们实例化后就成为<code>容器类</code>。用容器类定义的对象称为<code>容器对象</code>。<br><code>容器适配器（adaptors）</code>：</p><ul><li>适配器是根据原始的容器类型所提供的操作，通过定义新的操作接口，来适应基础的容器类型。即通过封装某个序列式容器，并重新组合该容器中包含的成员函数，使其满足某些特定场景的需要。</li><li>容器适配器本质上还是容器，只不过此容器模板类的实现，利用了大量其它基础容器模板类中已经写好的成员函数。当然，如果必要的话，容器适配器中也可以自创新的成员函数。</li><li>STL 中的容器适配器，其内部使用的基础容器并不是固定的，用户可以在满足特定条件的多个基础容器中自由选择。</li><li><a href="http://c.biancheng.net/view/6967.html">什么是适配器，C++ STL容器适配器详解</a></li></ul><h2 id="顺序容器和关联容器"><a href="#顺序容器和关联容器" class="headerlink" title="顺序容器和关联容器"></a><strong>顺序容器和关联容器</strong></h2><p>关联容器和顺序容器的根本不同在于：</p><ul><li>关联容器中的元素是按关键字来保存和访问的</li><li>顺序容器中的元素则是按它们在容器中的位置来顺序保存和访问的。</li></ul><h2 id="顺序容器"><a href="#顺序容器" class="headerlink" title="顺序容器"></a><strong>顺序容器</strong></h2><p><code>顺序容器（sequential container）</code>：</p><ul><li>它将单一类型元素聚集起来成为容器，然后根据位置来存储和访问这些元素。</li><li>顺序容器不是排序的：元素排列次序与元素值无关。</li><li>而是由元素添加到容器里的次序决定。</li><li>主要的有三种：<code>可变长动态数组 vector</code>、<code>双端队列 deque</code>、<code>双向链表 list</code>。</li><li>汇总的有vector、deque、list、forward_list、array、string等。</li></ul><p><strong>表1. 顺序容器与顺序容器适配器:</strong></p><table><thead><tr><th align="left">顺序容器</th><th align="left">用途</th><th align="left">顺序容器适配器</th><th align="left">用途</th><th align="left">底层基础容器</th></tr></thead><tbody><tr><td align="left">vector</td><td align="left">可变长动态数组，支持快速随机访问</td><td align="left"><code>stack</code></td><td align="left">后进先出（LIFO）堆栈</td><td align="left">默认使用deque。满足条件的基础容器有 vector、deque、list</td></tr><tr><td align="left">list</td><td align="left">双向链表，支持快速插入/删除</td><td align="left"><code>queue</code></td><td align="left">先进先出（FIFO）队列</td><td align="left">默认使用deque。满足条件的基础容器有 deque、list</td></tr><tr><td align="left">deque</td><td align="left">双端队列</td><td align="left"><code>priority_queue</code></td><td align="left">有优先级管理的队列</td><td align="left">默认使用vector。满足条件的基础容器有vector、deque。</td></tr></tbody></table><p>除了上面的表格之外还存在<code>forward_list</code>顺序容器（单向链表，只支持单向顺序访问），请看文章<a href="https://blog.csdn.net/u013006553/article/details/78158717">链接</a></p><h2 id="关联容器"><a href="#关联容器" class="headerlink" title="关联容器"></a><strong>关联容器</strong></h2><p>关联容器（Associative containers）：</p><ul><li>支持通过键（key）来高效地查找和读取元素。</li><li>关联容器通过键（key）存储和读取元素，而顺序容器则通过元素在容器中的位置顺序存储和访问元素。虽然关联容器的大部分行为与顺序容器相同，但其独特之处在于支持键的使用。</li><li>关联容器支持很多顺序容器也提供的相同操作，此外，还提供管理或使用键的特殊操作。关联容器共享大部分但并非全部的顺序容器操作。关联容器不提供front、 push_front、 pop_front、back、push_back 以及 pop_back 操作。</li></ul><h3 id="有序关联容器"><a href="#有序关联容器" class="headerlink" title="有序关联容器"></a><strong>有序关联容器</strong></h3><p>有序关联容器有以下四种：set、multiset、map、multimap。</p><ul><li>容器元素根据键的次序排列。插入元素时，容器会按一定的排序规则将元素放到适当的位置上，因此插入元素时不能指定位置。</li><li>默认情况下，关联容器中的元素是从小到大排序（或按关键字从小到大排序）的，而且用&lt;运算符比较元素或关键字大小。因为是排好序的，所以关联容器在查找时具有非常好的性能。</li><li>在迭代遍历关联容器时，我们可确保按键的顺序的访问元素，而与元素在容器中的存放位置完全无关。</li></ul><h4 id="map"><a href="#map" class="headerlink" title="map"></a><strong>map</strong></h4><ul><li>以键－值（key-value）对的形式组织：键(key)用作元素在 map 中的索引，而值(value)则表示所存储和读取的数据。</li><li>map 类型通常可理解为<code>关联数组（associative array）</code>：可使用键作为下标来获取一个值，正如内置数组类型一样。</li></ul><p>常用操作：</p><table><thead><tr><th align="left">map查询操作 操作</th><th align="left">作用</th></tr></thead><tbody><tr><td align="left">m.count(k)</td><td align="left"><code>返回 m 中 k 的出现次数</code></td></tr><tr><td align="left">m.find(k)</td><td align="left"><code>如果 m 容器中存在按 k 索引的元素，则返回指向该元素的迭代器。如果不存在，则返回超出末端迭代器</code></td></tr></tbody></table><p>使用 count 检查 map 对象中某键是否存在:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> occurs = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span> (word_count.count(<span class="string">"foobar"</span>))</span><br><span class="line">occurs = word_count[<span class="string">"foobar"</span>];</span><br></pre></td></tr></table></figure><p>读取元素而不插入该元素:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//find 操作返回指向元素的迭代器，如果元素不存在，则返回 end 迭代器：</span></span><br><span class="line"><span class="keyword">int</span> occurs = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">map</span>&lt;<span class="built_in">string</span>,<span class="keyword">int</span>&gt;::iterator it = word_count.find(<span class="string">"foobar"</span>);</span><br><span class="line"><span class="keyword">if</span> (it != word_count.end())</span><br><span class="line">occurs = it-&gt;second;</span><br></pre></td></tr></table></figure><p>更好的请参考：<a href="https://blog.csdn.net/engineerxin/article/details/104779786">《C++Primer》第十章-关联容器-学习笔记(1)-pair&amp;map</a></p><h4 id="multimap"><a href="#multimap" class="headerlink" title="multimap"></a><strong>multimap</strong></h4><ul><li>支持同一个键多次出现的 map 类型</li></ul><h4 id="set"><a href="#set" class="headerlink" title="set"></a><strong>set</strong></h4><ul><li>set 容器只是单纯的键的集合。每个元素仅包含一个键(key)，并有效地支持关于某个键是否存在的查询。</li><li>适用条件：<ul><li>如果希望有效地存储不同值的集合，那么使用 set 容器比较合适</li><li>当只想知道一个值是否存在时，使用 set 容器是最适合的。</li></ul></li><li>set 不支持下标操作符，而且没有定义 mapped_type 类型。在 set 容器中，value_type 不是 pair 类型，而是与 key_type 相同的类型。</li><li>set 容器存储的键也必须唯一，而且不能修改（也体现了 set 存储的元素仅仅是键，而没有所关联的值）</li></ul><h4 id="multiset"><a href="#multiset" class="headerlink" title="multiset"></a><strong>multiset</strong></h4><ul><li>支持同一个键多次出现的 map 类型</li></ul><p>multimap和 multiset 类型与相应的单元素版本具有相同的头文件定义：分别是 map 和set 头文件。<br>multimap 和 multiset 所支持的操作分别与 map 和 set 的操作相同，只有一个例外：multimap 不支持下标运算。</p><h3 id="无序关联容器"><a href="#无序关联容器" class="headerlink" title="无序关联容器"></a><strong>无序关联容器</strong></h3><p>unordered_map<br>unordered_multimap<br>unordered_set<br>unordered_multiset</p><h2 id="STL容器类库"><a href="#STL容器类库" class="headerlink" title="STL容器类库"></a><strong>STL容器类库</strong></h2><p><code>&lt;vector&gt;</code>：定义<code>vector</code>序列模板，是一个大小可以重新设置的数组类型，比普通数组更安全、更灵活。<br><code>&lt;list&gt;</code>：定义<code>list</code>序列模板，是一个<strong>序列的链表</strong>，常常在任意位置插入和删除元素。<br><code>&lt;deque&gt;</code>：定义<code>deque</code>序列模板，支持在开始和结尾的高效插入和删除操作。<br><code>&lt;queue&gt;</code>：为队列(先进先出)数据结构定义序列适配器<code>queue</code>和<code>priority_queue</code>。<br><code>&lt;stack&gt;</code>：为堆栈(后进先出)数据结构定义序列适配器<code>stack</code>。<br><code>&lt;map&gt;</code>：<code>map</code>是一个关联容器类型，允许根据键值是唯一的，且按照升序存储。<code>multimap</code>类似于map，但键不是唯一的。<br><code>&lt;set&gt;</code>：<code>set</code>是一个关联容器类型，用于以升序方式存储唯一值。<code>multiset</code>类似于set，但是值不必是唯一的。<br><code>&lt;bitset&gt;</code>：为固定长度的位序列定义<code>bitset</code>模板，它可以看作固定长度的紧凑型bool数组。类似数组的结构，它的每一个元素只能是０或１，每个元素仅用１bit空间。<br><code>&lt;array&gt;</code>：（TR1）固定大小数组，支持复制。<br><code>&lt;forward_list&gt;</code>：（c++11）单向列表，forward_list不提供随机访问，这一点跟list相同。<code>forward_list</code>是一个单向链表，只支持单向顺序访问，在链表的任何位置进行插入/删除操作都非常快。<br><code>&lt;unordered_set&gt;</code>：（TR1)无序容器<code>set</code>，其元素随机存放。唯一键的集合，按键散列。<code>multiset</code>类似于set，但是值不必是唯一的。<br><code>&lt;unordered_map&gt;</code>：（C++11）（TR1)无序容器<code>map</code>，其键值随机存放。键-值对的集合，由键散列，键是唯一的<code>multimap</code>类似于map，但键不是唯一的。<br>完整的看<a href="https://www.cnblogs.com/yinheyi/p/7504041.html">C++中常用的std标准容器</a></p><h2 id="STL容器类底层实现"><a href="#STL容器类底层实现" class="headerlink" title="STL容器类底层实现"></a><strong>STL容器类底层实现</strong></h2><h3 id="vector"><a href="#vector" class="headerlink" title="vector"></a>vector</h3><p>底层数据结构为数组 ，支持快速随机访问</p><h3 id="list"><a href="#list" class="headerlink" title="list"></a>list</h3><p>底层数据结构为双向链表，支持快速增删</p><h3 id="deque"><a href="#deque" class="headerlink" title="deque"></a>deque</h3><ul><li>底层数据结构为一个中央控制器和多个缓冲区</li><li>支持首尾（中间不能）快速增删，也支持随机访问</li><li>STL源码分析146页</li></ul><h3 id="forward-list"><a href="#forward-list" class="headerlink" title="forward_list"></a>forward_list</h3><ul><li>顺序容器，底层数据结构为单向链表。</li><li>只支持单向顺序访问，支持快速增删</li></ul><h3 id="stack"><a href="#stack" class="headerlink" title="stack"></a>stack</h3><ul><li>底层一般用list和deque实现，封闭头部即可。</li><li>不用vector的原因应该是容量大小有限制，扩容耗时。</li></ul><h3 id="queue"><a href="#queue" class="headerlink" title="queue"></a>queue</h3><ul><li>底层一般用list和deque实现，封闭头部即可</li><li>不用vector的原因应该是容量大小有限制，扩容耗时</li></ul><h3 id="priority-queue"><a href="#priority-queue" class="headerlink" title="priority_queue"></a>priority_queue</h3><p>底层数据结构：一般是vector为底层容器，堆heap为处理规则来管理底层容器实现</p><h3 id="set-1"><a href="#set-1" class="headerlink" title="set"></a>set</h3><p>底层数据结构为红黑树，有序，不重复</p><h3 id="multiset-1"><a href="#multiset-1" class="headerlink" title="multiset"></a>multiset</h3><p>底层数据结构为红黑树，有序，可重复 </p><h3 id="map-1"><a href="#map-1" class="headerlink" title="map      ﻿﻿﻿﻿"></a>map      ﻿﻿﻿﻿</h3><p>底层数据结构为红黑树，有序，不重复</p><h3 id="multimap-1"><a href="#multimap-1" class="headerlink" title="multimap"></a>multimap</h3><p>底层数据结构为红黑树，有序，可重复</p><h3 id="hash-set"><a href="#hash-set" class="headerlink" title="hash_set ﻿﻿﻿﻿"></a>hash_set ﻿﻿﻿﻿</h3><p>底层数据结构为hash表，无序，不重复</p><h3 id="hash-multiset"><a href="#hash-multiset" class="headerlink" title="hash_multiset"></a>hash_multiset</h3><p>底层数据结构为hash表，无序，可重复 </p><h3 id="hash-map"><a href="#hash-map" class="headerlink" title="hash_map      ﻿﻿﻿﻿"></a>hash_map      ﻿﻿﻿﻿</h3><p>底层数据结构为hash表，无序，不重复</p><h3 id="hash-multimap"><a href="#hash-multimap" class="headerlink" title="hash_multimap"></a>hash_multimap</h3><p>底层数据结构为hash表，无序，可重复</p><p><a href="https://blog.csdn.net/qq_43313035/article/details/89600276">C++STL的容器的底层实现详解</a></p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a><strong>参考资料</strong></h2><p><a href="http://c.biancheng.net/view/331.html">C++容器（STL容器）</a><br><a href="https://blog.51cto.com/9291927/2143283">C++语言学习（九）——C++标准库简介</a><br><a href="https://en.cppreference.com/w/cpp/container">Containers library(cppreference.com)</a><br><a href="https://www.cnblogs.com/yinheyi/p/7504041.html">C++中常用的std标准容器</a> //可以做查找表<br><a href="https://blog.csdn.net/u013006553/article/details/78158717">C++中容易忘的知识点——list和forward_list（四）</a>//可做查寻表<br><a href="https://blog.csdn.net/xiaominkong123/article/details/52238699">C++ STL 的底层实现</a><br><a href="https://blog.csdn.net/elisabeth1994/article/details/103297751">C++标准模板库（STL）的容器的底层实现</a><br><a href="https://blog.csdn.net/qq_43313035/article/details/89600276">C++STL的容器的底层实现详解</a>//可以做查找表</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;基础概念&quot;&gt;&lt;a href=&quot;#基础概念&quot; class=&quot;headerlink&quot; title=&quot;基础概念&quot;&gt;&lt;/a&gt;&lt;strong&gt;基础概念&lt;/strong&gt;&lt;/h2&gt;&lt;p&gt;&lt;code&gt;容器（container）&lt;/code&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;容纳特定类型对象的集合。&lt;/li&gt;
&lt;li&gt;C++中所有的容器都是类模板。&lt;/li&gt;
&lt;li&gt;所有容器类型都定义了默认构造函数，用于创建指定类型的空容器对象。容器默认构造函数不带参数。&lt;/li&gt;
&lt;li&gt;为了使程序更清晰、简短，容器类型最常用的构造函数是默认构造函数。在大多数的程序中，使用默认构造函数能达到最佳运行时性能，并且使容器更容易使用。&lt;/li&gt;&lt;/ul&gt;
    
    </summary>
    
    
      <category term="C++" scheme="https://stemha.github.io/categories/C/"/>
    
    
      <category term="C++" scheme="https://stemha.github.io/tags/C/"/>
    
      <category term="容器类" scheme="https://stemha.github.io/tags/%E5%AE%B9%E5%99%A8%E7%B1%BB/"/>
    
      <category term="关联容器" scheme="https://stemha.github.io/tags/%E5%85%B3%E8%81%94%E5%AE%B9%E5%99%A8/"/>
    
      <category term="顺序容器" scheme="https://stemha.github.io/tags/%E9%A1%BA%E5%BA%8F%E5%AE%B9%E5%99%A8/"/>
    
      <category term="C++标准库" scheme="https://stemha.github.io/tags/C-%E6%A0%87%E5%87%86%E5%BA%93/"/>
    
  </entry>
  
  <entry>
    <title>设计模式总结</title>
    <link href="https://stemha.github.io/2020/05/09/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E6%80%BB%E7%BB%93/"/>
    <id>https://stemha.github.io/2020/05/09/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E6%80%BB%E7%BB%93/</id>
    <published>2020-05-08T16:45:12.000Z</published>
    <updated>2020-08-10T04:19:21.755Z</updated>
    
    <content type="html"><![CDATA[<h2 id="设计模式是什么？"><a href="#设计模式是什么？" class="headerlink" title="设计模式是什么？"></a><strong>设计模式是什么？</strong></h2><a id="more"></a><h3 id="基础概念"><a href="#基础概念" class="headerlink" title="基础概念"></a><strong>基础概念</strong></h3><p><code>设计模式（Design pattern）</code>:</p><ul><li>是软件开发人员在软件开发过程中面临的一般问题的解决方案。这些解决方案是众多软件开发人员经过相当长的一段时间的试验和错误总结出来的。</li><li>是一套被反复使用的、多数人知晓的、经过分类编目的、代码设计经验的总结。</li></ul><h3 id="GOF（Gang-of-Four）"><a href="#GOF（Gang-of-Four）" class="headerlink" title="GOF（Gang of Four）"></a>GOF（Gang of Four）</h3><p>1994 年，由 Erich Gamma、Richard Helm、Ralph Johnson 和 John Vlissides 四人合著出版了一本名为 Design Patterns - Elements of Reusable Object-Oriented Software（中文译名：设计模式 - 可复用的面向对象软件元素） 的书，该书首次提到了软件开发中设计模式的概念。<br>他们所提出的设计模式主要是基于以下的面向对象设计原则：</p><ul><li>对接口编程而不是对实现编程。</li><li>优先使用对象组合而不是继承。</li></ul><h2 id="为什么要用设计模式？"><a href="#为什么要用设计模式？" class="headerlink" title="为什么要用设计模式？"></a><strong>为什么要用设计模式？</strong></h2><ul><li>为了重用代码</li><li>让代码更容易被他人理解</li><li>保证代码可靠性。</li></ul><p>设计模式在软件开发中的两个主要用途：</p><ul><li>开发人员的共同平台，提供了一个标准的术语系统，且具体到特定的情景。<ul><li>例如，单例设计模式意味着使用单个对象，这样所有熟悉单例设计模式的开发人员都能使用单个对象，并且可以通过这种方式告诉对方，程序使用的是单例模式。</li></ul></li><li>最佳的实践 <ul><li>设计模式已经经历了很长一段时间的发展，它们提供了软件开发过程中面临的一般问题的最佳解决方案。学习这些模式有助于经验不足的开发人员通过一种简单快捷的方式来学习软件设计。</li></ul></li></ul><h2 id="设计模式有哪些？"><a href="#设计模式有哪些？" class="headerlink" title="设计模式有哪些？"></a><strong>设计模式有哪些？</strong></h2><p>共有 23 种设计模式，可以分为三类：</p><ul><li><code>创建型模式（Creational Patterns）</code>    提供了一种在<strong>创建对象的同时隐藏创建逻辑</strong>的方式，而不是使用 new 运算符直接实例化对象。这使得程序在判断针对某个给定实例需要创建哪些对象时更加灵活。</li><li><code>结构型模式（Structural Patterns）</code>    用于在许多不同的对象之间形成大型对象结构,<strong>关注类和对象的组合</strong>。继承的概念被用来组合接口和定义组合对象获得新功能的方式。</li><li><code>行为型模式（Behavioral Patterns）</code>    关注对象之间的通信,用于管理对象之间的算法、关系和职责。</li></ul><h2 id="创建型模式"><a href="#创建型模式" class="headerlink" title="创建型模式"></a><strong>创建型模式</strong></h2><h3 id="单例模式（Singleton-Pattern）"><a href="#单例模式（Singleton-Pattern）" class="headerlink" title="单例模式（Singleton Pattern）"></a><strong>单例模式（Singleton Pattern）</strong></h3><p><a href="https://www.runoob.com/design-pattern/singleton-pattern.html">单例模式-菜鸟教程</a><br><strong>目的</strong>：保证一个类仅有一个实例，并提供一个访问它的全局访问点。<br><strong>何时使用</strong>：当您想控制实例数目，节省系统资源的时候。<br><strong>面临的问题</strong>：一个全局使用的类频繁地创建与销毁。<br><strong>解决方案</strong>判断系统是否已经有这个单例，如果有则返回，如果没有则创建。<br><strong>关键代码</strong>：构造函数是私有的。<br><strong>优点</strong>：</p><ol><li>在内存里只有一个实例，减少了内存的开销，尤其是频繁的创建和销毁实例（比如管理学院首页页面缓存）。</li><li>避免对资源的多重占用（比如写文件操作）。</li></ol><p><strong>缺点</strong>：没有接口，不能继承，与单一职责原则冲突，一个类应该只关心内部逻辑，而不关心外面怎么样来实例化。<br><strong>应用实例</strong>：<br>1、一个班级只有一个班主任。<br>2、Windows 是多进程多线程的，在操作一个文件的时候，就不可避免地出现多个进程或线程同时操作一个文件的现象，所以所有文件的处理必须通过唯一的实例来进行。<br>3、一些设备管理器常常设计为单例模式，比如一个电脑有两台打印机，在输出的时候就要处理不能两台打印机打印同一个文件。<br><strong>使用场景</strong>：<br>1、要求生产唯一序列号。<br>2、WEB 中的计数器，不用每次刷新都在数据库里加一次，用单例先缓存起来。<br>3、创建的一个对象需要消耗的资源过多，比如 I/O 与数据库的连接等。<br><strong>实现方式</strong>:<br>《设计模式》一书中给出了一种很不错的实现，定义一个单例类，使用类的私有静态指针变量指向类的唯一实例，并用一个公有的静态方法获取该实例。</p><p><strong>常见的单例模式分为两种</strong>：<br>1、<code>饿汉式</code>：即类产生的时候就创建好实例对象，这是一种空间换时间的方式<br>2、<code>懒汉式</code>：即在需要的时候，才创建对象，这是一种时间换空间的方式<br><a href="https://blog.csdn.net/sinat_33924041/article/details/83621256">【C++】单例模式/工厂模式</a></p><h3 id="工厂模式（Factory-Pattern）"><a href="#工厂模式（Factory-Pattern）" class="headerlink" title="工厂模式（Factory Pattern）"></a><strong>工厂模式（Factory Pattern）</strong></h3><p><a href="https://www.cnblogs.com/yssjun/p/11102162.html">设计模式之工厂模式（factory pattern）</a>讲的很形象<br>工厂顾名思义就是创建产品，根据产品是具体产品还是具体工厂可分为简单工厂模式和工厂方法模式。<br><a href="https://www.runoob.com/design-pattern/factory-pattern.html">工厂模式-菜鸟教程</a><br>提供了一种创建对象的最佳方式，创建对象时不会对客户端暴露创建逻辑，并且是通过使用一个共同的接口来指向新创建的对象。<br><strong>目的</strong>：定义一个创建对象的接口，让其子类自己决定实例化哪一个工厂类，工厂模式使其创建过程（类的实例化）延迟到子类进行。<br><strong>何时使用</strong>：我们明确地计划不同条件下创建不同实例时。<br><strong>面临的问题</strong>：</p><h3 id="抽象工厂模式（Abstract-Factory-Pattern）"><a href="#抽象工厂模式（Abstract-Factory-Pattern）" class="headerlink" title="抽象工厂模式（Abstract Factory Pattern）"></a><strong>抽象工厂模式（Abstract Factory Pattern）</strong></h3><p>根据工厂的抽象程度可分为工厂方法模式和抽象工厂模式。<br>是围绕一个超级工厂创建其他工厂。该超级工厂又称为其他工厂的工厂。<br>提供一个创建一系列相关或相互依赖对象的接口，而无需指定它们具体的类。</p><h3 id="建造者（生成器）模式（Builder-Pattern）"><a href="#建造者（生成器）模式（Builder-Pattern）" class="headerlink" title="建造者（生成器）模式（Builder Pattern）"></a><strong>建造者（生成器）模式（Builder Pattern）</strong></h3><p>使用多个简单的对象一步一步构建成一个复杂的对象。<br>将一个复杂对象的构建与它的表示分离，使得同样的构建过程可以创建不同的表示。</p><h3 id="原型模式（Prototype-Pattern）"><a href="#原型模式（Prototype-Pattern）" class="headerlink" title="原型模式（Prototype Pattern）"></a><strong>原型模式（Prototype Pattern）</strong></h3><p>用于创建重复的对象，同时又能保证性能。<br>这种模式是实现了一个原型接口，该接口用于创建当前对象的克隆。当直接创建对象的代价比较大时，则采用这种模式。<br>其实就是从一个对象再创建另外一个可定制的对象，而且不需知道任何创建的细节。用原型实例指定创建对象的种类，并且通过拷贝这个原型来创建新的对象。</p><h4 id="深拷贝与浅拷贝"><a href="#深拷贝与浅拷贝" class="headerlink" title="深拷贝与浅拷贝"></a><strong>深拷贝与浅拷贝</strong></h4><p><code>浅拷贝</code>：被复制对象的所有变量都含有与原来的对象相同的值，而所有的对其他对象的引用都仍然指向原来的对象。</p><p><code>深拷贝</code>：把要复制的对象所引用的对象都复制一遍。深拷贝把引用对象的变量指向复制过的新对象，而不是原有的被引用的对象。</p><h2 id="结构型模式"><a href="#结构型模式" class="headerlink" title="结构型模式"></a><strong>结构型模式</strong></h2><h3 id="适配器模式（Adapter-Pattern）"><a href="#适配器模式（Adapter-Pattern）" class="headerlink" title="适配器模式（Adapter Pattern）"></a><strong>适配器模式（Adapter Pattern）</strong></h3><p>作为两个不兼容的接口之间的桥梁。<br>将一个类的接口转换成客户希望的另外一个接口。Adapter 模式使得原本由于接口不兼容而不能一起工作的那些类可以一起工作。</p><h3 id="桥接模式（Bridge-Pattern）"><a href="#桥接模式（Bridge-Pattern）" class="headerlink" title="桥接模式（Bridge Pattern）"></a><strong>桥接模式（Bridge Pattern）</strong></h3><p>将抽象部分与它的实现部分分离，使它们都可以独立地变化。</p><h3 id="装饰者模式（Decorator-Pattern）"><a href="#装饰者模式（Decorator-Pattern）" class="headerlink" title="装饰者模式（Decorator Pattern）"></a><strong>装饰者模式（Decorator Pattern）</strong></h3><p>允许向一个现有的对象添加新的功能，同时又不改变其结构。作为现有的类的一个包装。<br>动态地给一个对象添加一些额外的职责。就扩展功能而言，它比生成子类方式更为灵活。</p><h3 id="组合模式（Composite-Pattern）"><a href="#组合模式（Composite-Pattern）" class="headerlink" title="组合模式（Composite Pattern）"></a><strong>组合模式（Composite Pattern）</strong></h3><p>将对象组合成树形结构以表示“部分-整体”的层次结构。它使得客户对单个对象和复合对象的使用具有一致性。</p><h3 id="外观模式（Facade-Pattern）"><a href="#外观模式（Facade-Pattern）" class="headerlink" title="外观模式（Facade Pattern）"></a><strong>外观模式（Facade Pattern）</strong></h3><p>隐藏系统的复杂性，并向客户端提供了一个客户端可以访问系统的接口。<br>为子系统中的一组接口提供一个一致的界面，Facade 模式定义了一个高层接口，这个接口使得这一子系统更加容易使用。</p><h3 id="享元模式（Flyweight-Pattern）"><a href="#享元模式（Flyweight-Pattern）" class="headerlink" title="享元模式（Flyweight Pattern）"></a><strong>享元模式（Flyweight Pattern）</strong></h3><p>用于减少创建对象的数量，以减少内存占用和提高性能。<br>尝试重用现有的同类对象，如果未找到匹配的对象，则创建新对象。<br>运用共享技术有效地支持大量细粒度的对象。</p><h3 id="代理模式（Proxy-Pattern）"><a href="#代理模式（Proxy-Pattern）" class="headerlink" title="代理模式（Proxy Pattern）"></a><strong>代理模式（Proxy Pattern）</strong></h3><p>为其他对象提供一个代理以控制对这个对象的访问。</p><h2 id="行为型模式"><a href="#行为型模式" class="headerlink" title="行为型模式"></a><strong>行为型模式</strong></h2><h3 id="模版方法模式（Template-Method-Pattern）"><a href="#模版方法模式（Template-Method-Pattern）" class="headerlink" title="模版方法模式（Template Method Pattern）"></a><strong>模版方法模式（Template Method Pattern）</strong></h3><p><a href="https://github.com/CyC2018/CS-Notes/blob/master/notes/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%20-%20%E6%A8%A1%E6%9D%BF%E6%96%B9%E6%B3%95.md">设计模式 - 模板方法.</a><br>定义一个操作中的算法的骨架，而将一些步骤延迟到子类中。Template Method 使得子类可以不改变一个算法的结构即可重定义该算法的某些特定步骤。<br>比如冲咖啡和冲茶都有类似的流程，但是某些步骤会有点不一样，要求复用那些相同步骤的代码。</p><h3 id="命令模式（Command-Pattern）"><a href="#命令模式（Command-Pattern）" class="headerlink" title="命令模式（Command Pattern）"></a><strong>命令模式（Command Pattern）</strong></h3><p><a href="https://github.com/CyC2018/CS-Notes/blob/master/notes/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%20-%20%E5%91%BD%E4%BB%A4.md">设计模式 - 命令模式</a><br>将一个请求封装为一个对象，从而使你可用不同的请求对客户进行参数化；对请求排队或记录请求日志，以及支持可取消的操作。</p><h3 id="迭代器模式（Iterator-Pattern）"><a href="#迭代器模式（Iterator-Pattern）" class="headerlink" title="迭代器模式（Iterator Pattern）"></a><strong>迭代器模式（Iterator Pattern）</strong></h3><p>提供一种方法顺序访问一个聚合对象中各个元素，而又不需暴露该对象的内部表示。</p><h3 id="观察者模式（Observer-Pattern）"><a href="#观察者模式（Observer-Pattern）" class="headerlink" title="观察者模式（Observer Pattern）"></a><strong>观察者模式（Observer Pattern）</strong></h3><p>当对象间存在一对多关系时，则使用观察者模式（Observer Pattern）。比如，当一个对象被修改时，则会自动通知它的依赖对象。</p><h3 id="中介者模式（Mediator-Pattern）"><a href="#中介者模式（Mediator-Pattern）" class="headerlink" title="中介者模式（Mediator Pattern）"></a><strong>中介者模式（Mediator Pattern）</strong></h3><p>用来降低多个对象和类之间的通信复杂性。这种模式提供了一个中介类，该类通常处理不同类之间的通信，并支持松耦合，使代码易于维护。</p><h3 id="备忘录模式-（Memento-Pattern）"><a href="#备忘录模式-（Memento-Pattern）" class="headerlink" title="备忘录模式 （Memento Pattern）"></a><strong>备忘录模式 （Memento Pattern）</strong></h3><p>保存一个对象的某个状态，以便在适当的时候恢复对象。<br>在不破坏封装性的前提下，捕获一个对象的内部状态，并在该对象之外保存这个状态。这样以后就可将该对象恢复到保存的状态。</p><h3 id="解释器模式（Interpreter-Pattern）"><a href="#解释器模式（Interpreter-Pattern）" class="headerlink" title="解释器模式（Interpreter Pattern）"></a><strong>解释器模式（Interpreter Pattern）</strong></h3><p>为语言创建解释器，通常由语言的语法和语法分析来定义。<br>给定一个语言，定义它的文法的一种表示，并定义一个解释器，该解释器使用该表示来解释语言中的句子。</p><h3 id="状态模式（State-Pattern）"><a href="#状态模式（State-Pattern）" class="headerlink" title="状态模式（State Pattern）"></a><strong>状态模式（State Pattern）</strong></h3><p>类的行为是基于它的状态改变的。<br>允许一个对象在其内部状态改变时改变它的行为。对象看起来似乎修改了它所属的类。</p><h3 id="策略模式（Strategy-Pattern）"><a href="#策略模式（Strategy-Pattern）" class="headerlink" title="策略模式（Strategy Pattern）"></a><strong>策略模式（Strategy Pattern）</strong></h3><p>定义一系列的算法，把它们一个个封装起来，并且使它们可相互替换。本模式使得算法的变化可独立于使用它的客户端。</p><h3 id="职责链模式-（Chain-of-Responsibility-Pattern）"><a href="#职责链模式-（Chain-of-Responsibility-Pattern）" class="headerlink" title="职责链模式 （Chain of Responsibility Pattern）"></a><strong>职责链模式 （Chain of Responsibility Pattern）</strong></h3><p>为请求创建了一个接收者对象的链，通常每个接收者都包含对另一个接收者的引用。如果一个对象不能处理该请求，那么它会把相同的请求传给下一个接收者，依此类推。<br>为解除请求的发送者和接收者之间耦合，而使多个对象都有机会处理这个请求。将这些对象连成一条链，并沿着这条链传递该请求，直到有一个对象处理它。</p><h3 id="访问者模式-（Visitor-Pattern）"><a href="#访问者模式-（Visitor-Pattern）" class="headerlink" title="访问者模式 （Visitor Pattern）"></a><strong>访问者模式 （Visitor Pattern）</strong></h3><p>使用了一个访问者类，它改变了元素类的执行算法。通过这种方式，元素的执行算法可以随着访问者改变而改变。<br>表示一个作用于某对象结构中的各元素的操作。它使你可以在不改变各元素的类的前提下定义作用于这些元素的新操作。</p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p><a href="https://www.cnblogs.com/yssjun/p/11102162.html">设计模式之工厂模式（factory pattern）</a><br><a href="https://www.cnblogs.com/yfzhou/p/9976001.html">《大话设计模式》读书笔记</a><br><a href="https://www.runoob.com/design-pattern/design-pattern-intro.html">设计模式-菜鸟教程</a><br><a href="https://blog.csdn.net/liang19890820/article/details/66974516">C++ 设计模式-CSDN</a><br><a href="https://blog.csdn.net/sinat_33924041/article/details/83621256">【C++】单例模式/工厂模式</a><br><a href="https://blog.csdn.net/huasir_hit/article/details/75269513">C++中的单例模式和工厂模式</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;设计模式是什么？&quot;&gt;&lt;a href=&quot;#设计模式是什么？&quot; class=&quot;headerlink&quot; title=&quot;设计模式是什么？&quot;&gt;&lt;/a&gt;&lt;strong&gt;设计模式是什么？&lt;/strong&gt;&lt;/h2&gt;
    
    </summary>
    
    
      <category term="软件工程" scheme="https://stemha.github.io/categories/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/"/>
    
    
      <category term="面向对象" scheme="https://stemha.github.io/tags/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/"/>
    
      <category term="设计模式" scheme="https://stemha.github.io/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>C++特性及优缺点</title>
    <link href="https://stemha.github.io/2020/05/08/C++%E7%89%B9%E6%80%A7%E5%8F%8A%E4%BC%98%E7%BC%BA%E7%82%B9/"/>
    <id>https://stemha.github.io/2020/05/08/C++%E7%89%B9%E6%80%A7%E5%8F%8A%E4%BC%98%E7%BC%BA%E7%82%B9/</id>
    <published>2020-05-08T13:03:43.000Z</published>
    <updated>2020-08-10T04:19:21.220Z</updated>
    
    <content type="html"><![CDATA[<h2 id="C-语言优缺点"><a href="#C-语言优缺点" class="headerlink" title="C++语言优缺点"></a><strong>C++语言优缺点</strong></h2><a id="more"></a><p><strong>优点</strong></p><ul><li>兼容性好，C++在保持了C语言简洁高效的特点的同时，还对C的类型系统进行改革性扩充，相比C语言，C++更安全，其编译系统也能检查出更多错误类型。</li><li>面向对象编程能力，可复用性好，可以让团队衍化出自己的的类库。</li><li>性能优势，程序效率高。</li></ul><p><strong>缺点</strong></p><ul><li>C++ 是 C 语言的一个超集，既有指针又有对象使它成为最复杂的语言，学习难度大。过分的精细和复杂了。C++的复杂度，超过了C和OO（面向对象）的复杂度之和</li><li>没有垃圾回收机制。</li></ul><p>C++本质上说是提前编译的，Fortran也是。C#和Java大多时候是编译成字节码，运行的时候再 即使编译。Python和Ruby通常是解释型。这就产生了一个性能的分级：C++和Fortran比Java和C#快，Java和C#又比Python 和Ruby快。<br><a href="http://www.ruanyifeng.com/blog/2010/03/programming_language_evaluations_revised.html">几种计算机语言的评价（修订版）</a><br><a href="https://www.kawabangga.com/posts/582">为什么一些语言会比别的快？</a></p><h2 id="C-特性"><a href="#C-特性" class="headerlink" title="C++特性"></a><strong>C++特性</strong></h2><p>C++面向对象的三个基本特征：封装、继承、多态。它们的目的都是为了——<strong>代码重用</strong>。而多态则是为了实现另一个目的——<strong>接口重用</strong><br>在 C++ 中，用类进行封装（数据抽象），用类派生从一个类继承另一个：派生类继承基类的成员。<br>多态（动态绑定）使编译器能够在运行时决定是使用基类中定义的函数还是派生类中定义的函数<br>继承和多态（动态绑定）在两个方面简化了我们的程序：能够容易地定义与其他类相似但又不相同的新类，能够更容易地编写忽略这些相似类型之间区别的程序。</p><h3 id="封装（encapsulation）"><a href="#封装（encapsulation）" class="headerlink" title="封装（encapsulation）"></a><strong>封装（encapsulation）</strong></h3><p><code>封装</code>是一项低层次的元素组合起来的形成新的、高层次实体的技术。</p><ul><li><code>函数</code>是封装的一种形式：函数所执行的细节行为被封装在函数本身这个更大的实体中。被封装的元素隐藏了它们的实现细节——可以调用一个函数但不能访问它所执行的语句。</li><li><code>类</code>也是一个封装的实体：它代表若干成员的聚焦，大多数（良好设计的）类类型隐藏了实现该类型的成员。</li></ul><p>目的：</p><ul><li>将抽象得到的数据和行为相结合，形成一个有机的整体（结合性）</li><li>将对象的使用者和设计者分开，以提高软件的可维护性和可修改性</li><li>实现代码重用</li></ul><h3 id="继承（inheritance）"><a href="#继承（inheritance）" class="headerlink" title="继承（inheritance）"></a><strong>继承（inheritance）</strong></h3><p>继承：继承性是子类自动共享父类数据结构和方法的机制，这是类之间的一种关系。在定义和实现一个类的时候，可以在一个已经存在的类的基础之上来进行，把这个已经存在的类所定义的内容作为自己的内容，并加入若干新的内容。</p><ul><li>通过继承关联起来的类型都共享共同的接口。当一个类继承另一个类时，这两个类通常可以使用相同的操作。更确切地说，如果两种类型存在继承关系，则可以说一个类“继承”了其父类的行为——接口。</li><li>C++ 中所提及的父类称为<code>基类（base class）</code>，而继承而来的类则称为<code>派生类（derived class）</code>。</li></ul><h3 id="多态（polymorphism）"><a href="#多态（polymorphism）" class="headerlink" title="多态（polymorphism）"></a><strong>多态（polymorphism）</strong></h3><p>多态：多态的基础是继承。多态下，子类重写父类的方法，实际使用过程中，用父类引用变量指向子类对象，此时父类引用调用的是子类重写后的方法，由于是父类引用变量，所有无法调用子类特有的方法。如果想调用子类特有的方法，必须强制类型转换到子类。<br>多态性派生于一个希腊单词，意思是“许多形态”。之所以称<u>通过继承而相关联的类型为</u><code>多态类型</code>，是因为在许多情况下可以互换地使用派生类型或基类型的“许多形态”。在 C++ 中，多态性仅用于通过继承而相关联的类型的引用或指针。<br>多态性：指的是<strong>基于引用或指针的动态类型获得类型明确的行为的能力</strong>。</p><ul><li>在C++中的主要表现是动态多态（动态绑定）</li><li>动态多态（动态绑定）：我们能够编写程序使用继承层次中任意类型的对象，无须关心对象的具体类型。使用这些类的程序无须区分函数是在基类还是在派生类中定义的。</li><li>在 C++ 中，基类必须指出希望派生类重写哪些函数，定义为 virtual 的函数是基类期待派生类重新定义的，基类希望派生类继承的函数不能定义为虚函数。</li><li>引用和指针的静态类型与动态类型可以不同，这是 C++ 用以支持多态性的基石。</li></ul><h4 id="静态多态（编译期-早绑定）"><a href="#静态多态（编译期-早绑定）" class="headerlink" title="静态多态（编译期/早绑定）"></a><strong>静态多态（编译期/早绑定）</strong></h4><p><code>template（模板）</code>：静态多态（编译时完成，效率高，适配性高，松耦合性），隐形接口<br><code>overload（重载）</code>：静态多态</p><ol><li>同名函数，不同参数/函数返回值</li><li>相同范围，同一个类中</li></ol><p><code>overwrite（重写）</code>：静态多态，子类屏蔽父类的同名基函数</p><ol><li>同名同参，无virtual</li><li>同名不同参</li></ol><h4 id="动态多态（运行期-晚绑定）"><a href="#动态多态（运行期-晚绑定）" class="headerlink" title="动态多态（运行期/晚绑定）"></a><strong>动态多态（运行期/晚绑定）</strong></h4><p><code>override（覆盖重写）</code>：动态多态（运行时完成，接口重用，编译器无法优化）</p><ol><li>不同类中</li><li>同名，同参</li><li>基类函数有virtual</li></ol><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a><strong>参考资料</strong></h2><p>[1]C++ primer 第四版<br>[2]<a href="http://www.ruanyifeng.com/blog/2010/03/programming_language_evaluations_revised.html">几种计算机语言的评价（修订版）</a><br>[3]<a href="https://www.kawabangga.com/posts/582">为什么一些语言会比别的快？</a><br>[4]<a href="https://blog.csdn.net/Chuwei_xu/article/details/89321191">C++ 特性及类（面试复习整理）</a><br>[5]<a href="https://www.runoob.com/cplusplus/cpp-polymorphism.html">C++ 多态-菜鸟教程</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;C-语言优缺点&quot;&gt;&lt;a href=&quot;#C-语言优缺点&quot; class=&quot;headerlink&quot; title=&quot;C++语言优缺点&quot;&gt;&lt;/a&gt;&lt;strong&gt;C++语言优缺点&lt;/strong&gt;&lt;/h2&gt;
    
    </summary>
    
    
      <category term="C++" scheme="https://stemha.github.io/categories/C/"/>
    
    
      <category term="C++" scheme="https://stemha.github.io/tags/C/"/>
    
      <category term="封装" scheme="https://stemha.github.io/tags/%E5%B0%81%E8%A3%85/"/>
    
      <category term="继承" scheme="https://stemha.github.io/tags/%E7%BB%A7%E6%89%BF/"/>
    
      <category term="多态" scheme="https://stemha.github.io/tags/%E5%A4%9A%E6%80%81/"/>
    
      <category term="静态多态" scheme="https://stemha.github.io/tags/%E9%9D%99%E6%80%81%E5%A4%9A%E6%80%81/"/>
    
      <category term="动态多态" scheme="https://stemha.github.io/tags/%E5%8A%A8%E6%80%81%E5%A4%9A%E6%80%81/"/>
    
  </entry>
  
  <entry>
    <title>C++内存分配与内存划分</title>
    <link href="https://stemha.github.io/2020/05/08/C++%E5%86%85%E5%AD%98%E5%88%86%E9%85%8D%E4%B8%8E%E5%86%85%E5%AD%98%E5%88%92%E5%88%86/"/>
    <id>https://stemha.github.io/2020/05/08/C++%E5%86%85%E5%AD%98%E5%88%86%E9%85%8D%E4%B8%8E%E5%86%85%E5%AD%98%E5%88%92%E5%88%86/</id>
    <published>2020-05-07T17:46:47.000Z</published>
    <updated>2020-08-10T04:19:21.217Z</updated>
    
    <content type="html"><![CDATA[<h2 id="C-C-内存使用划分"><a href="#C-C-内存使用划分" class="headerlink" title="C/C++内存使用划分"></a><strong>C/C++内存使用划分</strong></h2><p>C/C++编译过的程序使用的内存划分：</p><a id="more"></a><h3 id="栈区"><a href="#栈区" class="headerlink" title="栈区"></a><strong>栈区</strong></h3><ul><li>是连续的内存区域。</li><li>由编译器在需要的时候分配，在不需要的时候自动清除的变量的存储区。</li><li>栈区的变量通常是局部变量、函数参数等。 </li><li>只要栈的剩余空间大于所申请空间，系统将为程序提供内存，否则将报异常提示栈溢出。</li><li>每次程序运行都会分配一个栈，<strong>main函数就在栈底</strong>，然后通过不同函数的调用顺序，依次进栈出栈。<br><a href="https://zhidao.baidu.com/question/397221561.html">c语言main函数中的变量和其他函数中的变量使用的是一个堆栈吗</a></li></ul><h3 id="堆区（动态内存分配）"><a href="#堆区（动态内存分配）" class="headerlink" title="堆区（动态内存分配）"></a><strong>堆区（动态内存分配）</strong></h3><ul><li>是不连续的内存区域。</li></ul><p><code>自由存储区或堆</code>：每一个程序在执行时都占用一块可用的内存空间，用于存放动态分配的对象，此内存空间称为程序的自由存储区或堆。<br>C 语言程序使用一对标准库函数malloc 和 free 在自由存储区中分配存储空间，而 C++ 语言则使用 new 和delete 表达式实现相同的功能。可以手动释放或者程序结束自动释放存储空间。<br><strong>优点</strong>：动态内存的生存期人为决定，使用灵活。<br><strong>缺点</strong>：是容易分配/释放不当容易造成内存泄漏，频繁分配/释放会产生大量内存碎片。<br>若程序员不释放，程序结束时可能由OS（操作系统）回收。<br>注意它与数据结构中的堆是两回事，分配方式类似于链表。</p><h3 id="全局-静态存储区"><a href="#全局-静态存储区" class="headerlink" title="全局/静态存储区"></a><strong>全局/静态存储区</strong></h3><p>全局变量和静态变量的存储是放在一起。C语言中，全局变量又分为初始化的和未初始化的。C++里面没有这个区分了，他们共同占用同一块内存区。程序结束后由系统释放。</p><h3 id="常量存储区"><a href="#常量存储区" class="headerlink" title="常量存储区"></a><strong>常量存储区</strong></h3><p>这是一个比较特殊的存储区，里面存放的是常量，不允许修改。程序结束后由系统释放。</p><h3 id="程序代码区"><a href="#程序代码区" class="headerlink" title="程序代码区"></a><strong>程序代码区</strong></h3><p>存放函数的二进制代码。</p><h2 id="堆存储-栈存储"><a href="#堆存储-栈存储" class="headerlink" title="堆存储/栈存储"></a><strong>堆存储/栈存储</strong></h2><h3 id="对象是存放在堆中还是栈中"><a href="#对象是存放在堆中还是栈中" class="headerlink" title="对象是存放在堆中还是栈中"></a><strong>对象是存放在堆中还是栈中</strong></h3><p>要看怎么去构造这个对象：</p><ul><li>如果用new来生成的对象,是放在堆中的。</li><li>直接定义的局部变量内都是放在栈中的，全局和静态的对象（包括类的静态数据成员）是放在数据段的静态存储区</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Class Test；</span><br><span class="line">Test p;            <span class="comment">//栈上分配内存</span></span><br><span class="line">Test* tTest；      <span class="comment">//指针在栈中</span></span><br><span class="line">tTest = <span class="keyword">new</span> Test;，<span class="comment">//new的在堆中</span></span><br></pre></td></tr></table></figure><h3 id="堆存储"><a href="#堆存储" class="headerlink" title="堆存储"></a><strong>堆存储</strong></h3><ul><li>因为没有专门的系统支持，效率很低；</li><li>可能引发用户态和核心态的切换，内存的申请代价变得更加昂贵。</li><li>操作系统有一个记录空闲内存地址的链表，当系统收到程序的申请时，会遍历该链表，寻找第一个空间大于所申请空间的堆结点，然后将该结点从空闲结点链表中删除，并将该结点的空间分配给程序</li><li>大多数系统，会在这块内存空间中的首地址处记录本次分配的大小，这样，代码中的delete语句才能正确的释放本内存空间。</li><li>因为找到的堆结点的大小不一定正好等于申请的大小，系统会自动的将多余的那部分重新放入空闲链表中。</li></ul><h3 id="栈存储"><a href="#栈存储" class="headerlink" title="栈存储"></a><strong>栈存储</strong></h3><ul><li>用于存储占用空间小，生命周期短的数据（局部变量/参数变量等）</li><li>若栈的剩余空间大于所申请空间，系统将为程序提供内存，否则报异常提示栈溢出</li></ul><p>出现<code>栈内存溢出</code>的常见原因有2个：</p><ol><li>函数调用层次过深,每调用一次,函数的参数、局部变量等信息就压一次栈。</li><li>局部变量体积太大。</li></ol><h3 id="地址分配"><a href="#地址分配" class="headerlink" title="地址分配"></a><strong>地址分配</strong></h3><ul><li>堆，往下增长，向内存地址增加的方向增长</li><li>栈，往上增长，向内存地址减小的方向增长（对于小端存储，高位字节在高端地址、低位字节在低位地址，因此在压栈时先压高字节后压低字节）</li><li>可能会发生堆栈冲突(从堆中分配内存失败或者爆栈)</li><li>大端存储：数据高位在内存低位，低位在内存高位（如Freescale的PowerPC处理器）</li><li>小端存储：数据高位在内存高位，低位在内存低位（Intel的芯片一般是小端存储）</li></ul><h3 id="分配效率"><a href="#分配效率" class="headerlink" title="分配效率"></a><strong>分配效率</strong></h3><p>栈是机器系统提供的数据结构，计算机会在底层对栈提供支持：分配专门的寄存器存放栈的地址，压栈出栈都有专门的指令执行，这就决定了栈的效率比较高。</p><p>堆则是C/C++函数库提供的，它的机制是很复杂的，例如为了分配一块内存，库函数会按照一定的算法在堆内存中搜索可用的足够大小的空间，如果没有足够大小的空间（可能是由于内存碎片太多），就有可能调用系统功能去增加程序数据段的内存空间，这样就有机会分到足够大小的内存，然后进行返回。显然，堆的效率比栈要低得多。</p><p><a href="https://www.cnblogs.com/yunlambert/p/10053800.html">堆、栈与大小端存储</a></p><h2 id="数据存放"><a href="#数据存放" class="headerlink" title="数据存放"></a><strong>数据存放</strong></h2><p>基本数据类型：</p><ul><li>直接存储在<strong>栈(stack)</strong>中的数据。（字符串、布尔值、未定义、数字、null）</li><li>null只是一个空指针对象，没有数据。</li></ul><p>引用类型：</p><ul><li>将该对象引用地址存储在<strong>栈(stack)</strong>中，然后对象里面的数据存放在<strong>堆</strong>中。（数组、对象、函数）</li><li>存储的是该对象在栈中的引用，真实的数据存放在堆内存里</li><li>引用数据类型在栈中存储了指针，该指针指向堆中该实体的起始地址。当解释器寻找引用值时，会首先检索其在栈中的地址，取得地址后从堆中获得实体。</li></ul><h2 id="深拷贝与浅拷贝"><a href="#深拷贝与浅拷贝" class="headerlink" title="深拷贝与浅拷贝"></a><strong>深拷贝与浅拷贝</strong></h2><h3 id="深拷贝"><a href="#深拷贝" class="headerlink" title="深拷贝"></a><strong>深拷贝</strong></h3><p><strong>既复制对象空间又复制资源</strong><br>在某些状况下，类内成员变量需要动态开辟堆内存，如果实行位拷贝，也就是把对象里的值完全复制给另一个对象，如A=B。这时，如果B中有一个成员变量指针已经申请了内存，那A中的那个成员变量也指向同一块内存。如果此时B中执行析构函数释放掉指向那一块堆的指针，这时A内的指针就将成为悬挂指针。因此，这种情况下不能简单地复制指针，而应该复制“资源”，也就是再重新开辟一块同样大小的内存空间。<br>当拷贝对象中有对其他资源（如堆、文件、系统等）的引用时（引用可以是指针或引用）时，对象的另开辟一块新的资源，而不再对拷贝对象中有对其他资源的引用的指针或引用进行单纯的赋值，然后同步复拷贝开辟空间的值。</p><h3 id="浅拷贝"><a href="#浅拷贝" class="headerlink" title="浅拷贝"></a><strong>浅拷贝</strong></h3><p><strong>只复制对象空间而不复制资源</strong> </p><ul><li>如果在类中没有显式地声明一个拷贝构造函数，那么，编译器将会根据需要生成一个默认的拷贝构造函数，完成对象之间的位拷贝。<code>default memberwise copy</code>即称为<code>浅拷贝</code>。</li><li>即默认拷贝构造函数只是对对象进行浅拷贝复制(逐个成员依次拷贝)</li><li>浅拷贝是按位拷贝对象，它会创建一个新对象，这个对象有着原始对象属性值的一份精确拷贝。</li><li>如果属性是基本类型，拷贝的就是基本类型的值；</li><li>如果属性是内存地址（引用类型），拷贝的就是内存地址 ，因此如果其中一个对象改变了这个地址，就会影响到另一个对象。</li></ul><h2 id="C-C-内存分配的三种方式"><a href="#C-C-内存分配的三种方式" class="headerlink" title="C/C++内存分配的三种方式"></a><strong>C/C++内存分配的三种方式</strong></h2><ol><li>静态存储区分配<br>内存分配在程序编译之前完成，且在程序的整个运行期间都存在，例如全局变量、静态变量等。</li><li>栈上分配<br>在函数执行时，函数内的局部变量的存储单元在栈上创建，由操作系统自动分配，函数调用结束时内存也随之析构<br>栈内存分配运算内置于处理器的指令集中，效率高，但栈容量小。</li><li>堆上分配<br>堆分配（又称动态内存分配）。程序在运行时用malloc或者new申请内存，程序员自己用free或者delete释放,在整个程序运行周期内都存在。</li></ol><p><strong>tips:</strong></p><ul><li>申请内存后立即判断指针是否为NULL确定内存是否分配成功，如果为NULL则立即用return终止此函数，或者用exit（1）终止整个程序的运行，为new和malloc设置异常处理函数；</li><li><strong>为申请的内存赋初值</strong>，分配的是一段连续的内存空间的话，要防止指针下标越界；</li><li>sizeof是操作符，不能用sizeof得到内存空间的大小，<strong>只能在申请时候记住申请的空间大小</strong>；</li><li>在内存使用结束后必须用free或delete释放内存，注意在内存使用中如果存在指针加1或减1 的操作应特别注意，释放的内存要和申请的内存一致，放置内存泄漏，<strong>释放内存后，应该立即将指针置为NULL，不要存在野指针</strong>。</li></ul><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p>[1]<a href="https://segmentfault.com/a/1190000018874254">浅拷贝与深拷贝的区别</a><br>[2]<a href="https://blog.csdn.net/nyist_zxp/article/details/80257760">C++中数据存储的位置</a><br>[3]<a href="https://blog.csdn.net/lq18811566072/article/details/80331793">C++经典面试之 内存分配的三种方式</a><br>[4]<a href="https://www.cnblogs.com/yunlambert/p/10053800.html">堆、栈与大小端存储</a><br>[5]<a href="https://zhidao.baidu.com/question/397221561.html">c语言main函数中的变量和其他函数中的变量使用的是一个堆栈吗</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;C-C-内存使用划分&quot;&gt;&lt;a href=&quot;#C-C-内存使用划分&quot; class=&quot;headerlink&quot; title=&quot;C/C++内存使用划分&quot;&gt;&lt;/a&gt;&lt;strong&gt;C/C++内存使用划分&lt;/strong&gt;&lt;/h2&gt;&lt;p&gt;C/C++编译过的程序使用的内存划分：&lt;/p&gt;
    
    </summary>
    
    
      <category term="C++" scheme="https://stemha.github.io/categories/C/"/>
    
    
      <category term="C++" scheme="https://stemha.github.io/tags/C/"/>
    
      <category term="内存分配" scheme="https://stemha.github.io/tags/%E5%86%85%E5%AD%98%E5%88%86%E9%85%8D/"/>
    
      <category term="内存分区" scheme="https://stemha.github.io/tags/%E5%86%85%E5%AD%98%E5%88%86%E5%8C%BA/"/>
    
      <category term="深拷贝" scheme="https://stemha.github.io/tags/%E6%B7%B1%E6%8B%B7%E8%B4%9D/"/>
    
      <category term="浅拷贝" scheme="https://stemha.github.io/tags/%E6%B5%85%E6%8B%B7%E8%B4%9D/"/>
    
  </entry>
  
  <entry>
    <title>文件系统（1）</title>
    <link href="https://stemha.github.io/2020/05/01/%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F%EF%BC%881%EF%BC%89/"/>
    <id>https://stemha.github.io/2020/05/01/%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F%EF%BC%881%EF%BC%89/</id>
    <published>2020-05-01T15:00:41.000Z</published>
    <updated>2020-08-10T04:19:21.695Z</updated>
    
    <content type="html"><![CDATA[<h2 id="基础概念"><a href="#基础概念" class="headerlink" title="基础概念"></a><strong>基础概念</strong></h2><p><code>文件系统</code>：操作系统中处理文件的部分，有关文件的构造，命名，存取，使用，实现和管理都是操作系统文件系统设计的主要内容</p><a id="more"></a><h2 id="文件"><a href="#文件" class="headerlink" title="文件"></a><strong>文件</strong></h2><h3 id="文件结构"><a href="#文件结构" class="headerlink" title="文件结构"></a><strong>文件结构</strong></h3><p>文件可以有多种构造方式。</p><ul><li>字节序列（Windows，UNIX都采用这种文件模型）</li><li>记录序列（以前大型计算机系统中的常见模式，现在没多少了）</li><li>树（处理商业数据的大型计算机中获得广泛使用）<ul><li>文件在这种结构中由一棵记录树构成，每个记录并不具有同样长度，记录的固定位置有一个键。树按键排序，从而对特定的键进行快速查找</li></ul></li></ul><h3 id="文件类型"><a href="#文件类型" class="headerlink" title="文件类型"></a><strong>文件类型</strong></h3><p>Linux中分为    </p><ol><li><code>普通文件（regular）</code>：存在于外部存储器中，用于存储普通文件。</li><li><code>目录文件（directory）</code>：用于存放目录项，是文件系统管理的重要文件类型。</li><li><code>管道文件（pipe）</code>：一种用于进程间通信的特殊文件，也称为命名管道FIFO。</li><li><code>套接字文件（socket）</code>：一种用于网络间通信的特殊文件。</li><li><code>链接文件（link）</code>；用于间接访问另外一个目标文件，相当于widows快捷方式。</li><li><code>字符设备文件（character）</code>:字符设备在应用层的访问结构。</li><li><code>块设备文件（block）</code>：块设备在应用层的访问接口。</li></ol><h3 id="文件存取"><a href="#文件存取" class="headerlink" title="文件存取"></a><strong>文件存取</strong></h3><ul><li>顺序存取文件（sequential access）：进程可以从头到尾顺序读取文件的全部字节或者记录，但不能跳过某一些内容，也不能不按顺序读取。可以返回到起点的。</li><li>随机存取文件（random access）：以任何次序读取其中字节或记录的文件。对很多应用程序来说是必不可少的，比如数据库系统</li></ul><h3 id="文件属性"><a href="#文件属性" class="headerlink" title="文件属性"></a><strong>文件属性</strong></h3><p>操作系统常用的文件属性</p><h4 id="文件保护"><a href="#文件保护" class="headerlink" title="文件保护"></a><strong>文件保护</strong></h4><table><thead><tr><th align="left">属性</th><th align="left">含义</th><th align="left">备注</th></tr></thead><tbody><tr><td align="left">保护</td><td align="left">谁可以存取文件，以什么方式</td><td align="left"></td></tr><tr><td align="left">口令</td><td align="left">存取文件需要的口令</td><td align="left">有一些系统中，用户必须给出口令才能存取文件</td></tr><tr><td align="left">创建者</td><td align="left">创建文件者ID</td><td align="left"></td></tr><tr><td align="left">所有者</td><td align="left">当前所有者</td><td align="left"></td></tr></tbody></table><h4 id="标志"><a href="#标志" class="headerlink" title="标志"></a><strong>标志</strong></h4><table><thead><tr><th align="left">属性</th><th align="left">含义</th><th align="left">备注</th></tr></thead><tbody><tr><td align="left">只读标志</td><td align="left"></td><td align="left"></td></tr><tr><td align="left">隐藏标志</td><td align="left"></td><td align="left"></td></tr><tr><td align="left">系统标志</td><td align="left">0表普通文件，1表示系统文件</td><td align="left"></td></tr><tr><td align="left">存档标志</td><td align="left">0表示已经备份，1表示需要备份</td><td align="left"></td></tr><tr><td align="left">ASCII/二进制标志</td><td align="left">0表示ASCII文件，1表示二进制文件</td><td align="left"></td></tr><tr><td align="left">随机存取标志</td><td align="left">0表示只允许顺序存取，1表示随机存取</td><td align="left"></td></tr><tr><td align="left">临时标志</td><td align="left">0表示正常，1表示进程退出时删除文件</td><td align="left"></td></tr><tr><td align="left">加锁标志</td><td align="left">0表示未加锁，非零表示加锁</td><td align="left"></td></tr></tbody></table><h4 id="查找读写相关"><a href="#查找读写相关" class="headerlink" title="查找读写相关"></a><strong>查找读写相关</strong></h4><table><thead><tr><th align="left">属性</th><th align="left">含义</th><th align="left">备注</th></tr></thead><tbody><tr><td align="left">记录长度</td><td align="left">一个记录中的字节数</td><td align="left"></td></tr><tr><td align="left">键的位置</td><td align="left">每个记录中键的偏移量</td><td align="left"></td></tr><tr><td align="left">键的长度</td><td align="left">键字段的字节数</td><td align="left"></td></tr><tr><td align="left">当前大小</td><td align="left">文件字节数</td><td align="left"></td></tr><tr><td align="left">最大长度</td><td align="left">文件可能增长到的字节数</td><td align="left"></td></tr></tbody></table><h4 id="时间"><a href="#时间" class="headerlink" title="时间"></a><strong>时间</strong></h4><table><thead><tr><th align="left">属性</th><th align="left">含义</th><th align="left">备注</th></tr></thead><tbody><tr><td align="left">创建时间</td><td align="left"></td><td align="left"></td></tr><tr><td align="left">最后一次存取时间</td><td align="left"></td><td align="left"></td></tr><tr><td align="left">最后一次修改时间</td><td align="left"></td><td align="left"></td></tr></tbody></table><h3 id="文件操作"><a href="#文件操作" class="headerlink" title="文件操作"></a><strong>文件操作</strong></h3><p>最常用的一些系统调用（不限制系统的总结）</p><ol><li>create</li><li>delete</li><li>open</li><li>close</li><li>read</li><li>write</li><li>append：write的限制形式，智能在文件末尾读取数据</li><li>seek：对于随机存取文件，通常需要指定从何处读取数据，通常使用seek系统调用把当前位置指针指向文件中的特定位置。seek调用结束后，就可以从该位置开始读了。</li><li>get attributes</li><li>set attributes</li><li>rename</li></ol><p>Linux文件IO函数，通常包括 open,read,write,lseek,close这五个函数。</p><h2 id="目录"><a href="#目录" class="headerlink" title="目录"></a><strong>目录</strong></h2><h3 id="目录操作"><a href="#目录操作" class="headerlink" title="目录操作"></a><strong>目录操作</strong></h3><ol><li>create</li><li>delete</li><li>opendir</li><li>closedir</li><li>readdir</li><li>rename</li><li>link</li><li>ulink</li></ol><h2 id="文件系统的实现"><a href="#文件系统的实现" class="headerlink" title="文件系统的实现"></a><strong>文件系统的实现</strong></h2><h3 id="文件系统布局"><a href="#文件系统布局" class="headerlink" title="文件系统布局"></a>文件系统布局</h3><p><code>文件系统存放</code>：文件系统存放在外存上。多数磁盘划分为一个或者多个分区，每个而分区有一个独立的文件系统。<br><code>主引导记录（master boot record，MBR）</code>：磁盘的0号扇区称为主引导记录，用来引导计算机，MBR之后挨着的是<code>分区表</code>,该表给出了每一个分区的起始和结束地址。<br>在计算机被引导时，BIOS读入并执行MBR。MBR执行的第一件事情是确定活动分区，读入活动分区的第一个块，称为<code>引导块（boot block）</code>，并执行之。引导块中的程序将装载该分区中的操作系统。为了统一，每个分区都从一个启动块开始，即使它不含一个可以启动的操作系统。不过，在将来这个分区也许会有一个操作系统的。</p><h3 id="文件的实现"><a href="#文件的实现" class="headerlink" title="文件的实现"></a><strong>文件的实现</strong></h3><p>文件存储实现的关键问题是记录各个文件分别用到哪些磁盘块。不同的操作系统采用不同的方法。</p><h4 id="连续分配"><a href="#连续分配" class="headerlink" title="连续分配"></a><strong>连续分配</strong></h4><p>最简单的分配方案：把每个文件座位一连串连续数据存储在磁盘上。所以，在块大小为1KB的磁盘上，50KB的文件要分配50个连续大小的块。<br>优点</p><ol><li>实现简单。记录每个文件用到的磁盘块简化为只需记住两个数字即可：第一块的磁盘地址和文件的块数。</li><li>读性能好。单个操作就可以从磁盘上读出整个文件。只需一次查找（对第一个块）。之后就不需要寻道和旋转延迟，所以数据以磁盘全带宽的速率输入。可见连续分配实现简单且具有较高的性能。</li><li>很适合DVD，CD-ROM等一次性光学介质的存储。</li></ol><p>缺点</p><ul><li>磁盘零碎问题。删除文件之后会留下空闲块，随着时间的推移会使得磁盘变得零碎，既有文件也有空洞<ul><li>要么压缩磁盘。代价太高不可行。</li><li>要么重新使用空洞。需要维护一个空闲空间列表，但是为了挑选合适的空闲空间，需要知道该文件的最终大小。如果用户为了避免找到的空闲空间太小而提前给出一个不切实际的较大数字，则可能无法找到合适的空闲空间而导致失败。</li></ul></li></ul><h4 id="链表分配"><a href="#链表分配" class="headerlink" title="链表分配"></a><strong>链表分配</strong></h4><p><code>链表分配</code>：为每个文件构造磁盘块列表，每一个块的<strong>第一个字作为指向下一块的指针</strong>，块的其他部分存放数据。<br>优点</p><ol><li>可以充分利用每个磁盘块，不会因为磁盘碎片而浪费存储空间。</li><li>顺序读文件很方便</li></ol><p>缺点</p><ol><li>随机存取非常慢</li><li>由于指针占去了一些字节，每个磁盘块存储文件数据的字节数不再是2的整数次幂，这种怪异的大小会降低文件的存储效率。（类似于没有对齐）<ul><li>很多程序都是以2的整数次幂来读写磁盘块的。因为上面论述的原因，要读出一个完整的2的整数次幂的块需要从两个磁盘中获得和接收信息，这就因为复制引发了额外的开销。</li></ul></li></ol><h4 id="在内存中采用表的链表分配"><a href="#在内存中采用表的链表分配" class="headerlink" title="在内存中采用表的链表分配"></a><strong>在内存中采用表的链表分配</strong></h4><p>A：我们可以知道上面链表分配的不足，那么如何解决呢？<br>B: 可以取出每个磁盘块的指针字，把它放在内存的一个表里面，就可以解决链表分配的两个不足。</p><p><code>文件分配表（FAT,File Allocation Table）</code>：这个表实现了链表的操作。文件分配表的每一个表项存放着文件数据的下一个块的块号</p><p>优点</p><ol><li>磁盘文件块可以不用存放指针，这样整个块都是数据。</li><li>随机存取更加容易，整个文件分配表实现的链表都在内存中，不需要磁盘引用。</li><li>不管文件多大，在目录项中只需记录一个整数（起始块号），按照它就可以找到文件的全部块。</li></ol><p>缺点</p><ul><li>占用内存空间大。必须整个表都存放在内存中。<ul><li>对于200GB的磁盘和1KB大小的块，这张表有2亿项，每一项至少三个字节，为了提高查找速度，有时需要4个字节。根据系统对空间和时间的优化方案，这张表需要600MB或者800MB，不实用。</li></ul></li></ul><h4 id="i节点分配"><a href="#i节点分配" class="headerlink" title="i节点分配"></a><strong>i节点分配</strong></h4><p>A：我们可以知道上面链表分配的不足，那么如何解决呢？<br>B: 既然整张文件分配表太大了，我们就拆分成小的放，实现一个新的数据结构i节点。</p><p><code>i节点（index-node）</code>：每个文件都赋予了一个称为i节点的数据结构，其中列出了文件属性和文件块的<strong>磁盘地址</strong>。<br>优点：</p><ul><li>只有在对应的文件打开时候，其i节点才在内存中</li></ul><p>缺点与解决方案：</p><ul><li>每个i节点只能存储固定数量的磁盘地址，那么当一个文件所包含的磁盘块的数目超出了i节点所能容纳的数目怎么办呢？<ul><li>一个解决方案，最后一个i节点中的磁盘地址不指向数据块，而是指向一个包含磁盘块地址的块的地址。</li></ul></li></ul><h3 id="目录的实现"><a href="#目录的实现" class="headerlink" title="目录的实现"></a><strong>目录的实现</strong></h3><p>每个目录项只引用i节点的目录</p><h3 id="共享文件"><a href="#共享文件" class="headerlink" title="共享文件"></a><strong>共享文件</strong></h3><p><code>共享文件</code>：当几个用户在同一个项目里面工作时候，他们常常需要共享文件。其结果是，如果一个共享文件同时出现在属于不同用户的不同目录下面，工作起来就很方便。<br><code>连接（link）</code>：原本属于C目录下的文件也出现在B目录下的话，B的目录与该共享文件的联系称为一个<code>连接（link）</code>。这样文件系统本身也成为了一个<code>有向无环图（DAG）</code>。</p><p>共享文件的问题：</p><ol><li>如果目录包含磁盘地址，则当连接文件的时候，必须把C目录中的磁盘地址复制到B目录。如果B或者C之后又向文件中添加内容，则新的数据块只会列入添加工作的用户的目录中。其他用户是不知道的。这违背了共享的初衷</li></ol><h4 id="硬连接和软连接"><a href="#硬连接和软连接" class="headerlink" title="硬连接和软连接"></a><strong>硬连接和软连接</strong></h4><p>解决方案：</p><ol><li><code>i节点方法</code>：磁盘块不列入目录，而是列入一个与文件本身关联的小型数据结构中，目录指向这个数据结构(Linux中的i节点）（<strong>硬连接</strong>）<ul><li>实现机制：需要有一个文件<code>所有者计数机制</code>，当B连接到共享文件时，i节点记录文件的所有者是C，建立一个连接并不会改变所有关系，但是它将i节点的连接技术加1，所以系统知道当前有多少目录项指向这个文件。</li><li>缺点：C删去这个文件之后，还有许多目录项指向它，其他硬连接会指向错误的文件。</li><li>改进：唯一能做的是只删除C的目录项，但是保留i节点，所有者计数减一。只有到计数为0的时候才会真正删除该文件。</li></ul></li><li><code>符号链接方法（symbolic linking）</code>：让系统建立一个类型为Link的新文件，并把该文件放在B目录下，使得B与C的一个文件存在链接。链接文件只包含了它所连接的文件的路径名。（<strong>软连接</strong>）<ul><li>缺点：需要额外的开销。必须读取包含路径的文件，然后一个部分一个部分地扫描路径，直到找到i节点</li><li>缺点：每个符号链接需要额外的i节点和一个额外的磁盘块用于存储路径，如果路径很短，作为一种优化，系统可以将它存储在i节点中。</li><li>优点：只要简单提供一个机器的网络地址和文件在该机器上的路径，就可以连接全球任何地方的机器的文件。</li></ul></li></ol><p>tips：<br>还有一个由连接带来的问题，在符号连接和其他方式中都存在。如果允许连接，文件有两个或多个路径。查找一指定目录及其子目录下的全部文件的程序将多次定位到被连接的文件。例如，一个将某一目录及其子目录下的文件转存到磁带上的程序有可能多次复制一个被连接的文件。进而，如果接着把磁带读入另一台机器，除非转出程序具有智能，否则被连接的文件将被两次复制到磁盘上，而不是只是被链接起来。</p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p>现代操作系统<br><a href="https://blog.csdn.net/qq_36894974/article/details/105092951">简直不要太硬了！一文带你彻底理解文件系统</a><br><a href="https://blog.csdn.net/samxx8/article/details/44779245/">理解linux 的 inode解决inode耗尽问题</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;基础概念&quot;&gt;&lt;a href=&quot;#基础概念&quot; class=&quot;headerlink&quot; title=&quot;基础概念&quot;&gt;&lt;/a&gt;&lt;strong&gt;基础概念&lt;/strong&gt;&lt;/h2&gt;&lt;p&gt;&lt;code&gt;文件系统&lt;/code&gt;：操作系统中处理文件的部分，有关文件的构造，命名，存取，使用，实现和管理都是操作系统文件系统设计的主要内容&lt;/p&gt;
    
    </summary>
    
    
      <category term="操作系统" scheme="https://stemha.github.io/categories/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"/>
    
    
      <category term="软连接" scheme="https://stemha.github.io/tags/%E8%BD%AF%E8%BF%9E%E6%8E%A5/"/>
    
      <category term="硬连接" scheme="https://stemha.github.io/tags/%E7%A1%AC%E8%BF%9E%E6%8E%A5/"/>
    
      <category term="文件与目录" scheme="https://stemha.github.io/tags/%E6%96%87%E4%BB%B6%E4%B8%8E%E7%9B%AE%E5%BD%95/"/>
    
  </entry>
  
  <entry>
    <title>软件工程简述</title>
    <link href="https://stemha.github.io/2020/04/29/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E7%AE%80%E8%BF%B0/"/>
    <id>https://stemha.github.io/2020/04/29/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E7%AE%80%E8%BF%B0/</id>
    <published>2020-04-29T12:47:07.000Z</published>
    <updated>2020-08-10T04:19:21.756Z</updated>
    
    <content type="html"><![CDATA[<p>为了写大型程序，程序员们使用了各种工具和方法，形成了<code>软件工程</code>这门学科。<br>软件工程这个词由NASA工程师Margaret Hamilton创造。她帮助NASA在阿波罗计划中避免出现严重问题。她的经典名言：</p><blockquote><p>这有点像牙齿的根管治疗：你总是拖到最后才做，但有些事情可以事先做好。有点像预防性体检，只不过是预防软件出错。</p></blockquote><a id="more"></a><h2 id="对象"><a href="#对象" class="headerlink" title="对象"></a>对象</h2><p>尽管可以将大项目分解为小函数，每个人同时工作，不用关心整个项目，只关心自己的函数高效和正确就好啦，然而把代码打包成函数还是远远不够的。<br>比如微软Office软件有近4000万行代码，打包成函数也还有几十万个，也还是也有点多。<br>解决办法是，把函数再次打包成为层级，把相关的代码都放到一起，打包成<code>对象（objects）</code>。</p><h2 id="面向对象编程（object-oriented-programming）"><a href="#面向对象编程（object-oriented-programming）" class="headerlink" title="面向对象编程（object oriented programming）"></a>面向对象编程（object oriented programming）</h2><p>把函数打包成为对象的思想叫做<code>“面向对象编程”</code>。<br>对象可以包含对象，函数，变量。子对象也是同样的，所以会出现<u>沿着对象层级一层层找执行函数</u>的做法。</p><h2 id="API"><a href="#API" class="headerlink" title="API"></a>API</h2><p><code>软件工程的比喻</code>：<br>就像建造摩天大一样，有管道工配置管道，电工装电线，油漆工涂油漆，还有成败上千人做其他的事情。<br>所以一个大团队中有许多小团队，不同小团队之间负责不同的功能，所以不同团队之间需要文档，才能帮助理解代码都在做什么，还需要定义好的程序编程接口（API）<br>API帮助不同程序员合作，不需要直到细节，只要直到怎么使用就好了。</p><p>然后<code>private与public</code>提供不同的权限，哪些不让外部访问，哪些仅供内部访问。</p><p><code>面向对象的核心</code>：</p><ul><li>隐藏复杂度</li><li>选择性公布功能</li></ul><h2 id="IDE与调试（debugging）"><a href="#IDE与调试（debugging）" class="headerlink" title="IDE与调试（debugging）"></a>IDE与调试（debugging）</h2><p>代码在编译之前只是文字，可以用任何文本处理程序写代码，但是一般来时，还是会用专门的工具来写比较好。<br>IDE提供了许多有用功能，因为集成了所有的东西，所以叫IDE。</p><ul><li>代码帮助，提示，整理，编译，测试</li></ul><h2 id="文档和注释（readme-comment）"><a href="#文档和注释（readme-comment）" class="headerlink" title="文档和注释（readme/comment）"></a>文档和注释（readme/comment）</h2><p>程序员另一项重要工作是给代码写文档<br>文档一般放在readme中<br>文档也可以写成注释，放在源代码中<br>好的文档的作用：</p><ul><li>能帮助开发者几个月后理解自己和他人的代码</li><li>还能提升复用性，与其让程序员一遍遍写已经有的东西，不如直接用别人写好的来解决问题。</li></ul><h2 id="版本控制"><a href="#版本控制" class="headerlink" title="版本控制"></a>版本控制</h2><p>源代码管理，帮助团队协作，也叫版本控制。弄懂git原理即可。</p><h2 id="质量控制"><a href="#质量控制" class="headerlink" title="质量控制"></a>质量控制</h2><p>写代码与测试代码密不可分。<br>测试也称为<code>质量保证测试（QA，quality assurance testing）</code>。<br>严格测试软件的方方面面，看软件会不会出错，也就是找Bug。</p><h2 id="Beta-Alpha"><a href="#Beta-Alpha" class="headerlink" title="Beta Alpha"></a>Beta Alpha</h2><p><code>beta版软件（beta software）</code>：意思是软件接近完成，但不是百分之一百通过测试过，公司有时会向公众发布beta版本，以帮助发现问题。<br><code>alpha版软件（alpha version software）</code>：一般很粗糙，错误多，只在公司内部测试。</p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p>Crash Course Computer Science</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;为了写大型程序，程序员们使用了各种工具和方法，形成了&lt;code&gt;软件工程&lt;/code&gt;这门学科。&lt;br&gt;软件工程这个词由NASA工程师Margaret Hamilton创造。她帮助NASA在阿波罗计划中避免出现严重问题。她的经典名言：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;这有点像牙齿的根管治疗：你总是拖到最后才做，但有些事情可以事先做好。有点像预防性体检，只不过是预防软件出错。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="软件工程" scheme="https://stemha.github.io/categories/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/"/>
    
    
      <category term="面向对象" scheme="https://stemha.github.io/tags/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/"/>
    
      <category term="版本控制" scheme="https://stemha.github.io/tags/%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6/"/>
    
      <category term="文档和注释" scheme="https://stemha.github.io/tags/%E6%96%87%E6%A1%A3%E5%92%8C%E6%B3%A8%E9%87%8A/"/>
    
  </entry>
  
  <entry>
    <title>常用数据结构简述</title>
    <link href="https://stemha.github.io/2020/04/29/%E5%B8%B8%E7%94%A8%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AE%80%E8%BF%B0/"/>
    <id>https://stemha.github.io/2020/04/29/%E5%B8%B8%E7%94%A8%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AE%80%E8%BF%B0/</id>
    <published>2020-04-28T17:37:34.000Z</published>
    <updated>2020-08-10T04:19:21.686Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>算法处理的数据在内存中的格式是什么？<br>我们希望数据是结构化的，方便读取，因此计算机科学家发明了数据结构</p></blockquote><a id="more"></a><h2 id="数组array"><a href="#数组array" class="headerlink" title="数组array"></a>数组array</h2><p>几乎所有的编程语言都自带了许多函数来处理数组，比如数组的排序</p><h2 id="字符串string"><a href="#字符串string" class="headerlink" title="字符串string"></a>字符串string</h2><p>是数组的亲戚<br>i = “love”<br>虽然长得不像数组，但的确是数组，在计算机幕后的确是这样的<br>字符放在内存中以/0结尾，不是”字符0“而是”二进制0“，这叫字符“null”，表示字符串结尾。</p><ul><li>这个字符非常重要，如果调用print函数，会从开始位置逐个显示到屏幕，但是得直到什么时候停下来!否则会把内存中的所有内容输出。</li></ul><h2 id="矩阵matrix"><a href="#矩阵matrix" class="headerlink" title="矩阵matrix"></a>矩阵matrix</h2><p>数组的数组</p><h2 id="结构体struct"><a href="#结构体struct" class="headerlink" title="结构体struct"></a>结构体struct</h2><p>多个变量打包在一起，在内存中会自动组织到一起的</p><h2 id="节点node与指针"><a href="#节点node与指针" class="headerlink" title="节点node与指针"></a>节点node与指针</h2><p>struct可以构建复杂的数据结构，比如node</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">listnode</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">int</span> value;</span><br><span class="line">listnode * next;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="链表linked-list"><a href="#链表linked-list" class="headerlink" title="链表linked list"></a>链表linked list</h2><p>使用node来构建链表<br>灵活性是通过每个节点指向下一个节点实现的<br><code>循环链表（circular list）</code>：尾部的next指向开头<br><code>非循环链表</code>：尾部节点指针值是null<br>链表使用的时候很少看具体地址么，而是经常使用链表的抽象模型</p><p>链表的优点</p><ul><li>容易重新排序，两端缩减，分割，倒序等</li><li>因为灵活很多数据结果可以用链表实现，比如队列和栈</li></ul><h2 id="队列queue"><a href="#队列queue" class="headerlink" title="队列queue"></a>队列queue</h2><p>FIFO<br>队列的链表实现<br>比方1-&gt;2-&gt;3-&gt;4-&gt;5<br>可以让队列头指向1，队列尾部指向5 （也就是链表的节点连接是反向的）<br>入队（enqueuing）出队（dequeuing）</p><h2 id="栈stack"><a href="#栈stack" class="headerlink" title="栈stack"></a>栈stack</h2><p>LIFO<br>入栈（push onto the stack）和出栈（pop from the stack） </p><h2 id="树tree"><a href="#树tree" class="headerlink" title="树tree"></a>树tree</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">treenode</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">int</span> value;</span><br><span class="line">listnode * nextleft;</span><br><span class="line">listnode * nextright;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>最重要的性质：树到根是单向的</p><h2 id="二叉树-binary-tree"><a href="#二叉树-binary-tree" class="headerlink" title="二叉树 binary tree"></a>二叉树 binary tree</h2><p>每个节点至多两个孩子</p><h2 id="图graph"><a href="#图graph" class="headerlink" title="图graph"></a>图graph</h2><p>顶点多对多</p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p>Crash Course Computer Science</p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;算法处理的数据在内存中的格式是什么？&lt;br&gt;我们希望数据是结构化的，方便读取，因此计算机科学家发明了数据结构&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="数据结构" scheme="https://stemha.github.io/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
      <category term="简述" scheme="https://stemha.github.io/tags/%E7%AE%80%E8%BF%B0/"/>
    
      <category term="数据结构" scheme="https://stemha.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>操作系统与文件系统简述</title>
    <link href="https://stemha.github.io/2020/04/29/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E4%B8%8E%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F%E7%AE%80%E8%BF%B0/"/>
    <id>https://stemha.github.io/2020/04/29/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E4%B8%8E%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F%E7%AE%80%E8%BF%B0/</id>
    <published>2020-04-28T16:34:41.000Z</published>
    <updated>2020-08-10T04:19:21.688Z</updated>
    
    <content type="html"><![CDATA[<h2 id="操作系统"><a href="#操作系统" class="headerlink" title="操作系统"></a>操作系统</h2><a id="more"></a><p>1940s，1950s的年代，计算机慢，一次只能运行一个程序，<br>程序员在打孔纸上写程序，拿到一个计算机房间，交给操作员。<br>操作员等计算机空下来后，将程序放入，然后运行，输出结果，停机。</p><p>计算机变快之后，放程序的时间比程序运行时间还长，我们需要计算机以一种方式自动运作——&gt;操作系统</p><p>到1950年代尾声，计算机已经变得非常快了，处理器经常闲着，等待慢的设备（比如打印机，读卡器等），也就是程序阻塞在I/O上</p><p>50年代后期，曼彻斯特大学研发了世界上第一台超级计算机，Atlas，想法设法最大限度利用它，1962年设计了atlas supervisor程序，能够在一个CPU上运行多个程序（这种能力也叫<code>多任务处理</code>）<br>Atlas是世界上第一台同时支持虚拟内存和内存保护的电脑</p><p>同时运行多个程序会有一些问题</p><ul><li>每个程序都会占一些内存，切换程序的时候不能丢失数据</li><li>解决办法是给每一个程序配置专属内存块</li></ul><p>分配专属内存块到物理地址时候，可能物理地址不连续的，为了隐藏这种复杂性，把内存地址虚拟化，也就是<code>虚拟内存机制</code></p><p>这种机制可以使程序内存大小灵活增减，也叫<code>动态内存分配</code></p><p><code>内存保护</code>：程序只能捣乱自己的内存，不会影响到其他的程序。</p><p>分时操作系统<br>Multics  首次在设计时候考虑了安全机制，但是导致系统过于臃肿。</p><p>Dennis 和 Thompson 联手打造了Unix，将os分为两部分</p><ol><li>操作系统的核心功能，比如内存管理，多任务和输入输出管理，称之为内核</li><li>一堆有用的工具，比如程序和运行库</li></ol><p>Unix中并没有向multics这么多的错误处理代码</p><ul><li>如果有错误产生，就让<code>内核恐慌（kernel panic）</code></li><li>内核崩溃是没有办法恢复的，所以调用了一个pannic的函数，起初只是打印pannic一词，然后无限循环<br>Unix成为1970-1980年代最流行的操作系统之一</li></ul><p>1980年代，计算机降价到普通人买得起，这时候叫个人电脑。<br>起初微软的操作系统没有内存保护，经常蓝屏,后来微软都加上了</p><p>我们现在用的ios，安卓，windows，macos基本上都有了<code>内存保护</code>，<code>虚拟内存</code>，<code>多任务</code>了；</p><h2 id="文件系统"><a href="#文件系统" class="headerlink" title="文件系统"></a>文件系统</h2><p>文件格式：随机排列文件当然没有问题，但是按格式排列会更好的</p><p>最简单的文件格式</p><ul><li>文本文件（.txt）</li></ul><p>元数据（meta data）：关于数据的数据<br>元数据存在于文件开头，在实际的数据前面，因此也叫<code>文件头（header）</code></p><p>早期计算机只做一件事，比如火炮射程表，这时候整个存储器就像一个文件（数据从头到尾直到占用满）</p><p>后期计算和存储能力的提升，可以存多个文件了，这时候最简单的方式是把文件连续存储，一个个在内存中连续存放<br>但是存储器没有文件概念，只存储大量位，我们怎么直到文件的开头和结尾在哪呢？<br>所以我们需要一个特殊文件，来记录其他文件存储的位置<br>这个特殊文件有很多名字，这里泛称为<code>“目录文件”</code>,这个文件经常是存放在开头的</p><p>目录文件存放</p><ul><li>其他文件的名字”文件名+”.“+扩展名“</li><li>文件的元数据，比如创建时间(created)，最后修改时间(last modified)，文件所有者，是否能读写，最重要的是<code>文件的起始位置和长度</code></li></ul><p>就像书的目录意义，更改了书里面的内容，就需要更改对应的目录</p><p>目录文件和对目录文件的管理是一个非常简单的文件系统的例子</p><p>上面的例子是<code>”平面文件系统“</code>：文件都在同一个层次<br>平面文件系统存在的问题：如果给某个文件加数据，会覆盖掉后面文件的一部分</p><p>所以现代的文件系统会做两件事</p><ol><li>把空间预先分为一块块，并留一些“预留空间”可以方便改动和管理 （用这样的方案目录文件需要记录文件存放在哪些块里面）</li><li>拆分文件，存放在多个块里面，这样文件可以轻松增大和缩小（目录文件会记录不只一个块）//有点像虚拟内存</li></ol><p>删除文件只需要在目录文件上删除那条记录即可。</p><p><code>碎片</code>：文件存储在多个块里面，块之间是分开的，顺序也是乱的。//是增删改文件导致的，不可避免的</p><p>对很多存储技术来说，碎片是坏事，现实生活中大文件可能存放在数百个块里面，导致打开文件特别慢。<br>如何解决？碎片整理！<br>计算机把数据来回移动，排成正确的顺序</p><p><code>分层文件系统</code><br>树状目录的形式</p><ul><li>目录文件（根目录）不仅要指向文件，还要指向目录（is directory字段）//相对于平面文件系统的变化</li><li>无线深度的文件夹</li><li>可以轻松移动文件，只需要改动两个目录文件（一个删去一条记录，一个加一条记录）</li></ul><h2 id="存储介质"><a href="#存储介质" class="headerlink" title="存储介质"></a>存储介质</h2><p>如今存储技术正朝向固态前进，没有机械活动部件，里面是集成电路，不用像磁盘那样磁头等待磁盘旋转，ssd访问时间低于1/1000秒，但是仍然比RAM慢很多倍，所以现代计算机仍然用层次存储结构。<br>第一个RAM出现于1972年，成本每比特一美分</p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p>Crash Course Computer Science</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;操作系统&quot;&gt;&lt;a href=&quot;#操作系统&quot; class=&quot;headerlink&quot; title=&quot;操作系统&quot;&gt;&lt;/a&gt;操作系统&lt;/h2&gt;
    
    </summary>
    
    
      <category term="操作系统" scheme="https://stemha.github.io/categories/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"/>
    
    
      <category term="操作系统" scheme="https://stemha.github.io/tags/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"/>
    
      <category term="文件系统" scheme="https://stemha.github.io/tags/%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F/"/>
    
  </entry>
  
  <entry>
    <title>Linux概述</title>
    <link href="https://stemha.github.io/2020/04/20/Linux%E6%A6%82%E8%BF%B0/"/>
    <id>https://stemha.github.io/2020/04/20/Linux%E6%A6%82%E8%BF%B0/</id>
    <published>2020-04-20T13:50:16.000Z</published>
    <updated>2020-08-10T04:19:21.533Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Linux设计目标"><a href="#Linux设计目标" class="headerlink" title="Linux设计目标"></a>Linux设计目标</h2><p>Unix被设计成为一种能够同时处理多进程和多用户的交互式系统，Linux继承了Linux的设计目标。</p><a id="more"></a><p>设计Linux的基本方针：</p><ul><li>每个程序只做一件事并且做好。</li></ul><h3 id="好的程序员追求的系统"><a href="#好的程序员追求的系统" class="headerlink" title="好的程序员追求的系统"></a>好的程序员追求的系统</h3><ul><li>简单，优雅，</li><li>一致性 （<code>最小惊讶原理</code>）</li><li>较强的功能性与灵活性<ul><li>意味着系统有较小的一组基本元素，产生多种多样的组合来满足各种应用需要。</li></ul></li></ul><h2 id="Linux的接口"><a href="#Linux的接口" class="headerlink" title="Linux的接口"></a>Linux的接口</h2><p><img src="/2020/04/20/Linux%E6%A6%82%E8%BF%B0/Linux%E5%B1%82%E6%AC%A1%E7%BB%93%E6%9E%84.jpg" alt></p><center>Linux系统层次结构 </center><p>所有版本的Linux必须提供大量的标准程序，其中一些是POSIX标准指定的，其他的根据Linux的版本而有所不同。它们包括：</p><ul><li>命令处理器（shell）</li><li>编译器</li><li>编辑器</li><li>文本处理程序</li><li>文件操作工具等</li></ul><h3 id="Linux具有三种不同的接口"><a href="#Linux具有三种不同的接口" class="headerlink" title="Linux具有三种不同的接口"></a>Linux具有三种不同的接口</h3><ol><li>真正的系统调用接口</li><li>库函数接口</li><li>由标准应用程序构成的接口</li></ol><h2 id="shell"><a href="#shell" class="headerlink" title="shell"></a>shell</h2><p>shell中，后台运行一个程序的语法是在原本命令后加“&amp;”。</p><p>shell脚本：包含shell命令的文件。</p><ul><li>可以包含参数，同时使用if、for、while和case等结构。</li><li>可以给变量赋值，然后过一段时间再读取这些变量。</li></ul><h2 id="linux应用程序"><a href="#linux应用程序" class="headerlink" title="linux应用程序"></a>linux应用程序</h2><h3 id="应用程序分类"><a href="#应用程序分类" class="headerlink" title="应用程序分类"></a>应用程序分类</h3><p>Linux的命令行用户界面包含大量的标准应用程序。大致分为6类：</p><ol><li>文件和目录操作命令</li><li>过滤器</li><li>程序设计工具，如编辑器和编译器</li><li>文档处理</li><li>系统管理</li><li>其他</li></ol><h3 id="过滤器"><a href="#过滤器" class="headerlink" title="过滤器"></a>过滤器</h3><p>过滤器有：</p><ul><li>grep、sort、head、tail</li><li>cut和paste（文档剪切与粘贴）</li><li>od：将输入（通常是二进制，也包括八，十和十六进制）转化为ASCII文档。</li><li>pr：打印机格式化输出</li><li>tr：字符大小写转换</li></ul><h3 id="编译器和程序设计工具"><a href="#编译器和程序设计工具" class="headerlink" title="编译器和程序设计工具"></a>编译器和程序设计工具</h3><p>编译器和程序设计工具：</p><ul><li>gcc</li><li>ar：将库函数收集到存档文件中</li><li>make：维护程序，跟踪哪些头文件依赖于哪些头文件等，然后安排所有需要进行的编译自动进行。 </li></ul><h2 id="内核结构"><a href="#内核结构" class="headerlink" title="内核结构"></a>内核结构</h2><p><img src="/2020/04/20/Linux%E6%A6%82%E8%BF%B0/Linux%E5%86%85%E6%A0%B8%E7%BB%93%E6%9E%84.jpg" alt></p><center>Linux内核结构 </center><p>内核最底层，负责中断处理程序，这是它们与设备交互的主要方式，以及底层的分派机制。分派在中断时发生。</p><ul><li>底层的代码中止正在运行的进程，将其状态存储在内核进程结构中，然后启动相应的驱动程序。</li><li>进程分派，在内核完成某些操作并且需要再次启动一个用户进程时，发生。进程分派的代码是汇编代码，并且和进程调度的代码有很大不同。</li></ul><p>内核子系统的三个主要部件</p><ul><li>I/O部件<ul><li>包含所有负责与设备交互以及实现联网和存储的I/O功能的内核部件</li></ul></li><li>内存管理部件<ul><li>维护虚拟内存到物理内存的映射，维护最近被访问页面的缓存以及实现一个好的页面置换算法。并根据需要把需要的数据和代码页读入内存中。</li></ul></li><li>进程管理部件<ul><li>主要是进程的创建和中止。还有CPU调度和信号处理。</li></ul></li></ul><p>内核最顶层，是内核的系统调用接口。所有的调用都来自这里，其导致一个陷阱，将系统从用户态切换到受保护的内核态，继而将控制权交给上述的内核部件之一。</p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p>现代操作系统</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Linux设计目标&quot;&gt;&lt;a href=&quot;#Linux设计目标&quot; class=&quot;headerlink&quot; title=&quot;Linux设计目标&quot;&gt;&lt;/a&gt;Linux设计目标&lt;/h2&gt;&lt;p&gt;Unix被设计成为一种能够同时处理多进程和多用户的交互式系统，Linux继承了Linux的设计目标。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Linux" scheme="https://stemha.github.io/categories/Linux/"/>
    
    
      <category term="Linux概述" scheme="https://stemha.github.io/tags/Linux%E6%A6%82%E8%BF%B0/"/>
    
  </entry>
  
  <entry>
    <title>Linux常用命令整理（2）</title>
    <link href="https://stemha.github.io/2020/04/19/Linux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%E6%95%B4%E7%90%86%EF%BC%882%EF%BC%89/"/>
    <id>https://stemha.github.io/2020/04/19/Linux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%E6%95%B4%E7%90%86%EF%BC%882%EF%BC%89/</id>
    <published>2020-04-19T12:47:44.000Z</published>
    <updated>2020-08-10T04:19:21.530Z</updated>
    
    <content type="html"><![CDATA[<h2 id="统计与过滤"><a href="#统计与过滤" class="headerlink" title="统计与过滤"></a>统计与过滤</h2><a id="more"></a><h3 id="grep"><a href="#grep" class="headerlink" title="grep"></a>grep</h3><p>用于过滤/搜索的特定字符,可用正则表达式能多种命令配合使用。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">grep [-option] pattern file</span><br></pre></td></tr></table></figure><p><a href="https://www.runoob.com/linux/linux-comm-grep.html">Linux grep 命令</a></p><h3 id="wc"><a href="#wc" class="headerlink" title="wc"></a>wc</h3><p>统计指定文件中的行数、字数、字节数，并将统计结果显示输出。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wc [-option] 文件…</span><br></pre></td></tr></table></figure><p>该命令统计指定文件中的行数、字数、字节数。如果没有给出文件名，则从标准输入读取。wc同时也给出所指定文件的总统计数</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ wc testfile           <span class="comment"># testfile文件的统计信息  </span></span><br><span class="line">5 100 600 testfile      <span class="comment"># testfile文件的行数为5、单词数100、字节数600</span></span><br></pre></td></tr></table></figure><p><a href="https://www.runoob.com/linux/linux-comm-wc.html">Linux wc命令</a></p><h2 id="进程相关"><a href="#进程相关" class="headerlink" title="进程相关"></a>进程相关</h2><h3 id="进程的挂起"><a href="#进程的挂起" class="headerlink" title="进程的挂起"></a>进程的挂起</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kill -stop PID &#x2F;&#x2F;将进程挂起（redhat）</span><br></pre></td></tr></table></figure><p>需要重新执行当前被挂起的任务时，使用 bg %num 即可将挂起的 job 的状态由 stopped 改为 running，仍在后台执行。需要改为在前台执行时，执行fg %num 即可。<br>也可以使用[ctrl]+[z]</p><h3 id="pstree"><a href="#pstree" class="headerlink" title="pstree"></a>pstree</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">pstree -p    &#x2F;&#x2F;可以显示进程树</span><br><span class="line">pstree -apnh &#x2F;&#x2F;显示进程间的关系</span><br><span class="line">pstree -u    &#x2F;&#x2F;显示用户名称</span><br></pre></td></tr></table></figure><p><a href="https://www.runoob.com/linux/linux-comm-pstree.html">Linux pstree命令</a></p><h3 id="lsof-（lists-openfiles）"><a href="#lsof-（lists-openfiles）" class="headerlink" title="lsof （lists openfiles）"></a>lsof （lists openfiles）</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">lsof [参数][文件]  &#x2F;&#x2F;需要root执行（因为要访问核心内存和各种文件）</span><br></pre></td></tr></table></figure><p>功能： 用于查看你进程打开的文件，打开文件的进程，进程打开的端口(TCP、UDP)。<br>找回/恢复删除的文件。</p><ul><li>好用的系统监视工具（神器）。</li><li>有着最多开关的Linux/Unix命令之一</li></ul><p>lsof打开的文件可以是：<br>1.普通文件<br>2.目录<br>3.网络文件系统的文件<br>4.字符或设备文件<br>5.(函数)共享库<br>6.管道，命名管道<br>7.符号链接<br>8.网络文件（例如：NFS file、网络socket，unix域名socket）<br>9.还有其它类型的文件，等等<br><a href="https://www.runoob.com/w3cnote/linux-check-port-usage.html">lsof 菜鸟教程</a><br><a href="https://www.jianshu.com/p/a3aa6b01b2e1">Linux 命令神器：lsof</a></p><h3 id="ps-process-status"><a href="#ps-process-status" class="headerlink" title="ps(process status)"></a>ps(process status)</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ps [options] [--help]  &#x2F;&#x2F;用来显示当前进程的状态</span><br></pre></td></tr></table></figure><p>ps命令用来列出系统中当前运行的那些进程。ps命令列出的是当前那些进程的快照，就是执行ps命令的那个时刻的那些进程。<br>如果想要动态的显示进程信息，就可以使用top命令。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">root@ubuntu:~# ps</span><br><span class="line">  PID TTY          TIME CMD</span><br><span class="line">13777 pts&#x2F;1    00:00:00 bash</span><br><span class="line">14564 pts&#x2F;1    00:00:00 ps</span><br></pre></td></tr></table></figure><p><a href="https://www.runoob.com/linux/linux-comm-ps.html">Linux ps命令</a></p><h3 id="jobs"><a href="#jobs" class="headerlink" title="jobs"></a>jobs</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">jobs[选项][参数] &#x2F;&#x2F;用于显示Linux中的任务列表及任务状态，包括后台运行的任务。</span><br><span class="line">&#x2F;&#x2F;jobs 的状态可以是 running, stopped, Terminated</span><br></pre></td></tr></table></figure><p>该命令可以显示任务号及其对应的进程号。其中，任务号是以普通用户的角度进行的，而进程号则是从系统管理员的角度来看的。一个任务可以对应于一个或者多个进程号。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">root@ubuntu:~# jobs  </span><br><span class="line">&#x2F;&#x2F;后台没有进程，所以jobs命令的输出是空</span><br><span class="line">root@ubuntu:~# ping 192.168.0.1</span><br><span class="line">PING 192.168.0.1 (192.168.0.1) 56(84) bytes of data.</span><br><span class="line">^Z</span><br><span class="line">[1]+  Stopped                 ping 192.168.0.1</span><br><span class="line">root@ubuntu:~# jobs</span><br><span class="line">[1]+  Stopped                 ping 192.168.0.1</span><br><span class="line">root@ubuntu:~# jobs -l  &#x2F;&#x2F;-l：显示进程号；</span><br><span class="line">[1]+ 14661 Stopped                 ping 192.168.0.1</span><br></pre></td></tr></table></figure><p><a href="https://ipcmen.com/jobs">jobs命令</a></p><blockquote><p>fg、bg、jobs、&amp;、ctrl + z都是与系统任务有关的常用命令</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">command&amp; 或者 ctrl + z 让进程在后台运行 </span><br><span class="line">jobs     查看后台运行的进程 </span><br><span class="line">fg %jobnumber    让后台的进程jobnumber到前台到前台 </span><br><span class="line">bg %jobnumber    让进程jobnumber到后台去 </span><br><span class="line">&#x2F;&#x2F;%jobnumber 是通过 jobs 命令查到的后台正在执行的命令的序号 (不是 pid)</span><br></pre></td></tr></table></figure><h3 id="kill"><a href="#kill" class="headerlink" title="kill"></a>kill</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kill[参数][进程号]</span><br></pre></td></tr></table></figure><p>功能： 发送指定的信号到相应进程。不指定信号将发送SIGTERM（15）终止指定进程。如果无法终止该程序可用“-KILL” 参数，其发送的信号为SIGKILL(9) ，将强制结束进程，使用ps命令或者jobs 命令可以查看进程号。root用户将影响用户的进程，非root用户只能影响自己的进程。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;通过 jobs 命令查看 job 号（假设为 jobnumber）</span><br><span class="line">kill %jobnumber</span><br><span class="line">通过 ps 命令查看 job 的进程号（PID，假设为 pid）</span><br><span class="line">&#x2F;&#x2F;kill pid</span><br></pre></td></tr></table></figure><h3 id="killall"><a href="#killall" class="headerlink" title="killall"></a>killall</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">killall[参数][进程名] &#x2F;&#x2F;用来结束同名的的所有进程（kill processes by name）</span><br></pre></td></tr></table></figure><p>killall命令用于杀死指定名字的进程。我们可以使用kill命令杀死指定进程PID的进程，如果要找到我们需要杀死的进程，我们还需要在之前使用ps等命令再配合grep来查找进程，而killall把这两个过程合二为一，是一个很好用的命令。</p><h2 id="系统监测"><a href="#系统监测" class="headerlink" title="系统监测"></a>系统监测</h2><h3 id="top"><a href="#top" class="headerlink" title="top"></a>top</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">top [参数]</span><br></pre></td></tr></table></figure><p>显示当前系统正在执行的进程的相关信息，包括进程ID、内存占用率、CPU占用率等</p><h3 id="free"><a href="#free" class="headerlink" title="free"></a>free</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">free [参数]</span><br></pre></td></tr></table></figure><p>功能： free 命令显示系统使用和空闲的内存情况，包括物理内存、交互区内存(swap)和内核缓冲区内存。共享内存将被忽略</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">root@ubuntu:~# free</span><br><span class="line">              total        used        free      shared  buff&#x2F;cache   available</span><br><span class="line">Mem:        1009176      136644      172116         628      700416      687996</span><br><span class="line">Swap:             0           0           0</span><br></pre></td></tr></table></figure><h3 id="vmstat-virtual-memory-statistics"><a href="#vmstat-virtual-memory-statistics" class="headerlink" title="vmstat (virtual memory statistics)"></a>vmstat (virtual memory statistics)</h3><p>功能： 用来显示虚拟内存的信息</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">root@ubuntu:~# vmstat</span><br><span class="line">procs -----------memory---------- ---swap-- -----io---- -system-- ------cpu-----</span><br><span class="line"> r  b   swpd   free   buff  cache   si   so    bi    bo   in   cs us sy id wa st</span><br><span class="line"> 0  0      0 172200 145008 555428    0    0     0     6   16   15  0  0 100  0  0</span><br></pre></td></tr></table></figure><p>虚拟内存的原理：<br>在系统中运行的每个进程都需要使用到内存，但不是每个进程都需要每时每刻使用系统分配的内存空间。当系统运行所需内存超过实际的物理内存，内核会释放某些进程所占用但未使用的部分或所有物理内存，将这部分资料存储在磁盘上直到进程下一次调用，并将释放出的内存提供给有需要的进程使用。<br>在Linux内存管理中，主要是通过“调页Paging”和“交换Swapping”来完成上述的内存调度。调页算法是将内存中最近不常使用的页面换到磁盘上，把活动页面保留在内存中供进程使用。交换技术是将整个进程，而不是部分页面，全部交换到磁盘上。<br>分页(Page)写入磁盘的过程被称作<code>Page-Out</code>，分页(Page)从磁盘重新回到内存的过程被称作Page-In。当内核需要一个分页时，但发现此分页不在物理内存中(因为已经被Page-Out了)，此时就发生了分页错误（Page Fault）。<br>当系统内核发现可运行内存变少时，就会通过Page-Out来释放一部分物理内存。经管Page-Out不是经常发生，但是如果Page-out频繁不断的发生，直到当内核管理分页的时间超过运行程式的时间时，系统效能会急剧下降。这时的系统已经运行非常慢或进入暂停状态，这种状态亦被称作<code>thrashing(颠簸)</code>。</p><h3 id="iostat-I-O-statistics"><a href="#iostat-I-O-statistics" class="headerlink" title="iostat (I/O statistics)"></a>iostat (I/O statistics)</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">iostat[参数][时间][次数]</span><br></pre></td></tr></table></figure><p>功能： 通过iostat方便查看CPU、网卡、tty设备、磁盘、CD-ROM 等等设备的活动情况, 负载信息。</p><p>Linux系统中的 iostat是I/O statistics（输入/输出统计）的缩写，iostat工具将对系统的磁盘操作活动进行监视。它的特点是汇报磁盘活动统计情况，同时也会汇报出CPU使用情况。同vmstat一样，iostat也有一个弱点，就是它不能对某个进程进行深入分析，仅对系统的整体情况进行分析。iostat属于sysstat软件包。可以用yum install sysstat 直接安装。</p><h2 id="命令执行"><a href="#命令执行" class="headerlink" title="命令执行"></a>命令执行</h2><h3 id="watch"><a href="#watch" class="headerlink" title="watch"></a>watch</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">watch[参数][命令]</span><br></pre></td></tr></table></figure><p>可以将命令的输出结果输出到标准输出设备，多用于周期性执行命令/定时执行命令（也就是说定个具体时间或者隔一段时间执行一次）<br><a href="https://ipcmen.com/watch">watch命令</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">watch -n 1 -d <span class="string">'pstree|grep http'</span> <span class="comment"># 每隔一秒高亮显示http链接数的变化情况。 后面接的命令若带有管道符，需要加''将命令区域归整。</span></span><br></pre></td></tr></table></figure><h3 id="at"><a href="#at" class="headerlink" title="at"></a>at</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">at[参数][时间]</span><br></pre></td></tr></table></figure><p>功能：在一个指定的时间执行一个指定任务，只能执行一次，且需要开启atd进程（ps -ef | grep atd查看， 开启用/etc/init.d/atd start or restart； 开机即启动则需要运行 chkconfig –level 2345 atd on）</p><h3 id="crontab"><a href="#crontab" class="headerlink" title="crontab"></a>crontab</h3><p>通过crontab 命令，我们可以在固定的间隔时间执行指定的系统指令或 shell script脚本。时间间隔的单位可以是分钟、小时、日、月、周及以上的任意组合。这个命令非常适合周期性的日志分析或数据备份等工作。</p><p><a href="https://www.cnblogs.com/ftl1012/p/crontab.html">Linux crontab命令详解</a></p><p>##文件传输</p><h3 id="rcp-remote-file-copy"><a href="#rcp-remote-file-copy" class="headerlink" title="rcp (remote file copy)"></a>rcp (remote file copy)</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rcp [参数] [源文件] [目标文件]</span><br></pre></td></tr></table></figure><p>功能：rcp命令用在远端复制文件或目录，如同时指定两个以上的文件或目录，且最后的目的地是一个已经存在的目录，则它会把前面指定的所有文件或目录复制到该目录中。</p><p>rcp（远程文件拷贝）命令用于在计算机之间拷贝文件。rcp命令有两种格式。第一种格式用于文件到文件的拷贝；第二种格式用于把文件或目录拷贝到另一个目录中。</p><h3 id="scp-secure-copy"><a href="#scp-secure-copy" class="headerlink" title="scp (secure copy)"></a>scp (secure copy)</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">scp [参数] [源路径] [目标路径]</span><br></pre></td></tr></table></figure><p>功能：</p><ul><li>scp是linux系统下基于ssh登陆进行安全的远程文件拷贝命令。</li><li>linux的scp命令可以在linux服务器之间复制文件和目录。</li></ul><h3 id="wget"><a href="#wget" class="headerlink" title="wget"></a>wget</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget [参数] [URL地址]</span><br></pre></td></tr></table></figure><p>用于从网络上下载资源，没有指定目录，下载资源回默认为当前目录。</p><ul><li>支持断点下传功能</li><li>同时支持FTP和HTTP下载方式</li><li>支持代理服务器</li></ul><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p><a href="https://ipcmen.com/">Linux命令大全（手册）</a><br><a href="https://www.runoob.com/linux/linux-command-manual.html">Linux 命令大全（菜鸟教程）</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;统计与过滤&quot;&gt;&lt;a href=&quot;#统计与过滤&quot; class=&quot;headerlink&quot; title=&quot;统计与过滤&quot;&gt;&lt;/a&gt;统计与过滤&lt;/h2&gt;
    
    </summary>
    
    
      <category term="Linux" scheme="https://stemha.github.io/categories/Linux/"/>
    
    
      <category term="Linux" scheme="https://stemha.github.io/tags/Linux/"/>
    
      <category term="命令" scheme="https://stemha.github.io/tags/%E5%91%BD%E4%BB%A4/"/>
    
  </entry>
  
  <entry>
    <title>Linux常用命令整理（1）</title>
    <link href="https://stemha.github.io/2020/04/19/Linux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%E6%95%B4%E7%90%86%EF%BC%881%EF%BC%89/"/>
    <id>https://stemha.github.io/2020/04/19/Linux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%E6%95%B4%E7%90%86%EF%BC%881%EF%BC%89/</id>
    <published>2020-04-19T09:35:55.000Z</published>
    <updated>2020-08-10T04:19:21.527Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Linux命令基础知识"><a href="#Linux命令基础知识" class="headerlink" title="Linux命令基础知识"></a>Linux命令基础知识</h2><a id="more"></a>    <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">command</span> [-options] parameter1 parameter2 ... </span><br><span class="line">命令     选项      参数(1)    参数(2) </span><br><span class="line">说明： </span><br><span class="line">1. 任何命令中第一个输入的部分绝对是『命令(<span class="built_in">command</span>)』或者『可运行文件』 </span><br><span class="line">2. <span class="built_in">command</span> 命令的名称 </span><br><span class="line">3. [-options] 选项并不存在于实际的命令中，而加入选项配置时，通常选项前会带 - 号（比如-h）。有时候会使用选项的完整全名，此时带有 -- 符号（比如--<span class="built_in">help</span>） </span><br><span class="line">4. parameter1 parameter2.. 为依附在选项后面的参数，或者是 <span class="built_in">command</span> 的参数；  </span><br><span class="line">5. 命令, 选项, 参数等以空格来区分，但是不论空几格 ，shell 都同一视为一格；  </span><br><span class="line">6. [Enter]按键代表着一行命令的开始启动。 </span><br><span class="line">7. 命令太长的时候，可以使用反斜杠 (\) 来跳脱[Enter]符号，使命令连续到下一行。反斜杠后需要立刻接特殊字符才行。</span><br><span class="line">8. 在 Linux 中，区分大小写。</span><br></pre></td></tr></table></figure><h2 id="基本查询"><a href="#基本查询" class="headerlink" title="基本查询"></a>基本查询</h2><h3 id="查询所支持的语言"><a href="#查询所支持的语言" class="headerlink" title="查询所支持的语言"></a>查询所支持的语言</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">echo</span> <span class="variable">$LANG</span> </span><br><span class="line">zh_TW.UTF-8</span><br><span class="line"><span class="comment">#修改为英文语系 </span></span><br><span class="line">$ LANG=en_US</span><br><span class="line">$ <span class="built_in">echo</span> <span class="variable">$LANG</span> </span><br><span class="line">en_US</span><br></pre></td></tr></table></figure><h3 id="时间日历与计算器"><a href="#时间日历与计算器" class="headerlink" title="时间日历与计算器"></a>时间日历与计算器</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ date &#x2F;&#x2F;date 时间</span><br><span class="line">$ cal  &#x2F;&#x2F;cal 日历</span><br><span class="line">$ bc   &#x2F;&#x2F;计算器</span><br></pre></td></tr></table></figure><h3 id="版本信息查询"><a href="#版本信息查询" class="headerlink" title="版本信息查询"></a>版本信息查询</h3><h4 id="uname-－a"><a href="#uname-－a" class="headerlink" title="uname －a"></a>uname －a</h4><p>查看版本当前操作系统内核信息</p><h4 id="cat-proc-version"><a href="#cat-proc-version" class="headerlink" title="cat /proc/version"></a>cat /proc/version</h4><p>查看当前操作系统版本信息</p><h4 id="cat-etc-issue-或-cat-etc-redhat-release"><a href="#cat-etc-issue-或-cat-etc-redhat-release" class="headerlink" title="cat /etc/issue 或 cat /etc/redhat-release"></a>cat /etc/issue 或 cat /etc/redhat-release</h4><p>查看版本当前操作系统发行版信息</p><h4 id="cat-proc-cpuinfo"><a href="#cat-proc-cpuinfo" class="headerlink" title="cat /proc/cpuinfo"></a>cat /proc/cpuinfo</h4><p>Linux查看cpu相关信息，包括型号、主频、内核信息等</p><h4 id="getconf-LONG-BIT"><a href="#getconf-LONG-BIT" class="headerlink" title="getconf LONG_BIT"></a>getconf LONG_BIT</h4><p>Linux查看版本多少位</p><h4 id="lsb-release-a"><a href="#lsb-release-a" class="headerlink" title="lsb_release -a"></a>lsb_release -a</h4><p>CentOS 6.9版本需要安装lsb，CentOS 7.0以上直接可以使用</p><h2 id="命令信息查询"><a href="#命令信息查询" class="headerlink" title="命令信息查询"></a>命令信息查询</h2><h3 id="命令总数：-Tab-Tab"><a href="#命令总数：-Tab-Tab" class="headerlink" title="命令总数：[Tab][Tab]"></a>命令总数：[Tab][Tab]</h3><p>按下两个[Tab]按键，查看共有多少命令可以让用户使用用。</p><h3 id="man-page"><a href="#man-page" class="headerlink" title="man page"></a>man page</h3><p>有时忘记了命令全称，也可以根据不完整的名称查出来，系统有哪些跟这个名词有关的说明文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"> -f 查询以keyword开头所有相关帮助信息列表，只会找数据中的左边那个命令(或文件)的完整名称。</span><br><span class="line">$ man -f keyword</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"> -k 将说明文件里面只要含有keyword的都列出来。</span><br><span class="line">$ man -k keyword</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ whatis  [命令或者是数据]   相当于 man -f [命令或者是数据] </span><br><span class="line">$ apropos [命令或者是数据]   相当于 man -k [命令或者是数据] </span><br><span class="line">两个特殊命令要能使用，必须要有创建 whatis 数据库才行！这个数据库的创建需要以 root 的身份下达如下的命令：</span><br><span class="line">[root@ ~]<span class="comment"># makewhatis</span></span><br></pre></td></tr></table></figure><h2 id="关机-重新启动命令"><a href="#关机-重新启动命令" class="headerlink" title="关机/重新启动命令"></a>关机/重新启动命令</h2><h3 id="数据同步写入硬盘中：-sync"><a href="#数据同步写入硬盘中：-sync" class="headerlink" title="数据同步写入硬盘中： sync"></a>数据同步写入硬盘中： sync</h3><h3 id="惯用的关机命令：-shutdown"><a href="#惯用的关机命令：-shutdown" class="headerlink" title="惯用的关机命令： shutdown"></a>惯用的关机命令： shutdown</h3><h3 id="重新启动，关机：-reboot-halt-poweroff"><a href="#重新启动，关机：-reboot-halt-poweroff" class="headerlink" title="重新启动，关机： reboot, halt, poweroff"></a>重新启动，关机： reboot, halt, poweroff</h3><p>在默认的情况下， 这几个命令都会完成一样的工作！(因为halt会先呼叫shutdown，而shutdown最后会呼叫halt！)。 不过，shutdown可以依据目前已启动的服务来逐次关闭各服务后才关机；至于halt却能够在不理会目前系统状况下， 进行硬件关机的特殊功能</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@ ~]# reboot </span><br><span class="line">[root@ ~]# shutdown -h now </span><br><span class="line">[root@ ~]# poweroff -f</span><br></pre></td></tr></table></figure><h4 id="halt"><a href="#halt" class="headerlink" title="halt"></a>halt</h4><p>若系统的 runlevel 为 0 或 6 ，则Linux halt命令关闭系统，否则以 shutdown 指令（加上 -h 参数）来取代。<br>使用权限：系统管理者。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@ ~]# halt</span><br></pre></td></tr></table></figure><h4 id="切换运行等级：init"><a href="#切换运行等级：init" class="headerlink" title="切换运行等级：init"></a>切换运行等级：init</h4><p>Linux共有七种运行等级<br>run level 0：关机<br>run level 3：纯文本模式<br>run level 5：含有图形接口模式<br>run level 6：重新启动<br>可以使用init来关机</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@~]# init 0</span><br></pre></td></tr></table></figure><h2 id="文件处理命令"><a href="#文件处理命令" class="headerlink" title="文件处理命令"></a>文件处理命令</h2><h3 id="目录相关：ls、pwd、mkdir、rmdir"><a href="#目录相关：ls、pwd、mkdir、rmdir" class="headerlink" title="目录相关：ls、pwd、mkdir、rmdir"></a>目录相关：ls、pwd、mkdir、rmdir</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ls -l  &#x2F;&#x2F;列出当前目录下的文件详细信息</span><br><span class="line">pwd [-options] &#x2F;&#x2F;查看”当前工作目录“的完整路径</span><br><span class="line">mkdir [-options] 目录名 &#x2F;&#x2F;创建目录 </span><br><span class="line">rmdir [-options] 目录名   &#x2F;&#x2F;删除空目录。</span><br></pre></td></tr></table></figure><h3 id="文件复制移动：touch、mv、cp、rm"><a href="#文件复制移动：touch、mv、cp、rm" class="headerlink" title="文件复制移动：touch、mv、cp、rm"></a>文件复制移动：touch、mv、cp、rm</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">mv [选项] 源文件或目录 目标文件或目录</span><br><span class="line">//mv命令将文件重命名或将其移至一个新的目录中</span><br><span class="line">``` </span><br><span class="line"> </span><br><span class="line">```bash</span><br><span class="line">cp [选项]… [-T] 源 目的</span><br><span class="line">//cp命令将源文件复制至目标文件，或将多个源文件复制至目标目录。</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">touch [选项]… 文件…</span><br><span class="line">//touch命令可更改文档或目录的日期时间，包括存取时间和更改时间。</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">rm [选项] 文件…</span><br><span class="line">rm命令删除一个目录中的一个或多个文件或目录，如果没有使用-r选项，则rm不会删除目录。</span><br></pre></td></tr></table></figure><h3 id="取得路径的文件名与目录名：basename，dirname"><a href="#取得路径的文件名与目录名：basename，dirname" class="headerlink" title="取得路径的文件名与目录名：basename，dirname"></a>取得路径的文件名与目录名：basename，dirname</h3><h3 id="查看文件内容：more、less、head、tail、cat、tac、nl、diff"><a href="#查看文件内容：more、less、head、tail、cat、tac、nl、diff" class="headerlink" title="查看文件内容：more、less、head、tail、cat、tac、nl、diff"></a>查看文件内容：more、less、head、tail、cat、tac、nl、diff</h3><p>more：一页一页显示文件内容<br>less：less与more类似，但是可以向前翻页<br>head：查看文件时，只显示头几行<br>tail：查看文件时，只显示尾几行【-f 循环读取文件，不断刷新】<br>tac：从最后一行开始显示：tac（可以看出 tac 是 cat 的倒着写）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">cat [选项] [文件]…</span><br><span class="line">主要的三大功能：</span><br><span class="line">1.一次显示整个文件:cat filename</span><br><span class="line">2.从键盘创建一个文件:cat &gt; filename 只能创建新文件,不能编辑已有文件.</span><br><span class="line">3.将几个文件合并为一个文件:cat file1 file2 &gt; file</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">nl [选项]… [文件]…</span><br><span class="line">\\可以用来显示文件</span><br><span class="line">\\nl命令在linux系统中用来计算文件中行号。nl 可以将输出的文件内容自动的加上行号！</span><br><span class="line">\\其默认的结果与 cat -n 有点不太一样， nl 可以将行号做比较多的显示设计，包括位数与是否自动补齐 0 等等的功能。</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">diff[参数][文件1或目录1][文件2或目录2]</span><br><span class="line">\\diff命令能比较单个文件或者目录内容。如果指定比较的是文件，则只有当输入为文本文件时才有效。以逐行的方式，比较文本文件的异同处。如果指定比较的是目录的的时候，diff 命令会比较两个目录下名字相同的文本文件。列出不同的二进制文件、公共子目录和只在一个目录出现的文件。</span><br><span class="line">root@ubuntu:~# diff &#x2F;snap&#x2F; &#x2F;usr&#x2F;</span><br><span class="line">Only in &#x2F;snap&#x2F;: README</span><br><span class="line">Only in &#x2F;usr&#x2F;: bin</span><br><span class="line">Only in &#x2F;usr&#x2F;: games</span><br><span class="line">Only in &#x2F;usr&#x2F;: include</span><br><span class="line">Only in &#x2F;usr&#x2F;: lib</span><br><span class="line">Only in &#x2F;usr&#x2F;: local</span><br><span class="line">Only in &#x2F;usr&#x2F;: sbin</span><br><span class="line">Only in &#x2F;usr&#x2F;: share</span><br><span class="line">Only in &#x2F;usr&#x2F;: src</span><br></pre></td></tr></table></figure><h3 id="创建文件链接：-ln"><a href="#创建文件链接：-ln" class="headerlink" title="创建文件链接： ln"></a>创建文件链接： ln</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;ln (link)</span><br><span class="line">ln -s source dist        # 建立软连接</span><br><span class="line">ln source dist           # 建立硬连接</span><br></pre></td></tr></table></figure><p><code>软链接(symbolic link)</code>：软链接又叫符号链接，这个文件包含了另一个文件的路径名。可以是任意文件或目录，可以链接不同文件系统的文件。<br><code>硬链接(hard link)</code>：硬链接是已存在文件的另一个名字。【不允许给目录创建硬链接；只有在同一文件系统中的文件之间才能创建硬链接。】</p><p>硬链接：指通过索引节点来进行的连接。在Linux的文件系统中，保存在磁盘分区中的文件不管是什么类型都给它分配一个编号，称为索引节点号(Inode Number)。在Linux中，多个文件名指向同一索引节点是存在的。一般这种连接就是硬连接。硬连接的作用是允许一个文件拥有多个有效路径名，这样用户就可以建立硬连接到重要文件,以防止“误删”的功能。其原因如上所述，因为对应该目录的索引节点有一个以上的连接。只删除一个连接并不影响索引节点本身和其它的连接，只有当最后一个连接被删除后，文件的数据块及目录的连接才会被释放。也就是说，文件才会被真正删除。<br>软链接：文件有点类似于Windows的快捷方式。它实际上是特殊文件的一种。在符号连接中，文件实际上是一个文本文件，其中包含的有另一文件的位置信息。</p><h3 id="更改文件权限"><a href="#更改文件权限" class="headerlink" title="更改文件权限"></a>更改文件权限</h3><p>umask 档案预设权限<br>chattr 配置文件档案隐藏属性<br>lsattr 显示档案隐藏属性<br>file    观察文件类型：</p><h4 id="chgrp"><a href="#chgrp" class="headerlink" title="chgrp"></a>chgrp</h4><p>改变所属群组, /etc/group里面可查询群组</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@~]# chgrp users code.log</span><br></pre></td></tr></table></figure><h4 id="chown"><a href="#chown" class="headerlink" title="chown"></a>chown</h4><p>功能： 通过chown改变文件的拥有者和群组。在更改文件的所有者或所属群组时，可以使用用户名称和用户识别码设置。普通用户不能将自己的文件改变成其他的拥有者。其操作权限一般为管理员。<br>格式： chown [选项]… [所有者][:[组]] 文件…</p><h4 id="chmod"><a href="#chmod" class="headerlink" title="chmod"></a>chmod</h4><p>功能：用于改变文件或目录的访问权限，用它控制文件或目录的访问权限。<br>格式： chmod [-cfvR] [–help] [–version] mode file<br>数字与字符对应关系如下：<br>r=4，w=2，x=1<br>若要rwx属性则4+2+1=7<br>若要rw-属性则4+2=6；<br>若要r-x属性则4+1=7。</p><h3 id="压缩文件"><a href="#压缩文件" class="headerlink" title="压缩文件"></a>压缩文件</h3><p>压缩文件和读取压缩文件：tar，gzip，zcat</p><h3 id="磁盘占用与挂载"><a href="#磁盘占用与挂载" class="headerlink" title="磁盘占用与挂载"></a>磁盘占用与挂载</h3><h4 id="df"><a href="#df" class="headerlink" title="df"></a>df</h4><p>df命令可以获取硬盘被占用了多少空间，目前还剩下多少空间等信息，它也可以显示所有文件系统对i节点和磁盘块的使用情况。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">root@ubuntu:~# df </span><br><span class="line">Filesystem     1K-blocks    Used Available Use% Mounted on</span><br><span class="line">udev              491848       0    491848   0% &#x2F;dev</span><br><span class="line">tmpfs             100920     628    100292   1% &#x2F;run</span><br></pre></td></tr></table></figure><h4 id="du-disk-usage"><a href="#du-disk-usage" class="headerlink" title="du (disk usage)"></a>du (disk usage)</h4><p>du的英文原义为“disk usage”，含义为显示磁盘空间的使用情况，统计目录（或文件）所占磁盘空间的大小。该命令的功能是逐级进入指定目录的每一个子目录并显示该目录占用文件系统数据块（1024字节）的情况。若没有给出指定目录，则对当前目录进行统计。</p><h4 id="mount"><a href="#mount" class="headerlink" title="mount"></a>mount</h4><p>在linux系统中，可以使用mount命令挂载光盘镜像文件、移动硬盘、U盘以及Windows网络共享和UNIX NFS网络共享等</p><h3 id="文件查找"><a href="#文件查找" class="headerlink" title="文件查找"></a>文件查找</h3><h4 id="which"><a href="#which" class="headerlink" title="which"></a>which</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">which 可执行文件名称   &#x2F;&#x2F;查找路径：PATH所含目录</span><br><span class="line">&#x2F;&#x2F;which指令会在PATH变量指定的路径中，搜索某个系统命令的位置，并且返回第一个搜索结果。</span><br></pre></td></tr></table></figure><p>适用场合：查找命令/可执行文件所在的路径。有时候可能在多个路径下存在相同的命令，该命令可用于查找当前所执行的命令到底是哪一个位置处的命令。 </p><h4 id="whereis"><a href="#whereis" class="headerlink" title="whereis"></a>whereis</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">whereis [-bmsu] [BMS 目录名 -f ] 文件名 &#x2F;&#x2F;查找路径：索引数据库所含目录</span><br><span class="line">&#x2F;&#x2F;whereis命令是定位可执行文件、源代码文件、帮助文件在文件系统中的位置。这些文件的属性应属于源文件，二进制文件，或是帮助文件。</span><br><span class="line">&#x2F;&#x2F;whereis 程序还具有搜索源代码、指定备用搜索路径和搜索不寻常项的能力。</span><br></pre></td></tr></table></figure><p>原理：首先会去掉文件名中的前缀空格和以.开头的任何字符，然后在数据库（var/lib/slocate/slocate.db）中查找与经过处理后的文件名相匹配的源文件，二进制文件，或是帮助文件。<br>使用之前可以使用updatedb命令手动更新数据库。<br>适用场合：定位可执行文件、源代码文件、帮助文件在文件系统中的位置</p><h4 id="locate"><a href="#locate" class="headerlink" title="locate"></a>locate</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">locate [选择参数] [样式]  &#x2F;&#x2F;查找路径：索引数据库所含目录</span><br><span class="line">locate指令和find找寻档案的功能类似，但locate是透过update程序将硬盘中的所有档案和目录资料先建立一个索引数据库，在执行loacte时直接找该索引，查询速度会较快，索引数据库一般是由操作系统管理，但也可以直接下达update强迫系统立即修改索引数据库。</span><br></pre></td></tr></table></figure><p>原理：默认情况下(文件名中不包含通配符<em>时)，locate会给出所有与</em>filename*相匹配的文件的路径。<br>适用场合：没有文件类型性质的模糊查找</p><h4 id="find"><a href="#find" class="headerlink" title="find"></a>find</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">find pathname -options [-print -exec -ok …]  &#x2F;&#x2F;查找路径：当前目录&#x2F;指定目录</span><br></pre></td></tr></table></figure><p>适用场合：能用which、whereis和locate的时候尽量不要用find.<br>功能： 用于在文件树种查找文件，并作出相应的处理<br>原理：遍历当前工作目录及其子目录<br>参数：</p><p>1.使用name选项，可以使用某种文件名模式来匹配文件，记住要用引号将文件名模式引起来。<br>2.按照文件权限模式用-perm选项,按文件权限模式来查找文件的话。最好使用八进制的权限表示法。<br>3.如果希望按照更改时间来查找文件，可以使用mtime,atime或ctime选项。<br>4.使用type选项,根据不同的文件类型进行查找，如d(目录)、l(链接)</p><p>find命令之exec<br>-exec 参数后面跟的是command命令，它的终止是以;为结束标志的，所以这句命令后面的分号是不可缺少的，考虑到各个系统中分号会有不同的意义，所以前面加反斜杠。{} 花括号代表前面find查找出来的文件名。例如：find . -type f -exec ls -l {} ;find命令匹配到了当前目录下的所有普通文件，并在-exec选项中使用ls -l命令将它们列出。<br>find命令之xargs<br>find命令把匹配到的文件传递给xargs命令，而xargs命令每次只获取一部分文件而不是全部，不像-exec选项那样。这样它可以先处理最先获取的一部分文件，然后是下一批，并如此继续下去。在有些系统中，使用-exec选项会为处理每一个匹配到的文件而发起一个相应的进程，并非将匹配到的文件全部作为参数一次执行；这样在有些情况下就会出现进程过多，系统性能下降的问题，因而效率不高； 而使用xargs命令则只有一个进程。另外，在使用xargs命令时，究竟是一次获取所有的参数，还是分批取得参数，以及每一次获取参数的数目都会根据该命令的选项及系统内核中相应的可调参数来确定。</p><h2 id="网络管理命令"><a href="#网络管理命令" class="headerlink" title="网络管理命令"></a>网络管理命令</h2><p><a href="https://www.runoob.com/w3cnote/linux-check-port-usage.html">Linux 查看端口占用情况</a></p><h3 id="ip"><a href="#ip" class="headerlink" title="ip"></a>ip</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ip [-option] [动作] [命令]</span><br></pre></td></tr></table></figure><p>option ：设定的参数，主要有-s显示出该设备的统计数据(statistics)，例如总接受封包数等；<br>动作：就是是可以针对哪些网络参数进行动作，包括有：</p><p>link ：关于设备 (device) 的相关设定，包括 MTU, MAC 地址等等<br>addr/address ：关于额外的 IP 设定，例如多 IP 的实现等等；<br>route ：与路由有关的相关设定</p><h3 id="ifconfig"><a href="#ifconfig" class="headerlink" title="ifconfig"></a>ifconfig</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ifconfig [网络设备] [参数]</span><br></pre></td></tr></table></figure><p>ifconfig 命令用来查看和配置网络设备。当网络环境发生改变时可通过此命令对网络进行相应的配置。</p><h3 id="dig"><a href="#dig" class="headerlink" title="dig"></a>dig</h3><p>dig命令是一个功能强大的DNS查询命令。</p><p>一般格式：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dig [@global-server] [domain] [q-type] [q-class] &#123;q-opt&#125; &#123;d-opt&#125;</span><br></pre></td></tr></table></figure><p>参数说明：<br>global-server：默认是以/etc/resolv.conf作为DNS查询的主机，这里可以填入其它DNS主机IP。<br>domain：要查询的域名。<br>q-type：查询记录的类型，例如a、any、mx、ns、soa、hinfo、axfr、txt等，默认查询a。<br>q-class：查询的类别，相当于nslookup中的set class。默认值为in（Internet）。<br>q-opt：查询选项，可以有好几种方式，比如：-f file为通过批处理文件解析多个地址；-p port指定另一个端口（缺省的DNS端口为53），等等。<br>d-opt：dig特有的选项。使用时要在参数前加上一个“+”号。</p><p>d-opt常用选项：<br>+vc：使用TCP协议查询。<br>+time=###：设置超时时间。</p><h3 id="netstat"><a href="#netstat" class="headerlink" title="netstat"></a>netstat</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">netstat [-acCeFghilMnNoprstuvVwx][-A&lt;网络类型&gt;][--ip]</span><br></pre></td></tr></table></figure><p>Netstat 命令用于显示各种网络相关信息，如网络连接，路由表，<strong>接口状态 (Interface Statistics)</strong>，masquerade 连接，多播成员 (Multicast Memberships) 等等。<br><a href="https://www.runoob.com/linux/linux-comm-netstat.html">netstat命令(菜鸟教程)</a></p><h3 id="ss-Socket-Statistics"><a href="#ss-Socket-Statistics" class="headerlink" title="ss(Socket Statistics)"></a>ss(Socket Statistics)</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ss [参数]</span><br><span class="line">ss [参数] [过滤]</span><br></pre></td></tr></table></figure><p>功能： ss命令可以用来获取 socket统计信息，此命令输出的结果类似于 netstat输出的内容，但它能显示更多更详细的 TCP连接状态的信息，且比 netstat 更快速高效。它使用了 TCP协议栈中 tcp_diag（是一个用于分析统计的模块），能直接从获得第一手内核信息，这就使得 ss命令快捷高效。在没有 tcp_diag，ss也可以正常运行。<br><a href="https://blog.csdn.net/jiajiren11/article/details/80887528">ss命令的参数及使用详解</a></p><h3 id="ping"><a href="#ping" class="headerlink" title="ping"></a>ping</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ping [参数] [主机名或IP地址]</span><br></pre></td></tr></table></figure><p>ping命令用于：确定网络和各外部主机的状态；跟踪和隔离硬件和软件问题；测试、评估和管理网络。如果主机正在运行并连在网上，它就对回送信号进行响应。每个回送信号请求包含一个网际协议（IP）和 ICMP 头，后面紧跟一个 tim 结构，以及来填写这个信息包的足够的字节。缺省情况是连续发送回送信号请求直到接收到中断信号（Ctrl-C）。<br>ping 命令每秒发送一个数据报并且为每个接收到的响应打印一行输出。ping 命令计算信号往返时间和(信息)包丢失情况的统计信息，并且在完成之后显示一个简要总结。ping 命令在程序超时或当接收到 SIGINT 信号时结束。Host 参数或者是一个有效的主机名或者是因特网地址。</p><h3 id="tracertroute"><a href="#tracertroute" class="headerlink" title="tracertroute"></a>tracertroute</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">traceroute[参数][主机]</span><br><span class="line">&#x2F;&#x2F;具体参数格式：</span><br><span class="line">traceroute [-dFlnrvx][-f&lt;存活数值&gt;][-g&lt;网关&gt;…][-i&lt;网络界面&gt;][-m&lt;存活数值&gt;][-p&lt;通信端口&gt;][-s&lt;来源地址&gt;][-t&lt;服务类型&gt;][-w&lt;超时秒数&gt;][主机名称或IP地址][数据包大小]</span><br></pre></td></tr></table></figure><p>traceroute指令让你追踪网络数据包的路由途径，预设数据包大小是40Bytes，用户可另行设置。</p><h3 id="route"><a href="#route" class="headerlink" title="route"></a>route</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">route [-f] [-p] [Command [Destination] [mask Netmask] [Gateway] [metric Metric]] [if Interface]]</span><br></pre></td></tr></table></figure><p>功能： Route命令是用于操作基于内核ip路由表，它的主要作用是创建一个静态路由让指定一个主机或者一个网络通过一个网络接口，如eth0。当使用”add”或者”del”参数时，路由表被修改，如果没有参数，则显示路由表当前的内容。</p><p>Linux系统的route命令用于显示和操作IP路由表。要实现两个不同的子网之间的通信，需要一台连接两个网络的路由器，或者同时位于两个网络的网关来实现。<br>在Linux系统中，设置路由通常是为了解决以下问题：该Linux系统在一个局域网中，局域网中有一个网关，能够让机器访问Internet，那么就需要将这台机器的IP地址设置为Linux机器的默认路由。要注意的是，直接在命令行下执行route命令来添加路由，不会永久保存，当网卡重启或者机器重启之后，该路由就失效了；可以在/etc/rc.local中添加route命令来保证该路由设置永久有效。</p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p><a href="https://www.ibm.com/developerworks/cn/linux/l-cn-hardandsymb-links/index.html">理解 Linux 的硬链接与软链接</a><br>鸟哥的linux私房菜<br><a href="https://blog.csdn.net/u010625000/article/details/44455023">Linux下4个查找命令which、whereis、locate、find的总结</a><br><a href="https://www.runoob.com/linux/linux-command-manual.html">Linux 命令大全</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Linux命令基础知识&quot;&gt;&lt;a href=&quot;#Linux命令基础知识&quot; class=&quot;headerlink&quot; title=&quot;Linux命令基础知识&quot;&gt;&lt;/a&gt;Linux命令基础知识&lt;/h2&gt;
    
    </summary>
    
    
      <category term="Linux" scheme="https://stemha.github.io/categories/Linux/"/>
    
    
      <category term="Linux" scheme="https://stemha.github.io/tags/Linux/"/>
    
      <category term="命令" scheme="https://stemha.github.io/tags/%E5%91%BD%E4%BB%A4/"/>
    
  </entry>
  
  <entry>
    <title>《别闹了费曼先生》读书笔记</title>
    <link href="https://stemha.github.io/2020/04/18/%E3%80%8A%E5%88%AB%E9%97%B9%E4%BA%86%E8%B4%B9%E6%9B%BC%E5%85%88%E7%94%9F%E3%80%8B%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    <id>https://stemha.github.io/2020/04/18/%E3%80%8A%E5%88%AB%E9%97%B9%E4%BA%86%E8%B4%B9%E6%9B%BC%E5%85%88%E7%94%9F%E3%80%8B%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/</id>
    <published>2020-04-18T12:48:23.000Z</published>
    <updated>2020-08-10T04:19:21.661Z</updated>
    
    <content type="html"><![CDATA[<h2 id="当科学大师碰上菜鸟"><a href="#当科学大师碰上菜鸟" class="headerlink" title="当科学大师碰上菜鸟"></a>当科学大师碰上菜鸟</h2><a id="more"></a><blockquote><p>报告时间终于到了。我面前坐了这些科学大师，全在等我开口讲话！我生平第一次学术报告，却碰上这样的听众！我的意思是说，他们会问很多难题，我将会大大地出丑了！我还清楚记得，从牛皮纸袋抽出讲稿时，双手不住地发抖。<br>但奇迹出现了——事实上我很幸运，类似的奇迹在我一生中一再发生——只要我开始思考物理、必须全神贯注于要说明的问题上，我的脑袋中就再没有其他杂念，完全不会紧张。因此当我开始报告以后，我根本不知道听众是谁了；我只不过在说明这些物理概念。事情就那么简单！</p></blockquote><h2 id="向数学家挑战"><a href="#向数学家挑战" class="headerlink" title="向数学家挑战"></a>向数学家挑战</h2><blockquote><p>我向他们挑战：“我跟你们打赌，随便你提出一个定理——只要你用我听得懂的方式告诉我，它假设些什么、定理是什么等等——我立刻可以告诉你，它是对的还是错的！”</p></blockquote><blockquote><p>其实，我也并不是随便乱猜的。我有一套方法，甚至到了今天，当别人对我说明一些什么，而我努力要弄明白时，我还在用这些方法：不断地举实例。<br>譬如说，那些念数学的提出一个听起来很了不得的定理，大家都非常兴奋。当他们告诉我这个定理的各项条件时，我便一边构思符合这些条件的情况。当他们说到数学上的“集”时，我便想到一个球，两个不相容的集便是两个球。然后视情况而定，球可能具有不同的颜色、长出头发或发生其他千奇百怪的状况。最后，当他们提出那宝贝定理时，我只要想到那跟我长满头发的绿球不吻合时，便宣布：“不对！”</p></blockquote><blockquote><p>看怎样用些有趣、近代的数学观念来教数学。原先的目的，是要使那些觉得数学枯燥无味的学生提高兴趣。</p></blockquote><h2 id="费曼教授"><a href="#费曼教授" class="headerlink" title="费曼教授"></a>费曼教授</h2><blockquote><p>20 世纪40 年代，我待在普林斯顿的期间，亲眼看到高等研究院内那些卓越心灵的下场。他们都具备了聪明绝顶的头脑，因此特别被选中，来到坐落在森林旁边的漂亮房子里，整天悠哉游哉地闲坐——不用教书，没有任何约束或负担。但等过了一段日子，他们想不出什么新东西来，每个人心里一定开始感到内疚或沮丧，更加担心提不出新想法。可是一切还是如旧，仍然没有灵感。<br>会发生这种情况，完全是因为那里缺乏真正的活动和挑战：他们没有跟做实验的学者接触，也不必思索如何回答学生提出的问题，什么都没有！</p></blockquote><blockquote><p>在任何思考过程中，当一切进行顺利、灵感源源不绝时，教书确实是一种妨碍，十分讨厌。但有更多的时候是脑袋空空的，如果既想不出什么、又没做什么，那真会教人疯狂！你甚至不能说：“我在教书呀！”。</p></blockquote><h2 id="不敢面对问题到弄明白"><a href="#不敢面对问题到弄明白" class="headerlink" title="不敢面对问题到弄明白"></a>不敢面对问题到弄明白</h2><blockquote><p>在罗彻斯特举行了一个会议——一年一度的罗彻斯特研讨会（Rochester Conference）。我还是事事落于人后，而李政道已在发表关于宇称不守恒的论文。他和杨振宁作出宇称并不守恒的结论，现在他正提出解释这现象的理论。<br>会议期间，我住在我位于西瑞桥斯（Syracuse）的妹妹家。我把论文带回家跟她说：“我搞不懂李政道和杨振宁说的东西，这全都那么复杂！”“不，”她说，“你的意思并不是说你无法弄懂它，而是你没有发明它。你没有用你的方法，从听到线索开始做起，把它推演出来。你应该做的是想象自己重新在当学生，把这篇论文带到楼上去，逐字逐句地读，检查每一条方程式。然后你就什么都弄懂了。”<br>我接受了她的建议，把那东西从头看到尾，发现它真的很明显简单。我只是一直害怕去读它，总觉得它太深奥。</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;当科学大师碰上菜鸟&quot;&gt;&lt;a href=&quot;#当科学大师碰上菜鸟&quot; class=&quot;headerlink&quot; title=&quot;当科学大师碰上菜鸟&quot;&gt;&lt;/a&gt;当科学大师碰上菜鸟&lt;/h2&gt;
    
    </summary>
    
    
      <category term="读书笔记" scheme="https://stemha.github.io/categories/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="费曼" scheme="https://stemha.github.io/tags/%E8%B4%B9%E6%9B%BC/"/>
    
      <category term="诺贝尔奖" scheme="https://stemha.github.io/tags/%E8%AF%BA%E8%B4%9D%E5%B0%94%E5%A5%96/"/>
    
      <category term="传记" scheme="https://stemha.github.io/tags/%E4%BC%A0%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>哈希表（散列表）详解</title>
    <link href="https://stemha.github.io/2020/04/14/%E5%93%88%E5%B8%8C%E8%A1%A8%EF%BC%88%E6%95%A3%E5%88%97%E8%A1%A8%EF%BC%89%E8%AF%A6%E8%A7%A3/"/>
    <id>https://stemha.github.io/2020/04/14/%E5%93%88%E5%B8%8C%E8%A1%A8%EF%BC%88%E6%95%A3%E5%88%97%E8%A1%A8%EF%BC%89%E8%AF%A6%E8%A7%A3/</id>
    <published>2020-04-14T14:34:02.000Z</published>
    <updated>2020-08-10T04:19:21.672Z</updated>
    
    <content type="html"><![CDATA[<h2 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a><strong>基本概念</strong></h2><p><code>散列方法（hashing）</code>：一种将字符组成的字符串转换为固定长度（一般是更短长度）的数值或索引值的方法。以最基本的向量作为底层支撑结构，通过适当的散列函数在<u>词条的关键码与向量单元的秩之间建立起映射关系</u>。<br><code>散列表（hashtable）</code>：逻辑上由一些列可存放词条（或者其引用）的单元（称作<code>桶（bucket）</code>或<code>桶单元</code>）组成。各桶单元按照其逻辑次序在物理上连续排列。通常直接使用数组进行排列，这时散列表也称作<code>桶数组（bucket array）</code><br><code>地址空间（address space）</code>：如果桶数组的容量为R，则其中合法秩的区间[0,r)也称作为地址空间。</p><a id="more"></a><p><code>散列函数（hash function）</code>：用来描述散列方法，是从关键码空间到桶数组地址空间的函数。比如下面的hash()：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">hash</span>() : key -&gt; <span class="built_in">hash</span>(key)</span><br></pre></td></tr></table></figure><p><code>key的散列地址（hashing address）</code>：也就是上面的hash(key) 。</p><p><code>完美散列（perfect hashing）</code>：在时间和空间性能方面均达到最优的散列，也就是没有空余，没有重复的散列。</p><p><code>装填因子（load factor）</code>：散列表中非空桶的数目与桶单元总数的比值。是散列表的空间利用率度量方法。</p><p><code>散列冲突（collision）</code>：关键码不同的词条映射到同一个散列地址的情况。</p><p><code>词条的聚集（clustering）</code>：词条集中到散列表内少数若干桶中（或附近）的现象。</p><p>综上散列表的基本构思概括为：</p><blockquote><p>开辟物理地址连续的桶数组hba[],借助散列函数hash(),将词条关键码key映射为桶地址hash(key),从而快速确定待操作的词条的位置。</p></blockquote><h2 id="散列函数"><a href="#散列函数" class="headerlink" title="散列函数"></a><strong>散列函数</strong></h2><p>好的散列函数应该具备的条件：</p><ul><li>确定性 ：也就是说词条E的映射地址hash(E.key)必须完全取决于E.key。</li><li>简单性 ：映射过程不能过于复杂</li><li>所有关键码经过映射后应该尽量覆盖整个地址空间。也就是说hash()最好是满射。</li><li>均匀性 ：最重要的原则，关键码映射到各个桶的概率是同等的，应该尽量为1/R ，R为散列表长度或容量。</li></ul><h3 id="直接定址法"><a href="#直接定址法" class="headerlink" title="直接定址法"></a><strong>直接定址法</strong></h3><p>直接定址法：关键码就可以直接用作为散列地址</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">hash</span>(key)=key</span><br></pre></td></tr></table></figure><h3 id="除余法（devision-method）"><a href="#除余法（devision-method）" class="headerlink" title="除余法（devision method）"></a><strong>除余法（devision method）</strong></h3><p>除余法：选择一个适当的正整数R,用R去除关键码去除关键码,余数作为 散列地址.这个方法的关键是选取适当的R。一般R为素数，采用素数表长是是降低聚集发生概率的捷径。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">hash</span>(key)=key mod R  //R为散列表长度或容量。一般R为素数。</span><br></pre></td></tr></table></figure><p>缺点：残留有某种连续性，比如相邻关键码所对应的散列的地址，总是彼此相邻。</p><h3 id="MAD法（multiply-add-divide-method）乘加除法"><a href="#MAD法（multiply-add-divide-method）乘加除法" class="headerlink" title="MAD法（multiply-add-divide method）乘加除法"></a><strong>MAD法（multiply-add-divide method）乘加除法</strong></h3><p>乘加除法：需要依次执行乘法，加法，和除法运算得名。<br>解决的问题：用来克服除余法的连续性缺陷。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">hash</span>(key)=(a * key + b)mod R  //a&gt;0，b&gt;0，且(a mod R) !=0</span><br><span class="line">//R为散列表长度或容量。一般R为素数。</span><br></pre></td></tr></table></figure><h3 id="数字分析法（selecting-digits）"><a href="#数字分析法（selecting-digits）" class="headerlink" title="数字分析法（selecting digits）"></a><strong>数字分析法（selecting digits）</strong></h3><p>数字分析法：从关键码key中特定进制的展开中抽出特定的若干位，构成一个整型地址。对关键码的各位进行分析（多种方法），丢下分布不均匀的位，留下均匀的位作为地址。<br>数字分析法举例：</p><ul><li>平方取中法（mid-square）</li><li>折叠法（folding）<ul><li>一般折叠</li><li>往复折返式折叠</li></ul></li><li>异或法（xor）<ul><li>一般异或</li><li>往复折返式异或</li></ul></li></ul><h3 id="伪随机数法"><a href="#伪随机数法" class="headerlink" title="伪随机数法"></a><strong>伪随机数法</strong></h3><p>越是随机，越是没有规律的就是好的散列函数。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">hash</span>(key)=rand(key) mod R  //R为散列表长度或容量。</span><br></pre></td></tr></table></figure><h2 id="冲突及其排解"><a href="#冲突及其排解" class="headerlink" title="冲突及其排解"></a><strong>冲突及其排解</strong></h2><h3 id="开散列策略-封闭定址"><a href="#开散列策略-封闭定址" class="headerlink" title="开散列策略/封闭定址"></a><strong>开散列策略/封闭定址</strong></h3><p>开散列（open hashing）或封闭定址（closed addressing）：</p><ul><li>开放基本的散列表结构，引入次级关联结构。</li><li>散列表中的地址只对特定的词条开放（每个桶可以只能能存放特定的一组词条）。</li></ul><h4 id="多槽位法（multiple-slots）"><a href="#多槽位法（multiple-slots）" class="headerlink" title="多槽位法（multiple slots）"></a><strong>多槽位法（multiple slots）</strong></h4><p>多槽位法：将每个桶细分为更小的称作<code>槽位（slot）</code>的若干单元，每一组槽位可以组织为向量或列表。//类似于二维数组</p><h4 id="独立链法（separate-chaining-（拉链法）"><a href="#独立链法（separate-chaining-（拉链法）" class="headerlink" title="独立链法（separate chaining)（拉链法）"></a><strong>独立链法（separate chaining)（拉链法）</strong></h4><p>拉链法：某些哈希地址可以被多个关键字值共享，这样可以针对每个哈希地址建立一个单链表。//引入链表<br>先计算哈希地址，然后搜索该地址的单链表。</p><h4 id="公共溢出区法（overflow）"><a href="#公共溢出区法（overflow）" class="headerlink" title="公共溢出区法（overflow）"></a><strong>公共溢出区法（overflow）</strong></h4><p>在原有散列表hashA之外再设置一个公共溢出区（散列表hashB），如果抽入词条发生冲突，就将该词条转存至公共溢出区（散列表hashB）中。 //引入新的散列表<br>可以说是一种递归形式的散列表。</p><h3 id="闭散列策略-开放定址"><a href="#闭散列策略-开放定址" class="headerlink" title="闭散列策略/开放定址"></a><strong>闭散列策略/开放定址</strong></h3><p>闭散列（open hashing）或开放定址（closed addressing）：</p><ul><li>仅仅依靠基本的散列表结构，就地排解冲突。</li><li>散列表中的地址对所有的词条开放（每个桶可以都有可能存放任一词条）。</li><li>一个桶冲突了，只允许在散列表内部为其寻找另一空桶。</li></ul><h4 id="线性试探法（linear-probing）"><a href="#线性试探法（linear-probing）" class="headerlink" title="线性试探法（linear probing）"></a><strong>线性试探法（linear probing）</strong></h4><p>线性试探法：冲突发生时，顺序查看表中下一单元，直到找出一个空单元或查遍全表。<br>被尝试的桶依次为：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[(<span class="built_in">hash</span>(key) + i)mod R ] ,i=1,2,3,...</span><br></pre></td></tr></table></figure><h4 id="平法试探法（二次探测法）"><a href="#平法试探法（二次探测法）" class="headerlink" title="平法试探法（二次探测法）"></a><strong>平法试探法（二次探测法）</strong></h4><p>被尝试的桶依次为：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[(<span class="built_in">hash</span>(key) + i^2)mod R ] ,i=1,2,3,...</span><br></pre></td></tr></table></figure><h4 id="伪随机试探法"><a href="#伪随机试探法" class="headerlink" title="伪随机试探法"></a><strong>伪随机试探法</strong></h4><p>被尝试的桶依次为：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[rand(i)mod R ] ,rand(i)为系统定义的第i个随机数。</span><br></pre></td></tr></table></figure><h4 id="再散列法（rehashing）"><a href="#再散列法（rehashing）" class="headerlink" title="再散列法（rehashing）"></a><strong>再散列法（rehashing）</strong></h4><p>再散列法：使用哈希函数去散列一个输入的时候，如果输出是同一个散列地址就再次散列，直至不发生冲突为止。<br>缺点：每次冲突都要重新散列，计算时间增加。<br>被尝试的桶依次为：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">//hash2为二级散列函数</span><br><span class="line">[(<span class="built_in">hash</span>(key) + i*hash2(key) ] ,i=1,2,3,...</span><br></pre></td></tr></table></figure><h2 id="本文许可证"><a href="#本文许可证" class="headerlink" title="本文许可证"></a>本文许可证</h2><p>本文遵循 <a href="https://github.com/huihut/interview/blob/master/LICENSE">CC BY-NC-SA 4.0</a>（署名 - 非商业性使用 - 相同方式共享） 协议，转载请注明出处，不得用于商业目的。<br><a href="LICENSE"><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9pLmNyZWF0aXZlY29tbW9ucy5vcmcvbC9ieS1uYy1zYS80LjAvODh4MzEucG5n?x-oss-process=image/format,png" alt="CC BY-NC-SA 4.0"></a></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;基本概念&quot;&gt;&lt;a href=&quot;#基本概念&quot; class=&quot;headerlink&quot; title=&quot;基本概念&quot;&gt;&lt;/a&gt;&lt;strong&gt;基本概念&lt;/strong&gt;&lt;/h2&gt;&lt;p&gt;&lt;code&gt;散列方法（hashing）&lt;/code&gt;：一种将字符组成的字符串转换为固定长度（一般是更短长度）的数值或索引值的方法。以最基本的向量作为底层支撑结构，通过适当的散列函数在&lt;u&gt;词条的关键码与向量单元的秩之间建立起映射关系&lt;/u&gt;。&lt;br&gt;&lt;code&gt;散列表（hashtable）&lt;/code&gt;：逻辑上由一些列可存放词条（或者其引用）的单元（称作&lt;code&gt;桶（bucket）&lt;/code&gt;或&lt;code&gt;桶单元&lt;/code&gt;）组成。各桶单元按照其逻辑次序在物理上连续排列。通常直接使用数组进行排列，这时散列表也称作&lt;code&gt;桶数组（bucket array）&lt;/code&gt;&lt;br&gt;&lt;code&gt;地址空间（address space）&lt;/code&gt;：如果桶数组的容量为R，则其中合法秩的区间[0,r)也称作为地址空间。&lt;/p&gt;
    
    </summary>
    
    
      <category term="数据结构" scheme="https://stemha.github.io/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
      <category term="散列表" scheme="https://stemha.github.io/tags/%E6%95%A3%E5%88%97%E8%A1%A8/"/>
    
  </entry>
  
  <entry>
    <title>Linux系统目录结构</title>
    <link href="https://stemha.github.io/2020/04/14/Linux%E7%B3%BB%E7%BB%9F%E7%9B%AE%E5%BD%95%E7%BB%93%E6%9E%84/"/>
    <id>https://stemha.github.io/2020/04/14/Linux%E7%B3%BB%E7%BB%9F%E7%9B%AE%E5%BD%95%E7%BB%93%E6%9E%84/</id>
    <published>2020-04-13T16:04:52.000Z</published>
    <updated>2020-08-10T04:19:21.617Z</updated>
    
    <content type="html"><![CDATA[<h2 id="bin-binary"><a href="#bin-binary" class="headerlink" title="/bin (binary)"></a>/bin (binary)</h2><p>目录存放着最经常使用的命令</p><a id="more"></a><h2 id="boot"><a href="#boot" class="headerlink" title="/boot"></a>/boot</h2><p>这里存放的是启动Linux时使用的一些核心文件，包括一些连接文件以及镜像文件。</p><p>包括Linux内核文件，以及开机菜单与开机所需的配置文件</p><p>linux kernel常用的文件名为vmlinux</p><h2 id="dev-device"><a href="#dev-device" class="headerlink" title="/dev (device)"></a>/dev (device)</h2><p>该目录下存放的是Linux的外部设备，在Linux中访问设备的方式和访问文件的方式是相同的。</p><h2 id="etc-Editable-Text-Configuration"><a href="#etc-Editable-Text-Configuration" class="headerlink" title="/etc (Editable Text Configuration)"></a>/etc (Editable Text Configuration)</h2><p>可配置文件<br>存放所有的系统管理所需要的配置文件和子目录。</p><h3 id="etc-init-d"><a href="#etc-init-d" class="headerlink" title="/etc/init.d"></a>/etc/init.d</h3><p>所有服务的默认启动脚本都是放置在这个目录内</p><h3 id="etc-xinetd-d"><a href="#etc-xinetd-d" class="headerlink" title="/etc/xinetd.d"></a>/etc/xinetd.d</h3><p>所谓的super daemon管理的各项服务的配置文件目录</p><h3 id="etc-X11"><a href="#etc-X11" class="headerlink" title="/etc/X11"></a>/etc/X11</h3><p>与X Windows有关的各种配置文件都在这里</p><h3 id="etc-securetty"><a href="#etc-securetty" class="headerlink" title="/etc/securetty"></a>/etc/securetty</h3><p>只有/etc/securetty中登记的终端才允许root用户登录，如果不存在这个文件，则root可以在任何终端上登录</p><p>这个终端指tty1之类的</p><h3 id="etc-passwd"><a href="#etc-passwd" class="headerlink" title="/etc/passwd"></a>/etc/passwd</h3><p>保存的就是系统中所有的用户和用户的主要信息</p><h3 id="etc-shadow"><a href="#etc-shadow" class="headerlink" title="/etc/shadow"></a>/etc/shadow</h3><p>/etc/passwd是用户数据库，其中的域给出了用户名、加密口令和用户的其他信息. /etc/shadow是在安装了影子(shadow)口令软件的系统上的影子口令文件。影子口令文件将/etc/passwd 文件中的加密口令移动到/etc/shadow中，而后者只对超级用户root可读。这使破译口令更困难，以此增加系统的安全性。</p><h2 id="home-home-directory"><a href="#home-home-directory" class="headerlink" title="/home (home directory)"></a>/home (home directory)</h2><p>用户的主目录，在Linux中，每个用户都有一个自己的目录，一般该目录名是以用户的账号命名的</p><p>系统默认的用户主文件夹</p><p>比较重要的是 主文件夹有两者代号</p><ul><li><p>~ 代表目前这个用户的主文件夹</p></li><li><p>~dmtsai 代表dmtsai的主文件夹</p></li></ul><h2 id="lib"><a href="#lib" class="headerlink" title="/lib"></a>/lib</h2><p>这个目录里存放着系统最基本的动态连接共享库，其作用类似于Windows里的DLL文件。几乎所有的应用程序都需要用到这些共享库。</p><p>放置的是开机会用到的函数库，以及在/bin或/sbin下面的命令会调用的函数库而已</p><p>尤其重要的是/lib/modules/这个目录</p><p>放置内核相关的模块（驱动程序）</p><h2 id="lost-found"><a href="#lost-found" class="headerlink" title="/lost+found"></a>/lost+found</h2><p>这个目录一般情况下是空的，当系统非法关机后，这里就存放了一些文件。</p><p>这个目录是使用标准的ext2/ext3文件系统格式才会产生的目录</p><h2 id="media"><a href="#media" class="headerlink" title="/media"></a>/media</h2><p>linux系统会自动识别一些设备，例如U盘、光驱等等，当识别后，linux会把识别的设备挂载到这个目录下。</p><p>包括软盘，光盘，DVD等设备都暂时挂载于此</p><h2 id="mnt"><a href="#mnt" class="headerlink" title="/mnt"></a>/mnt</h2><p>系统提供该目录是为了让用户临时挂载别的文件系统的，或者说是额外的设备</p><p>比较早的时候，这个目录的用途与/media相同。只是有了/media之后这个目录就暂时用来挂载用了</p><h2 id="opt"><a href="#opt" class="headerlink" title="/opt"></a>/opt</h2><p> 这是给主机额外安装软件所摆放的目录。比如你安装一个ORACLE数据库则就可以放到这个目录下。默认是空的。</p><p>给第三方软件放置的目录</p><h2 id="proc-process"><a href="#proc-process" class="headerlink" title="/proc (process)"></a>/proc (process)</h2><p>这个目录本身是一个虚拟的文件系统，放置的数据都是在内存中:例如，系统内核，进程，外部设备的状态及网络状态等</p><p>目录是一个虚拟的目录，它是系统内存的映射，我们可以通过直接访问这个目录来获取系统信息</p><p>这个目录的内容不在硬盘上而是在内存里，本身不占用任何硬盘空间，我们也可以直接修改里面的某些文件</p><h2 id="root"><a href="#root" class="headerlink" title="/root"></a>/root</h2><p>该目录为系统管理员，也称作超级权限者的用户主目录。</p><h2 id="run"><a href="#run" class="headerlink" title="/run"></a>/run</h2><p>是一个临时文件系统，存储系统启动以来的信息。当系统重启时，这个目录下的文件应该被删掉或清除。如果你的系统上有 /var/run 目录，应该让它指向 run。</p><h2 id="sbin"><a href="#sbin" class="headerlink" title="/sbin"></a>/sbin</h2><p>s就是Super User的意思，这里存放的是系统管理员使用的系统管理程序。</p><h2 id="selinux"><a href="#selinux" class="headerlink" title="/selinux"></a>/selinux</h2><p>这个目录是Redhat/CentOS所特有的目录，Selinux是一个安全机制，类似于windows的防火墙，但是这套机制比较复杂，这个目录就是存放selinux相关的文件的。</p><p>这个目录的内容数据也是在内存中的信息，同样不会占用任何的硬盘容量</p><p>Secure Enhance Linux的执行目录</p><h2 id="srv-service"><a href="#srv-service" class="headerlink" title="/srv (service)"></a>/srv (service)</h2><p> 该目录存放一些服务启动之后需要提取的数据。</p><p>一些网络服务启动之后，这些服务所取用的数据目录</p><p>存放服务启动后需要提取的数据（不用服务器就是空）</p><h2 id="sys"><a href="#sys" class="headerlink" title="/sys"></a>/sys</h2><p> 这是linux2.6内核的一个很大的变化。该目录下安装了2.6内核中新出现的一个文件系统 sysfs 。</p><p>sysfs文件系统集成了下面3种文件系统的信息：针对进程信息的proc文件系统、针对设备的devfs文件系统以及针对伪终端的devpts文件系统。<br>该文件系统是内核设备树的一个直观反映。</p><p>当一个内核对象被创建的时候，对应的文件和目录也在内核对象子系统中被创建。</p><p>这个目录与/proc目录类似，也是一个虚拟的文件系统，主要也是记录与内核相关的信息。包括目前已经加载的内核模块与内核检测到的硬件设备信息等。</p><p>这个目录同样不占用硬盘容量。</p><h2 id="tmp"><a href="#tmp" class="headerlink" title="/tmp"></a>/tmp</h2><p>这个目录是用来存放一些临时文件的。</p><h2 id="usr-UNIX-Software-Resource-而不是user"><a href="#usr-UNIX-Software-Resource-而不是user" class="headerlink" title="/usr (UNIX Software Resource,而不是user)"></a>/usr (UNIX Software Resource,而不是user)</h2><p>是UNIX 操作系统软件资源所放置的目录，而不是用户的数据.<br>这是一个非常重要的目录，用户的很多应用程序和文件都放在这个目录下，类似于windows下的program files目录。<br>注意事项：FHS建议所有软件开发者将他们的数据合理地放置到这个目录下的子目录，而不要自行新建软件自己独立的目录<br>有点像windows系统中C:\Windows\和C:\Program files\这两个目录的综合体</p><h3 id="usr-bin"><a href="#usr-bin" class="headerlink" title="/usr/bin"></a>/usr/bin</h3><p>系统用户使用的应用程序。</p><h3 id="usr-sbin"><a href="#usr-sbin" class="headerlink" title="/usr/sbin"></a>/usr/sbin</h3><p>超级用户使用的比较高级的管理程序和系统守护程序</p><h3 id="usr-src"><a href="#usr-src" class="headerlink" title="/usr/src"></a>/usr/src</h3><p>内核源代码默认的放置目录。</p><h2 id="var"><a href="#var" class="headerlink" title="/var"></a>/var</h2><p>这个目录中存放着在不断扩充着的东西，我们习惯将那些经常被修改的目录放在这个目录下。包括各种日志文件。</p><h2 id="附注"><a href="#附注" class="headerlink" title="附注"></a>附注</h2><p>上面这些目录比较完备了</p><p>我主要是根据菜鸟教程，鸟哥的私房菜进行整理的</p><p>关于/run这个目录稍微特殊一点点，有的系统是二级目录，如果你的系统上有 /var/run 目录，应该让它指向 run。</p><p>可以用ls -l / 命令查看目录树</p><h3 id="关于挂载"><a href="#关于挂载" class="headerlink" title="关于挂载"></a>关于挂载</h3><p>开机过程中仅有根目录会被挂载，其他分区则是在开机完成之后才会持续进行挂载的行为</p><h2 id="本文许可证"><a href="#本文许可证" class="headerlink" title="本文许可证"></a>本文许可证</h2><p>本文遵循 <a href="https://github.com/huihut/interview/blob/master/LICENSE">CC BY-NC-SA 4.0</a>（署名 - 非商业性使用 - 相同方式共享） 协议，转载请注明出处，不得用于商业目的。<br><a href="LICENSE"><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9pLmNyZWF0aXZlY29tbW9ucy5vcmcvbC9ieS1uYy1zYS80LjAvODh4MzEucG5n?x-oss-process=image/format,png" alt="CC BY-NC-SA 4.0"></a></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;bin-binary&quot;&gt;&lt;a href=&quot;#bin-binary&quot; class=&quot;headerlink&quot; title=&quot;/bin (binary)&quot;&gt;&lt;/a&gt;/bin (binary)&lt;/h2&gt;&lt;p&gt;目录存放着最经常使用的命令&lt;/p&gt;
    
    </summary>
    
    
      <category term="Linux" scheme="https://stemha.github.io/categories/Linux/"/>
    
    
      <category term="Linux" scheme="https://stemha.github.io/tags/Linux/"/>
    
      <category term="目录结构" scheme="https://stemha.github.io/tags/%E7%9B%AE%E5%BD%95%E7%BB%93%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>linux 性能分析，测试与调优工具</title>
    <link href="https://stemha.github.io/2020/04/09/linux-%E6%80%A7%E8%83%BD%E5%88%86%E6%9E%90%EF%BC%8C%E6%B5%8B%E8%AF%95%E4%B8%8E%E8%B0%83%E4%BC%98%E5%B7%A5%E5%85%B7/"/>
    <id>https://stemha.github.io/2020/04/09/linux-%E6%80%A7%E8%83%BD%E5%88%86%E6%9E%90%EF%BC%8C%E6%B5%8B%E8%AF%95%E4%B8%8E%E8%B0%83%E4%BC%98%E5%B7%A5%E5%85%B7/</id>
    <published>2020-04-09T06:44:46.000Z</published>
    <updated>2020-08-10T04:19:21.635Z</updated>
    
    <content type="html"><![CDATA[<h3 id="静态性能分析工具-static-performance-analysis-tools"><a href="#静态性能分析工具-static-performance-analysis-tools" class="headerlink" title="静态性能分析工具(static performance analysis tools)"></a>静态性能分析工具(static performance analysis tools)</h3><ul><li><strong>dmesg</strong> 用于显示开机信息，开机信息也保存在/var/log目录中，名为dmesg的文件里。</li><li><strong>blockdev</strong>  工具允许从命令行调用区块设备控制程序。调用设备的ioctl函数。似乎Linux中对设备的直接操作只有ioctl函数。</li><li><strong>ldd</strong> （List Dynamic Dependencies，意译为列出动态库依赖关系）是一款在类Unix系统的实用工具，负责在命令行内输出程序或共享库所依赖的函数库。<a id="more"></a></li><li><strong>lsblk</strong> (list block)即用于列出所有可用块设备的信息,而且还能显示他们之间的依赖关系,但是它不会列出RAM盘的信息</li><li><strong>lsscsi</strong>  可以看到Raid卡信息和所有虚拟磁盘以及光驱的信息，如果没有硬件SCSI控制器，那就不会返回信息。</li><li><strong>lspci</strong> 显示有关pci总线的信息以及连接到它们的设备。</li><li><strong>lscpu</strong> (list cpu)显示CPU的详细信息，比如CPU的制造商、架构、CPU数量、型号、主频、缓存及支持的虚拟化技术等信息。</li><li><strong>lstopo</strong> (list topology of the system)显示可视化的方式组成 CPU、缓存、内存和I/O设备的拓扑结构。这个命令用来识别处理器结构和系统的NUMA拓扑结构。</li><li><strong>likwid</strong> (Like I Knew What I’m Doing) 是一个用来测量、配置并显示硬件相关特性的命令行收集工具。其中的likwid拓扑结构能显示CPU硬件(线程/缓存/NUMA)的拓扑结构信息，还能识别处理器家族(比如：Intel Core 2, AMD Shanghai)。</li><li><strong>smartctl</strong>  查看硬盘的SMART信息。</li><li><strong>fdisk</strong> 创建和维护分区表的程序(兼容DOS类型的分区表、BSD或SUN的磁盘列表）</li><li><strong>schedtool</strong> (scheduling tool)查询或设置CPU状态的工具。通过不同的参数可以查看或设置不同的属性。</li><li><strong>numactl</strong> (Control NUMA policy)用于控制 进程与共享存储的 NUMA 技术机制。</li><li><strong>cpuid</strong> 获取CPU的信息。该命令的底层是CPUID指令。它获取的内容比/proc/cpuinfo要详细很多。</li><li><strong>MegaCli</strong> 管理维护硬件RAID的软件</li><li><strong>App Config</strong></li></ul><h3 id="观测工具-Observability-Tools"><a href="#观测工具-Observability-Tools" class="headerlink" title="观测工具(Observability Tools)"></a>观测工具(Observability Tools)</h3><ul><li><strong>iostat</strong>  (input/output statistics)报告中央处理器（CPU）统计信息和整个系统、适配器、tty 设备、磁盘和 CD-ROM 的输入/输出统计信息。</li><li><strong>vmstat</strong>  (VirtualMeomoryStatistics,虚拟内存统计) 报告关于内核线程、虚拟内存、磁盘、陷阱和 CPU 活动的统计信息。</li><li><strong>dstat</strong> 用来替换vmstat、iostat、netstat、nfsstat和ifstat这些命令的工具,是一个全能系统信息统计工具。</li><li><strong>pidstat</strong> 是sysstat工具的一个命令，用于监控全部或指定进程的cpu、内存、线程、设备IO等系统资源的占用情况。</li><li><strong>mpstat</strong>  (multiprocessor statistics)查看多核心的cpu中每个计算核心的统计数据。类似工具vmstat只能查看系统的整体cpu情况</li><li><strong>netstat</strong> ( network statistics)显示当前的网络状态，包括传输控制协议层的连线状况、路由表、网络接口状态和网络协议的统计信息等。</li><li><strong>iotop</strong> 用来监视磁盘I/O使用状况的top类工具</li><li><strong>top</strong> (display Linux processes)实时显示系统中各个进程的资源占用状况,类似于Windows的任务管理器。</li><li><strong>htop</strong>  top命令的升级版。交互式的进程浏览器，可以用来替换Linux下的top命令</li><li><strong>gtop</strong>  JavaScript 编写的开源系统资源监控实用程序,它是 Linux 系统自带 top 工具的替代品</li><li><strong>tiptop</strong>  通过读取CPU硬件计数器的信息（比如cahche miss，executed instructions per cycle等等）了解程序执行效率</li><li><strong>strace</strong> 可跟踪系统调用的执行。最简单的方式，它可以从头到尾跟踪binary的执行，然后以一行文本输出系统调用的名字，参数和返回值。</li><li><strong>uptime</strong> 可以显示当前系统时间、系统已运行时间、启用终端数量以及平均负载值等信息</li><li><strong>lsof</strong>  (list open files)列出当前系统打开的文件，注意linux中设备也是文件</li><li><strong>perf</strong>  性能分析工具，能够进行函数级与指令级的热点查找。</li><li><strong>Flame Graphs</strong> 性能分析的利器,通过它可以快速定位性能瓶颈点。</li></ul><h3 id="测试工具-Benchmarking-Tools"><a href="#测试工具-Benchmarking-Tools" class="headerlink" title="测试工具(Benchmarking Tools)"></a>测试工具(Benchmarking Tools)</h3><ul><li><strong>fio</strong> 开源的I/O压力测试工具，主要是用来测试磁盘/SSD的IO性能，也可测试cpu，nic的IO性能。</li><li><strong>hdparm</strong> (hard disk parameters)用于显示与设定硬盘的参数</li><li><strong>dd</strong>  用于读取、转换并输出数据。可从标准输入或文件中读取数据,根据指定的格式来转换数据,再输出到文件、设备或标准输出。  </li><li><strong>perf_events</strong> 网上很多叫法如perf_events , perf profiler , Performance Counters for Linux。叫法不同，都指perf</li><li><strong>perf-tools</strong>  基于 perf_events (perf) 和 ftrace 的Linux性能分析调优工具集，能够收集ftrace和perf_events中乱七八糟的参数。</li><li><strong>ktap</strong>  Linux的基于脚本的动态跟踪工具 允许用户跟踪Linux内核动态。</li><li><strong>sysbench</strong>  一个开源的、模块化的、跨平台的多线程性能测试工具,可以用来进行CPU、内存、磁盘I/O、线程、数据库的性能测试。</li><li><strong>ab</strong> (apachebench) ab命令会创建多个并发访问线程,模拟多个访问者同时对某一URL地址进行访问。</li><li><strong>wrk</strong> 针对 Http 协议的基准测试工具，它能够在单机多核 CPU 的条件下，使用系统自带的高性能 I/O 机制，如 epoll，kqueue 等，通过多线程和事件模式，对目标机器产生大量的负载。</li><li><strong>jmeter</strong>  Apache组织开发的基于Java的压力测试工具。用于对软件做压力测试。</li><li><strong>openssl</strong> 加解密能力也是CPU性能测试的一部分。</li><li><strong>UnixBench</strong> 类unix系(Unix,BSD,Linux)统下的性能测试工具</li><li><strong>lmbench</strong> 多平台软件，因此能够对同级别的系统进行比较测试，反映不同系统的优劣势，可用于评价系统综合性能的多平台开源benchmark，能够测试包括文档读写、内存操作、进程创建销毁开销、网络等性能.</li><li><strong>perfbench</strong> perf下的工具 测试系统性能</li><li><strong>hping3</strong>  面向命令行的用于生成和解析TCP/IP协议数据包汇编/分析的开源工具。</li><li><strong>iperf</strong> 网络性能测试工具。Iperf可以测试最大TCP和UDP带宽性能，具有多种参数和UDP特性，可以根据需要调整，可以报告带宽、延迟抖动和数据包丢失。</li><li><strong>ping</strong>  向特定的目的主机发送 ICMP（Iternet Control Message Protocol 因特网报文控制协议）Echo 请求报文，测试目的站是否可达及了解其有关状态。</li><li><strong>ttcp</strong>  传统的测试TCP性能的工具,它主要测试两个机器之间TCP的吞吐量(在应用层模拟消息传递的过程)</li><li><strong>traceroute</strong>  利用ICMP 协议定位您的计算机和目标计算机之间的所有路由器。</li><li><strong>mtr</strong> 网络连通性判断工具，它结合了ping, traceroute,nslookup 的相关特性</li><li><strong>pchar</strong> 沿Internet路径执行网络测量</li></ul><h3 id="调优工具-Tuning-Tools"><a href="#调优工具-Tuning-Tools" class="headerlink" title="调优工具(Tuning Tools)"></a>调优工具(Tuning Tools)</h3><ul><li><strong>sysctl</strong>  (System Administration)用来配置与显示在/proc/sys目录中的内核参数</li><li><strong>swapon</strong>  用于激活Linux中的交换空间，Linux的内存管理必须使用交换区来建立虚拟内存。</li><li><strong>env</strong> gnu的coreutils包内的一个软件，用来显示系统中已存在的环境变量,以及在定义的环境中执行指令。</li><li><strong>tune2fs</strong> 允许系统管理员在Linux ext2、ext3或ext4文件系统上调整各种可调的文件系统参数。</li><li><strong>ionice</strong>  获取或设置程序的IO调度与优先级。PRI(new)=PRI(default)+nice</li><li><strong>nice</strong>  调整程序运行的优先级，当前程序运行优先级基础之上调整指定值得到新的程序运行优先级。</li><li><strong>renice</strong>  重新指定一个或多个进程的优先级</li><li><strong>taskset</strong> 将某个进程与某个CPU核心绑定。</li><li><strong>ulimit</strong>  为shell内建指令，可用来控制shell执行程序的资源</li><li><strong>chcpu</strong>   修改cpu的状态,启用和关闭cpu，扫描新的CPU,改变底层虚拟机监控程序的CPU调度模式,并请求CPU的系统管理程序(配置)或返回CPU hypervisor</li><li><strong>numactl</strong> 用于控制进程与共享存储的 NUMA 技术机制。</li><li><strong>sysctl</strong>  用于运行时配置内核参数,这些参数位于/proc/sys目录下。</li><li><strong>ethtool</strong> 用于查询及设置网卡参数</li><li><strong>stap</strong> (SystemTap) 内核开发者必须要掌握的一个工具,用于内核监控和跟踪，以及诊断性能或功能问题。</li><li><strong>kpatch</strong>  给Linux内核动态打补丁但是不必重启系统</li></ul><h2 id="本文许可证"><a href="#本文许可证" class="headerlink" title="本文许可证"></a>本文许可证</h2><p>本文遵循 <a href="https://github.com/huihut/interview/blob/master/LICENSE">CC BY-NC-SA 4.0</a>（署名 - 非商业性使用 - 相同方式共享） 协议，转载请注明出处，不得用于商业目的。<br><a href="LICENSE"><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9pLmNyZWF0aXZlY29tbW9ucy5vcmcvbC9ieS1uYy1zYS80LjAvODh4MzEucG5n?x-oss-process=image/format,png" alt="CC BY-NC-SA 4.0"></a></p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;静态性能分析工具-static-performance-analysis-tools&quot;&gt;&lt;a href=&quot;#静态性能分析工具-static-performance-analysis-tools&quot; class=&quot;headerlink&quot; title=&quot;静态性能分析工具(static performance analysis tools)&quot;&gt;&lt;/a&gt;静态性能分析工具(static performance analysis tools)&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;dmesg&lt;/strong&gt; 用于显示开机信息，开机信息也保存在/var/log目录中，名为dmesg的文件里。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;blockdev&lt;/strong&gt;  工具允许从命令行调用区块设备控制程序。调用设备的ioctl函数。似乎Linux中对设备的直接操作只有ioctl函数。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;ldd&lt;/strong&gt; （List Dynamic Dependencies，意译为列出动态库依赖关系）是一款在类Unix系统的实用工具，负责在命令行内输出程序或共享库所依赖的函数库。&lt;/li&gt;&lt;/ul&gt;
    
    </summary>
    
    
      <category term="Linux" scheme="https://stemha.github.io/categories/Linux/"/>
    
    
      <category term="Linux" scheme="https://stemha.github.io/tags/Linux/"/>
    
      <category term="工具" scheme="https://stemha.github.io/tags/%E5%B7%A5%E5%85%B7/"/>
    
      <category term="性能分析" scheme="https://stemha.github.io/tags/%E6%80%A7%E8%83%BD%E5%88%86%E6%9E%90/"/>
    
  </entry>
  
  <entry>
    <title>《练习的心态》读书笔记</title>
    <link href="https://stemha.github.io/2020/04/08/%E3%80%8A%E7%BB%83%E4%B9%A0%E7%9A%84%E5%BF%83%E6%80%81%E3%80%8B%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    <id>https://stemha.github.io/2020/04/08/%E3%80%8A%E7%BB%83%E4%B9%A0%E7%9A%84%E5%BF%83%E6%80%81%E3%80%8B%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/</id>
    <published>2020-04-08T09:12:52.000Z</published>
    <updated>2020-08-10T04:19:21.664Z</updated>
    
    <content type="html"><![CDATA[<h2 id="引言-人生就是漫长的练习"><a href="#引言-人生就是漫长的练习" class="headerlink" title="引言　人生就是漫长的练习"></a>引言　人生就是漫长的练习</h2><h2 id="第1章-学习开始"><a href="#第1章-学习开始" class="headerlink" title="第1章　学习开始"></a>第1章　学习开始</h2><p>当你弄懂了练习的正确原理，学习某些新事物的任务将变成一种<strong>没有压力的愉快与平和的体验</strong>，变成一个适合你生活中各种领域的过程，并且促成你对生活中所有的艰辛与痛苦采用合适的视角来观察。</p><a id="more"></a><p><strong>压力与焦虑主要来源于我们自己对目标的依恋。</strong><br>练习的心态这也是一种技能：尽可能迅速，最少的付出来发展任何一项技能的能力，以及在这个过程体验内心平和与愉悦的能力。</p><p>在不感到失败和焦虑的情况下去努力实现目标。<br>学习的渴望仅仅是第一步，需要正确理解技术性细节与努力，否则会耗尽的</p><p>当今的文化是多任务的，比如开车时第一件事会习惯性打开收音机。   而<code>滑冰</code>正相反，滑冰时候不会注意边上嘈杂的声音！<br>由于习惯于一心多用，我们大脑躁动不安，且具有极大惯性，没法安静下来。</p><p>练习的心态是安静的<br>意识是第一位的：没法控制自己的思维，不管设立什么样的目标，都没有用。我们对自己要去的方向就像<code>乘坐马车</code>，必须要拉紧思维的缰绳才行啊！<br>填补空虚是一个循环往复的过程</p><p><code>学会走路</code>的过程并不会在心里让你压力倍增。我们要意识并掌控这个过程，学会从中享受！</p><h2 id="第2章-以过程为导向，不以结果为导向"><a href="#第2章-以过程为导向，不以结果为导向" class="headerlink" title="第2章　以过程为导向，不以结果为导向"></a>第2章　以过程为导向，不以结果为导向</h2><p> 人生的悖论：耐心与自律的问题是，要培养它们中的任何一个，需要同时具备它们两个。</p><ul><li>简单法则</li><li>以过程为导向</li><li>重点关注当前</li><li>将过程确定为目标，并且运用总目标作为船舵，以指引自己的努力。</li></ul><p>对自己想要做的事情刻意训练，带着意图训练，并且自始至终清醒的知道那种意图</p><h2 id="第3章-关键是视角"><a href="#第3章-关键是视角" class="headerlink" title="第3章　关键是视角"></a>第3章　关键是视角</h2><p>当我们试图理解自己以及我们对人生中各种努力的痛苦挣扎时，可以通过观察一朵鲜花来找到平和。问你自己：一朵鲜花的生命，从撒下种子到完全盛开，在什么时候可以达到完美？</p><p>然后呢？ 达成目标之后，然后呢？然后又能干什么呢？？？？<br><code>初学者心态</code><br><code>鲜花的生命</code>，自始至终都是完美的</p><p><strong>他了解到，假如将自己的思绪集中在当前，并只专注了他在这一刻正在做的事情的过程，那便可以喜欢上他正在做的任何事情。</strong></p><h2 id="第4章-培养期望的习惯"><a href="#第4章-培养期望的习惯" class="headerlink" title="第4章　培养期望的习惯"></a>第4章　培养期望的习惯</h2><p>习惯是学来的。明智地选择它们。自己创造想要的习惯，不带情绪和判断的采取哪些行为，之后坚持下去。</p><blockquote><p>   就像一名优秀的老师，对待学生的错误不会情绪化，那种情绪化来源于自我期望，与结果和产物关联，如果你体验到这些情绪，就证明你没有专注于当前过程！！！</p></blockquote><p>怎么样阻止旧的习惯，采用一种例行行为来阻止，比如<code>击球前例动作</code></p><h2 id="第5章-感知变化，创造耐心！"><a href="#第5章-感知变化，创造耐心！" class="headerlink" title="第5章　感知变化，创造耐心！"></a>第5章　感知变化，创造耐心！</h2><p>你需要的所有耐心，都已经处在你的内心了。<br>知道什么时候内心疯狂奔走<br>接受什么事情不会尽善尽美</p><blockquote><p>放弃某种幸福和乐趣就在某个地方的徒劳想法</p></blockquote><p>在探索的道路上，除了去追求，没有别的可以达到的目标了//我们20岁的目标肯定与18岁的不同，参照对象也是不一样的，不要指望能达到你的目标。探索本身就是一种目标。</p><p>对于没有费力得到的东西，那种兴奋感在得到东西早已烟消云散。</p><p><code>得到目标</code>和<code>实现目标</code>是两种完全不同的概念<br>真正的愉悦 </p><h2 id="第6章-4“S”方法"><a href="#第6章-4“S”方法" class="headerlink" title="第6章　4“S”方法"></a>第6章　4“S”方法</h2><p>力求简化，将征服大多数复杂的任务。</p><ul><li>简化 </li><li>细分 </li><li>缩短 </li><li>放慢</li></ul><h2 id="第7章-平静与DOC方法"><a href="#第7章-平静与DOC方法" class="headerlink" title="第7章　平静与DOC方法"></a>第7章　平静与DOC方法</h2><p>客观是通往宁静心灵之路！</p><p>主观判断需要一个评估和对比的过程，这要求有一个相对的点，即理想状况<br>判断有一个不利的地方，它不会以一种超然的方式运行，常常会包含着某些情绪，有趣的是，对事情我们感觉到的重要性越多，我们带的情绪越多<br>将自我与观察者合并  。就像我们安慰他人时候带着的超然智慧一样。  怎么合并呢 冥想！</p><p>do observe correct<br>就像射箭运动员一样，安静，不复杂完全没有心理的杂乱</p><h2 id="第8章-教孩子，也从孩子身上学习"><a href="#第8章-教孩子，也从孩子身上学习" class="headerlink" title="第8章　教孩子，也从孩子身上学习"></a>第8章　教孩子，也从孩子身上学习</h2><p>智慧并不是年龄的副产物。从你身边所有的人身上学习，同时也用自己的行为影响身边的人。</p><h2 id="第9章-你的技能在成长"><a href="#第9章-你的技能在成长" class="headerlink" title="第9章　你的技能在成长"></a>第9章　你的技能在成长</h2><p>有了刻意的和反复的努力，进步便水到渠成。</p><blockquote><p>   如果说各种软件上的信息不能使你知识变得丰富，那么你就不需要它们</p></blockquote><h2 id="本文许可证"><a href="#本文许可证" class="headerlink" title="本文许可证"></a>本文许可证</h2><p>本文遵循 <a href="https://github.com/huihut/interview/blob/master/LICENSE">CC BY-NC-SA 4.0</a>（署名 - 非商业性使用 - 相同方式共享） 协议，转载请注明出处，不得用于商业目的。<br><a href="LICENSE"><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9pLmNyZWF0aXZlY29tbW9ucy5vcmcvbC9ieS1uYy1zYS80LjAvODh4MzEucG5n?x-oss-process=image/format,png" alt="CC BY-NC-SA 4.0"></a></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;引言-人生就是漫长的练习&quot;&gt;&lt;a href=&quot;#引言-人生就是漫长的练习&quot; class=&quot;headerlink&quot; title=&quot;引言　人生就是漫长的练习&quot;&gt;&lt;/a&gt;引言　人生就是漫长的练习&lt;/h2&gt;&lt;h2 id=&quot;第1章-学习开始&quot;&gt;&lt;a href=&quot;#第1章-学习开始&quot; class=&quot;headerlink&quot; title=&quot;第1章　学习开始&quot;&gt;&lt;/a&gt;第1章　学习开始&lt;/h2&gt;&lt;p&gt;当你弄懂了练习的正确原理，学习某些新事物的任务将变成一种&lt;strong&gt;没有压力的愉快与平和的体验&lt;/strong&gt;，变成一个适合你生活中各种领域的过程，并且促成你对生活中所有的艰辛与痛苦采用合适的视角来观察。&lt;/p&gt;
    
    </summary>
    
    
      <category term="读书笔记" scheme="https://stemha.github.io/categories/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="练习" scheme="https://stemha.github.io/tags/%E7%BB%83%E4%B9%A0/"/>
    
      <category term="心态" scheme="https://stemha.github.io/tags/%E5%BF%83%E6%80%81/"/>
    
  </entry>
  
  <entry>
    <title>成为一个不惑、不忧、不惧的人</title>
    <link href="https://stemha.github.io/2020/03/29/%E6%88%90%E4%B8%BA%E4%B8%80%E4%B8%AA%E4%B8%8D%E6%83%91%E3%80%81%E4%B8%8D%E5%BF%A7%E3%80%81%E4%B8%8D%E6%83%A7%E7%9A%84%E4%BA%BA/"/>
    <id>https://stemha.github.io/2020/03/29/%E6%88%90%E4%B8%BA%E4%B8%80%E4%B8%AA%E4%B8%8D%E6%83%91%E3%80%81%E4%B8%8D%E5%BF%A7%E3%80%81%E4%B8%8D%E6%83%A7%E7%9A%84%E4%BA%BA/</id>
    <published>2020-03-29T11:48:51.000Z</published>
    <updated>2020-08-10T04:19:21.687Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>说明:本文是梁启超于1922年应苏州学界邀请作的一场演讲。当时，他向在座者提出了一个问题：“为什么进学校？”。而后，他给出的答案是：进学校为的是求学问，求学问为的是学做人。而要成为一个人，总要具备三德：智、仁、勇，实现的状态便是“智者不惑，仁者不忧，勇者不惧”。演讲距今虽然已经过去快一个世纪，但是观点仍然具有很强的穿透力，值得大家好好读一读。</p></blockquote><a id="more"></a>     <h2 id="演讲全文"><a href="#演讲全文" class="headerlink" title="演讲全文"></a>演讲全文</h2><p>诸君!我在南京讲学将近三个月了，这边苏州学界里，有好几回写信邀我，可惜我在南京是天天有功课的，不能分身前来。今天到这里，能够和全城各校诸君聚在一堂，令我感激的很，但有一件，还要请诸君原谅：因为我一个月以来，都带着些病，勉强支持，今天不能作很长的讲演，恐怕有负诸君期望哩。</p><p>问诸君“为什么进学校?”</p><p>我想人人都会众口一词的答道：“为的是求学问”。再问：“你为什么要求学问?”“你想学些什么?”恐怕各人的答案就很不相同，或者竟自答不出来了。诸君啊!我替你们回答一句罢：“为的是学做人。”你在学校里头学的什么数学、几何、物理、化学、生理、心理、历史、地理、国文、英语，乃至什么哲学、文学、科学、政治、法律、经济、教育、农业、工业、商业等等，不过是做人所需的一种手段，不能说专靠这些便达到做人的目的，任凭你把这些件件学的精通，你能够成个人不成个人还是个问题。</p><p>人类心理，有知、情、意三部分。这三部分圆满发达的状态，我们先哲名为三达德——智、仁、勇。为什么叫做“达德”呢?因为这三件事是人类普通道德的标准，总要三个具备，才能成一个人。三件的完成状态怎么样呢?孔子说：<strong>“知者不惑，仁者不忧，勇者不惧。”</strong>所以教育应分为知育、情育、意育三方面，——现在讲的智育、德育、体育不对，德育范围太笼统，体育范围太狭隘——<strong>知育要教到人不惑，情育要教到人不忧，意育到教到人不惧。</strong>教育家教育学生，应该以这三件为究竟，我们自动的自己教育自己，也应该以这三件为究竟。</p><h3 id="1-怎么样才能不惑呢"><a href="#1-怎么样才能不惑呢" class="headerlink" title="1. 怎么样才能不惑呢?"></a>1. 怎么样才能不惑呢?</h3><p><strong>最要紧的是养成我们的判断力</strong>。<u>想要养成判断力，第一步，最少须有相当的常识，进一步，对于自己要做的事须有专门智识，再进一步，还要有遇事能断的智慧。</u></p><p>假如一个人连常识都没有，听见打雷，说是雷公发威，看见月蚀，说是蛤蟆贪嘴。那么，一定闹到什么事都没有主意，碰到一点疑难问题，就靠求神问卜看相算命去解决，真所谓“大惑不解”，成了最可怜的人了。学校里小学中学所教，就是要人有了许多基本的知识，免得凡事都暗中摸索。</p><p>但仅仅有点常识还不够，我们做人，总要各有一件专门职业。这门职业，也并不是我一人破天荒去做，从前已经许多人做过，他们积累了无数经验，发现出好些原理原则，这就是<code>专门学识</code>。<u>我打算做这项职业，就应该有这项专门的学识。</u>例如我想做农吗，怎么的改良土壤，怎么的改良种子，怎么的防御水旱病虫，等等，都是前人经验有得成为学识的;我们有了这种学识，应用他来处置这些事，自然会不惑，反是则惑了。做工、做商等等都各有他的专门学识，也是如此。我想做财政家吗，何种租税可以生出何样结果，何种公债可以生出何样结果等等，都是前人经验有得成为学识的;我们有了这种学识，应用他来处置这些事，自然会不惑，反是则惑了。教育家、军事家等等，都各有他的专门学说，也是如此。</p><p>我们在高等以上学校所求的知识，就是这一类。但专靠这种常识和学识就够吗?还不能。宇宙和人生是活的不是呆的，我们每日碰见的事理是复杂的变化的，不是单纯的刻板的，倘若我们只是学过这一件，才懂这一件，那么，碰着一件没有学过的事来到跟前，便手忙脚乱了。</p><p>所以还要<strong>养成总体的智慧，才能有根本的判断力</strong>。这种<code>总的智慧如何才能养成呢?</code><u>第一件，要把我们向来粗浮的脑筋着实磨炼他，叫他变成细密而且踏实。那么，无论遇着如何繁难的事，我都可以彻头彻尾想清楚他的条理，自然不至于惑了。</u></p><p>第二件，要把我们向来浑浊的脑筋，着实将养他，叫他变成清明。那么，一件事理到跟前，我才能很从容很莹澈的去判断他，自然不至于惑了。以上所说常识学识和总体的智慧，都是<code>知育</code>的要件，目的是教人做到<code>“知者不惑”</code>。</p><h3 id="2-怎么样才能不忧呢"><a href="#2-怎么样才能不忧呢" class="headerlink" title="2. 怎么样才能不忧呢?"></a>2. 怎么样才能不忧呢?</h3><p>为什么仁者便会不忧呢?想明白这个道理，先要知道中国先哲的人生观是怎么样。“仁”之一字，儒家人生观的全体大用都包在里头。“仁”到底是什么?很难用言语说明，勉强下个解释，可以说是：“普遍人格之实现。”孔子说：“仁者人也。”意思是说<code>人格完成就叫做“仁”</code>。</p><p>但我们要知道，人格不是单独一个人可以表现的，要从人和人的关系上来看。所以仁字从二人，郑康成解他做“相人偶”。<strong>总而言之，要彼此交感互发，成为一体，然后我的人格才能实现。</strong>所以我们若不讲人格主义，那便无话可说;讲到这个主义，当然归宿到普遍人格。换句话说，宇宙即是人生，人生即是宇宙，我们的人格，和宇宙无二区别，体验得这个道理，就叫做“仁者”。然则这种仁者为什么就会不忧呢?<strong>大凡忧之所从来，不外两端，一曰忧成败，二曰忧得失。</strong>我们得着“仁”的人生观，就不会忧成败。为什么呢?因为我们知道宇宙和人生是永远不会圆满的，所以《易经》六十四卦，始“乾”而终“未济”。正为在这永远不会圆满的宇宙中，才永远容得我们创造进化。</p><p><strong>我们所做的事，不过在宇宙进化几万万里的长途中，往前挪一寸，两寸，那里配说成功呢?然则不做怎么样呢?不做便连这一寸都不往前挪，那可真是失败了。</strong></p><p>“仁者”看透这种道理，信得过只有不做事才算失败，肯做事便不会失败。所以《易经》说：“君子以自强不息。”换一方面来看，他们又信得过凡事不会成功的几万万里路挪了一两寸，算成功吗?所以《论语》：<strong>“知其不可而为之。”你想，有这种人生观的人，还有什么成败可忧呢?</strong></p><p>再者，我们得着“仁”的人生观，便不会忧得失。为什么呢?因为认定这件东西是我的，才有得失之可言。连人格都不是单独存在，不能明确的画出这一部分是我的，那一部分是人家的，然则哪里有东西可以为我们所得?既已没有东西为我所得，当然也没有东西为我所失。</p><p>我只是为学问而学问，为劳动而劳动，并不是拿学问劳动等做手段来达某种目的——可以为我们“所得”得。所以老子说：“生而不有，为而不恃。”“既以为人已愈有，既以与人已愈多。”你想，有这种人生观的人，还有什么得失可忧呢?总而言之，有了这种人生观，自然会觉得“天地与我并生，而万物与我为一”，自然会“无人而不自得”。他的生活，纯然是趣味化艺术化。这是最高的情感教育，目的教人做到“仁者不忧”。</p><h3 id="3-怎么样才能不惧呢"><a href="#3-怎么样才能不惧呢" class="headerlink" title="3. 怎么样才能不惧呢?"></a>3. 怎么样才能不惧呢?</h3><p>有了不惑不忧功夫，惧当然会减少许多了。但这是属于意志方面的事。一个人若是意志力薄弱，便会有丰富的智识，临时也会用不着，便有优美的情操，临时也会变了卦。然则意志怎么会才坚强呢?头一件须要心地光明，孟子说：“浩然之气，至大至刚。行有不慊于心，则馁矣。”又说：“自反而不缩，虽褐宽博，吾不惴焉;自反而缩，虽千万人，吾往矣。”</p><p>俗话说得好：“生平不作亏心事，夜半敲门心不惊。”一个人要保持勇气，须要从一切行为可以公开做起，这是第一着。第二件要不为劣等欲望之所牵制。</p><p>《论语》记：子曰：“吾未见刚者。”或对曰伸枨。子曰：“枨也欲，焉刚。”一被物质上无聊得嗜欲东拉西扯，那么百炼成刚也会变成绕指柔了。总之，一个人的意志，由刚强变为薄弱极易，由薄弱返到刚强极难。一个人有了意志薄弱的毛病，这个人可就完了。</p><p>自己作不起自己的主，还有什么事可做?受别人压制，做别人奴隶，自己只要肯奋斗，终必能恢复自由。自己的意志做了自己情欲的奴隶，那么，真是万劫沉沦，永无恢复自由的余地，终身畏首畏尾，成了个可怜人了。</p><p>孔子说：“和而不流，强哉矫;中立而不倚，强哉矫。国有道，不变塞焉，强哉矫;国无道，至死不变，强哉矫。”我老实告诉诸君说罢，做人不做到如此，决不会成一个人。但做到如此真是不容易，非时时刻刻做磨炼意志的功夫不可，<strong>意志磨炼得到家，自然是看着自己应做得事，一点不迟疑，扛起来便做，“虽千万人吾往矣。”这样才算顶天立地做一世人，绝不会有藏头躲尾左支右绌的丑态。这便是<code>意育</code>的目的，要教人做到“勇者不惧”</strong>。</p><p>我们拿这三件事作做人的标准，请诸君想想，我自己现时做到哪一件——哪一件稍微有一点把握。倘若连一件都不能做到，连一点把握都没有，嗳哟!那可真危险了，你将来做人恐怕做不成。讲到学校里的教育吗，第二层的情育，第三层的意育，可以说完全没有，剩下的只有第一层的知育。就算知育罢，又只有所谓常识和学识，至于我所讲的总体智慧靠来养成根本判断力的，却是一点儿也没有。</p><p>这种“贩卖知识杂货店”的育，把他前途想下去，真令人不寒而栗!现在这种教育，一时又改革不来，我们可爱的青年，除了他更没有可以受教育的地方。诸君啊!你到底还要做人不要?你要知道危险呀，非你自己抖擞精神方法自救，没有人救你呀!</p><p>诸君啊!你千万别要以为得些断片的智识，就算是有学问呀。我老实不客气告诉你罢;你如果做成一个人，知识自然是越多越好：你如果做不成一个人，知识却是越多越坏。你不信吗?试想想全国人所唾骂的卖国贼某人某人，是有智识的呀，还是没有智识的呢?试想想全国人所痛恨的官僚政客——专门助军阀作恶鱼肉良民的人，是有智识的呀，还是没有智识的呢?诸君须知道啊，这些人当十几年前在学校的时代，意气横历，天真烂漫，何尝不和诸君一样?为什么就会堕落到这样的田地呀?</p><p>屈原说：“何昔日之芳草兮，今直为此萧艾也!岂其有他故兮，莫好修之害也。”天下最伤心的事，莫过于看着一群好好的青年，一步一步的往坏路上走。诸君猛醒啊!现在你所厌所恨的人，就是你前车之鉴了。</p><p>诸君啊!你现在怀疑吗?沉闷吗?悲哀痛苦吗?觉得外边的压迫你不能抵抗吗?我告诉你：你怀疑和沉闷，便是你因不知才会惑;你悲哀痛苦，便是你因不仁才会忧;你觉得你不能抵抗外界的压迫，便是你因不勇才有惧。这都是你的知、情、意未经过修养磨炼，所以还未成个人。我盼望你有痛切的自觉啊!有了自觉，自然会成功。那么，学校之外，当然有许多学问，读一卷经，翻一不史，到处都可以发现诸君的良师呀!</p><p>诸君啊，醒醒罢!养足你的根本智慧，体验出你的人格人生观，保护好你的自由意志。你成人不成人，就看这几年哩!</p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;说明:本文是梁启超于1922年应苏州学界邀请作的一场演讲。当时，他向在座者提出了一个问题：“为什么进学校？”。而后，他给出的答案是：进学校为的是求学问，求学问为的是学做人。而要成为一个人，总要具备三德：智、仁、勇，实现的状态便是“智者不惑，仁者不忧，勇者不惧”。演讲距今虽然已经过去快一个世纪，但是观点仍然具有很强的穿透力，值得大家好好读一读。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="醒世通言" scheme="https://stemha.github.io/categories/%E9%86%92%E4%B8%96%E9%80%9A%E8%A8%80/"/>
    
    
      <category term="演讲" scheme="https://stemha.github.io/tags/%E6%BC%94%E8%AE%B2/"/>
    
      <category term="人生" scheme="https://stemha.github.io/tags/%E4%BA%BA%E7%94%9F/"/>
    
  </entry>
  
  <entry>
    <title>学术论文的基本结构</title>
    <link href="https://stemha.github.io/2020/03/29/%E5%AD%A6%E6%9C%AF%E8%AE%BA%E6%96%87%E7%9A%84%E5%9F%BA%E6%9C%AC%E7%BB%93%E6%9E%84/"/>
    <id>https://stemha.github.io/2020/03/29/%E5%AD%A6%E6%9C%AF%E8%AE%BA%E6%96%87%E7%9A%84%E5%9F%BA%E6%9C%AC%E7%BB%93%E6%9E%84/</id>
    <published>2020-03-29T10:14:24.000Z</published>
    <updated>2020-08-10T04:19:21.683Z</updated>
    
    <content type="html"><![CDATA[<h2 id="基本结构"><a href="#基本结构" class="headerlink" title="基本结构"></a>基本结构</h2><ol><li><strong>标题</strong><ul><li>真实反应论文内容 </li><li>简短明了 </li><li>吸引人</li><li>大背景 </li><li>小背景</li><li>技术特色<a id="more"></a>    </li></ul></li></ol><ol start="2"><li><strong>摘要</strong></li></ol><ul><li>概括你的研究</li><li>假设或要研究的问题</li><li>研究方法 </li><li>主要成果</li></ul><ol start="3"><li><strong>引言</strong></li></ol><ul><li><p>说明选题的背景，目的，意义</p></li><li><p>陈述研究的主要内容和论文的假说或研究问题</p></li><li><p>文章的研究方法与章节编排</p></li></ul><ol start="4"><li><strong>文献综述</strong></li></ol><ul><li>阐述前人的研究，展示文献批判能力，说明你对研究问题的掌握程度，表明你研究的创新之处。</li></ul><ol start="5"><li><strong>研究方法</strong></li></ol><ul><li>详细介绍相关信息，便于读者采取同样的方法能够重复此项研究。</li><li>研究性质</li><li>对象</li><li>步骤</li><li>工具</li><li>条件</li><li>…</li></ul><ol start="6"><li><strong>研究结果</strong></li></ol><ul><li>用文字和/或图表真实报告你获得的数据或结果。</li></ul><ol start="7"><li><strong>讨论</strong></li></ol><ul><li>基于你获得的数据论述对于研究问题可能得到的结论。</li></ul><ol start="8"><li><strong>结论</strong></li></ol><ul><li>简明总结所得到的数据，得出的结论及意义。</li><li>说明研究的价值，不足或局限性。</li></ul><ol start="9"><li><strong>致谢</strong></li></ol><ol start="10"><li><strong>参考文献</strong></li></ol><h2 id="本文许可证"><a href="#本文许可证" class="headerlink" title="本文许可证"></a>本文许可证</h2><p>本文遵循 <a href="https://github.com/huihut/interview/blob/master/LICENSE">CC BY-NC-SA 4.0</a>（署名 - 非商业性使用 - 相同方式共享） 协议，转载请注明出处，不得用于商业目的。<br><a href="LICENSE"><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9pLmNyZWF0aXZlY29tbW9ucy5vcmcvbC9ieS1uYy1zYS80LjAvODh4MzEucG5n?x-oss-process=image/format,png" alt="CC BY-NC-SA 4.0"></a></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;基本结构&quot;&gt;&lt;a href=&quot;#基本结构&quot; class=&quot;headerlink&quot; title=&quot;基本结构&quot;&gt;&lt;/a&gt;基本结构&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;标题&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;真实反应论文内容 &lt;/li&gt;
&lt;li&gt;简短明了 &lt;/li&gt;
&lt;li&gt;吸引人&lt;/li&gt;
&lt;li&gt;大背景 &lt;/li&gt;
&lt;li&gt;小背景&lt;/li&gt;
&lt;li&gt;技术特色&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ol&gt;
    
    </summary>
    
    
      <category term="学术论文" scheme="https://stemha.github.io/categories/%E5%AD%A6%E6%9C%AF%E8%AE%BA%E6%96%87/"/>
    
    
      <category term="学术论文" scheme="https://stemha.github.io/tags/%E5%AD%A6%E6%9C%AF%E8%AE%BA%E6%96%87/"/>
    
      <category term="基本结构" scheme="https://stemha.github.io/tags/%E5%9F%BA%E6%9C%AC%E7%BB%93%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>好用的chrome插件</title>
    <link href="https://stemha.github.io/2020/03/29/%E5%A5%BD%E7%94%A8%E7%9A%84chrome%E6%8F%92%E4%BB%B6/"/>
    <id>https://stemha.github.io/2020/03/29/%E5%A5%BD%E7%94%A8%E7%9A%84chrome%E6%8F%92%E4%BB%B6/</id>
    <published>2020-03-29T09:29:48.000Z</published>
    <updated>2020-08-10T04:19:21.675Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>深刻体会到工具的好用，有一些问题使用工具真的省力，关键是学会如何找到这些工具和如何描述自己的相关需求。</p></blockquote><h2 id="Awesome-Autocomplete-for-GitHub"><a href="#Awesome-Autocomplete-for-GitHub" class="headerlink" title="Awesome Autocomplete for GitHub"></a>Awesome Autocomplete for GitHub</h2><p>增强github的搜索功能</p><a id="more"></a>     <h2 id="Git-History-Browser-Extension"><a href="#Git-History-Browser-Extension" class="headerlink" title="Git History Browser Extension"></a>Git History Browser Extension</h2><p>查看github的历史更新记录，超级好用，可以对比不同人对代码做的更新；</p><h2 id="octotree"><a href="#octotree" class="headerlink" title="octotree"></a>octotree</h2><p>可以查看github的目录结构，并且下载单个的文件；</p><h2 id="Sourcegraph"><a href="#Sourcegraph" class="headerlink" title="Sourcegraph"></a>Sourcegraph</h2><p>可以查看相关的代码，搜索代码，查找代码定义的地方</p><h2 id="The-Great-Suspender"><a href="#The-Great-Suspender" class="headerlink" title="The Great Suspender"></a>The Great Suspender</h2><p>休眠chrome不必要的标签页</p><h2 id="Tab-Resize-split-screen-layouts"><a href="#Tab-Resize-split-screen-layouts" class="headerlink" title="Tab Resize - split screen layouts"></a>Tab Resize - split screen layouts</h2><p>浏览器分屏</p><p><img src="/2020/03/29/%E5%A5%BD%E7%94%A8%E7%9A%84chrome%E6%8F%92%E4%BB%B6/chrome-plug-in-components.png" alt="avatar"></p><h2 id="本文许可证"><a href="#本文许可证" class="headerlink" title="本文许可证"></a>本文许可证</h2><p>本文遵循 <a href="https://github.com/huihut/interview/blob/master/LICENSE">CC BY-NC-SA 4.0</a>（署名 - 非商业性使用 - 相同方式共享） 协议，转载请注明出处，不得用于商业目的。<br><a href="LICENSE"><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9pLmNyZWF0aXZlY29tbW9ucy5vcmcvbC9ieS1uYy1zYS80LjAvODh4MzEucG5n?x-oss-process=image/format,png" alt="CC BY-NC-SA 4.0"></a></p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;深刻体会到工具的好用，有一些问题使用工具真的省力，关键是学会如何找到这些工具和如何描述自己的相关需求。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;Awesome-Autocomplete-for-GitHub&quot;&gt;&lt;a href=&quot;#Awesome-Autocomplete-for-GitHub&quot; class=&quot;headerlink&quot; title=&quot;Awesome Autocomplete for GitHub&quot;&gt;&lt;/a&gt;Awesome Autocomplete for GitHub&lt;/h2&gt;&lt;p&gt;增强github的搜索功能&lt;/p&gt;
    
    </summary>
    
    
      <category term="效率工具" scheme="https://stemha.github.io/categories/%E6%95%88%E7%8E%87%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="生产力" scheme="https://stemha.github.io/tags/%E7%94%9F%E4%BA%A7%E5%8A%9B/"/>
    
      <category term="插件" scheme="https://stemha.github.io/tags/%E6%8F%92%E4%BB%B6/"/>
    
      <category term="chrome" scheme="https://stemha.github.io/tags/chrome/"/>
    
  </entry>
  
  <entry>
    <title>《苏菲的世界》读书笔记</title>
    <link href="https://stemha.github.io/2020/03/29/%E3%80%8A%E8%8B%8F%E8%8F%B2%E7%9A%84%E4%B8%96%E7%95%8C%E3%80%8B%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    <id>https://stemha.github.io/2020/03/29/%E3%80%8A%E8%8B%8F%E8%8F%B2%E7%9A%84%E4%B8%96%E7%95%8C%E3%80%8B%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/</id>
    <published>2020-03-28T16:40:11.000Z</published>
    <updated>2020-08-10T04:19:21.666Z</updated>
    
    <content type="html"><![CDATA[<h2 id="伊甸园-在某个时刻事物必然从无到有"><a href="#伊甸园-在某个时刻事物必然从无到有" class="headerlink" title="伊甸园　在某个时刻事物必然从无到有"></a>伊甸园　在某个时刻事物必然从无到有</h2><p>你是谁？<br>世界从何处来？<br>    要么一直存在<br>    要么从无到有<br>        比如空间是由某样东西变成的，那么那样东西必然也是由另外一样东西变成的。一直推下去，那么必然是在某一时刻，事物从无到有。</p><p>生死这两件事就像钱币的两面，被我们的思考翻来翻去的时候，当一面变得更清晰的时候，另外一面也随之变得更大而清晰。</p><a id="more"></a><h2 id="魔术师的礼帽-要成为一个优秀的哲学家只有一个条件：要有好奇心"><a href="#魔术师的礼帽-要成为一个优秀的哲学家只有一个条件：要有好奇心" class="headerlink" title="魔术师的礼帽　要成为一个优秀的哲学家只有一个条件：要有好奇心"></a>魔术师的礼帽　要成为一个优秀的哲学家只有一个条件：要有好奇心</h2><p>哲学是什么？<br>天底下有没有一种东西是所有人都感兴趣的呢？有的！当人的基本需求（比如衣食住行，亲情爱情，爱与关怀等）满足之后，还有一些东西是人人都需要的，那就是明白我们是谁，我们为何在这里。宇宙，地球与生命是如何产生的？</p><p><u>探讨哲学的最好方式就是问一些哲学性的问题，如：这世界是如何创造出来的？其背后是否有某种一直或者意义？人死后还有生命吗？我们如何能够解答这些问题呢？最重要的是，我们应该如何生活？</u><br>我们无法从百科全书上得到这些答案，不过读一读别人的意见倒可以帮助我们建立自己对于生命的看法。</p><p>哲学家追求真理的过程很想一步侦探小说，对于案件，警方有时候可以侦破，但也有可能永远无法查出真相（虽然在某个地方一定有一个破案的办法）。因此，即使要回答一个问题很不容易，但无论如何总会有一个（且仅此一个）正确答案的。比如人死后要么就是透过某种形式存在，要不就是根本不在存在。</p><p>作者很好的比喻：许多人对于这个世界的种种也同样有种不可置信的感觉，就像我们看到魔术师突然从一顶原本空空如也的帽子里拉出一只小兔子一般。实际上我们就生活在这个世界上，是这个世界的一部分。形象的比喻一下，我们就是那只从礼帽里面变出的小兔子的一部分，小兔子可以比作是是整个宇宙，而我们则是寄居在小兔子身上的小小生物，但是我们和兔子不同的是，小兔子可不知道自己参与了一场魔术表演，而我们知道自己是某种神秘事物的一部分，我们想了解其中的奥秘；哲学家们总是试图沿着兔子的细毛往上爬，以便将魔术师的看个清楚；</p><h2 id="神话-善与恶之间脆弱的平衡"><a href="#神话-善与恶之间脆弱的平衡" class="headerlink" title="神话　善与恶之间脆弱的平衡"></a>神话　善与恶之间脆弱的平衡</h2><p>神话的世界观<br>    北欧<br>            （挪威）索尔和铁锤   北欧人相信人类居住的这部分是一部分岛屿，名为米德加德(Midgard)，也就是”中央王国“的意思，在这个中央王国内，有一个地方名叫阿斯加德（Asgard），乃是诸神的领地。中央王国之外，有一个叫乌特加德（Utgard），是狡猾的巨人居住的地方。<br>                象征肥沃多产的额女神芙瑞雅<br>                侍童洛奇<br>                《史莱慕之诗》  巨人之王史莱慕<br>希腊  公元前700左右，有一大部分希腊神话被荷马与赫西俄德（赫西俄德Hesiod以长诗《工作与时日》《神谱》闻名于后世，被称为“希腊训谕诗之父”。）记录下来。</p><p><code>赞诺芬尼司(Xnphans)</code>,古希腊哲学家。是早期批评荷马的神话的哲学家之一。 赞诺芬尼斯_百度百科  他指出人类按照自己的形象创造出这些天神。</p><p>随后这段期间，希腊人在希腊本土与意大利南部，小亚细亚等希腊殖民地建立了许多城市。在这些城市中，所有劳力工作由奴隶担任，因此市民有充分的闲暇，可以将所有的时间投注在政治与文化上；这时候的人们思考方式与以前大不相同，无需借助神话而提出一些哲学性的问题；<br>我们称这样的现象为“从神话的思考模式发展到以经验与理性为基础的思考模式”</p><h2 id="自然派哲学家-没有一件事物可以来自空无"><a href="#自然派哲学家-没有一件事物可以来自空无" class="headerlink" title="自然派哲学家　没有一件事物可以来自空无"></a>自然派哲学家　没有一件事物可以来自空无</h2><p>万事万物是否有一种基本的物质组成？<br>哲学家的课题：每个人关注和质疑的事项是什么？<br>了解了每一位哲学家的课题之后，我们就比较容易了解他的思想脉络，因为没有任何一位哲学家会企图探讨哲学的所有领域。</p><p>自然派哲学家<br>关注的课题是“大自然与它的循环和变化”<br>最重要的是，他们想要透过对大自然本身的研究来了解实际的变化过程，而不是借助神话来解释。<br>这样，哲学逐渐脱离了宗教的范畴。自然派哲学家朝科学推理的方向迈出了第一步，成为后来科学的先驱。</p><p>米雷特斯的三位哲学家<br>泰利斯<br>安娜克西曼德<br>安那西梅尼斯</p><p>没有任何事物会来自于虚无<br>帕梅尼德斯（约公元前540年~公元前480年）<br>他认为：</p><ol><li>没有任何事物会改变。</li><li>因此我们的感官认知是不可靠的</li></ol><p>理性主义：坚决相信人的理智的态度<br>理性主义者：百分百相信人类的理智是时间所有知识源泉的人</p><p>所有的事物都是流动的<br>赫拉克里德斯（约公元前540年~公元前480年）<br>他认为：</p><ol><li>万物都会改变（”一切事物都是流动的“）</li><li>我们的感官认知是可靠的</li></ol><p>恩培窦克里斯（西西里）<br>恩培窦克里斯认为帕梅尼德斯与赫拉克里德斯各有一点是对的，也各有一点是错的，造成这个根本性差异的原因是之前的两人都认定世间只有一种元素存在。<br>恩培窦克里斯认为：</p><ol><li>没有任何事物会改变。</li><li>我们的感官认知是可靠的</li></ol><p>恩培窦克里斯的结论是：大自然不可能只有一种元素构成。</p><p>安纳萨格拉斯（约公元前500年~公元前428年）</p><h2 id="德谟克里特斯-世界上最巧妙的玩具"><a href="#德谟克里特斯-世界上最巧妙的玩具" class="headerlink" title="德谟克里特斯　世界上最巧妙的玩具"></a>德谟克里特斯　世界上最巧妙的玩具</h2><blockquote><p>   积木为何是世界上最巧妙的玩具？</p></blockquote><p>原子理论<br>德谟克里特斯（约公元前460年~公元前370年，来自爱琴海北部海岸的阿布拉德小镇）</p><p><code>唯物论者</code>：只相信物质的东西。</p><h2 id="命运-算命者试图预测某些事实上极不可测的事物"><a href="#命运-算命者试图预测某些事实上极不可测的事物" class="headerlink" title="命运　算命者试图预测某些事实上极不可测的事物"></a>命运　算命者试图预测某些事实上极不可测的事物</h2><p>古希腊的德尔菲（Delphi）神论与宿命论 现在看来都是迷信</p><p>历史与医学<br>历史上最早的一批历史学家开始为历史事件寻求合理的解释。<br>贺若多陀斯（约公元前484年~公元前424年）与修西德底斯（约公元前460年~公元前400年）</p><p>在希腊哲学、历史学发展的同时，希腊医学兴起，其目的是为了疾病与健康寻求合乎自然的解释。<br>希波克拉底（约公元前460~公元前377年，生于寇斯岛，希腊医学始祖）<br>比较出名的是希波克拉底誓言：</p><blockquote><p>我将依照自身的能力与判断，采用对病人有利的疗法与处方，绝不施以有害或有毒之物。无论应何人之请，我也绝不给与致命药物或做此类之建议，也绝不协助妇女堕胎。进入病家访视时，我将以病人的福祉为念，不做任何贪渎害人之事，不受男女奴仆之引诱。我在执业时之所见所闻，反不应泄露者，我将严予保密。若我遵行此一誓言，不懈不怠，愿上苍使我乐享生命、精进医事并受世人敬重。若我违反誓言，愿我遭相反之命运。</p></blockquote><h2 id="苏格拉底-最聪明的是明白自己无知的人"><a href="#苏格拉底-最聪明的是明白自己无知的人" class="headerlink" title="苏格拉底　最聪明的是明白自己无知的人"></a>苏格拉底　最聪明的是明白自己无知的人</h2><blockquote><p>是否有人天生就很害羞呢？<br>最聪明的是明白自己无知的人。<br>真正的智慧来自内心。<br>明白是非者必能够进退合宜。</p></blockquote><p>雅典的哲学<br>以人为中心<br>苏格拉底是谁？<br>谈话的艺术</p><p>“苏格拉底式的反讽”<br>神圣的声音<br>雅典的小丑<br>正确的见解导致正确的行动</p><h2 id="雅典-废墟中升起了几栋高楼"><a href="#雅典-废墟中升起了几栋高楼" class="headerlink" title="雅典　废墟中升起了几栋高楼"></a>雅典　废墟中升起了几栋高楼</h2><h2 id="柏拉图-回归灵魂世界的渴望"><a href="#柏拉图-回归灵魂世界的渴望" class="headerlink" title="柏拉图　回归灵魂世界的渴望"></a>柏拉图　回归灵魂世界的渴望</h2><p>柏拉图学院<br>永远的真善美<br>理型的世界<br>真正的知识<br>不朽的灵魂<br>走出黑暗的洞穴（洞穴神话）<br>哲学之国（理想国）</p><h2 id="少校的小木屋-镜中的女孩双眼眨了一眨"><a href="#少校的小木屋-镜中的女孩双眼眨了一眨" class="headerlink" title="少校的小木屋　镜中的女孩双眼眨了一眨"></a>少校的小木屋　镜中的女孩双眼眨了一眨</h2><h2 id="亚力士多德-一位希望澄清我们观念的严谨的逻辑学家"><a href="#亚力士多德-一位希望澄清我们观念的严谨的逻辑学家" class="headerlink" title="亚力士多德　一位希望澄清我们观念的严谨的逻辑学家"></a>亚力士多德　一位希望澄清我们观念的严谨的逻辑学家</h2><p>逻辑<br>亚里士多德创立了逻辑学这门学科，他以实例显示我们在得出合乎逻辑的结论或证明时，必须遵循若干法则。</p><h2 id="希腊文化-一丝火花"><a href="#希腊文化-一丝火花" class="headerlink" title="希腊文化　一丝火花"></a>希腊文化　一丝火花</h2><p>生命与容忍的哲学<br>宗教，哲学与科学</p><p>犬儒学派</p><p>斯多葛学派</p><p>伊比鸠鲁学派</p><p>新柏拉图派哲学<br>神秘主义</p><h2 id="明信片-我对自己实施严格的检查制度"><a href="#明信片-我对自己实施严格的检查制度" class="headerlink" title="明信片　我对自己实施严格的检查制度"></a>明信片　我对自己实施严格的检查制度</h2><h2 id="两种文化-避免在真空中飘浮的唯一方式"><a href="#两种文化-避免在真空中飘浮的唯一方式" class="headerlink" title="两种文化　避免在真空中飘浮的唯一方式"></a>两种文化　避免在真空中飘浮的唯一方式</h2><p>印欧文化</p><p>闪族文化</p><h2 id="中世纪-对了一部分并不等于错"><a href="#中世纪-对了一部分并不等于错" class="headerlink" title="中世纪　对了一部分并不等于错"></a>中世纪　对了一部分并不等于错</h2><h2 id="文艺复兴-啊！藏在凡俗身躯里的神明子孙哪"><a href="#文艺复兴-啊！藏在凡俗身躯里的神明子孙哪" class="headerlink" title="文艺复兴　啊！藏在凡俗身躯里的神明子孙哪"></a>文艺复兴　啊！藏在凡俗身躯里的神明子孙哪</h2><p>实证法：以亲身的经验，而不是以古人的著作或凭空想象来作为知识的基础。</p><h2 id="巴洛克时期-宛如梦中的事物"><a href="#巴洛克时期-宛如梦中的事物" class="headerlink" title="巴洛克时期　宛如梦中的事物"></a>巴洛克时期　宛如梦中的事物</h2><h2 id="笛卡尔-他希望清除工地上所有的瓦砾"><a href="#笛卡尔-他希望清除工地上所有的瓦砾" class="headerlink" title="笛卡尔　他希望清除工地上所有的瓦砾"></a>笛卡尔　他希望清除工地上所有的瓦砾</h2><h2 id="斯宾诺莎-上帝不是一个傀儡戏师傅"><a href="#斯宾诺莎-上帝不是一个傀儡戏师傅" class="headerlink" title="斯宾诺莎　上帝不是一个傀儡戏师傅"></a>斯宾诺莎　上帝不是一个傀儡戏师傅</h2><h2 id="洛克-赤裸、空虚一如教师来到教室前的黑板"><a href="#洛克-赤裸、空虚一如教师来到教室前的黑板" class="headerlink" title="洛克　赤裸、空虚一如教师来到教室前的黑板"></a>洛克　赤裸、空虚一如教师来到教室前的黑板</h2><h2 id="休姆-将它付之一炬"><a href="#休姆-将它付之一炬" class="headerlink" title="休姆　将它付之一炬"></a>休姆　将它付之一炬</h2><p>如果我们手里有一本书，我们应该问：书里是否有包含任何与数量和数目有关的抽象思考？如果答案是没有，那么我们应该再问：书里是否包含任何与事实有关的经验性思考？如果答案是没有，那么我们还是将它付之一炬吧，因为这样的书纯粹是诡辩和幻想。</p><p>印象<br>观念</p><p>不可知论者：不持肯定或否定的态度，持怀疑态度。</p><h2 id="柏克莱-宛如燃烧的恒星旁一颗晕眩的行星"><a href="#柏克莱-宛如燃烧的恒星旁一颗晕眩的行星" class="headerlink" title="柏克莱　宛如燃烧的恒星旁一颗晕眩的行星"></a>柏克莱　宛如燃烧的恒星旁一颗晕眩的行星</h2><h2 id="柏客来-曾祖母向一名吉普赛妇人买的一面古老魔镜"><a href="#柏客来-曾祖母向一名吉普赛妇人买的一面古老魔镜" class="headerlink" title="柏客来　曾祖母向一名吉普赛妇人买的一面古老魔镜"></a>柏客来　曾祖母向一名吉普赛妇人买的一面古老魔镜</h2><h2 id="启蒙-从制针的技术到铸造大炮的方法"><a href="#启蒙-从制针的技术到铸造大炮的方法" class="headerlink" title="启蒙　从制针的技术到铸造大炮的方法"></a>启蒙　从制针的技术到铸造大炮的方法</h2><h2 id="康德-头上闪烁的星空与心中的道德规范"><a href="#康德-头上闪烁的星空与心中的道德规范" class="headerlink" title="康德　头上闪烁的星空与心中的道德规范"></a>康德　头上闪烁的星空与心中的道德规范</h2><h2 id="浪漫主义-神秘之路通向内心"><a href="#浪漫主义-神秘之路通向内心" class="headerlink" title="浪漫主义　神秘之路通向内心"></a>浪漫主义　神秘之路通向内心</h2><h2 id="黑格尔-可以站得住脚的就是有道理的"><a href="#黑格尔-可以站得住脚的就是有道理的" class="headerlink" title="黑格尔　可以站得住脚的就是有道理的"></a>黑格尔　可以站得住脚的就是有道理的</h2><h2 id="祁克果-欧洲正迈向破产的地步"><a href="#祁克果-欧洲正迈向破产的地步" class="headerlink" title="祁克果　欧洲正迈向破产的地步"></a>祁克果　欧洲正迈向破产的地步</h2><p>主观的真理<br>可以测算的真理<br>我信因为荒谬<br>个体主义者</p><h2 id="马克思-在欧洲游荡的幽灵"><a href="#马克思-在欧洲游荡的幽灵" class="headerlink" title="马克思　在欧洲游荡的幽灵"></a>马克思　在欧洲游荡的幽灵</h2><h2 id="达尔文-满载基因航行过生命的一艘小船"><a href="#达尔文-满载基因航行过生命的一艘小船" class="headerlink" title="达尔文　满载基因航行过生命的一艘小船"></a>达尔文　满载基因航行过生命的一艘小船</h2><h2 id="弗洛伊德-他内心出现那股令人讨厌的自大的冲动"><a href="#弗洛伊德-他内心出现那股令人讨厌的自大的冲动" class="headerlink" title="弗洛伊德　他内心出现那股令人讨厌的自大的冲动"></a>弗洛伊德　他内心出现那股令人讨厌的自大的冲动</h2><p>弗洛伊德发展了所谓的深度心理学或精神分析<br>弗洛依德主张人和他的环境之间不断有一种紧张关系存在。这种紧张关系（也就是冲突）尤其存在于他的驱策力，需要和社会之间。<br>基本需求可能会被伪装和升华；<br>快乐原则/本我<br>现实原则/自我<br>这世界的道德规范已经成为我们内心的一部分/成为超我<br>潜意识:我们并不一定能够意识到我们曾经有过的各种经验。但那些只要我们“用心想便可以记起来的想法或经验”通常是指被压抑的想法或经验。<br>不错的比喻：演讲厅说话<br>演讲厅称为”意识“，演讲厅之外称为“潜意识”；<br>大声喧哗者被”压抑“，椅子堵住门口作为”防御“</p><p>我们的感觉和行为会受到“潜意识的鼓动”<br>这类机制有好几种：比如<br>“说溜了嘴”<br>“合理化”我们自己也不愿意承认，也不愿意告诉别人我们做一件事的真正动机，因为这个动机是让人无法接受的。–&gt;”两面式沟通“的经验<br>“投射”把我们内心试图压抑的特点转移到别人身上。譬如说一个很吝啬的人会说别人斤斤计较。<br>如何对抗不愉快的经历呢？弗洛伊德发展出一个”自由联想“的技巧。<br>梦的解析<br>显梦 mainfest dream     潜梦意念<br>把潜梦意念转换成显梦面向的工作，他称之为“梦的运作”<br>超现实主义</p><p>灵感：潜意识的盖子被打开了，好像我们突然所想的东西是来自某种外部的源泉似的。<br>创作的过程是想象与理性细密交织的时刻</p><p>想象力也许可以创造新的事物，但是却不能加以挑选，这时候理智就发挥作用了！</p><h2 id="我们这个时代-人是注定要受自由之苦的"><a href="#我们这个时代-人是注定要受自由之苦的" class="headerlink" title="我们这个时代　人是注定要受自由之苦的"></a>我们这个时代　人是注定要受自由之苦的</h2><h2 id="花园宴会-一只白色的乌鸦"><a href="#花园宴会-一只白色的乌鸦" class="headerlink" title="花园宴会　一只白色的乌鸦"></a>花园宴会　一只白色的乌鸦</h2><h2 id="对位法-两首或多首旋律齐响"><a href="#对位法-两首或多首旋律齐响" class="headerlink" title="对位法　两首或多首旋律齐响"></a>对位法　两首或多首旋律齐响</h2><h2 id="那轰然一响-我们也是星尘"><a href="#那轰然一响-我们也是星尘" class="headerlink" title="那轰然一响　我们也是星尘"></a>那轰然一响　我们也是星尘</h2>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;伊甸园-在某个时刻事物必然从无到有&quot;&gt;&lt;a href=&quot;#伊甸园-在某个时刻事物必然从无到有&quot; class=&quot;headerlink&quot; title=&quot;伊甸园　在某个时刻事物必然从无到有&quot;&gt;&lt;/a&gt;伊甸园　在某个时刻事物必然从无到有&lt;/h2&gt;&lt;p&gt;你是谁？&lt;br&gt;世界从何处来？&lt;br&gt;    要么一直存在&lt;br&gt;    要么从无到有&lt;br&gt;        比如空间是由某样东西变成的，那么那样东西必然也是由另外一样东西变成的。一直推下去，那么必然是在某一时刻，事物从无到有。&lt;/p&gt;
&lt;p&gt;生死这两件事就像钱币的两面，被我们的思考翻来翻去的时候，当一面变得更清晰的时候，另外一面也随之变得更大而清晰。&lt;/p&gt;
    
    </summary>
    
    
      <category term="读书笔记" scheme="https://stemha.github.io/categories/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="哲学" scheme="https://stemha.github.io/tags/%E5%93%B2%E5%AD%A6/"/>
    
      <category term="名著" scheme="https://stemha.github.io/tags/%E5%90%8D%E8%91%97/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="https://stemha.github.io/2020/03/28/hello-world/"/>
    <id>https://stemha.github.io/2020/03/28/hello-world/</id>
    <published>2020-03-28T00:08:08.000Z</published>
    <updated>2020-09-09T01:04:16.797Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><figcaption><span>点击展开代码 >folded</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><a id="more"></a><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><div class="notification">  <button class="delete"></button>  通知消除测试模块</div> <script>document.addEventListener('DOMContentLoaded', () => {  (document.querySelectorAll('.notification .delete') || []).forEach(($delete) => {    $notification = $delete.parentNode;    $delete.addEventListener('click', () => {      $notification.parentNode.removeChild($notification);    });  });});</script><div class="notification is-success">  <button class="delete"></button>  Primar lorem ipsum dolor sit amet, consectetur  adipiscing elit lorem ipsum dolor. <strong>Pellentesque risus mi</strong>, tempus quis placerat ut, porta nec nulla. Vestibulum rhoncus ac ex sit amet fringilla. Nullam gravida purus diam, et dictum <a>felis venenatis</a> efficitur. Sit amet,  consectetur adipiscing elit</div><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p><h2 id="相关维护资料"><a href="#相关维护资料" class="headerlink" title="相关维护资料"></a>相关维护资料</h2><p><a href="https://www.jianshu.com/p/7795779f8f8d">hexo 添加和取消live2d看板动画</a><br><a href="https://dp2px.com/2019/04/25/hexo-meihua/">Hexo主题(Next)美化、配置、优化这一篇就够了 - DP2PX.COM</a><br><a href="https://blog.csdn.net/qq_36759224/article/details/85420403">Hexo 博客优化之博客美化系列（持续更新）</a><br><a href="https://blog.zhangruipeng.me/hexo-theme-icarus/">Icarus官方示例</a><br><a href="https://www.cnblogs.com/whiremapple/p/12419113.html">Hexo+Markdown在你自己的博客发布文章！</a><br><a href="https://removeif.github.io/theme/%E5%8D%9A%E5%AE%A2%E6%BA%90%E7%A0%81%E5%88%86%E4%BA%AB.html">博客源码分享-Icarus美化</a><br><a href="https://www.imaegoo.com/2020/icarus-with-bulma/">活用 Bulma 美化 Icarus 文章</a><br><a href="https://susreal.com/article/2019/hexo-theme-icarus-3/">Hexo | 初识icarus主题中的Bulma框架-宽度调整</a><br><a href="https://lqwang.net/5.html#8%E3%80%81%E6%96%87%E7%AB%A0%E9%A1%B5%E4%B8%89%E6%A0%8F%E5%8F%98%E4%B8%A4%E6%A0%8F">Hexo&amp;icarus主题修改-三栏变两栏</a><br><a href="https://www.alphalxy.com/2019/03/customize-icarus/">Icarus 主题自定义</a><br><a href="https://bulma.io/documentation/elements/">Bulma查询</a><br><a href="https://www.jianshu.com/p/60f5c84aa5a8">hexo创建自定义about页</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot;&gt;documentation&lt;/a&gt; for more info. If you get any problems when using Hexo, you can find the answer in &lt;a href=&quot;https://hexo.io/docs/troubleshooting.html&quot;&gt;troubleshooting&lt;/a&gt; or you can ask me on &lt;a href=&quot;https://github.com/hexojs/hexo/issues&quot;&gt;GitHub&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&quot;Quick-Start&quot;&gt;&lt;a href=&quot;#Quick-Start&quot; class=&quot;headerlink&quot; title=&quot;Quick Start&quot;&gt;&lt;/a&gt;Quick Start&lt;/h2&gt;&lt;h3 id=&quot;Create-a-new-post&quot;&gt;&lt;a href=&quot;#Create-a-new-post&quot; class=&quot;headerlink&quot; title=&quot;Create a new post&quot;&gt;&lt;/a&gt;Create a new post&lt;/h3&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;figcaption&gt;&lt;span&gt;点击展开代码 &gt;folded&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ hexo new &lt;span class=&quot;string&quot;&gt;&quot;My New Post&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;More info: &lt;a href=&quot;https://hexo.io/docs/writing.html&quot;&gt;Writing&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;Run-server&quot;&gt;&lt;a href=&quot;#Run-server&quot; class=&quot;headerlink&quot; title=&quot;Run server&quot;&gt;&lt;/a&gt;Run server&lt;/h3&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ hexo server&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;More info: &lt;a href=&quot;https://hexo.io/docs/server.html&quot;&gt;Server&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="博客维护" scheme="https://stemha.github.io/categories/%E5%8D%9A%E5%AE%A2%E7%BB%B4%E6%8A%A4/"/>
    
    
      <category term="hexo" scheme="https://stemha.github.io/tags/hexo/"/>
    
      <category term="教程" scheme="https://stemha.github.io/tags/%E6%95%99%E7%A8%8B/"/>
    
  </entry>
  
</feed>
