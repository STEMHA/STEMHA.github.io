<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>STEMHA&#39;s Blog</title>
  
  <subtitle>People have dream!</subtitle>
  <link href="/rss.xml" rel="self"/>
  
  <link href="https://stemha.github.io/"/>
  <updated>2020-06-11T14:31:25.141Z</updated>
  <id>https://stemha.github.io/</id>
  
  <author>
    <name>STEMHA</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>计算机网络教程-套接字</title>
    <link href="https://stemha.github.io/2020/06/11/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E6%95%99%E7%A8%8B-%E5%A5%97%E6%8E%A5%E5%AD%97/"/>
    <id>https://stemha.github.io/2020/06/11/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E6%95%99%E7%A8%8B-%E5%A5%97%E6%8E%A5%E5%AD%97/</id>
    <published>2020-06-11T06:48:19.000Z</published>
    <updated>2020-06-11T14:31:25.141Z</updated>
    
    <content type="html"><![CDATA[<h2 id="套接字的数据结构"><a href="#套接字的数据结构" class="headerlink" title="套接字的数据结构"></a>套接字的数据结构</h2><p>C 语言将套接字定义为一个结构（struct）。套接字结构由五个字段组成；每个套接字地址是一个由五部分构成的结构。</p><a id="more"></a><p><img src="/2020/06/11/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E6%95%99%E7%A8%8B-%E5%A5%97%E6%8E%A5%E5%AD%97/%E5%A5%97%E6%8E%A5%E5%AD%97%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84.JPG" alt="图1，套接字数据结构"></p><ul><li><code>族</code>。这个字段定义了协议簇（如何解释地址和端口号）。<ul><li>通常值是<code>PF_INET</code>（用于当前因特网）、PF_INET6（用于下一代因特网）等等。我们在本节使用PF_INET。</li></ul></li><li><code>类型</code>。这个字段定义了四个套接字类型：<ul><li>SOCK_STREAM（用于TCP）</li><li>SOCK_DGRAM（用于UDP）、</li><li>SOCK_SEQPACKET（用于SCTP）</li><li>SOCK_RAW（用于直接使用ISP 服务的应用）。</li></ul></li><li><code>协议</code>。这个字段定义了族中特定协议。对于TCP/IP 协议簇这个字段设置为0，因为它是族中唯一的协议。</li><li><code>本地套接字地址</code>。这个字段定义了本地套接字地址。<ul><li>一个套接字地址是一个结构，它由<code>长度字段</code>、<code>族字段</code>（对于TCP/IP 协议簇，它被设置为<code>常量AF_INET</code>）、<code>端口号字段</code>（定义了进程）以及<code>IP 地址字段</code>（定义了正在运行的进程所在的主机）构成。它也包含未使用字段。</li></ul></li><li><code>远程套接字地址</code>。这个字段定义了远程套接字地址。它的结构与本地套接字地址相同。</li></ul><h2 id="头文件"><a href="#头文件" class="headerlink" title="头文件"></a>头文件</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/socket.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;netinet/in.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;netdb.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;errno.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;signal.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;arpa/innet.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/wait.h&gt;</span></span></span><br></pre></td></tr></table></figure><h2 id="使用-TCP-通信"><a href="#使用-TCP-通信" class="headerlink" title="使用 TCP 通信"></a>使用 TCP 通信</h2><ul><li>TCP 是面向连接的协议。在发送或接收数据之前，需要在客户端和服务器之间建立连接。在连接建立之后，只要它们有数据要发送或接收，两端就可以彼此发送以及接收数据块。</li><li>TCP 连接可以是迭代的（一次服务一个客户）也可以是并发的（一次服务多个客户）。</li></ul><h3 id="TCP-中使用的套接字"><a href="#TCP-中使用的套接字" class="headerlink" title="TCP 中使用的套接字"></a>TCP 中使用的套接字</h3><p>TCP 服务器使用两个不同的套接字:</p><ul><li>一个用于连接建立。称为<code>监听套接字（listen socket）</code>。</li><li>一个用于数据传输。称为<code>套接字（socket）</code>。</li><li>设置两种套接字的目的是将建立阶段和数据交换阶段分开。</li></ul><p>服务器使用监听套接字来监听试图建立连接的新客户。在连接建立之后，服务器创建一个用于和客户交换数据的套接字并且最终终止连接。<br>客户只使用一个套接字用于连接建立以及数据交换。</p><p><img src="/2020/06/11/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E6%95%99%E7%A8%8B-%E5%A5%97%E6%8E%A5%E5%AD%97/TCP%E9%80%9A%E4%BF%A1%E4%B8%AD%E4%BD%BF%E7%94%A8%E7%9A%84%E5%A5%97%E6%8E%A5%E5%AD%97.JPG" alt="图2，TCP 通信中使用的套接字"></p><h2 id="通信流程图"><a href="#通信流程图" class="headerlink" title="通信流程图"></a>通信流程图</h2><p><img src="/2020/06/11/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E6%95%99%E7%A8%8B-%E5%A5%97%E6%8E%A5%E5%AD%97/%E8%BF%AD%E4%BB%A3TCP%E9%80%9A%E4%BF%A1%E6%B5%81%E7%A8%8B%E5%9B%BE.JPG" alt="图3，迭代TCP通信流程图"></p><h3 id="服务器进程"><a href="#服务器进程" class="headerlink" title="服务器进程"></a>服务器进程</h3><ol><li>TCP 服务器进程调用socket 和bind 函数，但是这两个函数创建监听套接字，它只在连接建立阶段被使用。</li><li>之后，服务器进程调用listen函数，允许操作系统开始接收客户、完成连接阶段并把他们放入等待被服务的列表。<ul><li>这个函数也定义了被连接的客户等待列表的大小，这依赖于服务器进程的复杂性，但是通常值为5。</li></ul></li><li>现在，服务器进程开始循环并且逐一对客户进行服务。<ul><li>在每次循环中，服务器进程调用accept函数从已连接客户的等待列表中去除一个客户，对其进行服务。</li><li>如果列表是空的，那么accept 函数进入阻塞状态直到出现一个客户待服务。</li><li>当accept 函数返回，它创建一个新的与监听套接字一样的套接字。</li></ul></li><li>监听套接字现在移入后台，并且新的套接字成为活动套接字。</li><li>服务器进程现在使用连接建立期间获得的客户套接字地址，用它来填充新建套接字的远程套接字地址。</li></ol><p>此时，客户和服务器可以交换数据。我们没有给出数据传输的特定方式，因为这取决于特定的客户-服务器对。</p><ul><li>TCP 使用<code>send</code>以及<code>recv</code>程序在它们之间传输数据字节。这两个函数比UDP 中使用的sendto 和recvfrom 函数更简单，因为它们不提供远程套接字地址；连接已经在客户和服务器之间建立。</li><li>然而，由于TCP 用于传输无边界报文，每个应用需要仔细设计数据传输部分。</li></ul><p>send 和recv 函数可能被调用多次来处理大量数据传输。可以将上图的流程图当作一个通用流程图；如果是特殊用途，需要定义服务器数据传输（sever data-transfer）盒。</p><h3 id="客户进程"><a href="#客户进程" class="headerlink" title="客户进程"></a>客户进程</h3><p>客户进程进行主动开启（active open）。换言之，它开启连接。它调用socket 函数来创建一个套接字并填充前三个字段。<br>尽管某些实现要求客户进程也调用bind 函数来填充本地套接字，但通常这是由操作系统自动完成的，操作系统为客户选择一个临时端口号<br>最终close 函数被调用以销毁套接字。<br>客户流程图与UDP 版本类似，除了客户数据传输（client data-transfer）盒需要为每个特定情况定义。</p><h2 id="套接字接口编程（TCP）"><a href="#套接字接口编程（TCP）" class="headerlink" title="套接字接口编程（TCP）"></a><strong>套接字接口编程（TCP）</strong></h2><p>编写客户和服务器程序来模拟使用TCP的标准回送应用——客户程序发送一个短的字符串给服务器；服务器将相同的字符串回送到客户。在我们这样做之前，需要为客户和服务器数据传输盒提供流程图</p><h3 id="客户和服务器数据传输盒的流程图"><a href="#客户和服务器数据传输盒的流程图" class="headerlink" title="客户和服务器数据传输盒的流程图"></a>客户和服务器数据传输盒的流程图</h3><p><img src="/2020/06/11/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E6%95%99%E7%A8%8B-%E5%A5%97%E6%8E%A5%E5%AD%97/%E5%AE%A2%E6%88%B7%E5%92%8C%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%95%B0%E6%8D%AE%E4%BC%A0%E8%BE%93%E7%9B%92%E7%9A%84%E6%B5%81%E7%A8%8B%E5%9B%BE.JPG" alt="图4，客户和服务器数据传输盒的流程图"><br>（发送消息和回送消息）对于发送和回送短的字符这个特定的情况，因为待发送的字符串很短（小于几个单词），我们可以在客户端调用send函数一次完成。<br>然而，TCP 并不保证把整个报文在一个报文段内发送。因此，我们需要在服务器端调用一组recv（在一个循环内）来接收整个报文并将它们收集到缓冲区内，从而能一次性发送回去。<br>当服务器向客户发送回送报文时，它也可能使用多个报文段，这意味着客户的recv 程序需要调用多少次就会被调用多少次。</p><h3 id="缓冲区设置"><a href="#缓冲区设置" class="headerlink" title="缓冲区设置"></a>缓冲区设置</h3><p>另一个有待解决的问题是设置缓冲区，缓冲区用于在每个站点接收数据。</p><ul><li>我们<strong>需要控制接收的字节数以及下一个数据块存储的位置。</strong></li><li>如图所示，程序设置了一些变量进行控制。</li><li>在每次迭代中，<code>指针（ptr）</code>移动指向下一个要接收的字节，<code>接收字节的长度（len）</code>呈增长趋势并且<code>待接收的最大字节数（maxLen）</code>呈减少趋势。</li></ul><p><img src="/2020/06/11/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E6%95%99%E7%A8%8B-%E5%A5%97%E6%8E%A5%E5%AD%97/%E7%94%A8%E4%BA%8E%E6%8E%A5%E6%94%B6%E7%9A%84%E7%BC%93%E5%86%B2%E5%8C%BA.JPG" alt="图5，用于接收的缓冲区"></p><h3 id="回送服务器程序"><a href="#回送服务器程序" class="headerlink" title="回送服务器程序"></a><strong>回送服务器程序</strong></h3><p>程序遵循迭代TCP通信流程图。<br>第 6 行到第16 行声明并定义了变量。<br>第18 行到第21 行分配内存并且按UDP 情况下所述创建了本地（服务器）套接字地址。<br>第23 行到第27 行创建了监听套接字。第29 行到第33 行将监听套接字绑定到第18 行到第21 行创建的服务器套接字地址上。<br>第35 行到第39 行是TCP 通信中的新内容。调用 listen 函数让操作系统完成连接建立阶段并将客户置入等待列表。<br>第44 行到第48 行调用accept 函数来移除等待列表中的第一个客户并开始为其服务。如果在等待列表中没有客户，那么这个函数处于阻塞状态。<br>第50 行到第56 行对图2-63 中描述的数据传输部分进行编码。最大缓冲区大小与回送字符串长度都和图5中所示相同。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//回送服务器程序</span></span><br><span class="line"><span class="meta"># <span class="meta-keyword">include</span><span class="meta-string">"headerFiles.h"</span>  <span class="comment">//也就是我上面写的那些头文件的集合</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//声明并定义</span></span><br><span class="line"><span class="keyword">int</span> ls;                                        <span class="comment">//监听套接字描述符（引用）</span></span><br><span class="line"><span class="keyword">int</span> s;                                         <span class="comment">//套接字描述符（引用）</span></span><br><span class="line"><span class="keyword">char</span> buffer[<span class="number">256</span>];                              <span class="comment">//数据缓冲区</span></span><br><span class="line"><span class="keyword">char</span> *ptr=buffer;                              <span class="comment">//数据缓冲区</span></span><br><span class="line"><span class="keyword">int</span> len=<span class="number">0</span>;                                     <span class="comment">//等待接收或者发送的字节数</span></span><br><span class="line"><span class="keyword">int</span> maxLen=<span class="keyword">sizeof</span>(buffer);                     <span class="comment">//最大接收字节数</span></span><br><span class="line"><span class="keyword">int</span> n;                                         <span class="comment">//每次调用receive接收的字节数</span></span><br><span class="line"><span class="keyword">int</span> waitSize=<span class="number">16</span>;                               <span class="comment">//等待客户数量</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">sockaddr_in</span> <span class="title">servAddr</span>;</span>                   <span class="comment">//服务器地址</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">sockaddr_in</span> <span class="title">clntAddr</span>;</span>                   <span class="comment">//客户地址</span></span><br><span class="line"><span class="keyword">int</span> clntAddrLen;                               <span class="comment">//客户地址长度</span></span><br><span class="line"><span class="comment">//创建本地（服务器）套接字地址</span></span><br><span class="line"><span class="built_in">memset</span>(&amp;servAddr,<span class="number">0</span>,sieof(servAddr));</span><br><span class="line">servAddr.sin_family=AF_INET;</span><br><span class="line">servAddr.sin_addr.s_addr=htonl(INADDR_ANY);     <span class="comment">//默认IP地址</span></span><br><span class="line">servAddr.sin_port=htonl(SERV_PORT);             <span class="comment">//默认端口</span></span><br><span class="line"><span class="comment">//创建监听套接字</span></span><br><span class="line"><span class="keyword">if</span>(ls=socket(PF_INET,SOCK_STREAM,<span class="number">0</span>)&lt;<span class="number">0</span>)           <span class="comment">//PF_INET族，SOCK_STREAM指套接字类型（tcp）</span></span><br><span class="line">&#123;</span><br><span class="line">perror(<span class="string">"Error:Listen socket failed!"</span>);</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//将套接字绑定到本地套接字地址</span></span><br><span class="line"><span class="keyword">if</span>(bind(ls,&amp;servAddr,<span class="keyword">sizeof</span>(servAddr))&lt;<span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">perror(<span class="string">"Error:binding failed!"</span>);</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">&#125; </span><br><span class="line"><span class="comment">//创建连接请求</span></span><br><span class="line"><span class="keyword">if</span>(listen(ls,waitSize)&lt;<span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">perror(<span class="string">"Error:listening failed!"</span>);</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//处理连接</span></span><br><span class="line"><span class="keyword">for</span>(;;)       <span class="comment">//永远运行</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//接收来自客户的连接</span></span><br><span class="line"><span class="keyword">if</span>(s=accept(ls,&amp;clntAddr,&amp;clntAddrLen)&lt;<span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">perror(<span class="string">"Error:accepting failed!"</span>);</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//数据传输部分</span></span><br><span class="line"><span class="keyword">while</span>((n=recv(s,ptr,maxLen,<span class="number">0</span>))&gt;<span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">ptr+=n;           <span class="comment">//在缓冲区上移动指针</span></span><br><span class="line">maxLen-=n;        <span class="comment">//调整待接收的最大字节数</span></span><br><span class="line">len+=n;           <span class="comment">//更新已经接收的字节数</span></span><br><span class="line">&#125;</span><br><span class="line">send(s,buffer,len,<span class="number">0</span>); <span class="comment">//发回（回送）所有接收的字节</span></span><br><span class="line"><span class="comment">//关闭套接字</span></span><br><span class="line">close(s);</span><br><span class="line">&#125;<span class="comment">//循环结束</span></span><br><span class="line">&#125;<span class="comment">//回送服务器程序结束</span></span><br></pre></td></tr></table></figure><p>tips:</p><ul><li>在C/C++写网络程序的时候，往往会遇到字节的网络顺序和主机顺序的问题。这是就可能用到htonl(), ntohl(), ntohs()，htons()这4个函数。</li><li>htonl()–”Host to Network Long”</li><li>ntohl()–”Network to Host Long”</li><li>htons()–”Host to Network Short”</li><li>ntohs()–”Network to Host Short”</li></ul><h3 id="回送客户程序"><a href="#回送客户程序" class="headerlink" title="回送客户程序"></a><strong>回送客户程序</strong></h3><p>TCP 的客户程序与UDP 的客户程序非常相似，只有些许不同。</p><ul><li>因为TCP 是面向连接的协议第36 行到第40 行调用connect 函数连接服务器。</li><li>第42 行到第48 行使用图3中的思想完成数据传输。</li><li>按图5所示方式完成接收数据的长度调整和指针移动。</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//回送客户程序</span></span><br><span class="line"><span class="meta"># <span class="meta-keyword">include</span><span class="meta-string">"headerFiles.h"</span>  <span class="comment">//也就是我上面写的那些头文件的集合</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc,<span class="keyword">char</span> *argv[])</span>   <span class="comment">//三个参数之后待检验</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//声明并定义</span></span><br><span class="line"><span class="keyword">int</span> s;                                        <span class="comment">//套接字描述符</span></span><br><span class="line"><span class="keyword">int</span> n;                                         <span class="comment">//每次调用recv接收的字节数</span></span><br><span class="line"><span class="keyword">char</span> servName;                                 <span class="comment">//服务器名</span></span><br><span class="line"><span class="keyword">int</span> servPort;                                  <span class="comment">//服务器名</span></span><br><span class="line"><span class="keyword">char</span> *<span class="built_in">string</span>;                                  <span class="comment">//被回送的字符串</span></span><br><span class="line"><span class="keyword">int</span> len;                                       <span class="comment">//被回送的字符串的长度</span></span><br><span class="line"><span class="keyword">char</span> buffer[<span class="number">256</span>+<span class="number">1</span>];                            <span class="comment">//缓冲区</span></span><br><span class="line"><span class="keyword">char</span> *ptr=buffer;                              <span class="comment">//在缓冲区上移动指针</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">sockaddr_in</span> <span class="title">serverAddr</span>;</span>                   <span class="comment">//服务器套接字地址</span></span><br><span class="line"><span class="comment">//检测并设置参数</span></span><br><span class="line"><span class="keyword">if</span>(argc!=<span class="number">3</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"Error:three arguments are needed!"</span>);</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line">servName=argv[<span class="number">1</span>];</span><br><span class="line">servPort=atoi(argv[<span class="number">2</span>]);</span><br><span class="line"><span class="built_in">string</span>=arg[<span class="number">3</span>];</span><br><span class="line"><span class="comment">//创建远程（服务器）套接字地址</span></span><br><span class="line"><span class="built_in">memset</span>(&amp;serverAddr,<span class="number">0</span>,sieof(serverAddr));</span><br><span class="line">servAddr.sin_family=AF_INET;</span><br><span class="line">inet_pton(AF_INET,servName,&amp;serverAddr.sin_addr); <span class="comment">//服务器IP地址</span></span><br><span class="line">serverAddr.sin_port=htons(SERV_PORT);               <span class="comment">//默认端口</span></span><br><span class="line"><span class="comment">//创建套接字</span></span><br><span class="line"><span class="keyword">if</span>(ls=socket(PF_INET,SOCK_STREAM,<span class="number">0</span>)&lt;<span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">perror(<span class="string">"Error: socket creation failed!"</span>);</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//连接到服务器</span></span><br><span class="line"><span class="keyword">if</span>(connect(sd,(struct sockaddr*)&amp;serverAddr,<span class="keyword">sizeof</span>(serverAddr))&lt;<span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">perror(<span class="string">"Error:connection failed!"</span>);</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//数据传输部分</span></span><br><span class="line">send(s,<span class="built_in">string</span>,<span class="built_in">strlen</span>(<span class="built_in">string</span>),<span class="number">0</span>);</span><br><span class="line"><span class="keyword">while</span>((n=recv(s,ptr,maxLen,<span class="number">0</span>))&gt;<span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">ptr+=n;           <span class="comment">//在缓冲区上移动指针</span></span><br><span class="line">maxLen-=n;        <span class="comment">//调整待接收的最大字节数</span></span><br><span class="line">len+=n;           <span class="comment">//更新已经接收的字节数</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//打印并验证回送的字符串</span></span><br><span class="line">buffer[len]=<span class="string">'\0'</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"Echoed string received:"</span>);</span><br><span class="line"><span class="built_in">fputs</span>(buffer,<span class="built_in">stdout</span>);</span><br><span class="line"><span class="comment">//关闭套接字</span></span><br><span class="line">close(s);</span><br><span class="line"><span class="comment">//停止程序</span></span><br><span class="line"><span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">&#125;<span class="comment">//回送客户程序结束</span></span><br></pre></td></tr></table></figure><h2 id="Linux下的socket-函数"><a href="#Linux下的socket-函数" class="headerlink" title="Linux下的socket()函数"></a><strong>Linux下的socket()函数</strong></h2><p>inux中的一切都是文件，每个文件都有一个<code>整数类型的文件描述符</code>；<br>socket也是一个文件，也有文件描述符。使用socket()函数创建套接字以后，返回值就是一个 <strong>int类型的文件描述符</strong>。<br>在 Linux 下使用 &lt;sys/socket.h&gt; 头文件中 socket()函数来创建套接字，原型为：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">socket</span><span class="params">(<span class="keyword">int</span> af, <span class="keyword">int</span> type, <span class="keyword">int</span> protocol)</span></span>;</span><br></pre></td></tr></table></figure><p>1) af 为<code>地址族（Address Family）</code>，也就是 IP 地址类型，常用的有 AF_INET 和 AF_INET6。</p><ul><li>AF 是“Address Family”的简写，INET是“Inetnet”的简写。</li><li>AF_INET 表示 IPv4 地址，例如 127.0.0.1；</li><li>AF_INET6 表示 IPv6 地址，例如 1030::C9B4:FF12:48AA:1A2B。</li><li>也可以使用 PF 前缀，PF 是“Protocol Family”的简写，它和 AF 是一样的。例如，PF_INET 等价于 AF_INET，PF_INET6 等价于 AF_INET6。</li></ul><blockquote><p>需要记住127.0.0.1，它是一个特殊IP地址，表示本机地址</p></blockquote><p>2) type 为数据传输方式/套接字类型，</p><ul><li>常用的有 SOCK_STREAM（流格式套接字/面向连接的套接字） </li><li>SOCK_DGRAM（数据报套接字/无连接的套接字）</li></ul><p>3) protocol 表示传输协议，常用的有 IPPROTO_TCP 和 IPPTOTO_UDP，分别表示 TCP 传输协议和 UDP 传输协议。<br>有了地址类型和数据传输方式，还不足以决定采用哪种协议吗？为什么还需要第三个参数呢？</p><p>正如大家所想，一般情况下有了 af 和 type 两个参数就可以创建套接字了，操作系统会自动推演出协议类型，除非遇到这样的情况：有两种不同的协议支持同一种地址类型和数据传输类型。如果我们不指明使用哪种协议，操作系统是没办法自动推演的。</p><p>本教程使用 IPv4 地址，参数 af 的值为 PF_INET。如果使用 SOCK_STREAM 传输数据，那么满足这两个条件的协议只有 TCP，因此可以这样来调用 socket() 函数：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> tcp_socket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);  <span class="comment">//IPPROTO_TCP表示TCP协议</span></span><br></pre></td></tr></table></figure><p>这种套接字称为 TCP 套接字。</p><p>如果使用 SOCK_DGRAM 传输方式，那么满足这两个条件的协议只有 UDP，因此可以这样来调用 socket() 函数：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> udp_socket = socket(AF_INET, SOCK_DGRAM, IPPROTO_UDP);  <span class="comment">//IPPROTO_UDP表示UDP协议</span></span><br></pre></td></tr></table></figure><p>这种套接字称为 UDP 套接字。</p><p>上面两种情况都只有一种协议满足条件，可以将 protocol 的值设为 0，系统会自动推演出应该使用什么协议，如下所示：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> tcp_socket = socket(AF_INET, SOCK_STREAM, <span class="number">0</span>);  <span class="comment">//创建TCP套接字</span></span><br><span class="line"><span class="keyword">int</span> udp_socket = socket(AF_INET, SOCK_DGRAM, <span class="number">0</span>);  <span class="comment">//创建UDP套接字</span></span><br></pre></td></tr></table></figure><h2 id="Windows下的socket-函数"><a href="#Windows下的socket-函数" class="headerlink" title="Windows下的socket()函数"></a><strong>Windows下的socket()函数</strong></h2><p>Windows 会区分 socket 和普通文件，它把 socket 当做一个网络连接来对待，调用 socket() 以后，返回值是 SOCKET 类型，用来表示一个套接字。<br>Windows 下也使用 socket() 函数来创建套接字，原型为：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">SOCKET <span class="title">socket</span><span class="params">(<span class="keyword">int</span> af, <span class="keyword">int</span> type, <span class="keyword">int</span> protocol)</span></span>;</span><br></pre></td></tr></table></figure><p>除了返回值类型不同，其他都是相同的。Windows 不把套接字作为普通文件对待，而是返回 SOCKET 类型的句柄。</p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p>计算机网络-自顶向下方法<br><a href="http://c.biancheng.net/view/2344.html">bind()和connect()函数：绑定套接字并建立连接</a><br><a href="http://c.biancheng.net/view/2345.html">listen()和accept()函数：让套接字进入监听状态并响应客户端请求</a><br><a href="http://c.biancheng.net/view/2346.html">send()/recv()和write()/read()：发送数据和接收数据</a><br><a href="https://www.cnblogs.com/eping/archive/2009/12/12/1622579.html">TCP协议的无消息边界问题</a><br><a href="http://c.biancheng.net/view/2350.html">TCP协议的粘包问题（数据的无边界性）</a><br><a href="https://blog.csdn.net/hherima/article/details/42921149">TCP网络传输“粘包”问题，经典解决（附代码）</a><br><a href="http://c.biancheng.net/view/2131.html">socket()函数用法详解：创建套接字</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;套接字的数据结构&quot;&gt;&lt;a href=&quot;#套接字的数据结构&quot; class=&quot;headerlink&quot; title=&quot;套接字的数据结构&quot;&gt;&lt;/a&gt;套接字的数据结构&lt;/h2&gt;&lt;p&gt;C 语言将套接字定义为一个结构（struct）。套接字结构由五个字段组成；每个套接字地址是一个由五部分构成的结构。&lt;/p&gt;
    
    </summary>
    
    
      <category term="计算机网络" scheme="https://stemha.github.io/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/"/>
    
    
      <category term="TCP" scheme="https://stemha.github.io/tags/TCP/"/>
    
      <category term="套接字" scheme="https://stemha.github.io/tags/%E5%A5%97%E6%8E%A5%E5%AD%97/"/>
    
  </entry>
  
  <entry>
    <title>计算机网络教程-TCP状态转换</title>
    <link href="https://stemha.github.io/2020/06/10/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E6%95%99%E7%A8%8B-TCP%E7%8A%B6%E6%80%81%E8%BD%AC%E6%8D%A2/"/>
    <id>https://stemha.github.io/2020/06/10/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E6%95%99%E7%A8%8B-TCP%E7%8A%B6%E6%80%81%E8%BD%AC%E6%8D%A2/</id>
    <published>2020-06-10T15:24:02.000Z</published>
    <updated>2020-06-10T15:43:08.081Z</updated>
    
    <content type="html"><![CDATA[<h2 id="TCP状态表"><a href="#TCP状态表" class="headerlink" title="TCP状态表"></a>TCP状态表</h2><table><thead><tr><th align="left">状态</th><th align="left">说明</th><th align="left">状态</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left">CLOSED</td><td align="left">没有连接存在</td><td align="left">FIN-WAIT-2</td><td align="left">首个FIN 的ACK 已被接收；等待第二个FIN</td></tr><tr><td align="left">LISTEN</td><td align="left">接收到被动打开；等待SYN</td><td align="left"><code>CLOSE-WAIT</code></td><td align="left">首个FIN 被接收，ACK 被发送；等待应用关闭</td></tr><tr><td align="left">SYN-SENT</td><td align="left">SYN已被发送；等待ACK</td><td align="left"><code>TIME-WAIT</code></td><td align="left">第二个FIN 被接收，ACK 被发送；等待2MSL 超时</td></tr><tr><td align="left">SYN-RCVD</td><td align="left">SYN + ACK 已被发送；等待ACK</td><td align="left">LAST-ACK</td><td align="left">第二个FIN 被发送；等待ACK</td></tr><tr><td align="left"><code>ESTABLISHED</code></td><td align="left">连接建立；数据传输正在进行</td><td align="left">CLOSING</td><td align="left">双端决定同时关闭</td></tr><tr><td align="left">FIN-WAIT-1</td><td align="left">首个FIN 已被发送；等待ACK</td><td align="left"></td><td align="left"></td></tr><tr><td align="left"><a id="more"></a></td><td align="left"></td><td align="left"></td><td align="left"></td></tr></tbody></table><h2 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h2><p><img src="/2020/06/10/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E6%95%99%E7%A8%8B-TCP%E7%8A%B6%E6%80%81%E8%BD%AC%E6%8D%A2/TCP%E7%8A%B6%E6%80%81%E8%BD%AC%E6%8D%A2.JPG" alt="TCP状态转换"><br>客户进程向它的TCP 发出主动打开命令来请求连接到特定套接字地址。</p><ul><li>TCP 发送一个SYN 段并转移到<code>SYN-SENT</code> 状态。</li><li>在收到SYN + ACK 段后，TCP 发送了一个ACK 段并且进入<code>ESTABLISHED</code>状态。</li><li>数据被传输，可能是双向的，并且被确认。</li></ul><p>当客户进程没有数据要发送了，它发出称为主动关闭的命令。</p><ul><li>TCP 发送FIN 段并进入<code>FIN-WAIT-1</code>状态。</li><li>当它接收到ACK 段，它进入<code>FIN-WAIT-2</code>状态。</li><li>当客户接收到FIN 段时，它发送一个ACK 段并进入<code>TIME-WAIT</code>状态。</li><li>客户保持这种状态2MSL秒（TCP 计时器）。</li><li>当相应计时器超时，客户进入<code>CLOSED</code>状态。</li></ul><p>服务器进程发出被动打开命令。</p><ul><li>服务器TCP 进入<code>LISTEN</code> 状态并且保持这种状态直到它接收到一个SYN 段。</li><li>TCP 之后发送一个SYN + ACK 段并且进入<code>SYN-RCVD</code> 状态，等待客户发送ACK段。</li><li>在接收到ACK 段后，TCP 进入<code>ESTABLISHED</code> 状态，这就开始了数据传输。</li></ul><p>TCP 保持这种状态直到它接收到一个来自客户的FIN 段，这表示没有其他数据要被交换且连接可以被关闭。</p><ul><li>一旦服务器接收到FIN 段，那么它就向客户发送带有虚拟EOF 标记的排队中所有的数据，这意味连接必须被关闭。</li><li>它发送一个ACK 段且进入<code>CLOSE-WAIT</code>状态，但是推迟确认来自客户的FIN 段，直到它接收到来自进程的被动关闭命令。</li><li>在接收到被动关闭命令后，服务器向客户发送FIN 段并进入<code>LAST-ACK</code>状态，等待最终ACK。</li><li>当ACK 段从客户发送后被服务器接收，服务器进入<code>CLOSE</code> 状态。</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;TCP状态表&quot;&gt;&lt;a href=&quot;#TCP状态表&quot; class=&quot;headerlink&quot; title=&quot;TCP状态表&quot;&gt;&lt;/a&gt;TCP状态表&lt;/h2&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&quot;left&quot;&gt;状态&lt;/th&gt;
&lt;th align=&quot;left&quot;&gt;说明&lt;/th&gt;
&lt;th align=&quot;left&quot;&gt;状态&lt;/th&gt;
&lt;th align=&quot;left&quot;&gt;说明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td align=&quot;left&quot;&gt;CLOSED&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;没有连接存在&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;FIN-WAIT-2&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;首个FIN 的ACK 已被接收；等待第二个FIN&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;left&quot;&gt;LISTEN&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;接收到被动打开；等待SYN&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;&lt;code&gt;CLOSE-WAIT&lt;/code&gt;&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;首个FIN 被接收，ACK 被发送；等待应用关闭&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;left&quot;&gt;SYN-SENT&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;SYN已被发送；等待ACK&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;&lt;code&gt;TIME-WAIT&lt;/code&gt;&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;第二个FIN 被接收，ACK 被发送；等待2MSL 超时&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;left&quot;&gt;SYN-RCVD&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;SYN + ACK 已被发送；等待ACK&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;LAST-ACK&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;第二个FIN 被发送；等待ACK&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;left&quot;&gt;&lt;code&gt;ESTABLISHED&lt;/code&gt;&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;连接建立；数据传输正在进行&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;CLOSING&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;双端决定同时关闭&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;left&quot;&gt;FIN-WAIT-1&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;首个FIN 已被发送；等待ACK&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;left&quot;&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
    
    </summary>
    
    
      <category term="计算机网络" scheme="https://stemha.github.io/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/"/>
    
    
      <category term="传输层" scheme="https://stemha.github.io/tags/%E4%BC%A0%E8%BE%93%E5%B1%82/"/>
    
      <category term="TCP" scheme="https://stemha.github.io/tags/TCP/"/>
    
  </entry>
  
  <entry>
    <title>计算机网络教程-HTTP协议</title>
    <link href="https://stemha.github.io/2020/06/09/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E6%95%99%E7%A8%8B-HTTP%E5%8D%8F%E8%AE%AE/"/>
    <id>https://stemha.github.io/2020/06/09/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E6%95%99%E7%A8%8B-HTTP%E5%8D%8F%E8%AE%AE/</id>
    <published>2020-06-09T12:23:53.000Z</published>
    <updated>2020-06-09T14:45:28.081Z</updated>
    
    <content type="html"><![CDATA[<h2 id="HTTP（超文本传输协议）"><a href="#HTTP（超文本传输协议）" class="headerlink" title="HTTP（超文本传输协议）"></a><strong>HTTP（超文本传输协议）</strong></h2><p><code>超文本传输协议（HyperText Transfer Protocol，HTTP）</code>是一种用来定义客户服务器程序如何编写和如何从万维网获取网页的协议。</p><ul><li>一个HTTP 客户发送一个请求；HTTP 服务器返回响应。</li><li>服务器使用80 端口号；客户使用一个临时端口号。</li><li>HTTP 使用TCP 服务。这意味着，在客户和服务器进行任何事务之前，它们之间必须建立连接。</li><li>在事务之后，连接应当终止。然而，客户和服务器不需要担心交换报文中的差错以及报文的丢失，因为TCP 是可靠的而且将处理这个问题。<a id="more"></a></li></ul><h2 id="非持续与持续连接"><a href="#非持续与持续连接" class="headerlink" title="非持续与持续连接"></a><strong>非持续与持续连接</strong></h2><p>嵌入到网页中的超文本概念可能需要多个请求和应答。</p><ul><li>如果网页，这个被获取的对象，位于不同的服务器，那么我们没有其他选择只能每获取一个对象就要创建一个新的TCP 连接。</li><li>然而，如果某些对象是位于同一台服务器的，我们可以有两种选择：<ul><li>一是每次使用一个新的TCP 连接获取一个对象。<code>非持续连接（nonpersistent connection）</code></li><li>二是创建一个TCP 连接获取全部对象。<code>持续连接（persistent connection）</code></li></ul></li><li>在HTTP1.1 版之前指定的是非持续连接，持续连接在1.1 版中是默认的，但是可以被用户改变。</li></ul><h3 id="非持续连接"><a href="#非持续连接" class="headerlink" title="非持续连接"></a><strong>非持续连接</strong></h3><p>在非持续连接中，一个TCP 连接被每一组请求/应答所创建。下面是这个策略的步骤：<br>1．客户开启一个TCP 连接并发送请求。<br>2．服务器发送响应并关闭连接。<br>3．客户读取数据直到它遇到了文件结束标记，然后关闭连接。</p><p>在这种策略中，如果文件包含了N 个位于不同文件的图片连接（全都位于同一台服务器），那么必须开启和关闭连接N+1 (?)次。非持续策略给服务器带来了高额开销，因为每次连接被开启时服器都需要N+1个不同的缓冲区。</p><p>下图展示了一个非持续连接的例子。客户需要访问一个包含图片链接的文件。文本文件和图片位于同一台服务器上。这里我们需要两个连接。对于每一个连接，TCP 需要至少三个握手报文来建立连接，但是请求可以和第三个报文一起发送。在连接建立之后，请求对象可以被发送。在接收到一个对象之后，需要另外三次握手报文来结束连接</p><p><img src="/2020/06/09/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E6%95%99%E7%A8%8B-HTTP%E5%8D%8F%E8%AE%AE/%E9%9D%9E%E6%8C%81%E7%BB%AD%E8%BF%9E%E6%8E%A5%E7%A4%BA%E4%BE%8B-%E4%B8%A4%E4%B8%AA%E6%96%87%E4%BB%B6%E4%BD%8D%E4%BA%8E%E5%90%8C%E4%B8%80%E5%8F%B0%E6%9C%8D%E5%8A%A1%E5%99%A8%E4%B8%8A%E9%9D%A2.JPG" alt="图1，非持续连接示例-两个文件位于同一台服务器上面"></p><h3 id="持续连接"><a href="#持续连接" class="headerlink" title="持续连接"></a><strong>持续连接</strong></h3><ul><li>在持续连接中服务器在<strong>发送一个响应后，为响应更多的请求而将连接置为打开状态</strong>。</li><li>服务器可以在客户的请求下或者在超时情况下将连接关闭。</li><li><strong>文档发送方（通常是服务器）通常在每次响应中发送数据长度</strong>。然而，偶尔情况下发送方不知道数据的长度。这是创建动态文档或活动文档时的情形。在这种情形下，服务器通知客户长度未知并在发送数据后关闭连接，因此客户知道数据已接收完毕。</li><li>通过使用持续连接，可以节省时间和资源。每个站点只需要为连接设定一组缓冲区和变量。同时节省了连接建立和终止的往返时间。</li></ul><p><img src="/2020/06/09/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E6%95%99%E7%A8%8B-HTTP%E5%8D%8F%E8%AE%AE/%E6%8C%81%E7%BB%AD%E8%BF%9E%E6%8E%A5%E7%A4%BA%E4%BE%8B-%E4%B8%A4%E4%B8%AA%E6%96%87%E4%BB%B6%E4%BD%8D%E4%BA%8E%E5%90%8C%E4%B8%80%E5%8F%B0%E6%9C%8D%E5%8A%A1%E5%99%A8%E4%B8%8A%E9%9D%A2.JPG" alt="图2，持续连接示例-两个文件位于同一台服务器上面"></p><h2 id="报文格式"><a href="#报文格式" class="headerlink" title="报文格式"></a><strong>报文格式</strong></h2><p>HTTP 协议定义了请求报文和响应报文的格式。每一种报文由四个部分组成。</p><ul><li><code>请求报文</code>中的第一部分称为请求行；</li><li><code>响应报文</code>的第一部分称为状态行。</li><li>其他三部分在请求报文和响应报文中有相同的名称。然而，这三部分只是名称相似，它们可能含有不同的内容。</li></ul><p><img src="/2020/06/09/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E6%95%99%E7%A8%8B-HTTP%E5%8D%8F%E8%AE%AE/%E8%AF%B7%E6%B1%82%E6%8A%A5%E6%96%87%E5%92%8C%E5%93%8D%E5%BA%94%E6%8A%A5%E6%96%87%E6%A0%BC%E5%BC%8F.JPG" alt="图3，请求报文和响应报文格式"></p><h3 id="请求报文"><a href="#请求报文" class="headerlink" title="请求报文"></a><strong>请求报文</strong></h3><ul><li>请求报文的第一行称为请求行。如图所示，这一行有三部分由空格分隔开并且被两个字符（回车和换行）终止。这些字段称为方法、URL 和版本。</li><li>第一个字段：方法字段定义了请求类型。如下所示，在HTTP1.1 版中定义了若干种方法。</li><li>第二个字段：URL，在本章的前面部分已经讨论过了。它定义了相关网页的地址和名称。</li><li>第三个字段：版本，给出了协议的版本，HTTP 最常用的版本是1.1。</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">HTTP请求报文中的方法</span><br><span class="line">--------------------------------------------------------------------------------------------</span><br><span class="line">GET     向服务器请求文档。</span><br><span class="line">绝大多数情况下，客户使用GET 方法发送一个请求。在这种情况下，报文的主体是空的。</span><br><span class="line">--------------------------------------------------------------------------------------------              </span><br><span class="line">HEAD    请求关于文档的信息，而不是文档本身。</span><br><span class="line">当客户仅需要从服务器获得关于网页的信息，如上次修改的时间，这时使用HEAD 方法。</span><br><span class="line">它也可以用来检测URL 的有效性。这种情况下的响应报文只有头部；主体是空的。 </span><br><span class="line">--------------------------------------------------------------------------------------------</span><br><span class="line">PUT     从客户端向服务器发送文档。</span><br><span class="line">PUT 方法与GET 方法是相反的；它允许客户将一个新的页面发送到服务器上（如果允许的话）。           </span><br><span class="line">--------------------------------------------------------------------------------------------</span><br><span class="line">POST    从客户端向服务器发送一些信息。</span><br><span class="line">POST 方法与PUT 方法类似，但是它用来发送一些信息到服务器上，这些信息被加入网页或用来修改网页</span><br><span class="line">--------------------------------------------------------------------------------------------</span><br><span class="line">TRACE   回送输入的请求。用来调试；客户要求服务器回送请求来检查服务器是否正在获得请求。</span><br><span class="line">DELETE  删除网页。如果客户获得许可，DELETE 方法允许客户删除一个服务器上的网页。</span><br><span class="line">CONNECT 预留。原先作为预留方法；后文会讨论到，这个方法可能被代理服务器使用。          </span><br><span class="line">OPTIONS 询问有关可用的选项。允许客户询问网页属性。</span><br></pre></td></tr></table></figure><ul><li>在请求行之后我们可以有一个或多个<code>请求头部（request header）</code>行。</li><li>每一个头部行都从客户端向服务器发送额外的信息。<ul><li>例如，客户可以请求以某种特定格式发送文档。每个头部行有头部名字、一个冒号、一个空格和一个头部值（见图3）。下面列出了一些请求中常用的头部名字。</li></ul></li><li>值字段定义了与每个头部名字相关的值。</li><li>值列表可以在相应的RFC 中查找到。</li><li>主体可以出现在请求报文中。通常，当使用POST 或PUT 方法时，它包含要发送的评论或要发布到网站上的文档。</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">请求头部名称</span><br><span class="line">-----------------------------------------------------------</span><br><span class="line">User-agent            标识客户端程序 </span><br><span class="line">Accept                给出客户端能够接受的媒体格式 </span><br><span class="line">Accept-charset        给出客户端可以处理的字符集 </span><br><span class="line">Accept-encoding       给出客户端可以处理的编码方案 </span><br><span class="line">Accept-language       给出客户端可以接受的语言</span><br><span class="line">Authorization         给出客户端有哪些许可 </span><br><span class="line">Host                  给出主机及客户端的端口号</span><br><span class="line">Date                  给出当前日期</span><br><span class="line">Upgrade               确定首选的通信协议</span><br><span class="line">Cookie                返回cookie 给服务器（稍后解释）</span><br><span class="line">If-Modified-Since     如果文档在指定的日期之后被更新，则发送文档</span><br></pre></td></tr></table></figure><h3 id="响应报文"><a href="#响应报文" class="headerlink" title="响应报文"></a><strong>响应报文</strong></h3><p>图3给出了响应报文的格式。响应报文包含<code>状态行</code>、<code>头部行</code>并且有时包含<code>主体</code>。</p><ul><li>响应报文的第一行称为<code>状态行</code>。这一行有三个字段，它们由空格分隔开并且被两个字符（回车和换行）终止。</li><li>第一个字段：<code>版本字段</code>，定义了HTTP 协议的版本，通常为1.1。</li><li>第二个字段：<code>状态码字段</code>,定义了请求的状态。<ul><li>它包含三个数字。在100 范围内的代码只代表一个报告</li><li>在200 范围内的代码表示这是一个成功的请求。</li><li>在300范围内的代码表示把客户端重定向到另一个URL</li><li>在400 范围内的代码表示在客户端发生错误。</li><li>最后，在500 范围内的代码表示错误发生在服务器端。</li></ul></li><li>第二个字段：<code>状态短语字段</code>，以文本格式解释了状态码。</li></ul><p>在状态行之后，我们可以有一个或多个<code>响应头部行</code>。每一个头部行都从服务器向客户端发送额外的信息。例如，发送方可以发送关于文档的额外信息。<br>每个头部行都有一个头部名称、一个冒号、一个空格和一个头部值。<br>下面列出了一些常用的头部名称。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">响应头部名称</span><br><span class="line">------------------------------------------------------</span><br><span class="line">Date                 给出当前日期 </span><br><span class="line">Upgrade              确定首选的通信协议 </span><br><span class="line">Server               给出服务器信息 </span><br><span class="line">Set-Cookie           服务器要求客户存储</span><br><span class="line">Content-Encoding     指定编码方案 </span><br><span class="line">Content-Language     指定语言</span><br><span class="line">Content-Length       给出文档长度</span><br><span class="line">Content-Type         指定媒体类型</span><br><span class="line">Location             指明新建或移动后文档的位置</span><br><span class="line">cookie Accept-Ranges 服务器将会接收的被请求的字节范围</span><br><span class="line">Last-modified        给出上次改变的日期和时间</span><br></pre></td></tr></table></figure><p>主体包含了从服务器发送给客户的文档。除非响应是一个错误报文，否则主体是存在的。</p><h2 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h2><h3 id="客户要向服务器发送一个网页"><a href="#客户要向服务器发送一个网页" class="headerlink" title="客户要向服务器发送一个网页"></a><strong>客户要向服务器发送一个网页</strong></h3><p>在这个例子中，客户要向服务器发送一个网页。我们使用PUT 方法。</p><ul><li>请求行给出方法（PUT）、URL 以及HTTP 版本（1.1）。其头部有四行。请求主体包含要发送的网页。</li><li>响应报文包含状态行和四个头部行。被创建的文档是一个CGI 文档，它包含在响应报文的主体中</li></ul><p><img src="/2020/06/09/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E6%95%99%E7%A8%8B-HTTP%E5%8D%8F%E8%AE%AE/%E5%AE%A2%E6%88%B7%E8%A6%81%E5%90%91%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%8F%91%E9%80%81%E4%B8%80%E4%B8%AA%E7%BD%91%E9%A1%B5.JPG" alt="客户要向服务器发送一个网页"></p><h3 id="客户要向服务器获取一个文档"><a href="#客户要向服务器获取一个文档" class="headerlink" title="客户要向服务器获取一个文档"></a><strong>客户要向服务器获取一个文档</strong></h3><p>使用GET 方法来获取一个路径为/usr/bin/image1 的图片。</p><ul><li>请求行给出了使用的方法（GET）、URL 以及HTTP 版本（1.1）。</li><li>头部有两行，它们表示客户可以接收GIF 或JPEG 格式的图片。<strong>请求是没有主体的。</strong></li><li>响应报文包含了状态行以及四个头部行。头部行定义了日期、服务器、内容编码（MIME 版本，在电子邮件部分将会描述）以及文档长度。文档主体在头部之后。</li></ul><p><img src="/2020/06/09/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E6%95%99%E7%A8%8B-HTTP%E5%8D%8F%E8%AE%AE/%E5%AE%A2%E6%88%B7%E8%A6%81%E5%90%91%E6%9C%8D%E5%8A%A1%E5%99%A8%E8%8E%B7%E5%8F%96%E4%B8%80%E4%B8%AA%E6%96%87%E6%A1%A3.JPG" alt="客户要向服务器获取一个文档"></p><h3 id="条件请求"><a href="#条件请求" class="headerlink" title="条件请求"></a><strong>条件请求</strong></h3><p>客户可以在请求中加入条件。在这种情况下，如果条件满足，服务器将会发送被请求的网页或者通知用户。</p><ul><li>客户加入的最常见的一种条件是网页被修改的时间和日期。</li><li>客户可以在发送请求时附带头部行If-Modified-Since，这样来告知服务器客户只需要在指定日期之后更新的页面。</li></ul><p>一个客户在请求中加入了修改日期和时间的条件。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">GET http:&#x2F;&#x2F;www.commonServer.com&#x2F;information&#x2F;file1 HTTP&#x2F;1.1 请求行</span><br><span class="line">If-Modified-Since: Thu, Sept 04 00:00:00 GMT               头部行</span><br><span class="line">                                                           空行</span><br></pre></td></tr></table></figure><p>响应中的状态行表示在指定日期之后文档没有修改。所以响应报文的主体是空的。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">HTTP&#x2F;1.1 304 Not Modified                                  状态行</span><br><span class="line">Date: Sat, Sept 06 08 16:22:46 GMT                         头部第一行</span><br><span class="line">Server: commonServer.com                                   头部第二行</span><br><span class="line">                                                           空行</span><br><span class="line">(Empty Body)                                               空主体</span><br></pre></td></tr></table></figure><h2 id="HTTP-安全"><a href="#HTTP-安全" class="headerlink" title="HTTP 安全"></a><strong>HTTP 安全</strong></h2><p>HTTP 本质上并不提供安全。然而，，HTTP 可以在安全套接层（SSL）上运行。在这种情况下，HTTP 称为HTTPS。<br>HTTPS 提供保密性、客户和服务器鉴别，以及数据完整性。<br>HTTPS 端口号443</p><h2 id="状态码（Status-Code）"><a href="#状态码（Status-Code）" class="headerlink" title="状态码（Status-Code）"></a><strong>状态码（Status-Code）</strong></h2><p>1xx：表示通知信息，如请求收到了或正在进行处理</p><ul><li><strong>100 Continue：继续，客户端应继续其请求</strong></li><li>101 Switching Protocols 切换协议。服务器根据客户端的请求切换协议。只能切换到更高级的协议，例如，切换到 HTTP 的新版本协议</li></ul><p>2xx：表示成功，如接收或知道了</p><ul><li><strong>200 OK: 请求成功</strong></li></ul><p>3xx：表示重定向，如要完成请求还必须采取进一步的行动</p><ul><li>301 Moved Permanently: 永久移动。请求的资源已被永久的移动到新 URL，返回信息会包括新的 URL，浏览器会自动定向到新 URL。今后任何新的请求都应使用新的 URL 代替</li></ul><p>4xx：表示客户的差错，如请求中有错误的语法或不能完成</p><ul><li><strong>400 Bad Request: 客户端请求的语法错误，服务器无法理解</strong></li><li><strong>401 Unauthorized: 请求要求用户的身份认证</strong></li><li><strong>403 Forbidden</strong>: 服务器理解请求客户端的请求，但是拒绝执行此请求（权限不够）</li><li>404 Not Found: 服务器无法根据客户端的请求找到资源（网页）。通过此代码，网站设计人员可设置 “您所请求的资源无法找到” 的个性页面</li><li><strong>408 Request Timeout:</strong> 服务器等待客户端发送的请求时间过长，超时</li></ul><p>5xx：表示服务器的差错，如服务器失效无法完成请求</p><ul><li><strong>500 Internal Server Error</strong>: 服务器内部错误，无法完成请求</li><li>503 Service Unavailable: 由于超载或系统维护，服务器暂时的无法处理客户端的请求。延时的长度可包含在服务器的 Retry-After 头信息中</li><li>504 Gateway Timeout: 充当网关或代理的服务器，未及时从远端服务器获取请求</li></ul><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p><a href="https://www.runoob.com/http/http-status-codes.html">HTTP状态码-菜鸟教程</a><br><a href="https://www.runoob.com/http/http-tutorial.html">HTTP 教程-菜鸟教程</a><br><a href="https://www.cnblogs.com/williamjie/p/9099940.html">浅谈HTTP中GET、POST用法以及它们的区别 </a><br>计算机网络教程-自顶向下方法</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;HTTP（超文本传输协议）&quot;&gt;&lt;a href=&quot;#HTTP（超文本传输协议）&quot; class=&quot;headerlink&quot; title=&quot;HTTP（超文本传输协议）&quot;&gt;&lt;/a&gt;&lt;strong&gt;HTTP（超文本传输协议）&lt;/strong&gt;&lt;/h2&gt;&lt;p&gt;&lt;code&gt;超文本传输协议（HyperText Transfer Protocol，HTTP）&lt;/code&gt;是一种用来定义客户服务器程序如何编写和如何从万维网获取网页的协议。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;一个HTTP 客户发送一个请求；HTTP 服务器返回响应。&lt;/li&gt;
&lt;li&gt;服务器使用80 端口号；客户使用一个临时端口号。&lt;/li&gt;
&lt;li&gt;HTTP 使用TCP 服务。这意味着，在客户和服务器进行任何事务之前，它们之间必须建立连接。&lt;/li&gt;
&lt;li&gt;在事务之后，连接应当终止。然而，客户和服务器不需要担心交换报文中的差错以及报文的丢失，因为TCP 是可靠的而且将处理这个问题。&lt;/li&gt;&lt;/ul&gt;
    
    </summary>
    
    
      <category term="计算机网络" scheme="https://stemha.github.io/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/"/>
    
    
      <category term="HTTP" scheme="https://stemha.github.io/tags/HTTP/"/>
    
      <category term="应用层" scheme="https://stemha.github.io/tags/%E5%BA%94%E7%94%A8%E5%B1%82/"/>
    
  </entry>
  
  <entry>
    <title>计算机网络教程-传输层协议-TCP(2)</title>
    <link href="https://stemha.github.io/2020/06/09/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E6%95%99%E7%A8%8B-%E4%BC%A0%E8%BE%93%E5%B1%82%E5%8D%8F%E8%AE%AE-TCP-2/"/>
    <id>https://stemha.github.io/2020/06/09/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E6%95%99%E7%A8%8B-%E4%BC%A0%E8%BE%93%E5%B1%82%E5%8D%8F%E8%AE%AE-TCP-2/</id>
    <published>2020-06-08T16:57:26.000Z</published>
    <updated>2020-06-10T15:16:03.579Z</updated>
    
    <content type="html"><![CDATA[<h2 id="TCP-连接"><a href="#TCP-连接" class="headerlink" title="TCP 连接"></a>TCP 连接</h2><p>在 TCP 中，面向连接的传输需要三个过程：连接建立、数据传输和连接终止。<br>在TCP 中的分组称为段（segment）</p><a id="more"></a><h2 id="TCP段"><a href="#TCP段" class="headerlink" title="TCP段"></a><strong>TCP段</strong></h2><h3 id="格式"><a href="#格式" class="headerlink" title="格式"></a>格式</h3><p>段包含20~60字节的头部，接着是来自应用程序的数据。如果没有选项，那么头部是20 字节；如果有选项，最多是60 字节。<br><img src="/2020/06/09/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E6%95%99%E7%A8%8B-%E4%BC%A0%E8%BE%93%E5%B1%82%E5%8D%8F%E8%AE%AE-TCP-2/TCP%E6%AE%B5%E6%A0%BC%E5%BC%8F.JPG" alt="TCP段格式"></p><ul><li><code>源端口地址</code>。这是一个16 位的字段，它定义了在主机中发送该段的应用程序的端口号。这与UDP 头部的源端口地址的作用一样。</li><li><code>目的端口地址</code>。这是一个16 位的字段，它定义了在主机中接收该段的应用程序的端口号。这与UDP 头部的目的端口地址的作用一样。</li><li><code>序号</code>。这个32 位的字段定义了一个数，它分配给段中数据的第一个字节。<ul><li>TCP 是一种字节流传输协议。为了确保连通性，对要发送的每一个字节都进行编号。序号告诉目的端，在这个序列中哪一个字节是该段的第一个字节。</li><li>在连接建立时，每一方都使用随机数生成器产生一个<code>初始序号（initial sequence number，ISN）</code>，通常每一个方向的ISN 都不同。</li></ul></li><li><code>确认号</code>。这个32 位的字段定义了段的接收方期望从对方接收的字节号。如果段的接收方成功地接收了对方发来的字节号x，它就将确认号定义为x + 1.<ul><li>确认和数据可捎带一起发送。</li></ul></li><li><code>头部长度</code>。这个4 位的字段指明了TCP 头部中共有多少个4字节长的字。<ul><li>头部的长度可以在20 字节到60 字节之间。因此，这个字段的值在5（5 × 4 = 20）到15（15 × 4 = 60）之间。</li></ul></li><li><code>窗口大小</code>。这个字段定义<strong>对方必须维持的窗口的大小（以字节为单位）</strong>。<ul><li>注意，这个字段的长度是16 位，这意味着窗口的最大长度是65 535 字节。这个值通常称为<code>接收窗口（rwnd）</code>。</li><li>它由接收方确定。此时，发送方必须服从接收端的支配。</li></ul></li><li><code>紧急指示符</code>。这个16 位的字段只有当紧急标志置位时才有效，这个段包含了紧急数据。<ul><li>它定义了一个数，将此数加到序号上就得出此段数据部分中最后一个紧急字节。</li></ul></li><li><code>选项</code>。在TCP 头部中可以有多达40 个字节的可选信息。</li></ul><h3 id="控制字段"><a href="#控制字段" class="headerlink" title="控制字段"></a>控制字段</h3><p>这个字段定义了6 种不同的控制位或标记，如图所示。</p><ul><li>在同一时间可以设置一位或多位。</li><li>这些位用在TCP 的流量控制、连接建立和终止、连接失败和数据传送方式等方面。<br><img src="/2020/06/09/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E6%95%99%E7%A8%8B-%E4%BC%A0%E8%BE%93%E5%B1%82%E5%8D%8F%E8%AE%AE-TCP-2/TCP%E6%AE%B5%E6%8E%A7%E5%88%B6%E5%AD%97%E6%AE%B5.JPG" alt="TCP段控制字段"></li></ul><h3 id="校验和。"><a href="#校验和。" class="headerlink" title="校验和。"></a>校验和。</h3><p>这个16 位的字段包含了校验和。TCP 校验和的计算过程与前面描述的UDP 所采用的计算过程相同。<br>但是，在UDP 数据报中校验和是可选的。</p><ul><li>然而，对TCP 来说，将校验和包含进去是强制的。</li><li>起相同作用的伪头部被加到段上。对TCP 伪头部，协议字段的值是6。如图所示。</li><li>在 TCP 中使用校验和是强制的。<br><img src="/2020/06/09/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E6%95%99%E7%A8%8B-%E4%BC%A0%E8%BE%93%E5%B1%82%E5%8D%8F%E8%AE%AE-TCP-2/%E5%8A%A0%E5%88%B0TCP%E6%95%B0%E6%8D%AE%E6%8A%A5%E4%B8%8A%E7%9A%84%E4%BC%AA%E5%A4%B4%E9%83%A8.JPG" alt="加到TCP 数据报上的伪头部"></li></ul><h2 id="连接建立（三次握手）"><a href="#连接建立（三次握手）" class="headerlink" title="连接建立（三次握手）"></a><strong>连接建立（三次握手）</strong></h2><p>TCP 以全双工方式传输数据。当两个机器中的两个TCP 建立连接后，它们就能够同时向对方发送段。这就表示，在传输数据之前，每一方都必须对通信进行初始化，并得到对方的认可。<br><code>三次握手（three-way handshaking）</code>：<br>客户的应用程序想要与另一个称为服务器的应用程序使用TCP 作为传输层协议建立连接。</p><p>该过程从服务器开始。服务器程序告诉它的TCP，它已准备好接收一个连接。这就称为<code>被动打开（passive open）</code>。<br>虽然TCP 已经准备好接收从世界上任何一个机器发来的连接，但它自己并不能完成这个连接。<br>客户程序发出请求进行<code>主动打开（active open）</code>。想要与服务器进行连接的客户告诉它的TCP，它需要连接到特定的服务器。</p><p>少数几个必须要知道的字段，如果<code>序号</code>、<code>确认号</code>、<code>控制标记</code>（仅仅是其中被置位的）和<code>窗口大小</code>等有值。三个步骤如下:</p><ol><li><code>客户发送的第一个段</code>，即<code>SYN 段</code>。这个段仅有SYN 标志被置位，它用于序号同步。它占用一个序号。当数据传输开始时，在我们的例子中，客户随机选择一个数字作为<code>初始序号（ISN）</code>。注意，这个段不包含确认号。它也没有定义窗口大小；窗口大小的定义只有当段包含确认号时才有意义。段也能包含一些稍后讨论的选项。<ul><li>注意，SYN 段是一个控制段并且不携带数据。然而，它消耗一个序号，因为它需要被确认。我们可以说SYN 段携带了一个假想字节。</li></ul></li></ol><blockquote><p>SYN 段不携带数据，但它占用一个序号。看下面的图就明白了。</p></blockquote><ol start="2"><li><code>服务器发送第二个段</code>，即<code>SYN +ACK 段</code>。这个段有两个目的。<ul><li>首先，它是另一方向通信的SYN 段。服务器使用这个段来初始化序号，这个序号用来给从服务器发向客户的字节编号。</li><li>其次，服务器也通过给ACK 置位并展示下一个序号来确认接收到来自客户的SYN 段，这里的<strong>下一个序号</strong>是服务器预期从客户接收的序号。</li><li>我们将在介绍流量控制那一节看到，因为它包含确认，它也需要定义<code>接收窗口，即rwnd（客户使用）</code>。因为这个段起到SYN段的作用，它需要被确认。因此，它占用一个序号。</li></ul></li></ol><blockquote><p>SYN + ACK 段不携带数据，但它占用一个序号。</p></blockquote><ol start="3"><li><code>客户发送第三个段</code>，即<code>ACK 段</code>。它使用ACK 标志和确认序号字段来确认收到了第二个段。<ul><li>注意，如果不携带数据，ACK 段没有占用任何序号，但是一些实现允许这第三个段在连接阶段从客户端携带第一块数据。在这种情况下，段消耗的序号与数据字节数相同。</li></ul></li></ol><blockquote><p>ACK 段，如果不携带数据，则它不占用序号。</p></blockquote><p><img src="/2020/06/09/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E6%95%99%E7%A8%8B-%E4%BC%A0%E8%BE%93%E5%B1%82%E5%8D%8F%E8%AE%AE-TCP-2/TCP%E4%BD%BF%E7%94%A8%E4%B8%89%E6%AC%A1%E6%8F%A1%E6%89%8B%E5%BB%BA%E7%AB%8B%E8%BF%9E%E6%8E%A5.JPG" alt="TCP使用三次握手建立连接"></p><h2 id="数据传输"><a href="#数据传输" class="headerlink" title="数据传输"></a><strong>数据传输</strong></h2><p>连接建立后，可进行双向数据传输，客户端与服务器双方都可发送数据和确认。<br><code>数据捎带确认</code>：在同一段内携带确认时，在同一方向上也可以传递数据。</p><h3 id="图示"><a href="#图示" class="headerlink" title="图示"></a>图示</h3><p>在这个例子中，在连接建立后，客户端用两个段发送2000 个字节的数据。然后，服务器用一个段发送2000 个字节的数据。客户端发送另一个段。</p><ul><li>前面三个段携带数据与确认，但是最后一个段仅携带确认，这是因为已没有数据发送了。</li><li>注意序号与确认号数值，客户端发送的数据段有<code>PSH（推送）标志</code>，所以服务器TCP 知道在接收到数据时立刻传递给服务器进程。</li><li>另一方面，来自服务器的段没有设置推送标志。大多数TCP 的实现都有可选标志，可设置或不设置。</li></ul><p><img src="/2020/06/09/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E6%95%99%E7%A8%8B-%E4%BC%A0%E8%BE%93%E5%B1%82%E5%8D%8F%E8%AE%AE-TCP-2/TCP%E6%95%B0%E6%8D%AE%E4%BC%A0%E8%BE%93.JPG" alt="TCP数据传输"></p><h3 id="推送数据"><a href="#推送数据" class="headerlink" title="推送数据"></a>推送数据</h3><p>发送方的TCP 使用缓冲区存储来自发送方应用程序的数据流。发送方的TCP 可以选择段的大小。<br>接收方的TCP 在数据到达时也将数据进行缓存，并当应用程序准备就绪时或当接收端TCP 认为方便时将这些数据传递给应用程序。这种灵活性增加了TCP 的效率。</p><p>但是，在有些情况下，应用程序并不需要这种灵活性。例如，应用程序与另一方应用程序进行交互式通信。</p><ul><li>一方的应用程序打算将其信息发给对方应用程序，并希望接收到<strong>立即响应</strong>。数据的延迟传输和延迟传递对这个应用程序来说是不可接受的。</li></ul><p>TCP 可以处理这种情况。</p><ul><li>在发送端的应用程序可请求推送操作。这就表示发送端的TCP 不必等待窗口被填满。</li><li>它创建一个段就立即将其发送。发送端的TCP 还必须设置<code>推送位（PSH）</code>以告诉接收端的TCP，这个段所包含的数据必须尽快地传递给接收应用程序，而不要等待更多数据的到来。</li><li>这意味着将面向字节的TCP 改为面向块的TCP，但是TCP 可以选择使用或不使用这个特性。</li></ul><h2 id="连接终止-四次挥手"><a href="#连接终止-四次挥手" class="headerlink" title="连接终止(四次挥手)"></a><strong>连接终止(四次挥手)</strong></h2><p><img src="/2020/06/09/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E6%95%99%E7%A8%8B-%E4%BC%A0%E8%BE%93%E5%B1%82%E5%8D%8F%E8%AE%AE-TCP-2/TCP%E5%9B%9B%E6%AC%A1%E6%8C%A5%E6%89%8B%E5%85%B3%E9%97%AD%E8%BF%9E%E6%8E%A5.JPG" alt="TCP四次挥手关闭连接"></p><h3 id="半关闭"><a href="#半关闭" class="headerlink" title="半关闭"></a>半关闭</h3><p><code>半关闭（half-close）</code>：指在 TCP 中，一端可以停止发送数据后，还可以接续接收数据。（<strong>关闭发送但是不关闭接收</strong>）<br>虽然任一端都可发出半关闭，但通常都是由客户端发起的。当服务器在开始处理之前需要接收到所有数据，这时就会出现半关闭。<br>例如，排序是一个很好的例子。客户端发送数据给服务器进行排序，在开始排序之前，服务器需要接收到全部数据。</p><ul><li>这就是说，客户端发送全部数据之后，它在客户到服务器方向可关闭连接。（客户端关闭发送）</li><li>但为了返回存储数据，服务器到客户方向必须保持打开。（客户端不关闭接收）</li><li>服务器在接收数据后还需要时间进行排序；它的向外方向必须保持打开。</li></ul><p>从客户到服务器的数据传输停止。客户端通过发送FIN 段实现半关闭连接。服务器通过发送ACK 段确认半关闭。<br>然而，服务器还可以发送数据。当服务器已经发送完被处理的数据时，它发送一个FIN 段。该FIN 段由客户端的ACK 来确认。<br>连接半关闭后，数据可以从服务器传送给客户端，而确认可以从客户端传送给服务器。客户不能再向服务器发送任何数据。</p><h2 id="连接重置"><a href="#连接重置" class="headerlink" title="连接重置"></a><strong>连接重置</strong></h2><p>在一端的TCP 可能拒绝连接请求，可能终止已存在的连接，也可能结束空闲连接。所有这些都通过RST（重置）标志完成。</p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p><a href="http://c.biancheng.net/view/2352.html">详细分析TCP数据的传输过程</a><br><a href="https://zhuanlan.zhihu.com/p/82740675">【网络通信】TCP的通信过程</a><br><a href="https://www.polarxiong.com/archives/%E5%9B%BE%E8%A7%A3TCP%E4%BC%A0%E8%BE%93%E8%BF%87%E7%A8%8B-%E4%B8%89%E6%AC%A1%E6%8F%A1%E6%89%8B-%E6%95%B0%E6%8D%AE%E4%BC%A0%E8%BE%93-%E5%9B%9B%E6%AC%A1%E6%8C%A5%E6%89%8B.html">图解TCP传输过程（三次握手、数据传输、四次挥手）</a><br><a href="https://coolshell.cn/articles/11564.html">TCP 的那些事儿（上）</a><br><a href="https://coolshell.cn/articles/11609.html">TCP 的那些事儿（下）</a><br><a href="https://zhuanlan.zhihu.com/p/76302817">一个TCP连接上能发起多少个HTTP请求吗？</a><br>计算机网络教程-自顶向下方法</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;TCP-连接&quot;&gt;&lt;a href=&quot;#TCP-连接&quot; class=&quot;headerlink&quot; title=&quot;TCP 连接&quot;&gt;&lt;/a&gt;TCP 连接&lt;/h2&gt;&lt;p&gt;在 TCP 中，面向连接的传输需要三个过程：连接建立、数据传输和连接终止。&lt;br&gt;在TCP 中的分组称为段（segment）&lt;/p&gt;
    
    </summary>
    
    
      <category term="计算机网络" scheme="https://stemha.github.io/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/"/>
    
    
      <category term="传输层" scheme="https://stemha.github.io/tags/%E4%BC%A0%E8%BE%93%E5%B1%82/"/>
    
      <category term="TCP" scheme="https://stemha.github.io/tags/TCP/"/>
    
  </entry>
  
  <entry>
    <title>计算机网络教程-传输层协议-TCP(1)</title>
    <link href="https://stemha.github.io/2020/06/08/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E6%95%99%E7%A8%8B-%E4%BC%A0%E8%BE%93%E5%B1%82%E5%8D%8F%E8%AE%AE-TCP/"/>
    <id>https://stemha.github.io/2020/06/08/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E6%95%99%E7%A8%8B-%E4%BC%A0%E8%BE%93%E5%B1%82%E5%8D%8F%E8%AE%AE-TCP/</id>
    <published>2020-06-08T14:39:32.000Z</published>
    <updated>2020-06-08T16:53:40.894Z</updated>
    
    <content type="html"><![CDATA[<h2 id="TCP-传输控制协议"><a href="#TCP-传输控制协议" class="headerlink" title="TCP(传输控制协议)"></a>TCP(传输控制协议)</h2><p><code>传输控制协议（Transmission Control Protocol，TCP）</code>是一个面向连接可靠的协议。</p><ul><li>TCP 显式定义了连接建立、数据传输以及连接拆除阶段来提供面向连接服务。</li><li>TCP 使用GBN 和SR 协议的组合来提供可靠性。</li><li>为了实现这个目的，TCP 使用校验和（为差错发现）、丢失或被破坏分组重传、累积和选择确认以及计时器。<a id="more"></a></li></ul><h2 id="TCP-服务"><a href="#TCP-服务" class="headerlink" title="TCP 服务"></a><strong>TCP 服务</strong></h2><h3 id="进程到进程的通信"><a href="#进程到进程的通信" class="headerlink" title="进程到进程的通信"></a>进程到进程的通信</h3><p>像UDP 一样，TCP 通过使用端口号来提供进程到进程通信。</p><h3 id="流传递服务"><a href="#流传递服务" class="headerlink" title="流传递服务"></a><strong>流传递服务</strong></h3><p>与UDP 不同，<strong>TCP 是一个面向流的协议</strong>。在UDP 中，进程发送一些具有预先规定边界的报文给UDP 进行传递。UDP 将它自己的头部添加到这些报文中并传递到IP 层进行传输。来自进程的每一个报文称为一个用户数据报，最后变成一个IP 数据报。IP 和UDP 都不认识这些数据之间的关系。</p><blockquote><p>而TCP 允许发送进程以字节流形式传递数据，并且接收进程也以字节流形式接收数据。TCP 建立一种环境，在这种环境中，两个进程好像由一个假想的“管道”连接，这个管道通过因特网传送这些进程的数据。</p></blockquote><p>这种假想的环境如图所示。发送进程产生（写入）字节流，而接收进程消费（读出）这些字节流。<br><img src="/2020/06/08/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E6%95%99%E7%A8%8B-%E4%BC%A0%E8%BE%93%E5%B1%82%E5%8D%8F%E8%AE%AE-TCP/%E5%AD%97%E8%8A%82%E6%B5%81%E4%BC%A0%E9%80%92.JPG" alt="字节流传递"></p><h4 id="发送和接收缓冲区"><a href="#发送和接收缓冲区" class="headerlink" title="发送和接收缓冲区"></a><strong>发送和接收缓冲区</strong></h4><p>因为发送和接收进程可能以不同的速度写入和读出数据，所以TCP 需要用于存储的缓冲区。</p><ul><li>每一个方向都存在一个缓冲区：发送缓冲区和接收缓冲区。</li><li>这些缓冲区也用于TCP 流量和差错控制机制。</li><li><code>实现缓冲区的一种方法</code>是<strong>使用以一字节为存储单元的循环数组</strong>。</li></ul><p>实现缓冲区的方法如图所示。为了简化，我们只画出了两个缓冲区，每个缓冲区20个字节。通常情况下，缓冲区是数百甚至数千个字节，这取决于实现方法。这里给出的缓冲区是大小相同的，实际上并非总是如此。<br><img src="/2020/06/08/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E6%95%99%E7%A8%8B-%E4%BC%A0%E8%BE%93%E5%B1%82%E5%8D%8F%E8%AE%AE-TCP/TCP%E5%8F%91%E9%80%81%E5%92%8C%E6%8E%A5%E6%94%B6%E7%BC%93%E5%86%B2%E5%8C%BA.JPG" alt="TCP发送和接收缓冲区"><br>上图表示了在一个方向上数据的移动。在发送端，缓冲区有三种类型的存储单元。</p><ul><li>白色的部分是空存储单元，可以由发送进程（生产者）填充。</li><li>灰色的部分用于保存已经发送但还没有得到确认的字节。TCP 在缓冲区中保留这些字节，直到收到确认为止。</li><li>灰色缓冲区是将要由TCP 发送的字节。但是，在本章的后面将会看到，TCP 可能只发送灰色部分。这可能是由于接收进程缓慢或者网络中可能发生的拥塞造成的。</li><li>灰色存储单元的字节被确认后，这些存储单元可以回收并且对发送进程可用，这就是我们给出一个环形缓冲区的原因。</li></ul><p>接收端的缓冲区操作比较简单。环形缓冲区分成两个区域（表示为白色和灰色）。白色区域包含空存储单元，可以由从网络上接收的字节进行填充。灰色区域表示接收到的字节，可以由接收进<br>程读出。当某个字节被接收进程读出以后，这个存储单元可被回收，并加入到空存储单元池中。</p><h4 id="段"><a href="#段" class="headerlink" title="段"></a><strong>段</strong></h4><p>尽管缓冲能够处理生产进程速度和消费进程速度之间的不相称问题，但在发送数据之前，还需要多个步骤。<br>IP 层作为TCP 服务的提供者，需要以分组的方式而不是字节流的方式发送数据。<br>在传输层，TCP 将多个字节组合在一起成为一个分组，这个分组称为段（segment）。<br>TCP 给每个段添加头部（为了达到控制目的），并将该段传递给IP 层。段被封装到IP 数据报中，然后再进行传输。整个操作对接收进程是透明的。<br>这些段可能被无序接收、丢失，或者损坏和重发。所有这些均由TCP 处理，接收进程不会察觉到任何操作。<br>下图表示了在缓冲区中如何从字节生成段。<br><img src="/2020/06/08/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E6%95%99%E7%A8%8B-%E4%BC%A0%E8%BE%93%E5%B1%82%E5%8D%8F%E8%AE%AE-TCP/TCP%E6%AE%B5.JPG" alt="TCP段"><br>注意，段的大小不必相同。为了简单起见，我们在图中只表示了一个包含3 个字节的段和另一个包含5 个字节的段。实际的段可能包含数百（或者数千）个字节。</p><h3 id="全双工通信"><a href="#全双工通信" class="headerlink" title="全双工通信"></a><strong>全双工通信</strong></h3><p>TCP 提供全双工服务（full-dupler service），即数据可以在同一时间双向流动。<strong>每一方向TCP都有发送和接收缓冲区</strong>，它们能在双向发送和接收段。</p><h3 id="多路复用和多路分解"><a href="#多路复用和多路分解" class="headerlink" title="多路复用和多路分解"></a><strong>多路复用和多路分解</strong></h3><p>与UDP 类似，TCP 在发送端执行多路复用，在接收端执行多路分解。然而，由于TCP 是一个面向连接协议，因此需要为每对进程建立连接。</p><h3 id="面向连接的服务"><a href="#面向连接的服务" class="headerlink" title="面向连接的服务"></a><strong>面向连接的服务</strong></h3><p>与UDP 不同，TCP 是一种面向连接的协议。位于站点A 的一个进程与站点B 的另外一个进程想要进行数据的发送和接收，步骤如下：<br>1．在两个TCP 之间建立一个连接。<br>2．在两个方向交换数据。<br>3．连接终止。<br>注意，这是一个逻辑连接，而不是一个物理连接。TCP 段封装成IP 数据段，并且可能被无序地发送，或丢失，或被破坏，然后重发。每个段都可以通过不同的路径到达目的端。<br>TCP 建立一种面向字节流的环境，在这种环境中，TCP 能承担按顺序传递这些字节到其他站点的任务。</p><h3 id="可靠的服务"><a href="#可靠的服务" class="headerlink" title="可靠的服务"></a><strong>可靠的服务</strong></h3><p>TCP 是一种可靠的传输协议。它使用确认机制来检查数据是否安全和完整地到达。</p><h2 id="TCP与UDP基本区别"><a href="#TCP与UDP基本区别" class="headerlink" title="TCP与UDP基本区别"></a><strong>TCP与UDP基本区别</strong></h2><ol><li>基于连接与无连接</li><li>TCP要求系统资源较多，UDP较少</li><li>UDP程序结构较简单</li><li>字节流模式（TCP）与数据报模式(UDP);</li><li>TCP保证数据正确性，UDP可能丢包</li><li>TCP保证数据顺序，UDP不保证</li></ol><h2 id="TCP-的特点"><a href="#TCP-的特点" class="headerlink" title="TCP 的特点"></a>TCP 的特点</h2><h3 id="序号系统"><a href="#序号系统" class="headerlink" title="序号系统"></a>序号系统</h3><p>虽然TCP 软件能够记录发送或接收的段，但是在段的头部没有段序号字段。<br>TCP 在段的头部采用称为<code>序号（sequence number）</code>和<code>确认号（acknowledgment number）</code>的两个字段。这两个字段指的是字节序号，而不是段序号。</p><h4 id="字节序号"><a href="#字节序号" class="headerlink" title="字节序号"></a>字节序号</h4><p>TCP 为在一个连接中传输的所有数据字节（八位字节）编号。在每个方向上序号都是独立的。<br>当TCP 接收来自进程的一些数据字节时，TCP 将它们存储在发送缓冲区中并给它们编号。不必从0 开始编码，TCP 在0到2<sup>32</sup>−1 之间生成一个随机数作为第一个字节的序号，例如，如果随机数是<br>1057，并且发送的全部字节个数是6000，那么这些字节序号是1057~7056。下面将会看到字节序号是用于流量和差错控制。</p><blockquote><p>在每个连接中传送的字节都由TCP 编号，序号开始于一个随机产生的数。</p></blockquote><h4 id="序号"><a href="#序号" class="headerlink" title="序号"></a>序号</h4><p>字节被编号后，TCP 对发送的每一个段分配一个序号。在每一个方向上的序号定义如下：<br>1．第一段的序号是<code>初始序号（initial sequence number，ISN）</code>，这是一个随机数。<br>2．其他段的序号是之前段的序号加之前段携带的字节数（实际上的或想象的）。之后，我们将给出一些控制段，它们被认为携带了一个想象字节。</p><blockquote><p>一个段的序号字段的值定义了该段包含的第一个字节的序号。</p></blockquote><p>当一个段携带数据和控制信息（捎带）时，它使用一个序号。如果一个段没有携带用户数据，那么它逻辑上不定义序号。虽然字段存在，但是值是无效的。然而，当有些段仅携带控制信息时也<br>需要有一个序号用于接收方的确认。这些段用作连接建立、连接终止或连接废弃。这些段中的每一个好像携带一个字节那样使用一个序号，但都没有实际的数据。</p><h4 id="确认号"><a href="#确认号" class="headerlink" title="确认号"></a>确认号</h4><p>TCP 中的通信是全双工的；当建立一个连接时，双方同时都能发送和接收数据。</p><ul><li>每一方为字节编号，每一方经常使用不同的起始字节号。</li><li>每一方向的序号表明了该段所携带的第一个字节的序号。</li><li>每一方也使用确认号来确认它已收到的字节。<br>但是，<strong>确认号定义了该方预期接收的下一个字节的序号(也就是序号+1)。</strong>另外，确认号是累积的，这意味着接收方记下它已安全而且完整地接收到最后一个字节的序号，然后将它加1，并将这个结果作为确认号进行通告。<br>在这里，术语“累积”指的是，如果一方使用5643 作为确认号，则表示它已经接收了所有从开始到序号为5 642 的字节。但要注意，这并不是指接收方已经接收了5 642 个字节，因为第一个字节的编号通常并不是从0 开始的。</li></ul><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p>计算机网络教程-自顶向下方法<br><a href="https://blog.csdn.net/m_xiaoer/article/details/72885418">TCP与UDP的区别</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;TCP-传输控制协议&quot;&gt;&lt;a href=&quot;#TCP-传输控制协议&quot; class=&quot;headerlink&quot; title=&quot;TCP(传输控制协议)&quot;&gt;&lt;/a&gt;TCP(传输控制协议)&lt;/h2&gt;&lt;p&gt;&lt;code&gt;传输控制协议（Transmission Control Protocol，TCP）&lt;/code&gt;是一个面向连接可靠的协议。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;TCP 显式定义了连接建立、数据传输以及连接拆除阶段来提供面向连接服务。&lt;/li&gt;
&lt;li&gt;TCP 使用GBN 和SR 协议的组合来提供可靠性。&lt;/li&gt;
&lt;li&gt;为了实现这个目的，TCP 使用校验和（为差错发现）、丢失或被破坏分组重传、累积和选择确认以及计时器。&lt;/li&gt;&lt;/ul&gt;
    
    </summary>
    
    
      <category term="计算机网络" scheme="https://stemha.github.io/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/"/>
    
    
      <category term="传输层" scheme="https://stemha.github.io/tags/%E4%BC%A0%E8%BE%93%E5%B1%82/"/>
    
      <category term="TCP" scheme="https://stemha.github.io/tags/TCP/"/>
    
  </entry>
  
  <entry>
    <title>计算机网络教程-传输层协议-UDP</title>
    <link href="https://stemha.github.io/2020/06/08/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E6%95%99%E7%A8%8B-%E4%BC%A0%E8%BE%93%E5%B1%82%E5%8D%8F%E8%AE%AE-UDP/"/>
    <id>https://stemha.github.io/2020/06/08/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E6%95%99%E7%A8%8B-%E4%BC%A0%E8%BE%93%E5%B1%82%E5%8D%8F%E8%AE%AE-UDP/</id>
    <published>2020-06-08T09:51:52.000Z</published>
    <updated>2020-06-08T14:35:10.736Z</updated>
    
    <content type="html"><![CDATA[<h2 id="传输层协议"><a href="#传输层协议" class="headerlink" title="传输层协议"></a>传输层协议</h2><p>UDP ：不可靠的无连接传输层协议，由于在应用中简单高效而被使用，在那些应用中差错控制由应用层进程提供。<br>TCP ：可靠的面向连接协议，可用于可靠性重要的任何应用。</p><a id="more"></a><p>TCP/IP协议簇协议示意图<br><img src="/2020/06/08/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E6%95%99%E7%A8%8B-%E4%BC%A0%E8%BE%93%E5%B1%82%E5%8D%8F%E8%AE%AE-UDP/tcp-ip%E5%8D%8F%E8%AE%AE%E7%B0%87%E5%8D%8F%E8%AE%AE%E7%A4%BA%E6%84%8F%E5%9B%BE.JPG" alt="tcp-ip协议簇协议示意图"><br>UDP 和TCP 使用的熟知端口</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">端口     协议     UDP     TCP     说明</span><br><span class="line">7        Echo     √             将接收到的数据报回送到发送方</span><br><span class="line">9        Discard  √             丢弃接收到的任何数据报</span><br><span class="line">11       Users    √      √     活跃的用户</span><br><span class="line">13       Daytime  √      √     返回日期和时间</span><br><span class="line">17       Quote    √      √     返回每日引用</span><br><span class="line">19       Chargen  √      √     返回一字符串</span><br><span class="line">20,21    FTP              √     文件传输协议</span><br><span class="line">23       TELNET           √     终端网络</span><br><span class="line">25       SMTP             √     简单邮件传输协议</span><br><span class="line">53       DNS      √      √     域名服务</span><br><span class="line">67       DHCP     √      √     动态主机设置协议</span><br><span class="line">69       TFTP     √             简单文件传输协议</span><br><span class="line">80       HTTP             √     超文本传输协议</span><br><span class="line">111      RPC      √      √     远程过程调用</span><br><span class="line">123      NTP      √      √     网络时间协议</span><br><span class="line">161,162  SNMP             √     简单网络管理协议</span><br></pre></td></tr></table></figure><h2 id="UDP-用户数据报协议"><a href="#UDP-用户数据报协议" class="headerlink" title="UDP(用户数据报协议)"></a><strong>UDP(用户数据报协议)</strong></h2><p><code>用户数据报协议（User Datagram Protocol，UDP）</code>:</p><ul><li>无连接不可靠传输层协议。</li><li>不提供主机到主机通信，它除了提供进程到进程之间的通信之外，就没有给IP 服务增加任何东西。</li><li>此外，它进行非常有限的差错检验。</li></ul><p><strong>如果UDP 功能是如此之差，那么为什么进程还要使用它？</strong><br>它有缺点也有优点。UDP 是一个非常简单的协议，开销最小。如果一个进程想发送很短的报文，而且不在意可靠性，就可以使用UDP。使用UDP 发送一个很短的报文，在发送方和接收方之间的交互要比使用TCP 时少得多。</p><h3 id="用户数据报"><a href="#用户数据报" class="headerlink" title="用户数据报"></a><strong>用户数据报</strong></h3><p>UDP 分组称为<code>用户数据报（user datagram）</code>，有<code>8 字节的固定头部</code>，这个头部由4 个字段组成，每个字段2 字节（16 位）。<br><code>8 字节的固定头部的四个字段</code>：每个字段两个字节。<br>头两个字段定义了源和目的端口号。<br>第三个字段定义了用户数据报的总长，即头部加数据的长度。16 位可以定义的总长度范围是0 到65 535。然而，总长度需要更小一些，这是因为UDP数据报存储在总长度为65 535 的IP 数据报中。<br>最后一个字段可以携带可选校验和。<br><img src="/2020/06/08/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E6%95%99%E7%A8%8B-%E4%BC%A0%E8%BE%93%E5%B1%82%E5%8D%8F%E8%AE%AE-UDP/%E7%94%A8%E6%88%B7%E6%95%B0%E6%8D%AE%E6%8A%A5%E6%A0%BC%E5%BC%8F.JPG" alt="用户数据报格式"></p><h3 id="UDP-服务"><a href="#UDP-服务" class="headerlink" title="UDP 服务"></a><strong>UDP 服务</strong></h3><h4 id="进程到进程的通信"><a href="#进程到进程的通信" class="headerlink" title="进程到进程的通信"></a>进程到进程的通信</h4><p>UDP 使用套接字地址提供进程到进程通信，这是IP 地址和端口号的组合。</p><h4 id="无连接服务"><a href="#无连接服务" class="headerlink" title="无连接服务"></a><strong>无连接服务</strong></h4><ul><li>UDP 提供无连接服务。这就表示UDP 发送出去的每一个用户数据报都是一个独立的数据报。不同的用户数据报之间没有关系，即使它们都是来自相同的源进程并发送到相同的目的程序。</li><li><strong>用户数据报不进行编号</strong>。此外，也没有像TCP 协议那样的连接建立和连接终止，这就表示每一个用户数据报可以沿着不同的路径传递。</li><li>无连接的一个结果就是使用UDP 的进程不能够向UDP 发送数据流，并期望它将这个数据流分割成许多不同的相关联的用户数据报。相反，每一个<strong>请求必须足够小，使其能够装入用户数据报</strong>中，只有那些发送短报文的进程才应当使用UDP。短报文小于65507字节（65535减去UDP头部的8字节再减去IP头部的20 字节）。</li></ul><h4 id="无流量控制"><a href="#无流量控制" class="headerlink" title="无流量控制"></a><strong>无流量控制</strong></h4><p>UDP 是一个非常简单的协议。它没有流量控制（flow control），因而也没有窗口机制。如果到来的报文太多时，接收方可能会溢出。缺乏流量控制意味着如果需要的话，使用UDP 的进程应该提供这个服务。</p><h4 id="差错控制（仅有校验和）"><a href="#差错控制（仅有校验和）" class="headerlink" title="差错控制（仅有校验和）"></a><strong>差错控制（仅有校验和）</strong></h4><p>除校验和外，UDP 也没有差错控制（error control）机制，这就表示<strong>发送方不知道报文是丢失还是重传</strong>。当接收方使用校验和检测出差错时，它就悄悄地将此用户数据报丢弃。缺乏差错控制意味着如果需要的话，使用UDP 的进程应该提供这个服务。</p><h4 id="校验和"><a href="#校验和" class="headerlink" title="校验和"></a><strong>校验和</strong></h4><p>UDP 校验和包含三部分：伪头部、UDP 头部和从应用层来的数据。<br><code>伪头部（psedoheader）</code>是IP 分组的头部的一部分（第4 章讨论），其中有些字段要填入0，用户数据报分装在IP分组中</p><ul><li>如果校验和不包括伪头部，用户数据报也可能是安全完整地到达。但是，如果IP 头部受到损坏，那么它可能被提交到错误的主机。</li></ul><p><code>协议字段</code>可确保这个分组是属于UDP，而不是属于其他传输层协议。</p><ul><li><p>如果一个进程既可用UDP 又可用TCP，则端口号可以是相同的。</p></li><li><p>UDP 的协议字段值是17。如果在传输过程中这个值改变了，在接收端计算校验和时就可检测出来，UDP 就可丢弃这个分组。这样就不会传递给错误的协议。</p><p>  <img src="/2020/06/08/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E6%95%99%E7%A8%8B-%E4%BC%A0%E8%BE%93%E5%B1%82%E5%8D%8F%E8%AE%AE-UDP/%E7%94%A8%E4%BA%8E%E6%A0%A1%E9%AA%8C%E5%92%8C%E8%AE%A1%E7%AE%97%E7%9A%84%E4%BC%AA%E5%A4%B4%E9%83%A8.JPG" alt="用于校验和计算的伪头部"></p></li></ul><h5 id="可选校验和"><a href="#可选校验和" class="headerlink" title="可选校验和"></a>可选校验和</h5><p>UDP 分组的发送方可以选择不计算校验和。这种情况下，在发送前，校验和字段就全填入0。在发送方决定计算校验和的情况下，如果碰巧结果全是0，那么在发送前校验和全改为1。换言之，发送方填充两次校验和。注意，这不会产生混淆，因为校验和的值在正常情况下不会全为1。</p><h4 id="无拥塞控制"><a href="#无拥塞控制" class="headerlink" title="无拥塞控制"></a><strong>无拥塞控制</strong></h4><p>由于UDP 是无连接协议，它不提供拥塞控制。UDP 假设被发送的分组很小且零星，不会在网络中造成拥塞。今天当UDP 被用做音频和视频的交互实时传输时，这个假设可能对也可能不对。</p><h4 id="封装和解封装"><a href="#封装和解封装" class="headerlink" title="封装和解封装"></a><strong>封装和解封装</strong></h4><p>要将报文从一个进程发送到另一个进程时，UDP 协议就要对报文进行封装和解封装。</p><h4 id="排队"><a href="#排队" class="headerlink" title="排队"></a><strong>排队</strong></h4><p>我们已经讨论过端口，但是没有讨论端口的实际实现。在UDP 中，队列是与端口联系在一起的。在客户端，当进程启动时，它从操作系统请求一个端口号。有些实现是创建一个入队列和一个出队列与每一个进程相关联。而有些实现只创建与每一个进程相关的入队列。</p><h4 id="多路复用与多路分解"><a href="#多路复用与多路分解" class="headerlink" title="多路复用与多路分解"></a><strong>多路复用与多路分解</strong></h4><p>在<strong>运行TCP/IP 协议簇的主机上只有一个UDP</strong>，但可能有多个想使用UDP 服务的进程。处理这种情况，UDP 采用多路复用和多路分解。</p><h4 id="UDP-和通用简单协议比较"><a href="#UDP-和通用简单协议比较" class="headerlink" title="UDP 和通用简单协议比较"></a>UDP 和通用简单协议比较</h4><p>我们可以将UDP 与之前讨论的无连接简单协议进行比较。唯一的区别就是UDP 提供可选校验和来在接收端发现被破坏分组。如果校验和被加入分组，接收UDP 可以检测分组，如果分组被破坏可以丢弃它。然而，没有反馈被发向发送方。<br>UDP 是我们之前讨论的无连接简单协议的一个例子，区别在于它为差错检测加入了可选校验和。</p><h3 id="UDP应用"><a href="#UDP应用" class="headerlink" title="UDP应用"></a><strong>UDP应用</strong></h3><blockquote><p>一位应用设计师有时需要折中来得到最佳情况。例如，在日常生活中，我们都知道一日递送包裹比三日递送要贵。尽管时间和代价在递送包裹中都是想要获取的特性，但是它们是彼此矛盾的。我们需要选择最佳值。</p></blockquote><p>尽管UDP 不满足我们之前讨论的可靠传输层协议标准，但是，UDP 更适合某些应用,因为其他某些服务可能有副作用，这些副作用或许是不可接受的或许是不称心的</p><h4 id="UDP特性"><a href="#UDP特性" class="headerlink" title="UDP特性"></a><strong>UDP特性</strong></h4><ol><li><p>无连接服务：UDP 是无连接协议。同一个应用程序发送的UDP 分组之间是独立的。</p><p> 例如，如果一个客户应用需要向服务器发送一个短的请求并接收一个短的响应，那么这就是优势。如果请求和响应各自可以填充进一个数据报，那么无连接服务可能更可取。在这种情况下，建立和关闭连接的开销可能很可观。在面向连接服务中，要达到以上目标，至少需要在客户和服务器之间交换9 个分组；在无连接服务中只需要交换2 个分组。无连接服务提供了更小的延迟；面向连接服务造成了更多的延迟。如果延迟是应用的重要问题，那么无连接服务更可取。</p></li><li><p>缺乏差错控制：它提供的是不可靠服务。</p></li><li><p>缺乏拥塞控制：UDP 不提供拥塞控制。然而，在倾向于出错的网络中UDP 没有创建额外的通信量。TCP 可能多次重发一个分组，因此这个行为促使拥塞发生或者使得拥塞状况加重。因此，在某些情况下，当拥塞是一个大问题时，UDP 中缺乏差错控制可以看做是一个优势</p></li></ol><h4 id="应用"><a href="#应用" class="headerlink" title="应用"></a><strong>应用</strong></h4><ol><li><code>DNS</code>，它使用UDP 服务，因为客户需要向服务器发送一个短的请求，并从服务器接收快速响应。请求和响应可以填充进一个用户数据报。由于在每个方向上只交换一个报文，因此无连接特性不是问题；客户或服务器不担心报文会失序传递。</li><li>UDP 可用于某些路由选择更新协议，如<code>路由选择信息协议（RIP）</code></li><li>UDP 可用于管理进程，如<code>SNMP</code></li><li>UDP 适用于具有内部流量控制和差错控制机制的进程。例如，<code>简单文件传输协议（TFTP）</code>的进程就包含流量控制和差错控制。它可很容易地使用UDP。</li><li>UDP 适合于这样的进程：它需要简单的请求-响应通信，而较少考虑流量控制和差错控制。对于需要传送成块数据的进程（如FTP）则通常不使用UDP</li></ol><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p>计算机网络教程-自顶向下方法</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;传输层协议&quot;&gt;&lt;a href=&quot;#传输层协议&quot; class=&quot;headerlink&quot; title=&quot;传输层协议&quot;&gt;&lt;/a&gt;传输层协议&lt;/h2&gt;&lt;p&gt;UDP ：不可靠的无连接传输层协议，由于在应用中简单高效而被使用，在那些应用中差错控制由应用层进程提供。&lt;br&gt;TCP ：可靠的面向连接协议，可用于可靠性重要的任何应用。&lt;/p&gt;
    
    </summary>
    
    
      <category term="计算机网络" scheme="https://stemha.github.io/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/"/>
    
    
      <category term="传输层" scheme="https://stemha.github.io/tags/%E4%BC%A0%E8%BE%93%E5%B1%82/"/>
    
      <category term="UDP" scheme="https://stemha.github.io/tags/UDP/"/>
    
  </entry>
  
  <entry>
    <title>计算机网络教程-传输层概述</title>
    <link href="https://stemha.github.io/2020/06/08/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E6%95%99%E7%A8%8B-%E4%BC%A0%E8%BE%93%E5%B1%82%E6%A6%82%E8%BF%B0/"/>
    <id>https://stemha.github.io/2020/06/08/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E6%95%99%E7%A8%8B-%E4%BC%A0%E8%BE%93%E5%B1%82%E6%A6%82%E8%BF%B0/</id>
    <published>2020-06-08T08:47:53.000Z</published>
    <updated>2020-06-08T09:16:54.950Z</updated>
    
    <content type="html"><![CDATA[<h2 id="传输层"><a href="#传输层" class="headerlink" title="传输层"></a><strong>传输层</strong></h2><ul><li>传输层是客户程序和服务器程序之间的联络人，是一个进程到进程的连接。</li><li>传输层是TCP/IP 协议簇中的核心；</li><li>它是因特网上从一点到另一个点传输数据的端到端逻辑传输媒介。<a id="more"></a></li></ul><h2 id="传输层提供的一般服务"><a href="#传输层提供的一般服务" class="headerlink" title="传输层提供的一般服务"></a><strong>传输层提供的一般服务</strong></h2><h3 id="进程到进程通信"><a href="#进程到进程通信" class="headerlink" title="进程到进程通信"></a><strong>进程到进程通信</strong></h3><p>传输层协议的首要任务是提供<code>进程到进程通信（process-to-process communication）</code>。</p><p><code>主机间通信与进程间通信的不同</code>:<br>网络层负责计算机层次的通信（主机到主机通信）。网络层协议只把报文传递到目的计算机。<br>然而，这是不完整的传递。报文仍然需要递交给正确的进程。这正是传输层接管的部分。<br>传输层协议负责将报文传输到正确的进程。</p><h4 id="寻址：端口号"><a href="#寻址：端口号" class="headerlink" title="寻址：端口号"></a><strong>寻址：端口号</strong></h4><p>对通信来说，我们必须定义本地主机、本地进程、远程主机以及远程进程。<br>IP 地址来定义本地主机和远程主机。<br><code>端口号（port number）</code>来定义进程。TCP/IP 协议簇中，端口号是在0 到65 535 之间的16 位整数。</p><p><strong>客户程序</strong>用端口号定义它自己，这称为<code>临时端口号（ephemeral port number）</code>。临时这个词表示短期的（short-lived），它之所以被使用是因为客户的生命周期通常很短。为了客户-服务器程序能<br>正常工作，临时端口号推荐值为大于1023。</p><p>服务器进程端口号不能随机选择。（因为随机分配的话导致客户端不知道端口号），TCP/IP 决定使用全局端口号，它们称为<code>熟知端口号（well-known port number）</code>。</p><h4 id="ICANN-端口范围"><a href="#ICANN-端口范围" class="headerlink" title="ICANN 端口范围"></a><strong>ICANN 端口范围</strong></h4><p>ICANN已经把端口号编码划分为三种范围：熟知的、注册的和动态的（或私有的）</p><ul><li><code>熟知端口</code>：端口号0~1023，由ICANN 分配和控制。这些是熟知端口号。<ul><li>在 UNIX 中，熟知端口号存储在/etc/services 文件中，这个文件的每行给出服务器名和熟知端口号</li></ul></li><li><code>注册端口</code>：端口号1024~49151，ICANN 不分配也不控制。它们可在ICANN 注册以防重复。</li><li><code>动态端口</code>：端口号49152~65535。这一范围内的端口号既不受控制又不需要注册，可以由任何进程使用。它们是临时或私有端口号。49152是2的14次方乘3</li></ul><p><img src="/2020/06/08/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E6%95%99%E7%A8%8B-%E4%BC%A0%E8%BE%93%E5%B1%82%E6%A6%82%E8%BF%B0/ICANN%E8%8C%83%E5%9B%B4.JPG" alt="ICANN范围"></p><h4 id="套接字地址"><a href="#套接字地址" class="headerlink" title="套接字地址"></a><strong>套接字地址</strong></h4><p>在 TCP 协议簇中的传输层协议需要IP 地址和端口号，它们各在一端建立一条连接。<br>一个IP地址和一个端口号结合起来称为<code>套接字地址（socket address）</code>。<br>客户套接字地址唯一定义了客户进程;<br>服务器套接字地址唯一地定义了服务器进程;<br>为了使用因特网中的传输层服务，我们需要一对套接字地址：客户套接字地址和服务器套接字地址。<br><img src="/2020/06/08/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E6%95%99%E7%A8%8B-%E4%BC%A0%E8%BE%93%E5%B1%82%E6%A6%82%E8%BF%B0/%E4%B8%80%E5%AF%B9%E5%A5%97%E6%8E%A5%E5%AD%97%E5%9C%B0%E5%9D%80.JPG" alt="一对套接字地址"></p><h3 id="多路复用和多路分解"><a href="#多路复用和多路分解" class="headerlink" title="多路复用和多路分解"></a><strong>多路复用和多路分解</strong></h3><p><code>多路复用（multiplexing，多对一）</code>：</p><ul><li>多个数据项从多个源发出，一个实体接收它们，然后负责传输。；</li><li>指多个应用程序共享同一个传输层建立的连接进行数据的传送，在传输层是通过什么来区分不同的应用程序的（通过端口）</li><li>源端的传输层执行复用；</li></ul><p><code>多路分解（demultiplexing，一对多）</code>：</p><ul><li>每当一个实体将数据项传递到一个以上的源时。</li><li>目的端的传输层执行多路分解</li></ul><h3 id="流量控制"><a href="#流量控制" class="headerlink" title="流量控制"></a><strong>流量控制</strong></h3><p>每当一个实体创建数据项并且有另一个实体消耗它们时，就存在生产速率和消费速率的平衡问题。</p><ol><li>如果数据项生产比消费快，那么消费者可能被淹没并且可能要<strong>丢弃一些数据项</strong>。</li><li>如果数据项生产比消费慢，那么消费者必须等待，系统就会变得<strong>低效</strong>。</li></ol><p>流量控制与第一种情况相关。我们需要在消费者端防止丢失数据项。</p><h4 id="生产者到消费者消息传输两种方式"><a href="#生产者到消费者消息传输两种方式" class="headerlink" title="生产者到消费者消息传输两种方式"></a><strong>生产者到消费者消息传输两种方式</strong></h4><p><code>推（push）</code>:每当发送方生产数据项时，它无须事前获得消费者的请求就会发送它们——这种传递称为推。<br>需要流量控制：当生产者推数据项时，消费者可能被淹没并需要相反方向的流量控制，以此来防止丢弃这些数据项。</p><p><code>拉（pull）</code>:如果生产者在消费者请求这些数据项之后进行发送，这种传递称为拉。<br>不需要流量控制：当消费者拉数据项，它会在自身做好准备时进行请求。在这种情况下，不需要流量控制。<br><img src="/2020/06/08/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E6%95%99%E7%A8%8B-%E4%BC%A0%E8%BE%93%E5%B1%82%E6%A6%82%E8%BF%B0/%E6%95%B0%E6%8D%AE%E4%BC%A0%E9%80%92%E6%A8%A1%E5%9E%8B.JPG" alt="数据传递模型"></p><h4 id="传输层流量控制"><a href="#传输层流量控制" class="headerlink" title="传输层流量控制"></a><strong>传输层流量控制</strong></h4><p>在传输层通信中，我们需要处理四个实体：发送方进程、发送方传输层、接收方传输层和接收方进程。<br>应用层的发送方进程仅仅是一个生产者。它生产报文块，并把它们推到传输层。<br>发送方传输层有两个作用：<br>是消费者：它消费生产者推来的报文。<br>也是生产者：它将报文封装进分组并传递到接收方传输层。<br>接收方传输有两个作用：<br>是消费者：消费从发送方那里接收来的分组；<br>也是生产者：解封装报文并传递到应用层。然而，最后的传递通常是拉传递；传输层等待直到应用层进程请求报文。</p><p>我们至少需要两种流量控制：</p><ol><li>从发送方传输层到发送方应用层的流量控制。</li><li>从接收方传输层到发送方传输层的流量控制。</li></ol><p>这里看图即可：<br><img src="/2020/06/08/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E6%95%99%E7%A8%8B-%E4%BC%A0%E8%BE%93%E5%B1%82%E6%A6%82%E8%BF%B0/%E4%BC%A0%E8%BE%93%E5%B1%82%E6%B5%81%E9%87%8F%E6%8E%A7%E5%88%B6.JPG" alt="传输层流量控制"></p><h4 id="缓冲区"><a href="#缓冲区" class="headerlink" title="缓冲区"></a><strong>缓冲区</strong></h4><p>流量控制可以用多种方式实现，但通常的方式是使用两个缓冲区：一个位于发送方传输层，另一个位于接收方传输层。<br>缓冲区是一组内存单元，它可以在发送端和接收端存储分组。<br>消费者向生产者发送信号从而进行流量控制通信。</p><p><strong>当发送方传输层的缓冲区已满</strong>，它就通知应用层停止传输报文块；当有空闲位置时，它通知应用层可以再次传输报文块。<br><strong>当接收方传输层的缓冲区已满</strong>，它就通知发送方传输层停止传输分组；当有空闲位置时，它通知发送方传输层可以再次传输分组。</p><h3 id="传输层差错控制"><a href="#传输层差错控制" class="headerlink" title="传输层差错控制"></a><strong>传输层差错控制</strong></h3><p>由于网络层（IP）是不可靠的，如果应用层需要可靠性，我们需要使传输层变得可靠。可靠性可以通过在传输层加入差错控制服务来实现。</p><p><strong>传输层的差错控制负责以下几个方面：</strong></p><ol><li><strong>发现</strong>并丢弃被破坏的分组。</li><li><strong>记录</strong>丢失和丢弃的分组并重传它们。</li><li><strong>识别重复分组</strong>并丢弃它们。</li><li><strong>缓冲失序分组</strong>直到丢失的分组到达。</li></ol><p>差错控制不像流量控制，它仅涉及发送方和接收方传输层。我们假设在应用层和传输层之间交换的报文块是不会产生差错的。<br><img src="/2020/06/08/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E6%95%99%E7%A8%8B-%E4%BC%A0%E8%BE%93%E5%B1%82%E6%A6%82%E8%BF%B0/%E4%BC%A0%E8%BE%93%E5%B1%82%E5%B7%AE%E9%94%99%E6%8E%A7%E5%88%B6.JPG" alt="传输层差错控制"></p><h4 id="序号"><a href="#序号" class="headerlink" title="序号"></a><strong>序号</strong></h4><p>差错控制需要发送方传输层知道哪个分组要被重传并且接收方传输层需要知道哪个分组是重复的、哪个分组是失序的。如果分组是编号的，这个就可以实现。我们可以在传输层分组中加入一个字段来保存分组的序号（sequence number）。<br>分组一般按序编号。然而，由于我们需要在头部包含每个分组的序号，因此需要设置一个界限。如果分组的头部允许序号最多为m 比特位，那么序号范围就是0 到2m−1。例如，如果m 是4，序<br>号范围是0 到15 的闭区间。然而，我们可以回绕。<br>序号是模2^m 的。<br>对于差错控制，序号是模2m 的，这里m 是序号字段的大小，单位是比特。</p><h4 id="确认"><a href="#确认" class="headerlink" title="确认"></a><strong>确认</strong></h4><p>接收方可以为每一组正确到达的分组发送一个确认（ACK）。接收方可以简单地丢弃被破坏的分组。发送方如果使用<strong>计时器</strong>，它就可以发现丢失分组。当一个分组被发送，发送方就开启一个计时器。如<br>果ACK 在计时器超时之前没有到达，那么发送方重发这个分组。重复的分组可以被接收方默默丢弃。失序的分组既可以被丢弃（被发送方当做丢失报文对待），也可以存储直到丢失的那个分组到来。</p><h3 id="流量和差错控制的组合"><a href="#流量和差错控制的组合" class="headerlink" title="流量和差错控制的组合"></a><strong>流量和差错控制的组合</strong></h3><p><code>流量控制</code>要求使用两个缓冲区，一个在发送端另一个在接收端。<br><code>差错控制</code>要求两端均使用序号和确认号。<br><code>流量和差错控制的组合</code>：使用两个带序号的缓冲区：一个位于发送端，一个位于接收端，那么这两个需要可以结合起来。<br>在<strong>发送端</strong>，当分组准备发送时，我们使用下一个缓冲区空闲位置号码x 作为分组的序号。当分组被发送，一个分组的备份存储在内存位置x，等待来自另一端的确认。当与被发送分组相关的确认到达时，分组被清除，内存位置空闲出来。<br>在<strong>接收端</strong>，当带有序号y 的分组到达时，它被存储在内存位置y 上，直到应用层准备好接收它。这时发送一个确认表明分组y 的到达。</p><h4 id="滑动窗口"><a href="#滑动窗口" class="headerlink" title="滑动窗口"></a><strong>滑动窗口</strong></h4><p>由于序号进行模2<sup>m</sup> 操作，因此一个环可以代表从0 到2<sup>m−1</sup> 的序号。<br>缓冲区由一组片段代表，称为<code>滑动窗口（sliding window）</code>，它随时占据环的一部分。<br>在发送端，当一个报文被发送，相应的片段就被标记。当有所片段都被标记时，意味着缓冲区满且不能从应用层进一步接收报文。<br>当确认到达时，相应片段被取消标记。如果从窗口开始处有一些连续的片段没有被标记，那么窗口滑过这些相应序号的范围，允许更多的片段进入窗口尾部。<br>下图 给出发送方的滑动窗口。<br><img src="/2020/06/08/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E6%95%99%E7%A8%8B-%E4%BC%A0%E8%BE%93%E5%B1%82%E6%A6%82%E8%BF%B0/%E5%9C%86%E5%BD%A2%E6%BB%91%E5%8A%A8%E7%AA%97%E5%8F%A3.JPG" alt="圆形滑动窗口"></p><p>序号以16 为模（m = 4）且窗口大小为7。请注意滑动窗口仅仅是一个抽象：实际情况是使用计算机变量来保存下一个和最后一个待发送的分组。<br>大多数协议使用线性形式来表示滑动窗口。虽然想法是相同的，但是它通常占用更少的页面空间。下图给出这种表示方法。这两种表示方法告诉我们相同的事情。如果拿起下图每一幅图的两个端点，并且弯曲它们，我们就可以得到与圆形滑动窗口相同的图。<br><img src="/2020/06/08/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E6%95%99%E7%A8%8B-%E4%BC%A0%E8%BE%93%E5%B1%82%E6%A6%82%E8%BF%B0/%E7%BA%BF%E6%80%A7%E5%BD%A2%E5%BC%8F%E6%BB%91%E5%8A%A8%E7%AA%97%E5%8F%A3.JPG" alt="线性形式滑动窗口"></p><h3 id="拥塞控制"><a href="#拥塞控制" class="headerlink" title="拥塞控制"></a><strong>拥塞控制</strong></h3><p><code>拥塞（congestion）</code>:因特网之类的分组交换网络中存在一个重要问题，这就是拥塞。如果网络中的负载（load，即发送到网络的分组数）大于网络的容量（网络可以处理的分组数），那么网络就可能发生拥塞。<br><code>拥塞控制（congestion control）</code>指的是一种机制和技术，它控制拥塞并将负载保持在容量以内。</p><h3 id="无连接和面向连接服务"><a href="#无连接和面向连接服务" class="headerlink" title="无连接和面向连接服务"></a><strong>无连接和面向连接服务</strong></h3><p>传输层协议就像网络层协议一样，可以提供两种类型的服务：</p><ul><li>无连接服务</li><li>面向连接服务</li></ul><p>然而，这些传输层服务的本质与网络层不同。</p><ul><li>在<code>网络层，无连接服务</code>可能意味着属于同一个报文的不同数据报有不同路径。</li><li>在<code>网络层，面向连接服务</code>意味着两个终端主机以及这之间的所有路由器都进行协调。</li><li>在传输层，我们不关心分组的物理路径（我们假设两个传输层之间有一条逻辑连接）。</li></ul><blockquote><p>传输层的无连接服务意味着分组之间的独立；面向连接服务意味着依赖。</p></blockquote><h4 id="无连接服务"><a href="#无连接服务" class="headerlink" title="无连接服务"></a><strong>无连接服务</strong></h4><p>在无连接服务中，源进程（应用程序）需要将报文分成传输层可接受大小的数据块，并把它们一个一个地传递到传输层。<br><strong>传输层将每一个数据块看做彼此没有关系的单元。</strong>当一个块从应用层到达时，传输层将其封装在分组中并发送。</p><p>为了展示分组的独立，我们假设客户进程有三个报文块要发送给服务器进程。这些块被按序交给无连接传输协议。<br>然而，由于传输层的这些分组之间没有联系，分组可能失序到达目的地并且被失序传递给服务器进程<br>在客户端，三个报文块按序传递给客户传输层<br>（0、1 和2）。由于第二个分组在传输中的额外延迟，服务器报文的传递失序（0、2 和1）。如果这三个数据块属于同一个报文，那么服务器进程可能会收到一个奇怪的报文。<br>如果一个分组丢了情况就更糟糕了。由于分组没有序号，接收方传输层不知道一个报文已经丢失。它仅仅将两个数据块传送到服务器进程。<br>以上两个问题是由于双方传输层没有互相协调所致。接收方传输层不知道第一个分组将要到来，也不知道所有的分组已经到来。<br>我们可以说，流量控制、差错控制以及拥塞控制都不能在无连接服务中有效实现。</p><p>无连接的服务是不可靠的服务，无法许诺不会出现的交付和重复的差错，但这种协议代价很小，更适应于某些服务，比如内部的数据采集、向外的数据分发、请求一响应，以及实时应用等。因此在运输层既有面向连接的位置，也有无连接的用武之地。每一个分组独立地建立和释放逻辑连接，也适合传送大量的数据。<br>无连接的服务的通信线路不都是预设的。<br>无连接的服务需要将目标地址信息加在每个发送的分组上，便于每个分组路由到达目的地。<br>UDP在电路交换或租用专线网络上也能运行。</p><h4 id="面向连接服务"><a href="#面向连接服务" class="headerlink" title="面向连接服务"></a><strong>面向连接服务</strong></h4><p>面向连接的服务中，首先需要建立客户和服务器之间的逻辑连接。只有连接建立之后才能进行数据交换。在数据交换之后，连接需要拆除</p><ol><li>连接建立</li><li>数据传输</li><li>拆除阶段。</li></ol><p>在面向连接协议中，我们可以实现流量控制、差错控制以及拥塞控制。<br>面向连接的方式功能强大，允许流量控制、差错控制以及顺序交付等。</p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p>计算机网络教程-自顶向下方法 </p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;传输层&quot;&gt;&lt;a href=&quot;#传输层&quot; class=&quot;headerlink&quot; title=&quot;传输层&quot;&gt;&lt;/a&gt;&lt;strong&gt;传输层&lt;/strong&gt;&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;传输层是客户程序和服务器程序之间的联络人，是一个进程到进程的连接。&lt;/li&gt;
&lt;li&gt;传输层是TCP/IP 协议簇中的核心；&lt;/li&gt;
&lt;li&gt;它是因特网上从一点到另一个点传输数据的端到端逻辑传输媒介。&lt;/li&gt;&lt;/ul&gt;
    
    </summary>
    
    
      <category term="计算机网络" scheme="https://stemha.github.io/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/"/>
    
    
      <category term="计算机网络" scheme="https://stemha.github.io/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/"/>
    
      <category term="传输层" scheme="https://stemha.github.io/tags/%E4%BC%A0%E8%BE%93%E5%B1%82/"/>
    
      <category term="设计方法" scheme="https://stemha.github.io/tags/%E8%AE%BE%E8%AE%A1%E6%96%B9%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>《复杂》阅读笔记</title>
    <link href="https://stemha.github.io/2020/06/06/%E3%80%8A%E5%A4%8D%E6%9D%82%E3%80%8B%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0/"/>
    <id>https://stemha.github.io/2020/06/06/%E3%80%8A%E5%A4%8D%E6%9D%82%E3%80%8B%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0/</id>
    <published>2020-06-06T14:55:35.000Z</published>
    <updated>2020-06-06T15:05:43.050Z</updated>
    
    <content type="html"><![CDATA[<p>《复杂》简单讲述了复杂系统科学尝试去回答的迷人与令人费解的问题的一部分。</p><h3 id="度量一个事物或过程的复杂性的三个维度"><a href="#度量一个事物或过程的复杂性的三个维度" class="headerlink" title="度量一个事物或过程的复杂性的三个维度"></a>度量一个事物或过程的复杂性的三个维度</h3><pre><code>描述它有多困难产生它有多困难其组织程度如何</code></pre><a id="more"></a><p>物理学家克劳德</p><h3 id="模型是什么？"><a href="#模型是什么？" class="headerlink" title="模型是什么？"></a>模型是什么？</h3><p>科学中是某种实在现象的简化表述<br>模型是我们的思维方式 是用我们熟悉的思维概念解释观察到的现象；</p><h3 id="无尺度特性"><a href="#无尺度特性" class="headerlink" title="无尺度特性"></a>无尺度特性</h3><p>《复杂性》这本书详细解释了什么是无尺度；改变图的尺度，图的形状是不变化的；<br>例子：给定一个大型的样例网络，使用直方图来观察度的分布<br>入度作为横轴，频率作为纵轴<br>1000-10000<br>10000-100000<br>100000-1000000<br>然上面几个图的分布情况曲线的形状几乎一样。<br>这样的分布是自相似的，因为不管在哪种尺度下进行绘制，形状都是一样的——也就是在不同的尺度下具有不变性——就是无尺度一词的由来（无标度）<br>无尺度网络对节点的随机删除具有稳健性，但是如果中心节点失效或是受到攻击就会非常脆弱。</p><p>如果你发现某种量遵循幂律分布，你就可以猜想这是某种自相似或分形系统导致的；<br>尽可能填充空间的几何对象其实就是分形分支结构——在所有尺度上的自相似意味着空间在所有尺度上都被同等填充。</p><h3 id="偏好依附（Preferential-attachment）"><a href="#偏好依附（Preferential-attachment）" class="headerlink" title="偏好依附（Preferential attachment）"></a>偏好依附（Preferential attachment）</h3><p>接下来一个很重要的概念是偏好依附。<br>偏好依附（Preferential attachment）//一种网络生长机制<br>巴拉巴西和艾伯特提出了一种他们称之为“偏好依附”的生成机制，用来解释幂律分布；<br>其中的思想是：网络在生长的时候。连接度高的节点比连接度低的节点更有可能得到新的连接；//直观上说，朋友越多的人，越可能认识新的朋友。网页的入度越高，就越容易被找到；</p><h3 id="连锁失效"><a href="#连锁失效" class="headerlink" title="连锁失效"></a>连锁失效</h3><p>如果某个节点失效了，它的工作就会转移到其他节点，这有可能使得其他节点因为负荷过重而失效，它的工作就会转移到未失效的顶点~</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;《复杂》简单讲述了复杂系统科学尝试去回答的迷人与令人费解的问题的一部分。&lt;/p&gt;
&lt;h3 id=&quot;度量一个事物或过程的复杂性的三个维度&quot;&gt;&lt;a href=&quot;#度量一个事物或过程的复杂性的三个维度&quot; class=&quot;headerlink&quot; title=&quot;度量一个事物或过程的复杂性的三个维度&quot;&gt;&lt;/a&gt;度量一个事物或过程的复杂性的三个维度&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;描述它有多困难
产生它有多困难
其组织程度如何&lt;/code&gt;&lt;/pre&gt;
    
    </summary>
    
    
      <category term="读书笔记" scheme="https://stemha.github.io/categories/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="网络" scheme="https://stemha.github.io/tags/%E7%BD%91%E7%BB%9C/"/>
    
  </entry>
  
  <entry>
    <title>string常用操作</title>
    <link href="https://stemha.github.io/2020/06/06/string%E5%B8%B8%E7%94%A8%E6%93%8D%E4%BD%9C/"/>
    <id>https://stemha.github.io/2020/06/06/string%E5%B8%B8%E7%94%A8%E6%93%8D%E4%BD%9C/</id>
    <published>2020-06-06T14:46:38.000Z</published>
    <updated>2020-06-08T09:17:30.358Z</updated>
    
    <content type="html"><![CDATA[<h2 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h2><p>标准库 string 类型：string 类型支持长度可变的字符串，C++ 标准库将负责管理与存储字符相关的内存，以及提供各种有用的操作。<br>可以使用输入输出流方式直接进行操作，也可以通过文件等手段进行操作。<br>size_type是一个依赖于实现的整型，是在string中定义的。<br>string类将<code>string::npos</code>定义为字符串的最大长度，通常为unsigned int的最大值。<br>另外，使用缩写<code>NBTS（null-terminated string）</code>来表示以空字符结束的字符串。</p><a id="more"></a><h2 id="头文件"><a href="#头文件" class="headerlink" title="头文件"></a>头文件</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br></pre></td></tr></table></figure><h2 id="模板"><a href="#模板" class="headerlink" title="模板"></a>模板</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//The string class is an instantiation of the basic_string class template, defined in &lt;string&gt; as:</span></span><br><span class="line"><span class="keyword">typedef</span> basic_string&lt;<span class="keyword">char</span>&gt; <span class="built_in">string</span>;</span><br><span class="line"><span class="built_in">string</span>实际上是basic_string&lt;<span class="keyword">char</span>&gt;的一个<span class="keyword">typedef</span>，同时省略了与内存管理相关的参数。</span><br></pre></td></tr></table></figure><h2 id="string初始化方法"><a href="#string初始化方法" class="headerlink" title="string初始化方法"></a><strong>string初始化方法</strong></h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">string</span> s1;        默认构造函数 s1 为空串</span><br><span class="line"><span class="function"><span class="built_in">string</span> <span class="title">s2</span><span class="params">(s1)</span></span>;    将 s2初始化为 s1 的一个副本</span><br><span class="line"><span class="function"><span class="built_in">string</span> <span class="title">s3</span><span class="params">(“value”)</span></span>;将 s3 初始化为一个字符串字面值副本</span><br><span class="line"><span class="function"><span class="built_in">string</span> <span class="title">s4</span><span class="params">(n, ‘c’)</span></span>;将 s4 初始化为字符 ‘c’ 的 n 个副本</span><br></pre></td></tr></table></figure><p>注意！因为历史原因以及为了与 C 语言兼容，字符串字面值与标准库 string 类型不是同一种类型。这一点很容易引起混乱，编程时一定要注意区分字符串字面值和 string 数据类型的使用，这很重要。</p><h2 id="c-style字符转换"><a href="#c-style字符转换" class="headerlink" title="c-style字符转换"></a>c-style字符转换</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">s.c_str();返回指向以null结尾的字符数组的指针，其数据与存储在字符串中的数据相同</span><br></pre></td></tr></table></figure><h2 id="交换"><a href="#交换" class="headerlink" title="交换"></a><strong>交换</strong></h2><p><code>swap(string&amp; other)</code>：和参数的元素进行交换，所包含对象的类型必须相同。：将当前 string中的元素和参数 string 中的元素交换。它们需要包含相同类型的元素。也可以调用全局函数模板 swap() 来完成同样的操作。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">void swap(string &amp;x)　重载1：x.swap(y)</span><br><span class="line">void swap (string&amp; x, string&amp; y)  重载2: swap(x, y)</span><br><span class="line">q.swap(p) <span class="comment">//交换两个string</span></span><br><span class="line">所有迭代器和引用都可能无效</span><br></pre></td></tr></table></figure><h2 id="常用操作"><a href="#常用操作" class="headerlink" title="常用操作"></a><strong>常用操作</strong></h2><h3 id="读写操作"><a href="#读写操作" class="headerlink" title="读写操作"></a><strong>读写操作</strong></h3><p>对于string类型变量s的输入：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cin</span> &gt;&gt; s;</span><br></pre></td></tr></table></figure><p>从标准输入读取 string 并将读入的串存储在 s 中。string 类型的输入操作符：</p><ul><li>读取并忽略开头所有的空白字符（如空格，换行符，制表符）。</li><li>读取字符直至再次遇到空白字符，读取终止。</li></ul><h4 id="读入未知数目的string-对象"><a href="#读入未知数目的string-对象" class="headerlink" title="读入未知数目的string 对象"></a>读入未知数目的string 对象</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">string</span> word;</span><br><span class="line">程序将从标准输入读取一组 <span class="built_in">string</span> 对象，然后在标准输出上逐行输出：</span><br><span class="line"><span class="keyword">while</span> (<span class="built_in">cin</span> &gt;&gt; word)</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; word &lt;&lt; <span class="built_in">endl</span>;</span><br></pre></td></tr></table></figure><p>上例中，用输入操作符来读取 string 对象。该操作符返回所读的istream 对象，并在读取结束后，作为 while 的判断条件。如果输入流是有效的，即还未到达文件尾且未遇到无效输入，则执行 while 循环体，并将读取到的字符串输出到标准输出。如果到达了文件尾，则跳出 while 循环。</p><h4 id="使用getline-读取整行文本"><a href="#使用getline-读取整行文本" class="headerlink" title="使用getline 读取整行文本"></a>使用getline 读取整行文本</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">string</span> line; <span class="comment">// read line at time until end-of-file</span></span><br><span class="line"><span class="keyword">while</span> (getline(<span class="built_in">cin</span>, line))  <span class="comment">//循环读取输入流</span></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; line &lt;&lt; <span class="built_in">endl</span>;</span><br></pre></td></tr></table></figure><h3 id="赋值"><a href="#赋值" class="headerlink" title="赋值"></a><strong>赋值</strong></h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// st1 is an empty string, st2 is a copy of the literal</span></span><br><span class="line"><span class="built_in">string</span> st1, st2 = <span class="string">"The expense of spirit"</span>;</span><br><span class="line">st1 = st2; <span class="comment">// replace st1 by a copy of st2</span></span><br><span class="line">它必须先把 st1 占用的相关内存释放掉，然后再分配给 st2 足够存放 st2 副本的内存空间，最后把 st2 中的所有字符复制到新分配的内存空间。</span><br></pre></td></tr></table></figure><h3 id="和字符串字面值的连接"><a href="#和字符串字面值的连接" class="headerlink" title="和字符串字面值的连接"></a><strong>和字符串字面值的连接</strong></h3><p>当进行 string 对象和字符串字面值混合连接操作时，<strong>+ 操作符的左右操作数必须至少有一个是 string 类型的</strong>：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">string</span> s1 = <span class="string">"hello"</span>; <span class="comment">// no punctuation</span></span><br><span class="line"><span class="built_in">string</span> s2 = <span class="string">"world"</span>;</span><br><span class="line"><span class="built_in">string</span> s3 = s1 + <span class="string">", "</span>; <span class="comment">// ok: adding a string and a literal</span></span><br><span class="line"><span class="built_in">string</span> s4 = <span class="string">"hello"</span> + <span class="string">", "</span>; <span class="comment">// error: no string operand s4 的初始化试图将两个字符串字面值相加，因此是非法的</span></span><br><span class="line"><span class="built_in">string</span> s5 = s1 + <span class="string">", "</span> + <span class="string">"world"</span>; <span class="comment">// ok: each + has string operand</span></span><br><span class="line"><span class="built_in">string</span> s6 = <span class="string">"hello"</span> + <span class="string">", "</span> + s2; <span class="comment">// error: can't add string literals</span></span><br><span class="line"> s6 的初始化是非法的。依次来看每个子表达式，则第一个子表达式试图把两个字符串字面值连接起来。这是不允许的，因此这个语句是错误的。</span><br></pre></td></tr></table></figure><h3 id="大小与是否为空"><a href="#大小与是否为空" class="headerlink" title="大小与是否为空"></a>大小与是否为空</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">s.empty();    <span class="literal">true</span>如果字符串为空, 否则返回<span class="literal">false</span></span><br><span class="line">s.size();       字符串中CharT元素的数量</span><br><span class="line">s.length();    字符串中CharT元素的数量</span><br><span class="line">s.capacity();返回字符串当前为其分配空间的字符数</span><br><span class="line">s.max_size();   返回<span class="built_in">string</span>对象能够容纳的字符的最大数目</span><br><span class="line">s.resize(<span class="keyword">size_t</span> n, <span class="keyword">char</span> c);  用来改变<span class="built_in">string</span>的大小，如果size小于原来<span class="built_in">string</span>的size大小，则截取前面的size个字符，如果大于，则用空格填充。</span><br><span class="line">s.resize(<span class="keyword">size_t</span> n); </span><br><span class="line">s.reserve(<span class="keyword">size_t</span> res_arg=<span class="number">0</span>);为<span class="built_in">string</span>预留空间，不改变有效元素个数，当reserve的参数小于<span class="built_in">string</span>的底层空间总大小时，reserve不会改变容量大小。 </span><br><span class="line">s.shrink_to_fit()请求删除未使用的容量</span><br></pre></td></tr></table></figure><p>注意：</p><ul><li>resize在改变元素个数时，如果是将元素个数增多，可能会改变底层容量的大小，如果是将元素个数减少，底层空间总大小不变。</li><li>size()与length()方法底层实现原理完全相同，引入size()的原因是为了与其他容器的接口保持一致，一般情况下基本都是用size()。</li></ul><h3 id="插入追加覆盖"><a href="#插入追加覆盖" class="headerlink" title="插入追加覆盖"></a>插入追加覆盖</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">s.append(args);将args追加到s.返回一个指向s的引用.</span><br><span class="line">s.assign(args);将s中的字符替换为args指定的字符.返回一个指向s的引用.</span><br><span class="line">s.push_back(<span class="keyword">char</span> c); 在末尾添加一个元素，返回值为空</span><br><span class="line"><span class="function"><span class="built_in">string</span>&amp; <span class="title">insert</span> <span class="params">( <span class="keyword">size_t</span> pos1, <span class="keyword">size_t</span> n, <span class="keyword">char</span> c )</span></span>; 在字符串pos1位置，插入n次c字符。 </span><br><span class="line"><span class="function"><span class="keyword">size_t</span> <span class="title">copy</span> <span class="params">( <span class="keyword">char</span>* s, <span class="keyword">size_t</span> n, <span class="keyword">size_t</span> pos = <span class="number">0</span>)</span> <span class="keyword">const</span></span>; 从pos位置开始，复制n个字符到s指针指向的内存；</span><br></pre></td></tr></table></figure><h4 id="insert"><a href="#insert" class="headerlink" title="insert"></a>insert</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">  <span class="built_in">string</span> str=<span class="string">"to be question"</span>;</span><br><span class="line">  <span class="built_in">string</span> str2=<span class="string">"the "</span>;</span><br><span class="line">  <span class="built_in">string</span> str3=<span class="string">"or not to be"</span>;</span><br><span class="line">  <span class="built_in">string</span>::iterator it;</span><br><span class="line">  <span class="comment">// used in the same order as described above:</span></span><br><span class="line">  str.insert(<span class="number">6</span>,str2);                 <span class="comment">// to be (the )question</span></span><br><span class="line">  str.insert(<span class="number">6</span>,str3,<span class="number">3</span>,<span class="number">4</span>);             <span class="comment">// to be (not )the question</span></span><br><span class="line">  str.insert(<span class="number">10</span>,<span class="string">"that is cool"</span>,<span class="number">8</span>);    <span class="comment">// to be not (that is )the question</span></span><br><span class="line">  str.insert(<span class="number">10</span>,<span class="string">"to be "</span>);            <span class="comment">// to be not (to be )that is the question</span></span><br><span class="line">  str.insert(<span class="number">15</span>,<span class="number">1</span>,<span class="string">':'</span>);               <span class="comment">// to be not to be(:) that is the question</span></span><br><span class="line">  it = str.insert(str.begin()+<span class="number">5</span>,<span class="string">','</span>); <span class="comment">// to be(,) not to be: that is the question</span></span><br><span class="line">  str.insert (str.end(),<span class="number">3</span>,<span class="string">'.'</span>);       <span class="comment">// to be, not to be: that is the question(...)</span></span><br><span class="line">  str.insert (it+<span class="number">2</span>,str3.begin(),str3.begin()+<span class="number">3</span>); <span class="comment">// (or )</span></span><br><span class="line">Output:to be, <span class="keyword">or</span> <span class="keyword">not</span> to be: that is the question...</span><br></pre></td></tr></table></figure><h4 id="append"><a href="#append" class="headerlink" title="append()"></a>append()</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">  <span class="built_in">string</span> str;</span><br><span class="line">  <span class="built_in">string</span> str2=<span class="string">"Writing "</span>;</span><br><span class="line">  <span class="built_in">string</span> str3=<span class="string">"print 10 and then 5 more"</span>;</span><br><span class="line"></span><br><span class="line">  str.append(str2);                       <span class="comment">// "Writing "</span></span><br><span class="line">  str.append(str3,<span class="number">6</span>,<span class="number">3</span>);                   <span class="comment">// "10 "</span></span><br><span class="line">  str.append(<span class="string">"dots are cool"</span>,<span class="number">5</span>);          <span class="comment">// "dots "</span></span><br><span class="line">  str.append(<span class="string">"here: "</span>);                   <span class="comment">// "here: "</span></span><br><span class="line">  str.append(<span class="number">10</span>,<span class="string">'.'</span>);                     <span class="comment">// ".........."</span></span><br><span class="line">  str.append(str3.begin()+<span class="number">8</span>,str3.end());  <span class="comment">// " and then 5 more"</span></span><br><span class="line">  str.append&lt;<span class="keyword">int</span>&gt;(<span class="number">5</span>,<span class="number">0x2E</span>);                <span class="comment">// "....."</span></span><br><span class="line">Output:  Writing <span class="number">10</span> dots here: .......... <span class="keyword">and</span> then <span class="number">5</span> more.....</span><br></pre></td></tr></table></figure><h3 id="查找"><a href="#查找" class="headerlink" title="查找"></a>查找</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">s[index]; </span><br><span class="line">s.at(index); index是下标 </span><br><span class="line"><span class="function"><span class="keyword">size_t</span> <span class="title">find</span> <span class="params">(<span class="keyword">char</span> c, <span class="keyword">size_t</span> pos =<span class="number">0</span>)</span> <span class="keyword">const</span></span>; 从字符串pos位置开始往后找字符c，返回该字符在字符串中的位置</span><br><span class="line"><span class="function"><span class="keyword">size_t</span> <span class="title">rfind</span><span class="params">(<span class="keyword">char</span> c, <span class="keyword">size_t</span> pos = npos)</span></span>; 反向查找，从字符串pos位置开始往前找字符c，返回该字符在字符串中的位置</span><br><span class="line"><span class="function"><span class="built_in">string</span> <span class="title">substr</span><span class="params">(<span class="keyword">size_t</span> pos = <span class="number">0</span>, <span class="keyword">size_t</span> n= npos)</span><span class="keyword">const</span></span>;在str中从pos位置开始，截取n个字符，然后将其返回</span><br></pre></td></tr></table></figure><h3 id="删除与清空"><a href="#删除与清空" class="headerlink" title="删除与清空"></a>删除与清空</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">s.clear()从字符串中删除所有字符, clear()只是将<span class="built_in">string</span>中有效字符清空，不改变底层空间大小。</span><br><span class="line">s.erase(pos,len); 删除从位置pos开始的len个字符,如果len被省略,则删除从pos开始直至s末尾的所有字符.返回一个指向s的引用.</span><br><span class="line"><span class="function">iterator <span class="title">erase</span> <span class="params">(const_iterator p)</span></span>; 删除源字符串中迭代器p指向的字符，返回删除后迭代器的位置。</span><br><span class="line"><span class="function">iterator <span class="title">erase</span> <span class="params">(const_iterator first, const_iterator last)</span></span>; 删除源字符串迭代器范围为[first，last）内的所有字符，返回删除后迭代器的位置。</span><br><span class="line">s.pop_back(); 删除源字符串的最后一个字符，有效的减少它的长度。</span><br></pre></td></tr></table></figure><h3 id="数值转换为string"><a href="#数值转换为string" class="headerlink" title="数值转换为string"></a>数值转换为string</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">s=<span class="built_in">std</span>::to_string(<span class="keyword">int</span>/<span class="keyword">double</span>/...);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="built_in">string</span> <span class="title">to_string</span> <span class="params">(<span class="keyword">int</span> val)</span></span>;</span><br><span class="line"><span class="function"><span class="built_in">string</span> <span class="title">to_string</span> <span class="params">(<span class="keyword">long</span> val)</span></span>;</span><br><span class="line"><span class="function"><span class="built_in">string</span> <span class="title">to_string</span> <span class="params">(<span class="keyword">long</span> <span class="keyword">long</span> val)</span></span>;</span><br><span class="line"><span class="function"><span class="built_in">string</span> <span class="title">to_string</span> <span class="params">(<span class="keyword">unsigned</span> val)</span></span>;</span><br><span class="line"><span class="function"><span class="built_in">string</span> <span class="title">to_string</span> <span class="params">(<span class="keyword">unsigned</span> <span class="keyword">long</span> val)</span></span>;</span><br><span class="line"><span class="function"><span class="built_in">string</span> <span class="title">to_string</span> <span class="params">(<span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> val)</span></span>;</span><br><span class="line"><span class="function"><span class="built_in">string</span> <span class="title">to_string</span> <span class="params">(<span class="keyword">float</span> val)</span></span>;</span><br><span class="line"><span class="function"><span class="built_in">string</span> <span class="title">to_string</span> <span class="params">(<span class="keyword">double</span> val)</span></span>;</span><br><span class="line"><span class="function"><span class="built_in">string</span> <span class="title">to_string</span> <span class="params">(<span class="keyword">long</span> <span class="keyword">double</span> val)</span></span>;</span><br></pre></td></tr></table></figure><h3 id="迭代器与指针"><a href="#迭代器与指针" class="headerlink" title="迭代器与指针"></a>迭代器与指针</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">s.data();返回指向字符串第一个字符的指针</span><br><span class="line">s.begin();  返回字符串第一个字符的迭代器,<span class="keyword">const</span></span><br><span class="line">s.cbegin(); 返回字符串第一个字符的迭代器</span><br><span class="line">s.end();    返回字符串最后一个字符的后面一个位置的迭代器</span><br><span class="line">s.cend();   返回字符串最后一个字符的后面一个位置的迭代器,<span class="keyword">const</span></span><br><span class="line">s.rbegin(); 反向迭代器</span><br><span class="line">s.rend();   反向迭代器</span><br><span class="line"><span class="built_in">string</span>::npos     相当于s.end()</span><br></pre></td></tr></table></figure><h2 id="string-对象中字符的处理"><a href="#string-对象中字符的处理" class="headerlink" title="string 对象中字符的处理"></a><strong>string 对象中字符的处理</strong></h2><p>我们经常要对 string 对象中的单个字符进行处理，例如，通常需要知道某个特殊字符是否为空白字符、字母或数字。下表列出了各种字符操作函数，适用于 string 对象的字符（或其他任何 char 值）。这些函数都在 cctype 头文件中定义。<br>注意这里的”cctype”就是C++中使用C标准的头文件的写法，等价于”ctype.h”</p><table><thead><tr><th align="left">操作</th><th align="left">功能描述</th></tr></thead><tbody><tr><td align="left"><code>isalnum( c )</code></td><td align="left">如果 c 是字母或数字，则为 True。</td></tr><tr><td align="left"><code>isalpha( c )</code></td><td align="left">如果 c 是字母，则为 true。</td></tr><tr><td align="left">iscntrl( c )</td><td align="left">如果 c 是控制字符，则为 true</td></tr><tr><td align="left"><code>isdigit( c )</code></td><td align="left">如果 c 是数字，则为 true。</td></tr><tr><td align="left">isgraph( c )</td><td align="left">如果 c 不是空格，但可打印，则为 true。</td></tr><tr><td align="left">islower( c )</td><td align="left">如果 c 是小写字母，则为 true。</td></tr><tr><td align="left">isprint( c )</td><td align="left">如果 c 是可打印的字符，则为 true。</td></tr><tr><td align="left">ispunct( c )</td><td align="left">如果 c 是标点符号，则 true。</td></tr><tr><td align="left">isspace( c )</td><td align="left">如果 c 是空白字符，则为 true。</td></tr><tr><td align="left">isupper( c )</td><td align="left">如果 c 是大写字母，则 true。</td></tr><tr><td align="left">isxdigit( c )</td><td align="left">如果是 c 十六进制数，则为 true。</td></tr><tr><td align="left"><code>tolower( c )</code></td><td align="left">如果 c 大写字母，返回其小写字母形式，否则直接返回 c。</td></tr><tr><td align="left"><code>toupper( c )</code></td><td align="left">如果 c 是小写字母，则返回其大写字母形式，否则直接返回 c。</td></tr></tbody></table><center>列出了各种字符操作函数</center>表中的大部分函数是测试一个给定的字符是否符合条件，并返回一个 int 作为真值。如果测试失败，则该函数返回 0 ，否则<u>返回一个（无意义的）非 0 ，表示被测字符符合条件</u>。<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p><a href="https://blog.csdn.net/engineerxin/article/details/104545571">《C++Primer》第三章-标准库类型-学习笔记(1)-string&amp;vector&amp;迭代器</a><br><a href="https://blog.csdn.net/MissXy_/article/details/88547282">C++ STL丨string 基本使用（一）</a><br><a href="https://www.cnblogs.com/c4isr/p/stl_string.html">STL string常用操作指令</a><br><a href="https://www.cnblogs.com/mupiaomiao/p/4725628.html">C++——string类和标准模板库</a><br><a href="https://blog.csdn.net/miss_monster/article/details/88343910">【C++】String类、String类的常用接口说明及其使用、STL中的迭代器使用</a><br><a href="http://www.cplusplus.com/reference/">c/c++ reference</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;基本概念&quot;&gt;&lt;a href=&quot;#基本概念&quot; class=&quot;headerlink&quot; title=&quot;基本概念&quot;&gt;&lt;/a&gt;基本概念&lt;/h2&gt;&lt;p&gt;标准库 string 类型：string 类型支持长度可变的字符串，C++ 标准库将负责管理与存储字符相关的内存，以及提供各种有用的操作。&lt;br&gt;可以使用输入输出流方式直接进行操作，也可以通过文件等手段进行操作。&lt;br&gt;size_type是一个依赖于实现的整型，是在string中定义的。&lt;br&gt;string类将&lt;code&gt;string::npos&lt;/code&gt;定义为字符串的最大长度，通常为unsigned int的最大值。&lt;br&gt;另外，使用缩写&lt;code&gt;NBTS（null-terminated string）&lt;/code&gt;来表示以空字符结束的字符串。&lt;/p&gt;
    
    </summary>
    
    
      <category term="C++" scheme="https://stemha.github.io/categories/C/"/>
    
    
      <category term="C++标准库" scheme="https://stemha.github.io/tags/C-%E6%A0%87%E5%87%86%E5%BA%93/"/>
    
      <category term="string" scheme="https://stemha.github.io/tags/string/"/>
    
  </entry>
  
  <entry>
    <title>B树与B+树详解</title>
    <link href="https://stemha.github.io/2020/06/03/B%E6%A0%91%E4%B8%8EB+%E6%A0%91%E8%AF%A6%E8%A7%A3/"/>
    <id>https://stemha.github.io/2020/06/03/B%E6%A0%91%E4%B8%8EB+%E6%A0%91%E8%AF%A6%E8%A7%A3/</id>
    <published>2020-06-02T17:10:47.000Z</published>
    <updated>2020-06-03T16:23:58.017Z</updated>
    
    <content type="html"><![CDATA[<h2 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a><strong>基本概念</strong></h2><p><code>多路搜索树（multi-way search tree）</code>：</p><ul><li>将传统的二叉搜索树，改造为多路搜索树——在中序的遍历下，这也是一种等价变换</li><li>以k层为间隔如此重组，可以将二叉搜索树转化为等价的2^k路搜索树，统称为多路搜索树。</li><li>多路搜索树同样支持查找等操作，而且效果与原来的二叉树完全等同；但是重要的是，其对外存的访问方式已经发生本质变化，是以大节点为单位从外存读取一组（而不是单个）关键码。</li></ul><p><code>B树就是B-树</code>：</p><ul><li>B-树就是B树，中间的横线不是减号，直接读成B树即可。</li><li>有的文章里出现的B-树，即为B树。因为B树的原英文名称为B-tree，而国内很多人喜欢把B-tree译作B-树，而事实上是，B-tree就是指的B树。</li><li>B树是一种多路平衡搜索树，它的每一个节点最多包含K个孩子，k被称为<code>B树的阶</code>。</li><li>k的大小取决于磁盘页的大小</li><li>B树比较矮胖，扁平化，B-树的宽度往往大于其高度</li></ul><p><code>B+树</code>：</p><ul><li>是应文件系统所需而产生的一种B-tree的变形树。<a id="more"></a></li></ul><h2 id="应用"><a href="#应用" class="headerlink" title="应用"></a><strong>应用</strong></h2><p><strong>数据库索引主要基于什么数据结构？</strong><br>hash表和B+树</p><p><strong>数据库索引为什么要用B+树结构来存储呢？</strong><br>树的查询效率高。而且可以保持有序。但是为什么不用二叉查找树呢？主要是因为磁盘I/O的影响，数据库索引是存储在磁盘上的，当数据量比较大的时候，索引的大小可能有几个G甚至更多。当我们利用索引查询时候，能把整个索引全部加载到内存吗？很显然不可能的，我们能做的是逐一加载每一个磁盘页，这里的磁盘页面对应着索引树的节点。这样的话，每遍历到一个节点就需要进行一次I/O操作。<br>磁盘这种外部存储器适合批量式的访问，为了减少I/O，我们需要把原本<strong>瘦高</strong>的树结构变得<strong>矮胖</strong>，这就是B-树的特征之一。</p><p><strong>大规模数据存储中，实现索引查询这样一个实际背景下，树节点存储的元素数量是有限的，如何减少树的深度？</strong><br>一个基本的想法就是：采用多叉树结构（由于树节点元素数量是有限的，自然该节点的子树数量也就是有限的）</p><p>B-树主要应用于文件系统以及部分数据库索引，比如著名的非关系型数据库MongoDB。</p><h2 id="B-树（Balance-Tree）"><a href="#B-树（Balance-Tree）" class="headerlink" title="B-树（Balance Tree）"></a><strong>B-树（Balance Tree）</strong></h2><p>所谓m阶B-树，即为<code>m路平衡搜索树</code>（m大于等于2）,除了根节点，各个节点的分支数目介于[M/2向上取整, M]。<br>M为设定的非叶子结点最多子树个数，N为关键字总数。<br>由于限制了除根结点以外的非叶子结点，至少含有M/2个儿子，确保了结点的利用率，其最底搜索性能为：O(log n)</p><ol><li>根结点至少有两个子女。</li><li><strong>子节点数</strong>：每个<code>中间节点</code>都包含k-1个元素和k个孩子，其中 m/2 &lt;= k &lt;= m</li><li><strong>关键字数</strong>：每一个<code>叶子节点</code>都包含k-1个元素，其中 m/2 &lt;= k &lt;= m</li><li><strong>所有的叶子结点都位于同一层。</strong>叶子节点除了包含了关键字和关键字记录的指针外也有指向其子节点的指针只不过其指针地址都为null（可以把这些null看成外部节点）</li><li><strong>排序方式</strong>：每个<strong>节点中的元素从小到大排列</strong>，节点当中k-1个元素正好是k个孩子包含的元素的<strong>值域分划</strong>。</li></ol><h3 id="B-树的特性"><a href="#B-树的特性" class="headerlink" title="B-树的特性"></a><strong>B-树的特性</strong></h3><ol><li>关键字集合分布在整颗树中；</li><li>任何一个关键字出现且只出现在一个结点中；          </li><li>搜索有可能在非叶子结点结束；          </li><li>其搜索性能等价于在关键字全集内做一次二分查找；          </li><li>自动层次控制；</li></ol><p>举一个B-树的例子，一个<code>3阶的B-树</code>，也就是<code>(2,3)-树</code><br><img src="https://pic2.zhimg.com/80/v2-2d9600b19f93ef2dccf61409eea395bd_720w.jpg" alt="3阶的B-树"><br>对于这颗树查询的过程比较次数不比二叉查找树少，尤其当单一节点中的元素数量很多的时候，可是相对于磁盘I/O，内存中的比较耗时几乎可以忽略，所以可以提升查找的性能。</p><h3 id="B-树插入"><a href="#B-树插入" class="headerlink" title="B-树插入"></a>B-树插入</h3><p>优势，自平衡<br><strong>遵循规则</strong>：</p><ol><li>节点拆分规则：当前是要组成一个3路查找树，那么此时m=3,关键字数必须&lt;=3-1（这里关键字数&gt;2就要进行节点拆分，拆分的规则是把中间的元素提取出，放到父节点上，左边的单独构成一个节点，右边的单独构成一个节点）；</li><li>排序规则：满足节点本身比左边节点大，比右边节点小的排序规则;</li></ol><p><img src="https://files.cnblogs.com/yangecnu/btreebuild.gif" alt="插入的数据依次是6 10 4 14 5 11 15 3 2 12 1 7 8 8 6 3 6 21 5 15 15 6 32 23 45 65 7 8 6 5 4"></p><p>自顶向下查找4的节点位置，发现4应当插入到节点元素3，5之间。<br><img src="https://pic1.zhimg.com/80/v2-08492d931b071967954f9015aff41c68_720w.jpg" alt="插入元素4"><br>节点3，5已经是两元素节点，无法再增加。父亲节点 2， 6 也是两元素节点，也无法再增加。根节点9是单元素节点，可以升级为两元素节点。于是拆分节点3，5与节点2，6，让根节点9升级为两元素节点4，9。节点6独立为根节点的第二个孩子。<br><img src="https://pic1.zhimg.com/80/v2-ad1a6424649128def32f5d313c3f8e90_720w.jpg" alt="维持多路平衡"></p><h3 id="B-树删除"><a href="#B-树删除" class="headerlink" title="B-树删除"></a>B-树删除</h3><p><strong>遵循规则</strong>：</p><ol><li>节点合并规则：当前是要组成一个3路查找树，那么此时m=3,关键字数必须大于等于ceil（3/2）（这里关键字数&lt;1就要进行节点合并）；</li><li>满足节点本身比左边节点大，比右边节点小的排序规则;</li><li><strong>关键字数小于1时先从子节点取，子节点没有符合条件时就向向父节点取，取中间值往父节点放；</strong></li></ol><p>自顶向下查找元素11的节点位置。<br><img src="https://pic4.zhimg.com/80/v2-0208612586cf5a92abe02f92d2260ca7_720w.jpg" alt="删除元素11"><br>删除11后，节点12只有一个孩子，不符合B树规范。因此找出12,13,15三个节点的中位数13，取代节点12，而节点12自身下移成为第一个孩子。（这个过程称为<strong>左旋</strong><br><img src="https://pic2.zhimg.com/80/v2-de8036ff5e9b13acdff7aebcbb6a9575_720w.jpg" alt="左旋"><br><img src="https://pic3.zhimg.com/80/v2-fd9dd8cfe314137da1d88ee0aba7a59a_720w.jpg" alt="左旋"></p><h3 id="B-树中的卫星数据"><a href="#B-树中的卫星数据" class="headerlink" title="B-树中的卫星数据"></a><strong>B-树中的卫星数据</strong></h3><p><code>卫星数据（Satellite Information）</code>:指的是索引元素所指向的数据记录，比如数据的某一行。在B-树中，无论中间节点还是叶子节点都带有卫星数据。<br>B-树中的卫星数据（Satellite Information）:无论是叶子节点还是中间节点都带有卫星数据。<br><img src="https://pic2.zhimg.com/80/v2-ba3efdd8525facefc81189ed6a958b4d_720w.jpg" alt="B-树中的卫星数据"></p><h3 id="B-树的范围查找过程"><a href="#B-树的范围查找过程" class="headerlink" title="B-树的范围查找过程"></a><strong>B-树的范围查找过程</strong></h3><p>比方对于上面的B-树，我们想查找3到11的元素，只能依靠繁琐的中序遍历。</p><h2 id="B-树（-Tree）"><a href="#B-树（-Tree）" class="headerlink" title="B+树（ Tree）"></a><strong>B+树（ Tree）</strong></h2><p>B+树是B树的一个升级版，相对于B树来说B+树更充分的利用了节点的空间，让查询速度更加稳定，其速度完全接近于二分法查找。<br>B+树是对B树的一种变形树，它与B树的差异在于：</p><ul><li>有k个子结点的结点必然有k个关键码；</li><li>非叶结点仅具有索引作用，跟记录有关的信息均存放在叶结点中。</li><li>树的所有叶结点构成一个有序链表，可以按照关键码排序的次序遍历全部记录。</li></ul><p><strong>一个<code>m阶的B+树</code>具有如下几个特征：</strong></p><ol><li>有k个子树的中间节点包含有k个元素（B树中是k-1个元素），<strong>每个元素不保存数据，只用来索引，所有数据都保存在叶子节点</strong>。</li><li>所有的叶子结点中包含了全部元素的信息，及指向含这些元素记录的指针，且叶子结点本身依关键字的大小自小而大顺序链接。</li><li><strong>所有的中间节点元素都同时存在于子节点，在子节点元素中是最大（或最小）元素。</strong></li></ol><p>示例<br><img src="https://p-blog.csdn.net/images/p_blog_csdn_net/manesking/5.JPG" alt></p><h3 id="B-的特性"><a href="#B-的特性" class="headerlink" title="B+的特性"></a><strong>B+的特性</strong></h3><ol><li>所有关键字都出现在叶子结点的链表中（稠密索引），且链表中的关键字恰好是有序的；</li><li>不可能在非叶子结点命中；</li><li>非叶子结点相当于是叶子结点的索引（稀疏索引），叶子结点相当于是存储（关键字）数据的数据层；</li><li>更适合文件索引系统；</li></ol><h3 id="B-树插入-1"><a href="#B-树插入-1" class="headerlink" title="B+树插入"></a>B+树插入</h3><p><img src="https://files.cnblogs.com/yangecnu/Bplustreebuild.gif" alt="插入的数据依次是6 10 4 14 5 11 15 3 2 12 1 7 8 8 6 3 6 21 5 15 15 6 32 23 45 65 7 8 6 5 4"></p><h3 id="B-树中的卫星数据-1"><a href="#B-树中的卫星数据-1" class="headerlink" title="B+树中的卫星数据"></a>B+树中的卫星数据</h3><p><code>卫星数据（Satellite Information）</code>:指的是索引元素所指向的数据记录，比如数据的某一行。在B-树中，无论中间节点还是叶子节点都带有卫星数据。<br>B+树中的卫星数据（Satellite Information）:只有叶子节点带有卫星数据。中间节点仅仅是索引，没有任何关联数据。<br><img src="https://pic3.zhimg.com/80/v2-36d5aa8eeb765d559ba8d5e136d0b402_720w.jpg" alt="B+树中的卫星数据"><br>需要补充的是，在数据库的聚集索引（Clustered Index）中，叶子节点直接包含卫星数据。在非聚集索引（NonClustered Index）中，叶子节点带有指向卫星数据的指针。</p><h3 id="B-树的范围查找过程-1"><a href="#B-树的范围查找过程-1" class="headerlink" title="B+树的范围查找过程"></a>B+树的范围查找过程</h3><p>相对于B-树要简单的多，只需要在链表上做遍历即可！</p><h2 id="B树与B-树的优点"><a href="#B树与B-树的优点" class="headerlink" title="B树与B+树的优点"></a><strong>B树与B+树的优点</strong></h2><p><code>B+树的优点</code>：<br>由于B+树在内部节点上不好含数据信息，因此在内存页中能够存放更多的key。 数据存放的更加紧密，具有更好的空间局部性。因此访问叶子几点上关联的数据也具有更好的缓存命中率。<br>B+树的叶子结点都是相链的，因此对整棵树的便利只需要一次线性遍历叶子结点即可。而且由于数据顺序排列并且相连，所以便于区间查找和搜索。而B树则需要进行每一层的递归遍历。相邻的元素可能在内存中不相邻，所以缓存命中性没有B+树好。</p><ol><li><strong>B+树的层级更少：</strong>单一节点存储更多的元素，使得查询的IO次数更少，相较于B树B+每个非叶子节点存储的关键字数更多，树的层级更少所以查询数据更快；。</li><li><strong>B+树查询速度更稳定：</strong>所有查询都要查找到叶子节点，查询性能稳定。</li><li><strong>B+树天然具备排序功能：</strong>所有叶子节点形成有序链表，<strong>便于范围查询</strong>。</li><li><strong>B+树全节点遍历更快：</strong>B+树遍历整棵树只需要遍历所有的叶子节点即可，，而不需要像B树一样需要对每一层进行遍历，这有利于数据库做全表扫描。</li></ol><p><code>B树的优点</code>:</p><ol><li>由于B树的每一个节点都包含key和value，因此经常访问的元素可能离根节点更近，因此访问也更迅速。</li></ol><h2 id="B树和B-树的区别"><a href="#B树和B-树的区别" class="headerlink" title="B树和B+树的区别"></a><strong>B树和B+树的区别</strong></h2><ul><li><strong>B+树的非叶子结点只包含导航信息，不包含实际的值</strong>，所有的叶子结点和相连的节点使用链表相连，便于区间查找和遍历。</li><li>B+树只有达到叶子结点才命中（B-树可以在非叶子结点命中），其性能也等价于在关键字全集做一次二分查找；</li></ul><ol><li>B+树的中间节点没有卫星数据，所以同样大小的磁盘页可以容纳更多的节点元素。这就意味着，数据量相同的情况下，B+树的结构比B树更加矮胖，因此查询时候的I/O次数也越少。</li><li>B+树的查询必须查到叶子节点，而B-树只要找到匹配元素即可。因此B-树的查找性能并不稳定，最坏情况是查找到叶子节点。而B+树的每一次查找都是稳定的。</li></ol><h2 id="为什么说B-树比B树更适合数据库索引？"><a href="#为什么说B-树比B树更适合数据库索引？" class="headerlink" title="为什么说B+树比B树更适合数据库索引？"></a><strong>为什么说B+树比B树更适合数据库索引？</strong></h2><p><strong>B+树的磁盘读写代价更低</strong>：B+树的内部节点并没有指向关键字具体信息的指针，因此其内部节点相对B树更小，如果把所有同一内部节点的关键字存放在同一盘块中，那么盘块所能容纳的关键字数量也越多，一次性读入内存的需要查找的关键字也就越多，相对IO读写次数就降低了。<br><strong>B+树的查询效率更加稳定</strong>：由于非终结点并不是最终指向文件内容的结点，而只是叶子结点中关键字的索引。所以任何关键字的查找必须走一条从根结点到叶子结点的路。所有关键字查询的路径长度相同，导致每一个数据的查询效率相当。<br><strong>B+树的范围查询更加方便</strong>：由于B+树的数据都存储在叶子结点中，分支结点均为索引，方便扫库，只需要扫一遍叶子结点即可，但是B树因为其分支结点同样存储着数据，我们要找到具体的数据，需要进行一次中序遍历按序来扫，所以B+树更加适合在区间查询的情况，所以通常B+树用于数据库索引。<br>B树在提高了IO性能的同时并没有解决元素遍历的我效率低下的问题，正是为了解决这个问题，B+树应用而生。B+树只需要去遍历叶子节点就可以实现整棵树的遍历。而且在数据库中基于范围的查询是非常频繁的，而B树不支持这样的操作或者说效率太低。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a><strong>总结</strong></h2><blockquote><p>B-树和B+树都是很基础的概念，需要掌握好啊！</p></blockquote><p><strong>二叉搜索树</strong>：</p><ul><li>二叉树，每个结点只存储一个关键字，等于则命中，小于走左结点，大于走右结点；</li></ul><p><strong>B（B-）树</strong>：</p><ul><li>多路搜索树，每个结点存储M/2到M个关键字，非叶子结点存储指向关键字范围的子结点；</li><li>所有关键字在整颗树中出现，且只出现一次，非叶子结点可以命中；</li></ul><p><strong>B+树</strong>：</p><ul><li>在B-树基础上，为叶子结点增加链表指针，所有关键字都在叶子结点中出现，非叶子结点作为叶子结点的索引；B+树总是到叶子结点才命中；</li></ul><p><strong>B*树</strong>：</p><ul><li>在B+树基础上，为非叶子结点也增加链表指针，将结点的最低利用率从1/2提高到2/3</li></ul><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p><a href="https://zhuanlan.zhihu.com/p/54102723">漫画：什么是B+树？</a><br><a href="https://blog.csdn.net/v_JULY_v/article/details/6530142">从B树、B+树、B*树谈到R 树</a><br><a href="https://zhuanlan.zhihu.com/p/27700617">平衡二叉树、B树、B+树、B*树 理解其中一种你就都明白了</a><br><a href="https://zhuanlan.zhihu.com/p/54084335">漫画：什么是B-树？</a><br><a href="https://www.cnblogs.com/godoforange/p/11618643.html">从二叉查找树到B+树中间的各种树</a> //写的相当不错<br><a href="https://baike.baidu.com/item/B-%E6%A0%91/1975968?fr=aladdin">B-树 百度百科</a><br><a href="https://blog.csdn.net/JAck_chen0309/article/details/105268976">阿里面试，问了B+树，这个回答让我通过了</a><br>数据结构 邓俊辉</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;基本概念&quot;&gt;&lt;a href=&quot;#基本概念&quot; class=&quot;headerlink&quot; title=&quot;基本概念&quot;&gt;&lt;/a&gt;&lt;strong&gt;基本概念&lt;/strong&gt;&lt;/h2&gt;&lt;p&gt;&lt;code&gt;多路搜索树（multi-way search tree）&lt;/code&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;将传统的二叉搜索树，改造为多路搜索树——在中序的遍历下，这也是一种等价变换&lt;/li&gt;
&lt;li&gt;以k层为间隔如此重组，可以将二叉搜索树转化为等价的2^k路搜索树，统称为多路搜索树。&lt;/li&gt;
&lt;li&gt;多路搜索树同样支持查找等操作，而且效果与原来的二叉树完全等同；但是重要的是，其对外存的访问方式已经发生本质变化，是以大节点为单位从外存读取一组（而不是单个）关键码。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;B树就是B-树&lt;/code&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;B-树就是B树，中间的横线不是减号，直接读成B树即可。&lt;/li&gt;
&lt;li&gt;有的文章里出现的B-树，即为B树。因为B树的原英文名称为B-tree，而国内很多人喜欢把B-tree译作B-树，而事实上是，B-tree就是指的B树。&lt;/li&gt;
&lt;li&gt;B树是一种多路平衡搜索树，它的每一个节点最多包含K个孩子，k被称为&lt;code&gt;B树的阶&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;k的大小取决于磁盘页的大小&lt;/li&gt;
&lt;li&gt;B树比较矮胖，扁平化，B-树的宽度往往大于其高度&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;B+树&lt;/code&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;是应文件系统所需而产生的一种B-tree的变形树。&lt;/li&gt;&lt;/ul&gt;
    
    </summary>
    
    
      <category term="数据结构" scheme="https://stemha.github.io/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
      <category term="B-树" scheme="https://stemha.github.io/tags/B-%E6%A0%91/"/>
    
      <category term="B+树" scheme="https://stemha.github.io/tags/B-%E6%A0%91/"/>
    
  </entry>
  
  <entry>
    <title>红黑树详解</title>
    <link href="https://stemha.github.io/2020/06/02/%E7%BA%A2%E9%BB%91%E6%A0%91%E8%AF%A6%E8%A7%A3/"/>
    <id>https://stemha.github.io/2020/06/02/%E7%BA%A2%E9%BB%91%E6%A0%91%E8%AF%A6%E8%A7%A3/</id>
    <published>2020-06-02T13:14:52.000Z</published>
    <updated>2020-06-02T13:46:28.099Z</updated>
    
    <content type="html"><![CDATA[<h2 id="二叉查找树"><a href="#二叉查找树" class="headerlink" title="二叉查找树"></a>二叉查找树</h2><p>学习红黑树之前，先理解一下二叉查找树。</p><a id="more"></a><h3 id="二叉查找树（BST）具备什么特性呢？"><a href="#二叉查找树（BST）具备什么特性呢？" class="headerlink" title="二叉查找树（BST）具备什么特性呢？"></a><strong>二叉查找树（BST）具备什么特性呢？</strong></h3><ol><li>左子树上<strong>所有结点</strong>的值均小于或等于它的根结点的值。</li><li>右子树上<strong>所有结点</strong>的值均大于或等于它的根结点的值。</li><li>左、右子树也分别为二叉排序树。</li><li>查找和插入的过程类似于二分查找的思想，查找所需的最大次数等于二叉树的深度</li></ol><h3 id="二叉查找树（BST）缺点有哪些？"><a href="#二叉查找树（BST）缺点有哪些？" class="headerlink" title="二叉查找树（BST）缺点有哪些？"></a><strong>二叉查找树（BST）缺点有哪些？</strong></h3><p>主要体现在插入新的节点的时候<br>假设初始的二叉查找树只有三个结点，根结点值为9，左孩子值为8，右孩子值为12：<br>接下来我们依次插入如下五个结点：7,6,5,4,3。依照二叉查找树的特性，结果会变成什么样呢？<br>最终的二叉查找树会非常的不平衡，左子树的深度为6，右边子树的深度为1（一棵好端端的树变成了瘸子，两边的子树不均衡了），这样会导致查找的性能大打折扣，几乎变成了线性查找；</p><h3 id="二叉查找树的删除操作"><a href="#二叉查找树的删除操作" class="headerlink" title="二叉查找树的删除操作"></a><strong>二叉查找树的删除操作</strong></h3><ol><li>待删除的结点没有子结点：节点没有孩子，因此直接删除即可。</li><li>待删除的结点有一个孩子：只有左孩子，于是我们让左孩子结点A取代被删除的结点，结点A以下的结点关系无需变动。（右孩子也是一样的）</li><li>待删除的结点有两个孩子：这种情况比较复杂。此时，我们需要选择与待删除结点最接近的结点来取代它。</li></ol><h2 id="AVL树与红黑树的差别"><a href="#AVL树与红黑树的差别" class="headerlink" title="AVL树与红黑树的差别"></a><strong>AVL树与红黑树的差别</strong></h2><p>AVL是严格平衡的二叉树，要求每个节点的左右子树高度差不超过1；<br>红黑树更宽松一些，要求任一一条路径的长度都不超过其他路径长度的两倍。<br>正因为这个差别AVL的查找效率更高，但是平衡调整的成本也更高。在需要频繁查找时，选用AVL树更合适，频繁插入删除时，选用红黑树更合适。</p><h2 id="红黑树"><a href="#红黑树" class="headerlink" title="红黑树"></a><strong>红黑树</strong></h2><h3 id="目的"><a href="#目的" class="headerlink" title="目的"></a><strong>目的</strong></h3><p>红黑树主要是为了解决上面的问题（可以说是一种策略，通过红黑树算法，让二叉查找树变成平衡二叉查找树）</p><h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a><strong>概念</strong></h3><p>红黑树就是一种平衡的二叉查找树，说他平衡的意思是他不会变成“瘸子”，左腿特别长或者右腿特别长。<br>红黑树针对<code>AVL树的不足</code>（AVL树删除操作之后的重新平衡可能需要做到多达O(lon n)次旋转，从而频繁地导致全树的整体拓扑结构的大幅变化）进行了改进。<br><code>红黑树保证</code>：每次插入或者删除之后的重新平衡过程，全树拓扑结构的更新仅仅涉及常数个节点。尽管最坏情况下也需要对多达O(lon n)个节点重新染色，但是就分摊意义而言，仅仅为O(1)个。<br><code>红黑树的适度平衡标准</code>：任一节点左右子树的高度不得超过两倍。（由下面这五条规则来保证）<br>除了符合二叉查找树的特性之外，还具体下列的<code>特性</code>：</p><ol><li>结点是红色或者黑色</li><li>根结点是黑色</li><li>每个叶子的节点都是黑色的空结点（NULL）//这些是引入的外部节点，使得二叉树扩展为真二叉树</li><li>每个红色结点的两个子结点都是黑色的。（从每个叶子到根的所有路径上不能有两个连续的红色结点）</li><li>从任意结点到其每个叶子的所有路径都包含相同的黑色结点。</li></ol><p><code>引申</code>:</p><ol><li>红节点都是树的内部结点，根节点和外部结点（叶结点）都是黑结点//由第(1)(2)两条规则可知</li><li>红节点的孩子不可能是红节点，也就是说红节点的父亲必为黑节点，从每个叶子到根的所有路径上不能有两个连续的红色结点//由第(3)两条规则可知</li><li>从根节点到任一节点的途中，黑节点都不少于红节点</li><li>从任一节点到其任一后代外部节点的沿途，黑节点的总数亦必相等。//由第(4)两条规则可知</li></ol><p>//根节点深度解释为1，更好理解；解释为0，更好计算；我们在这里采用后者<br><code>黑深度（black depth）</code>从上向下描述：</p><ul><li>从根节点到任一节点的途中，黑节点都不少于红节点，除去根节点本身，沿途所经过的黑节点的总数成为黑深度</li><li>所有外部节点的黑深度统一</li></ul><p><code>黑高度（black height）</code>从下向上描述：</p><ul><li>从任一节点到其任一后代外部节点的沿途，除去外部节点（黑色），沿途所经过的黑节点的总数称为该节点的黑高度。</li><li>所有外部节点的黑高度统一，均为0</li></ul><h2 id="插入和删除"><a href="#插入和删除" class="headerlink" title="插入和删除"></a><strong>插入和删除</strong></h2><p>当插入和删除节点的时候，红黑树的规则可能会被打破，这时候就需要做出一些调整，从而继续维持我们的规则<br>什么情况下会破坏红黑树的规则，什么情况下不会破坏规则呢？我们举两个简单的例子：<br>这个例子去找一下图吧<br><img src="https://ss.csdn.net/p?https://mmbiz.qpic.cn/mmbiz_png/7aAwtBAnkeWuLdsJjhUIH6zSdibEuPmO0icObg27WWD4rOiaWDjFicBxLDc5Zhia6L9CdukoegDTziaPoV7bcMWdVN3w/640?wx_fmt=png" alt="黑色的NULL节点可忽略"><br>例如上面标准的红黑树，插入值为14的节点。插入之后发现仍然满足红黑树的要求！<br><img src="https://pic2.zhimg.com/80/v2-333eecc13e9396954bcf31e23d2611a9_720w.jpg" alt="插入值为14的节点"><br>但是如果插入值为21的节点呢？<br><img src="https://pic1.zhimg.com/80/v2-ea137ceadfdbed94969aee9ee92dba00_720w.jpg" alt="插入值为21的节点"><br>由于父结点22是红色结点（插入的节点默认是红色是因为如果是黑色可能会影响规则5），因此这种情况打破了红黑树的规则4（每个红色结点的两个子结点都是黑色），必须进行调整，使之重新符合红黑树的规则。</p><h3 id="调整红黑树的方法"><a href="#调整红黑树的方法" class="headerlink" title="调整红黑树的方法"></a><strong>调整红黑树的方法</strong></h3><blockquote><p>开始玩魔方都是要照着魔方公式一点点玩的，多玩几次就熟悉了。红黑树也和玩魔方一样。<br>红黑树有两大操作:</p></blockquote><ul><li>recolor (重新标记黑色或红色)</li><li>rotation (旋转，这是树达到平衡的关键)<pre><code>- 左旋转 - 右旋转</code></pre></li></ul><h3 id="左旋的示意图"><a href="#左旋的示意图" class="headerlink" title="左旋的示意图"></a><strong>左旋的示意图</strong></h3><p>逆时针旋转红黑树的两个结点，使得父结点被自己的右孩子取代，而自己成为自己的左孩子。<br><img src="https://pic2.zhimg.com/80/v2-0b3dbdbbcd00f51279dbdebd52b4ae31_720w.jpg" alt="左旋的示意图"></p><h3 id="右旋的示意图"><a href="#右旋的示意图" class="headerlink" title="右旋的示意图"></a><strong>右旋的示意图</strong></h3><p>顺时针旋转红黑树的两个结点，使得父结点被自己的左孩子取代，而自己成为自己的右孩子。<br><img src="https://pic4.zhimg.com/80/v2-8616d6af5228e2ec754ce00f978a26e3_720w.jpg" alt="右旋的示意图"></p><h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a><strong>示例</strong></h3><p>为了符合红黑树的规则，会把节点红变黑或者黑变红。<br>下图展示的是红黑树的部分，需要注意节点25并非根节点。因为21和22链接出现红色，不符合规则4，所以把22红变黑：<br><img src="https://ss.csdn.net/p?https://mmbiz.qpic.cn/mmbiz_png/7aAwtBAnkeWuLdsJjhUIH6zSdibEuPmO0hiamsAGkdo8kj14yiciaibrbFTyAf51HZA7fP1MO3hrsAg2G8SQs1VNtVw/640?wx_fmt=png" alt="把22红变黑"><br>但这样还是不符合规则5（但是，仅仅把一个结点变色，会导致相关路径凭空多出一个黑色结点，这样就打破了规则5。），所以需要把25黑变红，看下图：<br><img src="https://ss.csdn.net/p?https://mmbiz.qpic.cn/mmbiz_png/7aAwtBAnkeWuLdsJjhUIH6zSdibEuPmO0HOZicH7iaKX9RicZMulmsQXzVvUWtMjy1SPT85jwemWIvKZnrtia5BFvLg/640?wx_fmt=png" alt="把25黑变红"><br>但是25和27仍然是红色，不满规则4，所以需要将27变为黑色<br><img src="https://ss.csdn.net/p?https://mmbiz.qpic.cn/mmbiz_png/7aAwtBAnkeWuLdsJjhUIH6zSdibEuPmO01nVGUtichXicFElC0RQAqC0npkicByK6V90twxlNkh5icZhrRghpsribib0g/640?wx_fmt=png" alt="将27变为黑色"><br>但这只是局部结束了，全局仍然不能满足条件，15和17仍然是两个连续的红节点，不满足规则4，把17变黑也不行，因为13根节点为黑色，其子节点必为红色。<br><strong>只能进行旋转了！</strong><br>按照左旋转，对上边已经变色完成之后图进行左旋转。<br><img src="https://ss.csdn.net/p?https://mmbiz.qpic.cn/mmbiz_png/7aAwtBAnkeWuLdsJjhUIH6zSdibEuPmO0tnhtib62xibE4S6w15Eic3KX96VmklZjFSaLbD7p55lOfbW9qXuVFdjhw/640?wx_fmt=png" alt="左旋转"><br>旋转之后，由于根节点是红色，需要变黑色<br><img src="https://ss.csdn.net/p?https://mmbiz.qpic.cn/mmbiz_png/7aAwtBAnkeWuLdsJjhUIH6zSdibEuPmO0KRexJich3zEAw5ZHpB33FLbM38iaHhpNkmiaCHcdxfQTG96zoh4Y50HdA/640?wx_fmt=png" alt="根节点是红色，需要变黑色"><br>但是仍然不满足规则5，接下来使用右旋转<br><img src="https://ss.csdn.net/p?https://mmbiz.qpic.cn/mmbiz_png/7aAwtBAnkeWuLdsJjhUIH6zSdibEuPmO0hCL7dicLiaA1JJMeqibRw1A4U1kOlSNkX7KbR1ykHds5VvYlbWOEfnxuQ/640?wx_fmt=png" alt="右旋转"><br><img src="https://ss.csdn.net/p?https://mmbiz.qpic.cn/mmbiz_png/7aAwtBAnkeWuLdsJjhUIH6zSdibEuPmO0VhKic8z8XSZZ84ibEFXtNcT3pQeS9co1tldvWUNiaq8CAFA7a6DJe6fIw/640?wx_fmt=png" alt="avatar"><br>最后一个步骤，变色<br><img src="https://ss.csdn.net/p?https://mmbiz.qpic.cn/mmbiz_png/7aAwtBAnkeWuLdsJjhUIH6zSdibEuPmO0pE7v9kLqscvjFvEPCX4W88Xquq6E25zWEQQMVMhByD1KFbqbvp6U5w/640?wx_fmt=png" alt="最后一个步骤，变色"><br>我晕，这也太复杂了！！！！</p><h3 id="红黑树插入节点的5种情况"><a href="#红黑树插入节点的5种情况" class="headerlink" title="红黑树插入节点的5种情况"></a><strong>红黑树插入节点的5种情况</strong></h3><ol><li>新结点（A）位于树根，没有父结点。 //这种局面，直接让新结点变色为黑色，</li><li>新结点（B）的父结点是黑色。 //这种局面，新插入的红色结点B并没有打破红黑树的规则，所以不需要做任何调整。</li><li>新结点（D）的父结点和叔叔(父节点的兄弟)结点都是红色。 //参照下面的总结</li><li>新结点（D）的父结点是红色，叔叔结点是黑色或者没有叔叔，且新结点是父结点的右孩子，父结点（B）是祖父结点的左孩子。<br> 4.1 以结点B为轴，做一次左旋转，使得新结点D成为父结点，原来的父结点B成为D的左孩子,变成了局面5.</li><li>新结点（D）的父结点是红色，叔叔结点是黑色或者没有叔叔，且新结点是父结点的左孩子，父结点（B）是祖父结点的左孩子。<br> 5.1 我们以结点A为轴，做一次右旋转，使得结点B成为祖父结点，结点A成为结点B的右孩子。接下来，我们让结点B变为黑色，结点A变为红色。</li></ol><p><a href="https://zhuanlan.zhihu.com/p/79980618">红黑树，超强动静图详解，简单易懂</a><br>概括起来就是<br>假设我们插入的新节点为 X</p><ol><li>将新插入的节点标记为红色</li><li>如果 X 是根结点(root)，则标记为黑色</li><li>如果 X 的 parent 不是黑色，同时 X 也不是 root:<br> 3.1. 如果 X 的 uncle (叔叔) 是红色<pre><code>3.11.  将 parent 和 uncle 标记为黑色3.12. 将 grand parent (祖父) 标记为红色3.13. 让 X 节点的颜色与 X 祖父的颜色相同，然后重复步骤 2、3</code></pre> 3.2. 如果 X 的 uncle (叔叔) 是黑色，我们要分四种情况处理。//刚刚说了 X 的 uncle 是红色的情况，接下来要说是黑色的情况<pre><code>3.21.  左左 (P 是 G 的左孩子，并且 X 是 P 的左孩子)3.22.  左右 (P 是 G 的左孩子，并且 X 是 P 的右孩子)3.23.  右右 (和 3.21镜像过来，恰好相反)3.24.  右左 (和 3.22镜像过来，恰好相反)</code></pre></li></ol><p>上面的描述过于复杂，还是看图解吧！<a href="https://zhuanlan.zhihu.com/p/143396578">漫画：什么是红黑树？（完整版）</a></p><h3 id="红黑树删除节点的5种情况"><a href="#红黑树删除节点的5种情况" class="headerlink" title="红黑树删除节点的5种情况"></a><strong>红黑树删除节点的5种情况</strong></h3><p>第一步：如果待删除结点有两个非空的孩子结点，转化成待删除结点只有一个孩子（或没有孩子）的情况。</p><p>第二步：根据待删除结点和其唯一子结点的颜色，分情况处理。</p><ol><li>自身是红色，子结点是黑色：</li><li>自身是黑色，子结点是红色：</li><li>自身是黑色，子结点也是黑色，或者子结点是空叶子结点：</li></ol><p>第三步：遇到双黑结点，在子结点顶替父结点之后，分成6种子情况处理。</p><ol><li>结点2是红黑树的根结点：</li><li>结点2的父亲、兄弟、侄子结点都是黑色：</li><li>结点2的兄弟结点是红色：</li><li>结点2的父结点是红色，兄弟和侄子结点是黑色：</li><li>结点2的父结点随意，兄弟结点B是黑色右孩子，左侄子结点是红色，右侄子结点是黑色：</li><li>结点2的父结点随意，兄弟结点B是黑色右孩子，右侄子结点是红色：</li></ol><p>上面的描述过于复杂，还是看图解吧！<a href="https://zhuanlan.zhihu.com/p/143396578">漫画：什么是红黑树？（完整版）</a></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p><a href="https://zhuanlan.zhihu.com/p/143396578">漫画：什么是红黑树？（完整版）</a><br><a href="https://blog.csdn.net/zandaoguang/article/details/100117456">漫画算法：5分钟搞明白红黑树到底是什么？</a><br><a href="https://www.jianshu.com/p/e136ec79235c">30张图带你彻底理解红黑树</a><br><a href="https://www.cnblogs.com/skywang12345/p/3245399.html">红黑树(一)之 原理和算法详细介绍</a><br><a href="https://zhuanlan.zhihu.com/p/79980618">红黑树，超强动静图详解，简单易懂</a>//这个讲的比较好<br>数据结构 邓俊辉</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;二叉查找树&quot;&gt;&lt;a href=&quot;#二叉查找树&quot; class=&quot;headerlink&quot; title=&quot;二叉查找树&quot;&gt;&lt;/a&gt;二叉查找树&lt;/h2&gt;&lt;p&gt;学习红黑树之前，先理解一下二叉查找树。&lt;/p&gt;
    
    </summary>
    
    
      <category term="数据结构" scheme="https://stemha.github.io/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
      <category term="红黑树" scheme="https://stemha.github.io/tags/%E7%BA%A2%E9%BB%91%E6%A0%91/"/>
    
  </entry>
  
  <entry>
    <title>deque常用操作</title>
    <link href="https://stemha.github.io/2020/06/01/deque%E5%B8%B8%E7%94%A8%E6%93%8D%E4%BD%9C/"/>
    <id>https://stemha.github.io/2020/06/01/deque%E5%B8%B8%E7%94%A8%E6%93%8D%E4%BD%9C/</id>
    <published>2020-06-01T08:17:03.000Z</published>
    <updated>2020-06-01T09:18:18.749Z</updated>
    
    <content type="html"><![CDATA[<h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a><strong>概念</strong></h2><p><code>Deque（双向队列）</code></p><ul><li>和Queue差不多 ,但是特殊的是Deque可是扩充内存。（实际上连续内存的容器不能随意扩充，所以Deque也不是真正意义上的扩充内存，而是封装了底层的表象。</li><li>Deque是由一段段构成的，当走到尾端时自动跳到下一段，（支持迭代器++操作）。</li><li>每次扩充，就会申请一个段，从而实现了内存连续的假象。</li></ul><p>默认的stack 和 queue 都基于 deque 容器实现， priority_queue 则基于 vector 容器实现。<br>对于给定的适配器，其关联的容器必须满足一定的约束条件。</p><ul><li>stack 适配器所关联的基础容器可以是任意一种顺序容器类型。因此，stack 栈可以建立在vector、list 或者 deque 容器之上。</li><li>queue 适配器要求其关联的基础容器必须提供 push_front 运算，因此只能建立在 list 或deque容器上，而不能建立在vector 容器上。</li><li>priority_queue 适配器要求提供随机访问功能，因此可建立在vector 或 deque 容器上，但不能建立在 list 容器上。<a id="more"></a></li></ul><h2 id="特性"><a href="#特性" class="headerlink" title="特性"></a><strong>特性</strong></h2><ul><li>deque 容器也擅长在序列尾部添加或删除元素（时间复杂度为O(1)），而不擅长在序列中间添加或删除元素。</li><li>deque 容器也可以根据需要修改自身的容量和大小。</li><li><code>缺点</code>：频繁的插入删除时候，Deque并不适合。</li><li>Deque采用分块线型结构存储数据，两个迭代器分别指向首尾元素，而且拥有具有高效的push_back(),push_front()函数。 正因如此，所以Deque不易实现capacity和reverse函数。</li></ul><h2 id="头文件"><a href="#头文件" class="headerlink" title="头文件"></a>头文件</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;deque&gt;</span></span></span><br></pre></td></tr></table></figure><h2 id="模板"><a href="#模板" class="headerlink" title="模板"></a>模板</h2><p>deque 容器以模板类 deque<T>（T 为存储元素的类型）的形式在 <deque> 头文件中，并位于 std 命名空间中。</deque></T></p><h2 id="set初始化方法"><a href="#set初始化方法" class="headerlink" title="set初始化方法"></a><strong>set初始化方法</strong></h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> num[] = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>&#125;;</span><br><span class="line"><span class="built_in">deque</span>&lt;<span class="keyword">int</span>&gt; di&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>&#125;;</span><br><span class="line"><span class="built_in">deque</span>&lt;<span class="keyword">int</span>&gt;q; 创建一个空双向队列 <span class="built_in">deque</span>&lt;T&gt; deqT;默认构造形式</span><br><span class="line"><span class="built_in">deque</span>&lt;<span class="keyword">int</span>&gt;p(<span class="number">5</span>); 创建一个具有<span class="number">5</span>个成员的双向队列</span><br><span class="line"><span class="built_in">deque</span>&lt;<span class="keyword">int</span>&gt;s(<span class="number">5</span>,<span class="number">1</span>);       创建一个具有<span class="number">5</span>个成员且初始值为<span class="number">1</span>的双向队列 <span class="built_in">deque</span>(n, elem);构造函数将n个elem拷贝给本身</span><br><span class="line"><span class="built_in">deque</span>&lt;<span class="keyword">int</span>&gt;s2(s);  创建一个双向队列s2，并拷贝s中所有成员 <span class="built_in">deque</span>(<span class="keyword">const</span> <span class="built_in">deque</span> &amp;deq);拷贝构造函数。</span><br><span class="line"><span class="built_in">deque</span>&lt;<span class="keyword">int</span>&gt;n(num,num+<span class="number">5</span>); 创建一个双向队列n，并拷贝num至num+<span class="number">5</span>中元素入队 <span class="built_in">deque</span>(beg, end);构造函数将[beg, end)区间中的元素拷贝给本身。</span><br></pre></td></tr></table></figure><h2 id="交换"><a href="#交换" class="headerlink" title="交换"></a>交换</h2><p><code>swap(deque&lt;T&gt;&amp; other)</code>：和参数的元素进行交换，所包含对象的类型必须相同。：将当前 deque 中的元素和参数 deque 中的元素交换。它们需要包含相同类型的元素。也可以调用全局函数模板 swap() 来完成同样的操作。</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">void swap(deque&lt;T&gt; &amp;x)　重载1：x.swap(y)</span><br><span class="line">void swap(deque&lt;T&gt; &amp;x, deque&lt;T&gt; &amp;y)  重载2: swap(x, y)</span><br></pre></td></tr></table></figure><h2 id="常用操作"><a href="#常用操作" class="headerlink" title="常用操作"></a><strong>常用操作</strong></h2><h3 id="插入操作"><a href="#插入操作" class="headerlink" title="插入操作"></a>插入操作</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">q.push_front(a);  头部入队</span><br><span class="line">q.push_back(b);   尾部入队</span><br><span class="line">q.insert(iter,x); 在iter位置插入x，iter为迭代器</span><br></pre></td></tr></table></figure><h3 id="覆盖"><a href="#覆盖" class="headerlink" title="覆盖"></a>覆盖</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">q.assign(n,x); 将n个x赋值到<span class="built_in">deque</span>中，并清空<span class="built_in">deque</span>容器之前的内容。</span><br><span class="line">q.assign(iter1,iter2); 将区间[iter1，iter2)内元素赋值给<span class="built_in">deque</span>，并清空<span class="built_in">deque</span>容器之前的内容。</span><br></pre></td></tr></table></figure><h3 id="删除与清空操作"><a href="#删除与清空操作" class="headerlink" title="删除与清空操作"></a>删除与清空操作</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">q.pop_front();   头部出队</span><br><span class="line">q.pop_back();    尾部出队</span><br><span class="line">q.clear();   清空双向队列</span><br><span class="line">q.erase(iter);   删除iter元素，iter为迭代器</span><br><span class="line">q.erase(beg,end);删除[beg,end)区间的数据，返回下一个数据的位置。</span><br></pre></td></tr></table></figure><h3 id="deque数据存取"><a href="#deque数据存取" class="headerlink" title="deque数据存取"></a>deque数据存取</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">q.front();  返回头成员</span><br><span class="line">q.back();   返回尾元素</span><br><span class="line">q.at(idx);  返回索引idx所指的数据，如果idx越界，抛出out_of_range。</span><br><span class="line"><span class="keyword">operator</span>[]; 返回索引idx所指的数据，如果idx越界，不抛出异常，直接出错。</span><br></pre></td></tr></table></figure><h3 id="大小-是否为空"><a href="#大小-是否为空" class="headerlink" title="大小/是否为空"></a>大小/是否为空</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">q.size();     返回双向队列成员个数</span><br><span class="line">q.max_size(); 返回系统支持成员最大个数</span><br><span class="line">q.empty();    判断双向队列是否为空</span><br></pre></td></tr></table></figure><h3 id="迭代器"><a href="#迭代器" class="headerlink" title="迭代器"></a>迭代器</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">q.begin();  返回头部迭代器</span><br><span class="line">q.end();    返回尾部迭代器</span><br><span class="line">q.rbegin(); 返回尾部反向迭代器</span><br><span class="line">q.rend();   返回头部反向迭代器</span><br><span class="line">q.cbegin(); 和 begin() 功能相同，只不过在其基础上，增加了 <span class="keyword">const</span> 属性，不能用于修改元素。</span><br><span class="line">q.cend();   和 end() 功能相同，只不过在其基础上，增加了 <span class="keyword">const</span> 属性，不能用于修改元素。</span><br><span class="line">q.crbegin();和rbegin() 功能相同，只不过在其基础上，增加了 <span class="keyword">const</span> 属性，不能用于修改元素。</span><br><span class="line">q.crend();  和 rend() 功能相同，只不过在其基础上，增加了 <span class="keyword">const</span> 属性，不能用于修改元素。</span><br></pre></td></tr></table></figure><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p><a href="http://c.biancheng.net/view/6860.html">C++ STL deque容器底层实现原理（深度剖析）</a><br><a href="http://c.biancheng.net/stl/">STL教程：C++ STL快速入门（非常详细）</a><br><a href="https://www.cnblogs.com/linuxAndMcu/p/10260124.html">[C++ STL]deque使用详解</a><br><a href="https://blog.csdn.net/weixin_42462202/article/details/87537503">C++ deque的用法与示例</a>//解释的图片不错<br><a href="https://blog.csdn.net/engineerxin/article/details/104818657">《C++Primer》第九章-顺序容器-学习笔记(3)-容器适配器&amp;栈&amp;队列</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;概念&quot;&gt;&lt;a href=&quot;#概念&quot; class=&quot;headerlink&quot; title=&quot;概念&quot;&gt;&lt;/a&gt;&lt;strong&gt;概念&lt;/strong&gt;&lt;/h2&gt;&lt;p&gt;&lt;code&gt;Deque（双向队列）&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;和Queue差不多 ,但是特殊的是Deque可是扩充内存。（实际上连续内存的容器不能随意扩充，所以Deque也不是真正意义上的扩充内存，而是封装了底层的表象。&lt;/li&gt;
&lt;li&gt;Deque是由一段段构成的，当走到尾端时自动跳到下一段，（支持迭代器++操作）。&lt;/li&gt;
&lt;li&gt;每次扩充，就会申请一个段，从而实现了内存连续的假象。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;默认的stack 和 queue 都基于 deque 容器实现， priority_queue 则基于 vector 容器实现。&lt;br&gt;对于给定的适配器，其关联的容器必须满足一定的约束条件。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;stack 适配器所关联的基础容器可以是任意一种顺序容器类型。因此，stack 栈可以建立在vector、list 或者 deque 容器之上。&lt;/li&gt;
&lt;li&gt;queue 适配器要求其关联的基础容器必须提供 push_front 运算，因此只能建立在 list 或deque容器上，而不能建立在vector 容器上。&lt;/li&gt;
&lt;li&gt;priority_queue 适配器要求提供随机访问功能，因此可建立在vector 或 deque 容器上，但不能建立在 list 容器上。&lt;/li&gt;&lt;/ul&gt;
    
    </summary>
    
    
      <category term="C++" scheme="https://stemha.github.io/categories/C/"/>
    
    
      <category term="C++标准库" scheme="https://stemha.github.io/tags/C-%E6%A0%87%E5%87%86%E5%BA%93/"/>
    
      <category term="deque" scheme="https://stemha.github.io/tags/deque/"/>
    
  </entry>
  
  <entry>
    <title>多线程编程-按序打印（leetcode 1114）</title>
    <link href="https://stemha.github.io/2020/05/26/%E5%A4%9A%E7%BA%BF%E7%A8%8B%E7%BC%96%E7%A8%8B-%E6%8C%89%E5%BA%8F%E6%89%93%E5%8D%B0%EF%BC%88leetcode-1114%EF%BC%89/"/>
    <id>https://stemha.github.io/2020/05/26/%E5%A4%9A%E7%BA%BF%E7%A8%8B%E7%BC%96%E7%A8%8B-%E6%8C%89%E5%BA%8F%E6%89%93%E5%8D%B0%EF%BC%88leetcode-1114%EF%BC%89/</id>
    <published>2020-05-26T08:40:05.000Z</published>
    <updated>2020-05-26T08:47:18.173Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a><strong>题目描述</strong></h2><a id="more"></a><p>提供了一个类：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Foo</span> &#123;</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">one</span><span class="params">()</span> </span>&#123; print(<span class="string">"one"</span>); &#125;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">two</span><span class="params">()</span> </span>&#123; print(<span class="string">"two"</span>); &#125;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">three</span><span class="params">()</span> </span>&#123; print(<span class="string">"three"</span>); &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>三个不同的线程将会共用一个 Foo 实例。</p><ul><li>线程 A 将会调用 one() 方法</li><li>线程 B 将会调用 two() 方法</li><li>线程 C 将会调用 three() 方法</li></ul><p>请设计修改程序，以确保 two() 方法在 one() 方法之后被执行，three() 方法在 two() 方法之后被执行。</p><h2 id="题目解析"><a href="#题目解析" class="headerlink" title="题目解析"></a><strong>题目解析</strong></h2><p>多个线程在cpu中执行，运行不同的程序段，但是这些程序之间有先后关系：</p><ul><li>one()方法如果不运行完毕啊，就不能运行two()方法。</li><li>two()方法如果不运行完毕啊，就不能运行three()方法。</li></ul><p>也属于并发的问题：<br>并发主要为多任务情况设计。但如果应用不当，可能会引发一些漏洞。按照情况不同，可以分为三种：</p><ul><li><code>竞态条件（Race Condition）</code>：由于多进程之间的竞争执行，导致程序未按照期望的顺序输出。</li><li><code>死锁</code>：并发程序等待一些必要资源，导致没有程序可以执行。</li><li><code>资源不足</code>：进程被永久剥夺了运行所需的资源。</li></ul><p><code>竞态条件</code>是指同一个程序多线程访问同一个资源，如果对资源的访问顺序敏感，就称存在竞态条件，代码区成为临界区。<br>最常见的竞态条件为：先检测后执行。（比如有一个if判断语句，多个线程都通过这个判断时候，下一步的执行可能造成各种奇怪的结果）</p><p><code>竞态条件的解决方案</code>为：需要某些关键部分代码具有排他性，即在给定的时间内，只有一个线程可以进入关键部分代码。(可以将这种机制看做限制关键部分代码访问的锁)</p><ul><li>在该机制下，一旦一个线程进入关键部分，它就可以阻止其他线程进入该关键部分。</li><li>如果该线程未被授权进入关键代码，可以认为该线程被阻塞或进入睡眠状态。</li><li>这种机制还具有唤醒其他等待线程的功能。</li></ul><p>总之，为了<code>防止出现并发竞争状态</code>，需要一种具有两种功能的机制：</p><ol><li>关键部分的访问控制。</li><li>通知阻塞线程。</li></ol><h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a><strong>代码实现</strong></h2><h3 id="方法1：使用-synchronization"><a href="#方法1：使用-synchronization" class="headerlink" title="方法1：使用 synchronization"></a><strong>方法1：使用 synchronization</strong></h3><p>信号量和互斥锁(mutex)的区别：互斥锁只允许一个线程进入临界区，而信号量允许多个线程同时进入临界区。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;semaphore.h&gt;  信号量Semaphore头文件</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Foo</span> &#123;</span></span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line">    <span class="keyword">sem_t</span> firstJobDone; 信号量的数据类型为结构<span class="keyword">sem_t</span>，它本质上是一个长整型的数。</span><br><span class="line">    <span class="keyword">sem_t</span> secondJobDone;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"></span><br><span class="line">    Foo() &#123;</span><br><span class="line">        sem_init(&amp;firstJobDone, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">        sem_init(&amp;secondJobDone, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">first</span><span class="params">(function&lt;<span class="keyword">void</span>()&gt; printFirst)</span> </span>&#123;</span><br><span class="line">        printFirst();</span><br><span class="line">        sem_post(&amp;firstJobDone);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">second</span><span class="params">(function&lt;<span class="keyword">void</span>()&gt; printSecond)</span> </span>&#123;</span><br><span class="line">        sem_wait(&amp;firstJobDone);</span><br><span class="line">        printSecond();</span><br><span class="line">        sem_post(&amp;secondJobDone);</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">third</span><span class="params">(function&lt;<span class="keyword">void</span>()&gt; printThird)</span> </span>&#123;</span><br><span class="line">        sem_wait(&amp;secondJobDone);</span><br><span class="line">        printThird();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><code>semaphore</code>是由操作系统提供的。</p><ul><li>LINUX下，一般是＃include&lt;asm/semaphore.h&gt; 或 ＃include&lt;semaphore.h&gt;</li><li>Windows下，一般是windows.h</li></ul><p>信号量的数据类型为结构sem_t，它本质上是一个长整型的数。<br><a href="https://baike.baidu.com/item/sem_init/4280487?fr=aladdin">sem_init</a>：<code>sem_init</code>函数是Posix信号量操作中的函数。sem_init() 初始化一个定位在 sem 的匿名信号量。value 参数指定信号量的初始值。 pshared 参数指明信号量是由进程内线程共享，还是由进程之间共享。如果 pshared 的值为 0，那么信号量将被进程内的线程共享，并且应该放置在这个进程的所有线程都可见的地址上(如全局变量，或者堆上动态分配的变量)。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">sem_init</span><span class="params">(<span class="keyword">sem_t</span> *sem, <span class="keyword">int</span> pshared, <span class="keyword">unsigned</span> <span class="keyword">int</span> value)</span></span>;</span><br><span class="line">sem ：指向信号量对象</span><br><span class="line">pshared : 指明信号量的类型。不为<span class="number">0</span>时此信号量在进程间共享，否则只能为当前进程的所有线程共享。</span><br><span class="line">value : 指定信号量值的大小</span><br><span class="line">sem_init() 成功时返回 <span class="number">0</span>；错误时，返回 <span class="number">-1</span>，并把 errno 设置为合适的值。</span><br></pre></td></tr></table></figure><p><a href="https://baike.baidu.com/item/sem_post">sem_post</a>：<code>sem_post</code>是给信号量的值加上一个“1”，它是一个“原子操作”－－－即同时对同一个信号量做加“1”操作的两个线程是不会冲突的；</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">sem_post</span><span class="params">(<span class="keyword">sem_t</span> *sem)</span></span>;</span><br><span class="line">sem_post() 成功时返回 <span class="number">0</span>；错误时，信号量的值没有更改，<span class="number">-1</span> 被返回，并设置 errno 来指明错误</span><br></pre></td></tr></table></figure><p><a href="https://baike.baidu.com/item/sem_wait">sem_wait</a>: <code>sem_wait</code>是一个函数，也是一个原子操作，它的作用是从信号量的值减去一个“1”，但它永远会先等待该信号量为一个非零值才开始做减法。也就是说，如果你对一个值为2的信号量调用sem_wait()，线程将会继续执行，将信号量的值将减到1。<br>如果对一个值为0的信号量调用sem_wait()，这个函数就会原地等待直到有其它线程增加了这个值使它不再是0为止。(也就是说是等于0时会阻塞操作)</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">sem_wait</span><span class="params">(<span class="keyword">sem_t</span> *sem)</span></span></span><br></pre></td></tr></table></figure><h3 id="方法2：使用mutex加锁解锁"><a href="#方法2：使用mutex加锁解锁" class="headerlink" title="方法2：使用mutex加锁解锁"></a><strong>方法2：使用mutex加锁解锁</strong></h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Foo</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    Foo() &#123;</span><br><span class="line"><span class="comment">//构造函数先执行，将mutex变量进行加锁初始化。</span></span><br><span class="line">        m2.lock();  /首先给second()和third()上锁</span><br><span class="line">        m3.lock(); </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">first</span><span class="params">(function&lt;<span class="keyword">void</span>()&gt; printFirst)</span> </span>&#123;</span><br><span class="line">        printFirst();</span><br><span class="line">        m2.unlock();  /first()运行完了就解开second()的锁</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">second</span><span class="params">(function&lt;<span class="keyword">void</span>()&gt; printSecond)</span> </span>&#123;</span><br><span class="line">        m2.lock();    这里是锁的入口，如果已经上锁了，就不能执行了，如果没有，就可以执行下一步，并把锁值<span class="number">0</span>置为<span class="number">1</span></span><br><span class="line">        printSecond();</span><br><span class="line">        m3.unlock();  <span class="comment">//second()运行完了就解开third()的锁</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">third</span><span class="params">(function&lt;<span class="keyword">void</span>()&gt; printThird)</span> </span>&#123;</span><br><span class="line">        m3.lock();</span><br><span class="line">        printThird();</span><br><span class="line">        m3.unlock();</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="built_in">std</span>::mutex m2, m3;</span><br><span class="line">    </span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p><a href="https://leetcode-cn.com/problems/print-in-order/solution/an-xu-da-yin-by-leetcode/">力扣（LeetCode）</a><br><a href="https://www.cnblogs.com/lenmom/p/7998969.html">C++多线程同步之Semaphore(信号量)</a><br><a href="https://blog.csdn.net/skyroben/article/details/72513985">进程间通信方式——信号量（Semaphore）</a><br><a href="https://www.cnblogs.com/zhengAloha/p/8665719.html">线程同步之信号量（sem_init,sem_post,sem_wait）</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;题目描述&quot;&gt;&lt;a href=&quot;#题目描述&quot; class=&quot;headerlink&quot; title=&quot;题目描述&quot;&gt;&lt;/a&gt;&lt;strong&gt;题目描述&lt;/strong&gt;&lt;/h2&gt;
    
    </summary>
    
    
      <category term="算法" scheme="https://stemha.github.io/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="C++" scheme="https://stemha.github.io/tags/C/"/>
    
      <category term="leetcode" scheme="https://stemha.github.io/tags/leetcode/"/>
    
      <category term="多线程" scheme="https://stemha.github.io/tags/%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
    
      <category term="信号量" scheme="https://stemha.github.io/tags/%E4%BF%A1%E5%8F%B7%E9%87%8F/"/>
    
      <category term="互斥锁" scheme="https://stemha.github.io/tags/%E4%BA%92%E6%96%A5%E9%94%81/"/>
    
  </entry>
  
  <entry>
    <title>STL排序相关库</title>
    <link href="https://stemha.github.io/2020/05/24/STL%E6%8E%92%E5%BA%8F%E7%9B%B8%E5%85%B3%E5%BA%93/"/>
    <id>https://stemha.github.io/2020/05/24/STL%E6%8E%92%E5%BA%8F%E7%9B%B8%E5%85%B3%E5%BA%93/</id>
    <published>2020-05-24T14:05:45.000Z</published>
    <updated>2020-05-25T12:46:31.076Z</updated>
    
    <content type="html"><![CDATA[<h2 id="sort"><a href="#sort" class="headerlink" title="sort"></a>sort</h2><p>函数声明</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">RandomAccessIterator</span>&gt;</span></span><br><span class="line"><span class="class">  <span class="title">void</span> <span class="title">sort</span> (<span class="title">RandomAccessIterator</span> <span class="title">first</span>, <span class="title">RandomAccessIterator</span> <span class="title">last</span>);</span></span><br><span class="line">  </span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">RandomAccessIterator</span>, <span class="title">class</span> <span class="title">Compare</span>&gt;</span></span><br><span class="line"><span class="class">  <span class="title">void</span> <span class="title">sort</span> (<span class="title">RandomAccessIterator</span> <span class="title">first</span>, <span class="title">RandomAccessIterator</span> <span class="title">last</span>, <span class="title">Compare</span> <span class="title">comp</span>);</span></span><br></pre></td></tr></table></figure><a id="more"></a><p>cmp()函数的返回值要是bool，核心要义也是比较。<br>sort默认是从小到大，所以在cmp如果还是要从小到大，那就a &lt; b，返回值bool为true，不改变；<br>如果想要从大到小排，那么就要return a &gt; b，因为默认a小于b，所以此时返回的bool就是false，要改变排序。<br>也就是说，</p><ul><li>返回的值是true的话，代表a先放，b后放</li><li>返回的值是false的话，代表b先放，a后放</li></ul><h2 id="stable-sort"><a href="#stable-sort" class="headerlink" title="stable_sort"></a>stable_sort</h2><p>排序的时候保持相对位置，即相同的数字相对位置是不变的。</p><h2 id="partition"><a href="#partition" class="headerlink" title="partition"></a>partition</h2><p>函数声明</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">ForwardIterator</span>, <span class="title">class</span> <span class="title">UnaryPredicate</span>&gt;</span></span><br><span class="line"><span class="class">  <span class="title">ForwardIterator</span> <span class="title">partition</span> (<span class="title">ForwardIterator</span> <span class="title">first</span>, <span class="title">ForwardIterator</span> <span class="title">last</span>, <span class="title">UnaryPredicate</span> <span class="title">pred</span>);</span></span><br></pre></td></tr></table></figure><p>作用：<br>对[first, last)元素进行处理，使得满足p的元素移到[first, last)前部，不满足的移到后部，返回第一个不满足p元素所在的迭代器，如果都满足的话返回last</p><h2 id="stable-partition"><a href="#stable-partition" class="headerlink" title="stable_partition"></a>stable_partition</h2><p>排序的时候保持相对位置，即相同的数字相对位置是不变的</p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p>C++ STL<br><a href="https://blog.csdn.net/SmartLoveyu/article/details/90445129">算法随记：C++ sort()函数，自定义cmp()的使用理解</a><br><a href="https://blog.csdn.net/weixin_43743711/article/details/105694973">STL—–排序类——sort与partition</a><br><a href="https://blog.csdn.net/drecik__/article/details/79268840">C++ stl算法——partition</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;sort&quot;&gt;&lt;a href=&quot;#sort&quot; class=&quot;headerlink&quot; title=&quot;sort&quot;&gt;&lt;/a&gt;sort&lt;/h2&gt;&lt;p&gt;函数声明&lt;/p&gt;
&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;template&lt;/span&gt; &amp;lt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;RandomAccessIterator&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;  &lt;span class=&quot;title&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;sort&lt;/span&gt; (&lt;span class=&quot;title&quot;&gt;RandomAccessIterator&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;first&lt;/span&gt;, &lt;span class=&quot;title&quot;&gt;RandomAccessIterator&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;last&lt;/span&gt;);&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  	&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;template&lt;/span&gt; &amp;lt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;RandomAccessIterator&lt;/span&gt;, &lt;span class=&quot;title&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Compare&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;  &lt;span class=&quot;title&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;sort&lt;/span&gt; (&lt;span class=&quot;title&quot;&gt;RandomAccessIterator&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;first&lt;/span&gt;, &lt;span class=&quot;title&quot;&gt;RandomAccessIterator&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;last&lt;/span&gt;, &lt;span class=&quot;title&quot;&gt;Compare&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;comp&lt;/span&gt;);&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="C++" scheme="https://stemha.github.io/categories/C/"/>
    
    
      <category term="C++" scheme="https://stemha.github.io/tags/C/"/>
    
      <category term="C++标准库" scheme="https://stemha.github.io/tags/C-%E6%A0%87%E5%87%86%E5%BA%93/"/>
    
  </entry>
  
  <entry>
    <title>音标发音</title>
    <link href="https://stemha.github.io/2020/05/24/%E9%9F%B3%E6%A0%87%E5%8F%91%E9%9F%B3/"/>
    <id>https://stemha.github.io/2020/05/24/%E9%9F%B3%E6%A0%87%E5%8F%91%E9%9F%B3/</id>
    <published>2020-05-24T12:49:11.000Z</published>
    <updated>2020-05-24T12:59:01.869Z</updated>
    
    <content type="html"><![CDATA[<h2 id="清辅音与浊辅音"><a href="#清辅音与浊辅音" class="headerlink" title="清辅音与浊辅音"></a>清辅音与浊辅音</h2><a id="more"></a><table><thead><tr><th align="left">分类</th><th align="left">音标</th></tr></thead><tbody><tr><td align="left">清辅音</td><td align="left">发音时声带不振动的辅音，有/p/ /t/ /k/ /f/ /θ/ /s/ /ʃ/ /h/ /tʃ/ /ts/ /tr/</td></tr><tr><td align="left">浊辅音</td><td align="left">发音时声带振动的辅音，有/b/ /d/ /g/ /v/ /ð/ /z/ /ʒ/ /r/ /dʒ/ /dz/ /dr/ /j/ /w/ /m/ /n/ /ŋ/ /l/</td></tr><tr><td align="left">二者区别</td><td align="left">读一下/v/和/f/感受一下就知道了</td></tr></tbody></table><h3 id="ts"><a href="#ts" class="headerlink" title="/ts/"></a>/ts/</h3><ul><li>清辅音  声带不震动 发<strong>“次”</strong>的音   牙齿轻咬，舌端贴住齿龈，堵住气流。然后舌尖略微下降，气流泄出。</li></ul><h3 id="ð"><a href="#ð" class="headerlink" title="/ð/"></a>/ð/</h3><ul><li>浊辅音，发音时声带要稍微振动，发出声来，但不要送气。</li><li>口型助记： 外形则像舌头顶在上下牙齿之间。</li><li>英语中只有字母组合“th”会发这个音。</li><li>容易把它发成舌尖齿龈摩擦音/z/；还有些人误把它发成舌端齿龈破擦音/dz/，其实只要记住轻轻舌头顶住，就不会错。</li></ul><h3 id="θ"><a href="#θ" class="headerlink" title="/θ/"></a>/θ/</h3><ul><li>清辅音，发音时把舌尖放在上下齿之间，舌尖轻触上齿，略略露出齿外，气流由舌齿间泻出，摩擦成音</li><li>口型助记：外形像上下牙齿咬着舌头。</li><li>英语中只有字母组合“th”发这个音。</li><li>容易把它发成“舌尖齿龈摩擦音”/s/，其实只要记住轻轻咬住舌尖，就不会错。</li></ul><p>音标中辅音并不难，发音基本和汉语一样，需要注意的是[θ]和[ð]这两个，因为这两个发音在汉语里是没有的。可以毫不客气地说，在中国，80%以上学英语的人这两个发音都是发成[s]和[z]的</p><h2 id="相关资源"><a href="#相关资源" class="headerlink" title="相关资源"></a>相关资源</h2><p><a href="https://en-yinbiao.xiao84.com/yinbiaofayin/ts.html">清辅音/ts/的发音方法</a><br><a href="https://en-yinbiao.xiao84.com/yinbiaofayin/qq.html">浊辅音/ð/的发音方法</a><br><a href="https://www.bkw.cn/zszbks/ask/2590576.html">如何用英语48个音标发音用中文谐音标示</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;清辅音与浊辅音&quot;&gt;&lt;a href=&quot;#清辅音与浊辅音&quot; class=&quot;headerlink&quot; title=&quot;清辅音与浊辅音&quot;&gt;&lt;/a&gt;清辅音与浊辅音&lt;/h2&gt;
    
    </summary>
    
    
      <category term="英语学习" scheme="https://stemha.github.io/categories/%E8%8B%B1%E8%AF%AD%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="音标" scheme="https://stemha.github.io/tags/%E9%9F%B3%E6%A0%87/"/>
    
  </entry>
  
  <entry>
    <title>单例模式C++实现</title>
    <link href="https://stemha.github.io/2020/05/21/%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8FC-%E5%AE%9E%E7%8E%B0/"/>
    <id>https://stemha.github.io/2020/05/21/%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8FC-%E5%AE%9E%E7%8E%B0/</id>
    <published>2020-05-20T16:03:09.000Z</published>
    <updated>2020-05-20T16:22:56.770Z</updated>
    
    <content type="html"><![CDATA[<h2 id="单例模式"><a href="#单例模式" class="headerlink" title="单例模式"></a>单例模式</h2><p>singleton pattern<br>purpose：使得一个类只能有一个实例，并提供一个全局访问的位置<br>probliem：遇到实例的频繁创建和销毁时，效率低<br>solution：创建时候检测实例是否存在<br>key code：构造函数是私有的</p><a id="more"></a><h2 id="如何选择懒汉和饿汉模式："><a href="#如何选择懒汉和饿汉模式：" class="headerlink" title="如何选择懒汉和饿汉模式："></a>如何选择懒汉和饿汉模式：</h2><p>特点与选择：<br>懒汉：在访问量较小时，采用懒汉实现。这是以时间换空间。<br>饿汉：由于要进行线程同步，所以在访问量比较大，或者可能访问的线程比较多时，采用饿汉实现，可以实现更好的性能。这是以空间换时间。</p><h2 id="懒汉式单例模式代码（线程不安全）"><a href="#懒汉式单例模式代码（线程不安全）" class="headerlink" title="懒汉式单例模式代码（线程不安全）"></a>懒汉式单例模式代码（线程不安全）</h2><p>顾名思义，该模式只在你需要对象时才会生成单例对象(意思是太懒了，懒汉不到万不得已就不会去实例化类)<br>缺点：</p><ul><li>懒汉式是以时间换空间的方式。（在getInstance中new instance然后返回）</li><li>适用于单线程的环境！</li><li>不是线程安全的！<ul><li>它不是线程安全的。假设当前有N个线程同时调用getInstance（）方法，由于当前还没有对象生成，所以一部分同时都进入步骤 2,那么就会由多个线程创建多个多个singleton对象。</li></ul></li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">懒汉式单例模式</span><br><span class="line">- 私有静态指针，指向单例</span><br><span class="line">- 私有构造函数</span><br><span class="line">- 公有获取实例的静态函数</span><br><span class="line"><span class="meta"># <span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">singleton</span>&#123;</span></span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">        <span class="function"><span class="keyword">static</span> singleton *<span class="title">getinstance</span><span class="params">()</span></span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (instance == <span class="literal">NULL</span>)                   步骤 <span class="number">1</span></span><br><span class="line">            &#123;</span><br><span class="line">                instance = <span class="keyword">new</span> singleton();         步骤 <span class="number">2</span>   </span><br><span class="line">                <span class="keyword">return</span> instance;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;   </span><br><span class="line">                <span class="built_in">cout</span> &lt;&lt; <span class="string">"instance has already initialized"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">                <span class="keyword">return</span> instance;</span><br><span class="line">            &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span>:</span><br><span class="line">        <span class="keyword">static</span> singleton * instance ;</span><br><span class="line">        singleton()</span><br><span class="line">        &#123;   </span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; <span class="string">"instance initialized"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;;</span><br><span class="line">singleton *  singleton::instance = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    singleton * singleton1 = singleton::getinstance();</span><br><span class="line">    singleton * singleton2 = singleton::getinstance();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//输出</span></span><br><span class="line"><span class="comment">//instance initialized</span></span><br><span class="line"><span class="comment">//instance has already initialized</span></span><br></pre></td></tr></table></figure><h2 id="饿汉式单例模式代码（线程安全）"><a href="#饿汉式单例模式代码（线程安全）" class="headerlink" title="饿汉式单例模式代码（线程安全）"></a>饿汉式单例模式代码（线程安全）</h2><p>顾名思义，该模式在类被加载时就会实例化一个对象。（意思是有就吃，有加载个类的话，饿汉就直接在类里面建立）</p><ul><li>饿汉式是以空间换时间的方式。（在静态区初始化instance，然后通过getInstance返回）</li><li>该模式能简单快速的创建一个单例对象，而且是线程安全的(只在类加载时才会初始化，以后都不会)。</li><li>缺点，就是不管你要不要都会直接创建一个对象，会消耗一定的性能(当然很小很小，几乎可以忽略不计，所以这种模式在很多场合十分常用而且十分简单)</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta"># <span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">singleton</span>&#123;</span></span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">static</span> singleton *<span class="title">getinstance</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span>    instance;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span>:</span><br><span class="line">        <span class="keyword">static</span> singleton *instance;</span><br><span class="line">        singleton()</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; <span class="string">"instance initialized"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">singleton * singleton::instance = <span class="keyword">new</span> singleton();  <span class="comment">//关键的一步</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    singleton *singleton1 = singleton::getinstance();</span><br><span class="line">    singleton *singleton2 = singleton::getinstance();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意，这个单例在主函数之前就已经加载了，比如下面主函数输出的结果就是instance initialized。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">int main()&#123;</span><br><span class="line">return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="线程安全的懒汉式单例模式代码"><a href="#线程安全的懒汉式单例模式代码" class="headerlink" title="线程安全的懒汉式单例模式代码"></a>线程安全的懒汉式单例模式代码</h2><p>加了一个互斥锁</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta"># <span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta"># <span class="meta-keyword">include</span> <span class="meta-string">&lt;mutex&gt;</span></span></span><br><span class="line"><span class="meta"># <span class="meta-keyword">include</span> <span class="meta-string">&lt;pthread.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">singleton</span>&#123;</span></span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">        <span class="keyword">static</span> <span class="keyword">pthread_mutex_t</span> mutex;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">static</span> singleton *<span class="title">getinstance</span><span class="params">()</span></span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">           pthread_mutex_lock(&amp;mutex);</span><br><span class="line">            <span class="keyword">if</span> (instance == <span class="literal">NULL</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                instance = <span class="keyword">new</span> singleton();</span><br><span class="line">                <span class="keyword">return</span> instance;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;   </span><br><span class="line">                <span class="built_in">cout</span> &lt;&lt; <span class="string">"instance has already initialized"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">                <span class="keyword">return</span> instance;</span><br><span class="line">            &#125;</span><br><span class="line">            pthread_mutex_unlock(&amp;mutex);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span>:</span><br><span class="line">        <span class="keyword">static</span> singleton * instance ;</span><br><span class="line">        singleton()</span><br><span class="line">        &#123;   </span><br><span class="line">            pthread_mutex_init(&amp;mutex,<span class="literal">NULL</span>); <span class="comment">//初始化为一个互斥锁</span></span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; <span class="string">"instance initialized"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        &#125;      </span><br><span class="line">&#125;;</span><br><span class="line">singleton *  singleton::instance = <span class="literal">NULL</span>;</span><br><span class="line"><span class="keyword">pthread_mutex_t</span> singleton::mutex;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    singleton * singleton1 = singleton::getinstance();</span><br><span class="line">    singleton * singleton2 = singleton::getinstance();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意：<br>互斥变量使用特定的数据类型：pthread_mutex_t<br>线程函数编译时需要添加特殊编译选项：<br>gcc read.c -lpthread  比如最简单的编译命令，记住要在后加-lpthread选项，<br>否则会出现undefined reference to ‘pthread_mutex_lock’报错。</p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p><a href="https://www.cnblogs.com/william-dai/p/10938666.html">饿汉式和懒汉式（单例模式详解)</a><br><a href="https://www.cnblogs.com/xuelisheng/p/9744301.html">C++ 单例模式(懒汉、饿汉模式)</a><br><a href="https://www.cnblogs.com/fenghualong/p/11568398.html">C++关于锁的总结（一）</a><br><a href="https://blog.csdn.net/weixin_43913500/article/details/106038580">windows下std 没有成员 thread、thread not member of std</a><br><a href="https://blog.csdn.net/Allen_Walker_QAQ/article/details/80637010">c++线程中的几种锁</a></p><h2 id="本文许可证"><a href="#本文许可证" class="headerlink" title="本文许可证"></a>本文许可证</h2><p>本文遵循 <a href="https://github.com/huihut/interview/blob/master/LICENSE">CC BY-NC-SA 4.0</a>（署名 - 非商业性使用 - 相同方式共享） 协议，转载请注明出处，不得用于商业目的。<br><a href="LICENSE"><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9pLmNyZWF0aXZlY29tbW9ucy5vcmcvbC9ieS1uYy1zYS80LjAvODh4MzEucG5n?x-oss-process=image/format,png" alt="CC BY-NC-SA 4.0"></a></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;单例模式&quot;&gt;&lt;a href=&quot;#单例模式&quot; class=&quot;headerlink&quot; title=&quot;单例模式&quot;&gt;&lt;/a&gt;单例模式&lt;/h2&gt;&lt;p&gt;singleton pattern&lt;br&gt;purpose：使得一个类只能有一个实例，并提供一个全局访问的位置&lt;br&gt;probliem：遇到实例的频繁创建和销毁时，效率低&lt;br&gt;solution：创建时候检测实例是否存在&lt;br&gt;key code：构造函数是私有的&lt;/p&gt;
    
    </summary>
    
    
      <category term="软件工程" scheme="https://stemha.github.io/categories/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/"/>
    
    
      <category term="C++" scheme="https://stemha.github.io/tags/C/"/>
    
      <category term="单例模式" scheme="https://stemha.github.io/tags/%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>C++变量初始化</title>
    <link href="https://stemha.github.io/2020/05/20/C-%E5%8F%98%E9%87%8F%E5%88%9D%E5%A7%8B%E5%8C%96/"/>
    <id>https://stemha.github.io/2020/05/20/C-%E5%8F%98%E9%87%8F%E5%88%9D%E5%A7%8B%E5%8C%96/</id>
    <published>2020-05-20T13:45:42.000Z</published>
    <updated>2020-05-20T13:50:04.208Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>声明只是表明了变量的数据类型和属性，并不分配内存；定义则是需要分配内存的。 </p></blockquote><a id="more"></a><h2 id="静态成员"><a href="#静态成员" class="headerlink" title="静态成员"></a>静态成员</h2><p>类的静态成员（static member）必须在类内声明，在类外初始化<br>比如：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span>&#123;</span></span><br><span class="line"> <span class="keyword">private</span>: </span><br><span class="line"><span class="keyword">static</span> <span class="keyword">int</span> count ; <span class="comment">// 类内声明 </span></span><br><span class="line">&#125;; </span><br><span class="line"><span class="keyword">int</span> A::count = <span class="number">0</span> ;  类外初始化，不必再加<span class="keyword">static</span>关键字</span><br></pre></td></tr></table></figure><p>为什么？因为静态成员属于整个类，而不属于某个对象，如果在类内初始化，会导致每个对象都包含该静态成员，这是矛盾的。</p><h2 id="类内初始化的成员"><a href="#类内初始化的成员" class="headerlink" title="类内初始化的成员"></a>类内初始化的成员</h2><p><strong>能在类中初始化的成员只有一种，那就是<code>静态常量成员</code></strong>。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span>&#123;</span></span><br><span class="line"> <span class="keyword">private</span>: </span><br><span class="line"><span class="keyword">static</span> <span class="keyword">const</span> <span class="keyword">int</span> count = <span class="number">0</span>;  静态常量成员可以在类内初始化 </span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>静态成员和常量成员不能在类内初始化。比如const int count = 0; 和static int count = 0;是不能在类里面初始化的。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a><strong>总结</strong></h2><p><code>静态常量数据成员</code>static const int count:</p><ul><li>可以在类内初始化(即类内声明的同时初始化)，也可以在类外，即类的实现文件中初始化。</li><li>不能在构造函数中初始化，也不能在构造函数的初始化列表中初始化；</li></ul><p><code>静态非常量数据成员</code>static int count:</p><ul><li><strong>只能在类外，即类的实现文件中初始化</strong></li><li>不能在构造函数中初始化</li><li>不能在构造函数的初始化列表中初始化</li></ul><p><code>非静态的常量数据成员</code>const int count:</p><ul><li>不能在类内初始化，也不能在构造函数中初始化，</li><li><strong>只能且必须在构造函数的初始化列表中初始化</strong>；</li></ul><p><code>非静态的非常量数据成员</code>int count:</p><ul><li>不能在类内初始化,不能在类外。</li><li>可以在构造函数中初始化</li><li>可以在构造函数的初始化列表中初始化</li></ul><p><strong>在类外定义的成员变量肯定是有static 关键字的。</strong></p><h2 id="初始化规则"><a href="#初始化规则" class="headerlink" title="初始化规则"></a><strong>初始化规则</strong></h2><p>系统如何初始化取决于变量的类型以及变量定义的位置。</p><h2 id="内置类型变量初始化"><a href="#内置类型变量初始化" class="headerlink" title="内置类型变量初始化　"></a>内置类型变量初始化　</h2><p>内置类型变量是否自动初始化取决于变量定义的位置。</p><ul><li>函数体外定义的变量初始成0；（注意是主函数外）</li><li>函数体内定义的变量不进行自动初始化。</li></ul><h2 id="类类型变量初始化"><a href="#类类型变量初始化" class="headerlink" title="类类型变量初始化"></a>类类型变量初始化</h2><p>类类型变量在定义时，如果没有提供初始化式，则会自动调用默认构造函数进行初始化（不论变量在哪里定义，都会被初始化，只不过初始化为什么样子由编译器决定了）。<br>如果某类型没有默认构造函数，则定义该类型对象时必须提供显示初始化式。</p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p><a href="https://blog.csdn.net/Clengupup/article/details/83059231">C++中静态变量的声明与初始化</a><br><a href="https://www.jb51.net/article/91234.htm">详解C++中变量的初始化规则</a><br><a href="https://www.cnblogs.com/caidi/p/9679673.html">C++的变量初始化</a></p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;声明只是表明了变量的数据类型和属性，并不分配内存；定义则是需要分配内存的。 &lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="C++" scheme="https://stemha.github.io/categories/C/"/>
    
    
      <category term="C++" scheme="https://stemha.github.io/tags/C/"/>
    
      <category term="初始化" scheme="https://stemha.github.io/tags/%E5%88%9D%E5%A7%8B%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>C++运算符重载</title>
    <link href="https://stemha.github.io/2020/05/20/C-%E8%BF%90%E7%AE%97%E7%AC%A6%E9%87%8D%E8%BD%BD/"/>
    <id>https://stemha.github.io/2020/05/20/C-%E8%BF%90%E7%AE%97%E7%AC%A6%E9%87%8D%E8%BD%BD/</id>
    <published>2020-05-19T17:32:45.000Z</published>
    <updated>2020-05-19T17:48:12.031Z</updated>
    
    <content type="html"><![CDATA[<h2 id="运算符重载"><a href="#运算符重载" class="headerlink" title="运算符重载"></a>运算符重载</h2><p><code>重载的运算符</code>是<code>带有特殊名称的函数</code></p><ul><li>函数名是由关键字 operator 和其后要重载的运算符符号构成的。</li><li>与其他函数一样，重载运算符有一个<strong>返回类型</strong>和一个<strong>参数列表</strong>。</li></ul><p>大多数的重载运算符可被定义为普通的非成员函数或者被定义为类成员函数。</p><a id="more"></a><h2 id="保持语义不变"><a href="#保持语义不变" class="headerlink" title="保持语义不变"></a>保持语义不变</h2><ul><li>不改变运算符的优先级</li><li>不改变运算符的结合性</li><li>不改变运算符需要的操作数</li><li>不能创建新的运算符</li></ul><h2 id="定义为类成员函数-令运算符重载函数作为类的成员函数"><a href="#定义为类成员函数-令运算符重载函数作为类的成员函数" class="headerlink" title="定义为类成员函数(令运算符重载函数作为类的成员函数)"></a>定义为类成员函数(令运算符重载函数作为类的成员函数)</h2><p>例子,这里是二元运算符，在类的内部，只需要传入一个外部元素。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Box <span class="keyword">operator</span>+(<span class="keyword">const</span> Box&amp;);</span><br></pre></td></tr></table></figure><p>声明加法运算符用于把两个 Box 对象相加，返回最终的 Box 对象。</p><h2 id="定义为普通的非成员函数-令运算符重载函数作为类的友元函数"><a href="#定义为普通的非成员函数-令运算符重载函数作为类的友元函数" class="headerlink" title="定义为普通的非成员函数(令运算符重载函数作为类的友元函数)"></a>定义为普通的非成员函数(令运算符重载函数作为类的友元函数)</h2><p>例子,这里是二元运算符，不在类里面，需要传入两个元素。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Box <span class="keyword">operator</span>+(<span class="keyword">const</span> Box&amp;, <span class="keyword">const</span> Box&amp;);</span><br></pre></td></tr></table></figure><p>声明加法运算符用于把两个 Box 对象相加，返回最终的 Box 对象。</p><p>这时候，就需要作为友元函数来操作类的对象了；</p><h2 id="两种方式的区别"><a href="#两种方式的区别" class="headerlink" title="两种方式的区别"></a>两种方式的区别</h2><p>区别在于令运算符重载函数作为类的成员函数在调用时只需输入一个被操作数参数即可，另一个操作数参数则不需要输入；令运算符重载函数作为类的友元函数在调用时不仅要求输入被操作数参数，还要求输入被操作数参数。</p><pre><code>产生了这个区别的原因在于令运算符重载函数作为类的成员函数和令运算符重载函数作为类的友元函数有本质区别：(1)调用作为类的成员函数的运算符重载函数时，类对象肯定已经被建立了，这时对象中对应的私有数据成员存在。(2)调用作为类的友元函数的运算符重载函数时，类对象还未被建立，这时对象中对应私有数据成员不存在。</code></pre><h2 id="运算符重载的方法步骤"><a href="#运算符重载的方法步骤" class="headerlink" title="运算符重载的方法步骤"></a>运算符重载的方法步骤</h2><p>运算符重载函数的参数个数 等于 运算符操作数的个数。<br>但要注意，用成员函数重载时，对应于运算符左操作数的参数是默认传递的。</p><p>参数的顺序和左右操作数的顺序是一样的，这一点看看&lt;&lt; 和 &gt;&gt; 的重载就知道了。</p><h2 id="tips"><a href="#tips" class="headerlink" title="tips"></a>tips</h2><p>重载一元运算符，在类的内部，不需要传入元素，参数为0。</p><h2 id="重载-和–运算符号"><a href="#重载-和–运算符号" class="headerlink" title="重载++和–运算符号"></a>重载++和–运算符号</h2><p>int类型参数只是用来区别后置++与前置++，此外没有任何其他作用。</p><p>令运算符重载函数作为类的友元函数重载前置运算符和重载后置运算符分别如何实现？<br>答：也是一样的，传入参数多加一个int即可了</p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p><a href="https://blog.csdn.net/jacket_/article/details/89714947">C++的运算符重载</a><br><a href="https://www.runoob.com/cplusplus/cpp-overloading.html">C++ 重载运算符和重载函数</a><br><a href="https://blog.csdn.net/baidu_35679960/article/details/79592318">STL 中list的sort()方法使用总结</a><br><a href="https://blog.csdn.net/holdsky/article/details/8880962">STL 如何使用list::remove_if</a><br><a href="https://blog.csdn.net/Dreamer_lsf/article/details/84344174">C++ list.merge()使用方法</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;运算符重载&quot;&gt;&lt;a href=&quot;#运算符重载&quot; class=&quot;headerlink&quot; title=&quot;运算符重载&quot;&gt;&lt;/a&gt;运算符重载&lt;/h2&gt;&lt;p&gt;&lt;code&gt;重载的运算符&lt;/code&gt;是&lt;code&gt;带有特殊名称的函数&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;函数名是由关键字 operator 和其后要重载的运算符符号构成的。&lt;/li&gt;
&lt;li&gt;与其他函数一样，重载运算符有一个&lt;strong&gt;返回类型&lt;/strong&gt;和一个&lt;strong&gt;参数列表&lt;/strong&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;大多数的重载运算符可被定义为普通的非成员函数或者被定义为类成员函数。&lt;/p&gt;
    
    </summary>
    
    
      <category term="C++" scheme="https://stemha.github.io/categories/C/"/>
    
    
      <category term="C++" scheme="https://stemha.github.io/tags/C/"/>
    
      <category term="运算符" scheme="https://stemha.github.io/tags/%E8%BF%90%E7%AE%97%E7%AC%A6/"/>
    
      <category term="重载" scheme="https://stemha.github.io/tags/%E9%87%8D%E8%BD%BD/"/>
    
  </entry>
  
  <entry>
    <title>list常用操作</title>
    <link href="https://stemha.github.io/2020/05/20/list%E5%B8%B8%E7%94%A8%E6%93%8D%E4%BD%9C/"/>
    <id>https://stemha.github.io/2020/05/20/list%E5%B8%B8%E7%94%A8%E6%93%8D%E4%BD%9C/</id>
    <published>2020-05-19T16:29:24.000Z</published>
    <updated>2020-05-20T16:23:56.001Z</updated>
    
    <content type="html"><![CDATA[<h2 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h2><p>list</p><ul><li>底层数据结构为双向链表，支持快速增删</li><li>缺点是无法通过位置来直接访问序列中的元素，也就是说，不能索引元素。为了访问 list 内部的一个元素，必须一个一个地遍历元素，通常从第一个元素或最后一个元素开始遍历。</li><li>节点对象维护了两个指针，一个指向前一个节点，另一个指向下一个节点。</li><li>第一个元素的前向指针总是为 null,因为它前面没有元素，尾部元素的后向指针也总为 null。<a id="more"></a></li></ul><h2 id="头文件"><a href="#头文件" class="headerlink" title="头文件"></a>头文件</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;list&gt;</span></span></span><br></pre></td></tr></table></figure><h2 id="模板"><a href="#模板" class="headerlink" title="模板"></a>模板</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt; <span class="class"><span class="keyword">class</span> <span class="title">T</span>, <span class="title">class</span> <span class="title">Alloc</span> = <span class="title">allocator</span>&lt;T&gt; &gt; <span class="title">class</span> <span class="title">list</span>;</span></span><br></pre></td></tr></table></figure><h2 id="list初始化方法"><a href="#list初始化方法" class="headerlink" title="list初始化方法"></a><strong>list初始化方法</strong></h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">list</span>&lt;<span class="keyword">int</span>&gt;q; <span class="comment">//创建空List</span></span><br><span class="line"><span class="built_in">list</span>&lt;<span class="keyword">int</span>&gt;p(<span class="number">5</span>);     创建拥有<span class="number">5</span>个成员的List</span><br><span class="line"><span class="built_in">list</span>&lt;<span class="keyword">int</span>&gt;s(<span class="number">5</span>,<span class="number">1</span>);   创建拥有<span class="number">5</span>个成员，且初始值为<span class="number">1</span>的List</span><br><span class="line"><span class="built_in">list</span>&lt;<span class="keyword">int</span>&gt;s2(s);    创建s2，并拷贝s元素给s2</span><br><span class="line"><span class="built_in">list</span>&lt;<span class="keyword">int</span>&gt;s3(s.begin(),s.end());  创建s3，拷贝s.begin()至s.end()中元素给s3</span><br></pre></td></tr></table></figure><h2 id="交换"><a href="#交换" class="headerlink" title="交换"></a>交换</h2><p><code>swap(list&lt;T&gt;&amp; other)</code>：和参数的元素进行交换，所包含对象的类型必须相同。：将当前 map 中的元素和参数 map 中的元素交换。它们需要包含相同类型的元素。也可以调用全局函数模板 swap() 来完成同样的操作。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">void swap(list&lt;T&gt; &amp;x)　重载1：x.swap(y)</span><br><span class="line">void swap (list&lt;T&gt;&amp; x, list&lt;T&gt;&amp; y)  重载2: swap(x, y)</span><br><span class="line">q.swap(p) <span class="comment">//交换两个list</span></span><br></pre></td></tr></table></figure><h2 id="常用操作"><a href="#常用操作" class="headerlink" title="常用操作"></a><strong>常用操作</strong></h2><h2 id="插入"><a href="#插入" class="headerlink" title="插入"></a>插入</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">q.push_front(num)        返回值空  在<span class="built_in">list</span>的头部添加一个元素 </span><br><span class="line">q.push_back(num)         返回值空  在<span class="built_in">list</span>末尾增加一个元素。</span><br><span class="line">q.insert(iter,num)       在iter位置插入元素num。</span><br><span class="line">q.insert(iter,n,num)     在iter位置插入n个元素num。</span><br><span class="line">q.insert(iter,beg,end)   在iter位置插入区间为[beg,end)的元素。</span><br></pre></td></tr></table></figure><h3 id="大小与是否为空"><a href="#大小与是否为空" class="headerlink" title="大小与是否为空"></a>大小与是否为空</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">q.empty()      如果<span class="built_in">list</span>是空的则返回<span class="literal">true</span></span><br><span class="line">q.max_size()   返回<span class="built_in">list</span>能容纳的最大元素数量</span><br><span class="line">q.size()       返回<span class="built_in">list</span>中的元素个数</span><br><span class="line">q.resize(n)    从新定义链表的长度,超出原始长度部分用<span class="number">0</span>代替,小于原始部分删除。</span><br><span class="line">q.resize(n,num)从新定义链表的长度,超出原始长度部分用num代替。</span><br></pre></td></tr></table></figure><h3 id="删除与清空"><a href="#删除与清空" class="headerlink" title="删除与清空"></a>删除与清空</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">q.clear()     返回值空，删除所有元素 </span><br><span class="line">q.pop_back()  返回值空 删除最后一个元素</span><br><span class="line">q.pop_front() 返回值空 删除第一个元素</span><br><span class="line">q.erase(iter) 删除一个元素，并且返回下一个位置的迭代器</span><br><span class="line">q.remove(value)    从<span class="built_in">list</span>删除元素 <span class="function"><span class="keyword">void</span> <span class="title">remove</span> <span class="params">( <span class="keyword">const</span> T&amp; value )</span></span>;</span><br><span class="line">q.remove_if(MATCH) 按指定条件删除元素 返回值为空<span class="function"><span class="keyword">void</span>  <span class="title">list::remove_if</span><span class="params">( MATCH )</span></span></span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">iterator <span class="title">erase</span> <span class="params">( iterator position )</span></span>;</span><br><span class="line"><span class="function">iterator <span class="title">erase</span> <span class="params">( iterator first, iterator last )</span></span>;</span><br></pre></td></tr></table></figure><p>list中remove和erase都是删除一个元素，其中remove参数类型和数据类型一致，而erase参数类型是迭代器。<br>remove（aim）是删除链表中的aim元素，若有多个aim，都会删除，而<br>erase（it）是删除迭代器指定位置的元素，并且返回下一个位置的迭代器来看例子。</p><h3 id="查找"><a href="#查找" class="headerlink" title="查找"></a>查找</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">q.back()  返回最后一个元素 <span class="function">reference <span class="title">back</span> <span class="params">( )</span></span>;</span><br><span class="line">q.front() 返回第一个元素   <span class="function">reference <span class="title">front</span> <span class="params">( )</span></span>;</span><br></pre></td></tr></table></figure><h3 id="迭代器"><a href="#迭代器" class="headerlink" title="迭代器"></a>迭代器</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">q.begin() <span class="comment">//返回指向第一个元素的迭代器</span></span><br><span class="line">q.end() <span class="comment">//返回末尾的迭代器</span></span><br><span class="line">q.rbegin() <span class="comment">//返回指向第一个元素的逆向迭代器</span></span><br><span class="line">q.rend() <span class="comment">//指向list末尾的逆向迭代器</span></span><br></pre></td></tr></table></figure><h3 id="查找迭代器"><a href="#查找迭代器" class="headerlink" title="查找迭代器"></a>查找迭代器</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">q.get_allocator() <span class="comment">//返回list的配置器</span></span><br></pre></td></tr></table></figure><h2 id="反转list"><a href="#反转list" class="headerlink" title="反转list"></a>反转list</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">q.reverse() &#x2F;&#x2F;把list的元素倒转 void reverse ( );</span><br></pre></td></tr></table></figure><h2 id="合并两个list"><a href="#合并两个list" class="headerlink" title="合并两个list"></a>合并两个list</h2><p>STL list容器由于采用了双向迭代器，不支持随机访问，所以标准库的merge(), sort()等功能函数都不适用，list单独实现了merge()，sort()等函数。<br><code>splice与merge</code></p><ul><li>最大的不同:不用排序，也不要求原始链表有序。</li><li>相同点:被合并的链表或元素将消失。</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">q.merge(p);       合并2个有序的链表并使之有序,从新放到q中,释放p。</span><br><span class="line">q.merge(p,comp);  合并2个有序的链表并使之按照自定义规则排序之后从新放到q中,释放p。</span><br><span class="line">q.splice() &#x2F;&#x2F;合并两个list</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">list1.merge(list2)</span><br><span class="line">在使用merge前，必须使list1和list2已经排好顺序。并且，合并之后list1仍然是有序的</span><br></pre></td></tr></table></figure><p>splice是剪切，粘贴。用splice时当B与A合并后，B就为空。但是要记住：迭代器仍然指向原来的位置，即使原来的元素不存在了。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">将list2中的所有元素拷贝到list1中。在list1中的起始位置是it1.复制结束后，list2将为空。</span><br><span class="line">list1.splice(it1, list2); </span><br><span class="line"></span><br><span class="line">将list2中的元素，从it2开始，剪切到list1的it1起始的地方。</span><br><span class="line">list1.splice(it1, list2, it2);</span><br><span class="line"></span><br><span class="line">将链表list2从开始到结束都合并到it1开始的位置。</span><br><span class="line">list1.splice(it1, list2, it2begin, it2end);</span><br></pre></td></tr></table></figure><h2 id="排序sort"><a href="#排序sort" class="headerlink" title="排序sort()"></a>排序sort()</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">q.sort()     给list排序  返回值为空</span><br></pre></td></tr></table></figure><p>一个自定义的类，那么如果想为这个类所生成的对象排序的话，因为list.sort()默认排序需要重载 &lt; 操作符。所以我们必须在类对象里重载这个操作符</p><h2 id="删除list中重复的元素unique"><a href="#删除list中重复的元素unique" class="headerlink" title="删除list中重复的元素unique()"></a>删除list中重复的元素unique()</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">q.unique()  删除<span class="built_in">list</span>中重复的元素 返回值为空</span><br></pre></td></tr></table></figure><h2 id="输出"><a href="#输出" class="headerlink" title="输出"></a>输出</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">copy(q.begin(),q.end(),ostream_iterator&lt;<span class="keyword">int</span>&gt;(<span class="built_in">cout</span>,<span class="string">""</span>));</span><br></pre></td></tr></table></figure><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p><a href="https://blog.csdn.net/holdsky/article/details/8880962">STL 如何使用list::remove_if</a><br><a href="https://blog.csdn.net/fengguowuhengwin/article/details/12979327">容器链表中splice()、merge()、insert()方法的区别</a><br><a href="https://www.cnblogs.com/yelongsan/p/4049698.html">c++ list 合并list</a><br><a href="https://blog.csdn.net/baidu_35679960/article/details/79592318">STL 中list的sort()方法使用总结(运算符重载)</a><br><a href="https://blog.csdn.net/Dreamer_lsf/article/details/84">C++ list.merge()使用方法</a><br><a href="https://blog.csdn.net/qq_42673507/article/details/86678625">stl list中erase和remove区别</a><br><a href="https://blog.csdn.net/u010913001/article/details/78272751">std::list::sort()排序分析</a><br><a href="http://c.biancheng.net/view/440.html">C++ list(STL list)使用、创建和初始化</a><br><a href="https://stemha.github.io/2020/05/10/C++%E6%A0%87%E5%87%86%E5%BA%93%E5%AE%B9%E5%99%A8%E7%B1%BB%E6%A6%82%E8%BF%B0/#more">C++标准库容器类概述</a></p><h2 id="本文许可证"><a href="#本文许可证" class="headerlink" title="本文许可证"></a>本文许可证</h2><p>本文遵循 <a href="https://github.com/huihut/interview/blob/master/LICENSE">CC BY-NC-SA 4.0</a>（署名 - 非商业性使用 - 相同方式共享） 协议，转载请注明出处，不得用于商业目的。<br><a href="LICENSE"><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9pLmNyZWF0aXZlY29tbW9ucy5vcmcvbC9ieS1uYy1zYS80LjAvODh4MzEucG5n?x-oss-process=image/format,png" alt="CC BY-NC-SA 4.0"></a></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;基本概念&quot;&gt;&lt;a href=&quot;#基本概念&quot; class=&quot;headerlink&quot; title=&quot;基本概念&quot;&gt;&lt;/a&gt;基本概念&lt;/h2&gt;&lt;p&gt;list&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;底层数据结构为双向链表，支持快速增删&lt;/li&gt;
&lt;li&gt;缺点是无法通过位置来直接访问序列中的元素，也就是说，不能索引元素。为了访问 list 内部的一个元素，必须一个一个地遍历元素，通常从第一个元素或最后一个元素开始遍历。&lt;/li&gt;
&lt;li&gt;节点对象维护了两个指针，一个指向前一个节点，另一个指向下一个节点。&lt;/li&gt;
&lt;li&gt;第一个元素的前向指针总是为 null,因为它前面没有元素，尾部元素的后向指针也总为 null。&lt;/li&gt;&lt;/ul&gt;
    
    </summary>
    
    
      <category term="C++" scheme="https://stemha.github.io/categories/C/"/>
    
    
      <category term="C++标准库" scheme="https://stemha.github.io/tags/C-%E6%A0%87%E5%87%86%E5%BA%93/"/>
    
      <category term="list" scheme="https://stemha.github.io/tags/list/"/>
    
  </entry>
  
  <entry>
    <title>map常用操作</title>
    <link href="https://stemha.github.io/2020/05/19/map%E5%B8%B8%E7%94%A8%E6%93%8D%E4%BD%9C/"/>
    <id>https://stemha.github.io/2020/05/19/map%E5%B8%B8%E7%94%A8%E6%93%8D%E4%BD%9C/</id>
    <published>2020-05-19T09:55:56.000Z</published>
    <updated>2020-05-24T08:16:55.838Z</updated>
    
    <content type="html"><![CDATA[<h2 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h2><p>map</p><ul><li>map不能直接修改关键字，只能通过修改关键字的值间接修改关键字。</li><li>底层数据结构为红黑树，有序，不重复</li><li>map&lt;K，T&gt; 类模板定义在 map 文件头中，它定义了一个保存 T 类型对象的 map，每个 T 类型的对象都有一个关联的 K 类型的键。容器内对象的位置是通过比较键决定的。<a id="more"></a></li></ul><h2 id="头文件"><a href="#头文件" class="headerlink" title="头文件"></a>头文件</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta"># <span class="meta-keyword">include</span><span class="meta-string">&lt;map&gt;</span></span></span><br></pre></td></tr></table></figure><h2 id="模板"><a href="#模板" class="headerlink" title="模板"></a>模板</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt; <span class="class"><span class="keyword">class</span> <span class="title">Key</span>, <span class="title">class</span> <span class="title">T</span>, <span class="title">class</span> <span class="title">Pred</span> = <span class="title">less</span>&lt;Key&gt;, <span class="title">class</span> <span class="title">A</span> = <span class="title">allocator</span>&lt;T&gt; &gt;</span></span><br><span class="line"><span class="class"><span class="title">class</span> <span class="title">map</span>&#123;</span></span><br><span class="line">    ...</span><br><span class="line">    <span class="keyword">typedef</span> pair&lt; <span class="keyword">const</span> Key, T &gt; value_type;</span><br><span class="line">    ...</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">经常使用的，默认是less</span><br><span class="line"><span class="built_in">map</span>&lt;<span class="keyword">int</span>,<span class="keyword">double</span>,less&lt;<span class="keyword">int</span>&gt; &gt; MYMAP;      元素升序</span><br><span class="line"><span class="built_in">map</span>&lt;<span class="keyword">int</span>,<span class="keyword">double</span>,greater&lt;<span class="keyword">int</span>&gt; &gt; MYMAP;   元素降序</span><br></pre></td></tr></table></figure><h2 id="pair初始化方法"><a href="#pair初始化方法" class="headerlink" title="pair初始化方法"></a><strong>pair初始化方法</strong></h2><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">map</span>&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt; q;</span><br><span class="line"><span class="built_in">map</span>&lt;k, v&gt; m;    创建一个名为 m 的空 <span class="built_in">map</span> 对象，其键和值的类型分别为 k 和 v</span><br><span class="line">map&lt;k, v&gt; m(m2);创建 m2 的副本 m，m 与 m2 必须有相同的键类型和值类型</span><br><span class="line">map&lt;k, v&gt; m(b, e);创建 map 类型的对象 m，存储迭代器 b 和 e 标记的范围内所有元素的副本。元素的类型必须能转换为 pair&lt;const k, v&gt;</span><br></pre></td></tr></table></figure><h2 id="交换"><a href="#交换" class="headerlink" title="交换"></a>交换</h2><p><code>swap(map&lt;K,V&gt;&amp; other)</code>：和参数的元素进行交换，所包含对象的类型必须相同。：将当前 map 中的元素和参数 map 中的元素交换。它们需要包含相同类型的元素。也可以调用全局函数模板 swap() 来完成同样的操作。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T1</span>, <span class="title">class</span> <span class="title">T2</span>&gt; <span class="title">void</span> <span class="title">swap</span>(<span class="title">map</span>&lt;K,V&gt; &amp;<span class="title">x</span>)　重载1：<span class="title">x</span>.<span class="title">swap</span>(<span class="title">y</span>)</span></span><br><span class="line"><span class="class"><span class="title">template</span> &lt;class T1, class T2&gt; <span class="title">void</span> <span class="title">swap</span> (<span class="title">map</span>&lt;K,V&gt;&amp; <span class="title">x</span>, <span class="title">map</span>&lt;K,V&gt;&amp; <span class="title">y</span>)  重载2:</span> swap(x, y)</span><br></pre></td></tr></table></figure><h2 id="map定义的类型"><a href="#map定义的类型" class="headerlink" title="map定义的类型"></a>map定义的类型</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">map</span>&lt;K,V&gt;::key_type    在 <span class="built_in">map</span> 容器中，用做索引的键的类型</span><br><span class="line"><span class="built_in">map</span>&lt;K,V&gt;::mapped_type在 <span class="built_in">map</span> 容器中，键所关联的值的类型</span><br><span class="line"><span class="built_in">map</span>&lt;K,V&gt;::value_type一个 pair 类型，它的first 元素具有 <span class="keyword">const</span> <span class="built_in">map</span>&lt;K,V&gt;::key_type 类型，而 second 元素则为 <span class="built_in">map</span>&lt;K,V&gt;::mapped_type 类型</span><br></pre></td></tr></table></figure><h2 id="常用操作"><a href="#常用操作" class="headerlink" title="常用操作"></a><strong>常用操作</strong></h2><h2 id="使用下标访问-map-对象"><a href="#使用下标访问-map-对象" class="headerlink" title="使用下标访问 map 对象"></a>使用下标访问 map 对象</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">map</span> &lt;<span class="built_in">string</span>, <span class="keyword">int</span>&gt; word_count; <span class="comment">// empty map</span></span><br><span class="line"><span class="comment">// insert default initialzed element with key Anna; then assign 1 to its value</span></span><br><span class="line">word_count[<span class="string">"Anna"</span>] = <span class="number">1</span>;  存在则改变，不存在则加入</span><br></pre></td></tr></table></figure><h3 id="查找"><a href="#查找" class="headerlink" title="查找"></a>查找</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">map</span>&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt;q;</span><br><span class="line"></span><br><span class="line">q.insert(pair&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt;(<span class="number">1</span>,<span class="number">2</span>)); <span class="comment">//通过pair进行插入操作</span></span><br><span class="line">q.insert(<span class="built_in">map</span>&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt;::value_type (<span class="number">1</span>,<span class="number">2</span>));<span class="comment">//通过value_type进行插入</span></span><br><span class="line">q[<span class="number">1</span>] = <span class="number">2</span>; <span class="comment">//用数组方式进行插入</span></span><br><span class="line">三者不同的是，当<span class="built_in">map</span>存在这个关键字时数组方式会覆盖关键字的值，而insert操作无法插入。</span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">m.insert(e)e 是一个用在 m 上的 value_type 类型的值。如果键（e.first）不在 m 中，则插入一个值为 e.second 的新元素；如果该键在 m 中已存在，则保持 m 不变。该函数返回一个pair 类型对象，包含指向键为 e.first 的元素的 <span class="built_in">map</span> 迭代器，以及一个 <span class="keyword">bool</span> 类型的对象，表示是否插入了该元素</span><br><span class="line">m.insert(beg,end)beg 和 end 是标记元素范围的迭代器，其中的元素必须为m.value_type 类型的键－值对。对于该范围内的所有元素，如果它的键在 m 中不存在，则将该键及其关联的值插入到 m。(返回 <span class="keyword">void</span> 类型)</span><br><span class="line">m.insert(iter,e)e 是一个用在 m 上的 value_type 类型的值。如果键（e.first）不在 m 中，则创建新元素，并以迭代器 iter 为起点搜索新元素存储的位置。(返回一个迭代器，指向 m 中具有给定键的元素)。</span><br></pre></td></tr></table></figure><h2 id="比较函数"><a href="#比较函数" class="headerlink" title="比较函数"></a>比较函数</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">q.key_comp();   返回比较元素key的函数</span><br><span class="line">q.value_comp(); 返回比较元素value的函数</span><br></pre></td></tr></table></figure><h3 id="大小与是否为空"><a href="#大小与是否为空" class="headerlink" title="大小与是否为空"></a>大小与是否为空</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">q.size();      返回容器内元素个数</span><br><span class="line">q.empty();     判断容器是否为空</span><br><span class="line">q.max_size();  返回可以容纳的最大元素个数</span><br></pre></td></tr></table></figure><h3 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">q.erase(iter); 删除迭代器iter的元素</span><br><span class="line">q.erase(iter1,iter2);删除[iter1,iter2)区间内的元素</span><br><span class="line">q.erase(key);  删除关键字为key的元素</span><br><span class="line">q.clear();     清空容器</span><br></pre></td></tr></table></figure><h3 id="查找和计数"><a href="#查找和计数" class="headerlink" title="查找和计数"></a>查找和计数</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">q.count(k)返回 m 中 k 的出现次数,（<span class="built_in">map</span>中有则返回<span class="number">1</span>，否则<span class="number">0</span>）</span><br><span class="line">q.find(k)如果 m 容器中存在按 k 索引的元素，则返回指向该元素的迭代器。如果不存在，则返回超出末端迭代器</span><br></pre></td></tr></table></figure><h2 id="使用-count-检查-map-对象中某键是否存在"><a href="#使用-count-检查-map-对象中某键是否存在" class="headerlink" title="使用 count 检查 map 对象中某键是否存在"></a>使用 count 检查 map 对象中某键是否存在</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> occurs = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span> (word_count.count(<span class="string">"foobar"</span>))</span><br><span class="line">occurs = word_count[<span class="string">"foobar"</span>];</span><br></pre></td></tr></table></figure><h3 id="迭代器"><a href="#迭代器" class="headerlink" title="迭代器"></a>迭代器</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">q.begin(); <span class="comment">//返回头位置迭代器</span></span><br><span class="line">q.end(); <span class="comment">//返回尾位置迭代器</span></span><br><span class="line">q.rbegin(); <span class="comment">//返回尾部反向迭代器</span></span><br><span class="line">q.rend(); <span class="comment">//返回头部反向迭代器</span></span><br></pre></td></tr></table></figure><h3 id="查找迭代器"><a href="#查找迭代器" class="headerlink" title="查找迭代器"></a>查找迭代器</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">m.lower_bound();返回键值&gt;=给定元素的第一个位置 返回一个迭代器</span><br><span class="line">m.upper_bound();返回键值&gt;给定元素的第一个位置 返回一个迭代器</span><br><span class="line">m.equal_range();返回一个迭代器的 pair 对象。它的 first 成员等价于 m.lower_bound(k)。而 second 成员则等价于 m.upper_bound(k)</span><br></pre></td></tr></table></figure><h3 id="初始化为0"><a href="#初始化为0" class="headerlink" title="初始化为0"></a>初始化为0</h3><p>使用C++中的map容器定义一个mp，当你执行if语句判断mp[3]是否为1时，那么如果mp[3]以前不存在，此时mp[3]就会被无参初始化，second赋值为0。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; numbers;</span><br><span class="line"><span class="keyword">int</span> n = numbers.size();</span><br><span class="line"></span><br><span class="line">    <span class="built_in">map</span>&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; m;</span><br><span class="line">    <span class="keyword">int</span> count;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        count = ++m[numbers[i]]; <span class="comment">//这里原来元素是不存在的，但是却可以直接加1；</span></span><br><span class="line">        <span class="keyword">if</span> (count &gt; n/<span class="number">2</span>) <span class="keyword">return</span> numbers[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p><a href="https://www.cnblogs.com/forcheryl/p/3986026.html">关于map容器的元素被无参初始化</a><br><a href="https://blog.csdn.net/engineerxin/article/details/104779786">《C++Primer》第十章-关联容器-学习笔记(1)-pair&amp;map</a><br><a href="http://c.biancheng.net/view/488.html">C++ map是什么</a><br><a href="https://stemha.github.io/2020/05/10/C++%E6%A0%87%E5%87%86%E5%BA%93%E5%AE%B9%E5%99%A8%E7%B1%BB%E6%A6%82%E8%BF%B0/#more">C++标准库容器类概述</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;基本概念&quot;&gt;&lt;a href=&quot;#基本概念&quot; class=&quot;headerlink&quot; title=&quot;基本概念&quot;&gt;&lt;/a&gt;基本概念&lt;/h2&gt;&lt;p&gt;map&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;map不能直接修改关键字，只能通过修改关键字的值间接修改关键字。&lt;/li&gt;
&lt;li&gt;底层数据结构为红黑树，有序，不重复&lt;/li&gt;
&lt;li&gt;map&amp;lt;K，T&amp;gt; 类模板定义在 map 文件头中，它定义了一个保存 T 类型对象的 map，每个 T 类型的对象都有一个关联的 K 类型的键。容器内对象的位置是通过比较键决定的。&lt;/li&gt;&lt;/ul&gt;
    
    </summary>
    
    
      <category term="C++" scheme="https://stemha.github.io/categories/C/"/>
    
    
      <category term="C++标准库" scheme="https://stemha.github.io/tags/C-%E6%A0%87%E5%87%86%E5%BA%93/"/>
    
      <category term="map" scheme="https://stemha.github.io/tags/map/"/>
    
  </entry>
  
  <entry>
    <title>pair常用操作</title>
    <link href="https://stemha.github.io/2020/05/19/pair%E5%B8%B8%E7%94%A8%E6%93%8D%E4%BD%9C/"/>
    <id>https://stemha.github.io/2020/05/19/pair%E5%B8%B8%E7%94%A8%E6%93%8D%E4%BD%9C/</id>
    <published>2020-05-19T08:34:01.000Z</published>
    <updated>2020-05-19T08:36:29.124Z</updated>
    
    <content type="html"><![CDATA[<h2 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h2><p>pair</p><ul><li>pair 是一个比较简单的模板类型，它只有两个 public 数据成员 first 和 second。</li><li>pair 对象可以封装任意类型的对象，可以生成任何想生成的 pair&lt;T1,T2&gt; 对象，可以是数组对象或者包含 pair&lt;T1,T2&gt; 的 vector 容器。例如，pair 可以封装两个序列容器或两个序列容器的指针。pair&lt;T1，T2&gt; 模板定义在 utility 头文件中，如果不想使用 map 而只想使用 pair 对象，可以包含这个头文件。 </li></ul><h2 id="头文件"><a href="#头文件" class="headerlink" title="头文件"></a>头文件</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta"># <span class="meta-keyword">include</span><span class="meta-string">&lt;utility&gt;</span></span></span><br><span class="line">或者</span><br><span class="line"><span class="meta"># <span class="meta-keyword">include</span><span class="meta-string">&lt;map&gt;</span></span></span><br></pre></td></tr></table></figure><a id="more"></a><h2 id="模板"><a href="#模板" class="headerlink" title="模板"></a>模板</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pair&lt;const K, T&gt; q;</span><br></pre></td></tr></table></figure><h2 id="pair初始化方法"><a href="#pair初始化方法" class="headerlink" title="pair初始化方法"></a><strong>pair初始化方法</strong></h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">pair&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt;q;       创建一个空对</span><br><span class="line">pair&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt;p(<span class="number">2</span>,<span class="number">3</span>);  创建一个对p，并分别赋值<span class="number">2</span>，<span class="number">3</span></span><br><span class="line">pair&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt;s(p);    创建一个对s，拷贝p给s</span><br><span class="line">pair&lt;<span class="built_in">string</span>, <span class="built_in">string</span>&gt; anon; <span class="comment">// holds two strings</span></span><br><span class="line">pair&lt;<span class="built_in">string</span>, <span class="keyword">int</span>&gt; word_count; <span class="comment">// holds a string and an int</span></span><br><span class="line">pair&lt;<span class="built_in">string</span>, <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &gt; line; <span class="comment">// holds string and vector&lt;int&gt;</span></span><br><span class="line"></span><br><span class="line">赋值利用make_pair函数</span><br><span class="line">q = make_pair(<span class="number">1</span>,<span class="number">2</span>);</span><br></pre></td></tr></table></figure><p>如果在创建 pair 对象时不提供初始化式，则调用默认构造函数对其成员采用值初始化。int初始化为0，string初始化为空；</p><h2 id="交换"><a href="#交换" class="headerlink" title="交换"></a>交换</h2><p><code>swap(pair&lt;T1,T2&gt;&amp; other)</code>：和参数的元素进行交换，所包含对象的类型必须相同。：将当前 set 中的元素和参数 set 中的元素交换。它们需要包含相同类型的元素。也可以调用全局函数模板 swap() 来完成同样的操作。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T1</span>, <span class="title">class</span> <span class="title">T2</span>&gt; <span class="title">void</span> <span class="title">swap</span>(<span class="title">pair</span>&lt;T1,T2&gt; &amp;<span class="title">x</span>)　重载1：<span class="title">x</span>.<span class="title">swap</span>(<span class="title">y</span>)</span></span><br><span class="line"><span class="class"><span class="title">template</span> &lt;class T1, class T2&gt; <span class="title">void</span> <span class="title">swap</span> (<span class="title">pair</span>&lt;T1,T2&gt;&amp; <span class="title">x</span>, <span class="title">pair</span>&lt;T1,T2&gt;&amp; <span class="title">y</span>)  重载2:</span> swap(x, y)</span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">std::pair&lt;int,char&gt; foo (10,'a');</span><br><span class="line">std::pair&lt;int,char&gt; bar (90,'z');</span><br><span class="line">swap (foo,bar);</span><br></pre></td></tr></table></figure><h2 id="常用操作"><a href="#常用操作" class="headerlink" title="常用操作"></a><strong>常用操作</strong></h2><h3 id="查找"><a href="#查找" class="headerlink" title="查找"></a>查找</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">访问pair内元素操作</span><br><span class="line"> q.first;  返回成员第一个数据</span><br><span class="line"> q.second; 返回成员第二个数据</span><br></pre></td></tr></table></figure><h3 id="比较"><a href="#比较" class="headerlink" title="比较"></a>比较</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">p1 == p2如果两个 pair 对象的 first 和 second 成员依次相等，则这两个对象相等。该运算使用其元素的 == 操作符</span><br></pre></td></tr></table></figure><p>在<utility>中已经定义了pair上的六个比较运算符：<code>&lt;、&gt;、&lt;=、&gt;=、==、!=</code>，其规则是先比较first，first相等时再比较second，这符合大多数应用的逻辑</utility></p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p><a href="https://blog.csdn.net/mlm5678/article/details/82721331">STL之pair类型详细分析</a><br><a href="http://c.biancheng.net/view/537.html">C++ set初始化（STL set初始化）详解</a><br><a href="https://stemha.github.io/2020/05/10/C++%E6%A0%87%E5%87%86%E5%BA%93%E5%AE%B9%E5%99%A8%E7%B1%BB%E6%A6%82%E8%BF%B0/#more">C++标准库容器类概述</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;基本概念&quot;&gt;&lt;a href=&quot;#基本概念&quot; class=&quot;headerlink&quot; title=&quot;基本概念&quot;&gt;&lt;/a&gt;基本概念&lt;/h2&gt;&lt;p&gt;pair&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;pair 是一个比较简单的模板类型，它只有两个 public 数据成员 first 和 second。&lt;/li&gt;
&lt;li&gt;pair 对象可以封装任意类型的对象，可以生成任何想生成的 pair&amp;lt;T1,T2&amp;gt; 对象，可以是数组对象或者包含 pair&amp;lt;T1,T2&amp;gt; 的 vector 容器。例如，pair 可以封装两个序列容器或两个序列容器的指针。pair&amp;lt;T1，T2&amp;gt; 模板定义在 utility 头文件中，如果不想使用 map 而只想使用 pair 对象，可以包含这个头文件。 &lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;头文件&quot;&gt;&lt;a href=&quot;#头文件&quot; class=&quot;headerlink&quot; title=&quot;头文件&quot;&gt;&lt;/a&gt;头文件&lt;/h2&gt;&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;# &lt;span class=&quot;meta-keyword&quot;&gt;include&lt;/span&gt;&lt;span class=&quot;meta-string&quot;&gt;&amp;lt;utility&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;或者&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;# &lt;span class=&quot;meta-keyword&quot;&gt;include&lt;/span&gt;&lt;span class=&quot;meta-string&quot;&gt;&amp;lt;map&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="C++" scheme="https://stemha.github.io/categories/C/"/>
    
    
      <category term="C++标准库" scheme="https://stemha.github.io/tags/C-%E6%A0%87%E5%87%86%E5%BA%93/"/>
    
      <category term="pair" scheme="https://stemha.github.io/tags/pair/"/>
    
  </entry>
  
  <entry>
    <title>set常用操作</title>
    <link href="https://stemha.github.io/2020/05/19/set%E5%B8%B8%E7%94%A8%E6%93%8D%E4%BD%9C/"/>
    <id>https://stemha.github.io/2020/05/19/set%E5%B8%B8%E7%94%A8%E6%93%8D%E4%BD%9C/</id>
    <published>2020-05-19T07:30:19.000Z</published>
    <updated>2020-05-24T15:43:18.918Z</updated>
    
    <content type="html"><![CDATA[<h2 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h2><p>set是一个关联容器类型，用于以升序方式存储唯一值。</p><ul><li>属于关联容器（关联容器通过键（key）存储和读取元素，而顺序容器则通过元素在容器中的位置顺序存储和访问元素。）<a id="more"></a> </li></ul><h3 id="特性"><a href="#特性" class="headerlink" title="特性"></a><strong>特性</strong></h3><ul><li>遵循数学集合三特性，互异性、无序性、确定性。</li><li>底层数据结构为红黑树，有序，不重复</li><li>set 容器只是单纯的键的集合。每个元素仅包含一个键(key)，并有效地支持关于某个键是否存在的查询</li><li>set 容器存储的键也必须唯一，而且不能修改</li><li>set 容器以<strong>升序方式存储唯一值</strong></li><li>set 不支持下标操作符</li><li>和map一样，set无法存储无法比较大小的数据；</li></ul><h2 id="头文件"><a href="#头文件" class="headerlink" title="头文件"></a>头文件</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta"># <span class="meta-keyword">include</span><span class="meta-string">&lt;set&gt;</span></span></span><br></pre></td></tr></table></figure><h2 id="模板"><a href="#模板" class="headerlink" title="模板"></a>模板</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">set&lt;int,greater&lt;int&gt; &gt;q;</span><br></pre></td></tr></table></figure><h2 id="set初始化方法"><a href="#set初始化方法" class="headerlink" title="set初始化方法"></a><strong>set初始化方法</strong></h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">set</span>&lt;<span class="keyword">int</span>&gt;q;</span><br><span class="line"><span class="built_in">set</span>&lt;<span class="keyword">int</span>&gt; numbers &#123;<span class="number">8</span>, <span class="number">7</span>, <span class="number">6</span>, <span class="number">5</span>, <span class="number">4</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">1</span>&#125;;</span><br></pre></td></tr></table></figure><h3 id="小的在前（less）-大的在前（greater）"><a href="#小的在前（less）-大的在前（greater）" class="headerlink" title="小的在前（less）/大的在前（greater）"></a>小的在前（less）/大的在前（greater）</h3><p><strong>默认的比较函数是 less<int>，因此容器中的元素会升序排列。</int></strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">set</span>&lt;<span class="keyword">int</span>, less&lt;<span class="keyword">int</span>&gt;&gt; set1;    小的在前（less），升序</span><br><span class="line"><span class="built_in">set</span>&lt;<span class="keyword">int</span>, greater&lt;<span class="keyword">int</span>&gt;&gt; set1; 大的在前（greater），降序</span><br></pre></td></tr></table></figure><p>参考：<a href="https://blog.csdn.net/m0_45867846/article/details/105448065">C++ STL set greater less详解</a></p><h2 id="交换"><a href="#交换" class="headerlink" title="交换"></a>交换</h2><p><code>swap(set&lt;T&gt;&amp; other)</code>：和参数的元素进行交换，所包含对象的类型必须相同。：将当前 set 中的元素和参数 set 中的元素交换。它们需要包含相同类型的元素。也可以调用全局函数模板 swap() 来完成同样的操作。</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">void swap(set&lt;T&gt; &amp;x)　重载1：x.swap(y)</span><br><span class="line">void swap(set&lt;T&gt; &amp;x, set&lt;T&gt; &amp;y)  重载2: swap(x, y)</span><br></pre></td></tr></table></figure><h2 id="常用操作"><a href="#常用操作" class="headerlink" title="常用操作"></a><strong>常用操作</strong></h2><h3 id="插入"><a href="#插入" class="headerlink" title="插入"></a>插入</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> a[] = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>&#125;;</span><br><span class="line"><span class="built_in">set</span>&lt;<span class="keyword">int</span>&gt;q;</span><br><span class="line"></span><br><span class="line">q.insert(elem));     集合中插入元素</span><br><span class="line">q.insert(a,a+<span class="number">5</span>);     插入数组a至a+<span class="number">5</span>的元素</span><br><span class="line">q.insert(pos, elem); 在容器中插入元素elem的一份拷贝，并返回新元素的iterator位置； </span><br><span class="line">q.insert(beg, end);  在容器中插入[beg, end)范围中所有元素的拷贝，没有返回值。</span><br></pre></td></tr></table></figure><h3 id="删除与清空"><a href="#删除与清空" class="headerlink" title="删除与清空"></a>删除与清空</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">q.erase(iterator pos); 删除集合中的元素 无返回值</span><br><span class="line">删除后pos不会自动++！被删除元素的迭代器，在删除之后失效！这里是和<span class="built_in">vector</span>的区别</span><br><span class="line"></span><br><span class="line">q.erase(iterator first, iterator last); 移除迭代区间[first,last)内的所有元素，无返回值</span><br><span class="line">q.erase(value);         移除<span class="built_in">set</span>容器内元素值为value的所有元素，返回移除元素的个数(size_type类型)</span><br><span class="line">q.clear();              删除<span class="built_in">set</span>容器中的所有的元素，无返回值</span><br></pre></td></tr></table></figure><h3 id="大小-是否为空"><a href="#大小-是否为空" class="headerlink" title="大小/是否为空"></a>大小/是否为空</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">q.size();     返回当前<span class="built_in">set</span>容器中的元素个数</span><br><span class="line">q.max_size(); 返回<span class="built_in">set</span>容器可能包含的元素最大个数</span><br><span class="line">q.empty();    判断<span class="built_in">set</span>容器是否为空</span><br></pre></td></tr></table></figure><h3 id="find和count"><a href="#find和count" class="headerlink" title="find和count"></a>find和count</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">q.find(element); 返回element值位置的迭代器，找不到返回q.end()</span><br><span class="line">q.count();       返回某个值元素的个数(根据<span class="built_in">set</span>的特性，就是判断这个元素在不在，返回<span class="number">0</span>或<span class="number">1</span>)</span><br></pre></td></tr></table></figure><h3 id="迭代器"><a href="#迭代器" class="headerlink" title="迭代器"></a>迭代器</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">q.begin();   <span class="comment">//返回头位置迭代器</span></span><br><span class="line">q.end();     <span class="comment">//返回尾位置迭代器</span></span><br><span class="line">q.rbegin();  <span class="comment">//返回尾部反向迭代器 注意是set&lt;int,greater&lt;int&gt;&gt;::reverse_iterator</span></span><br><span class="line">q.rend();    <span class="comment">//返回头部反向迭代器</span></span><br></pre></td></tr></table></figure><h3 id="大于等于元素的迭代器"><a href="#大于等于元素的迭代器" class="headerlink" title="大于等于元素的迭代器"></a>大于等于元素的迭代器</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">q.lower_bound(); 返回指向大于（或等于）某值的第一个元素的迭代器</span><br><span class="line">q.upper_bound(); 返回大于某个值元素的迭代器</span><br></pre></td></tr></table></figure><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p><a href="http://c.biancheng.net/view/537.html">C++ set初始化（STL set初始化）详解</a><br><a href="https://stemha.github.io/2020/05/10/C++%E6%A0%87%E5%87%86%E5%BA%93%E5%AE%B9%E5%99%A8%E7%B1%BB%E6%A6%82%E8%BF%B0/#more">C++标准库容器类概述</a><br><a href="https://blog.csdn.net/m0_45867846/article/details/105448065">C++ STL set greater less详解</a></p><h2 id="本文许可证"><a href="#本文许可证" class="headerlink" title="本文许可证"></a>本文许可证</h2><p>本文遵循 <a href="https://github.com/huihut/interview/blob/master/LICENSE">CC BY-NC-SA 4.0</a>（署名 - 非商业性使用 - 相同方式共享） 协议，转载请注明出处，不得用于商业目的。<br><a href="LICENSE"><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9pLmNyZWF0aXZlY29tbW9ucy5vcmcvbC9ieS1uYy1zYS80LjAvODh4MzEucG5n?x-oss-process=image/format,png" alt="CC BY-NC-SA 4.0"></a></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;基本概念&quot;&gt;&lt;a href=&quot;#基本概念&quot; class=&quot;headerlink&quot; title=&quot;基本概念&quot;&gt;&lt;/a&gt;基本概念&lt;/h2&gt;&lt;p&gt;set是一个关联容器类型，用于以升序方式存储唯一值。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;属于关联容器（关联容器通过键（key）存储和读取元素，而顺序容器则通过元素在容器中的位置顺序存储和访问元素。）&lt;/li&gt;&lt;/ul&gt;
    
    </summary>
    
    
      <category term="C++" scheme="https://stemha.github.io/categories/C/"/>
    
    
      <category term="C++标准库" scheme="https://stemha.github.io/tags/C-%E6%A0%87%E5%87%86%E5%BA%93/"/>
    
      <category term="set" scheme="https://stemha.github.io/tags/set/"/>
    
  </entry>
  
  <entry>
    <title>priority_queue常用操作</title>
    <link href="https://stemha.github.io/2020/05/19/priority-queue%E5%B8%B8%E7%94%A8%E6%93%8D%E4%BD%9C/"/>
    <id>https://stemha.github.io/2020/05/19/priority-queue%E5%B8%B8%E7%94%A8%E6%93%8D%E4%BD%9C/</id>
    <published>2020-05-18T18:24:43.000Z</published>
    <updated>2020-05-24T13:47:28.852Z</updated>
    
    <content type="html"><![CDATA[<h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><p><code>priority_queue容器适配器</code>定义了一个元素有序排列的队列。</p><ul><li>默认队列头部的元素优先级最高。<ul><li>因为它是一个队列，所以只能访问第一个元素，这也意味着优先级最高的元素总是第一个被处理。</li></ul></li><li>如何定义“优先级”完全取决于我们自己。<a id="more"></a></li></ul><h2 id="模板"><a href="#模板" class="headerlink" title="模板"></a>模板</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">priority_queue&lt;int,vector&lt;int&gt;,greater&lt;int&gt; &gt;q;</span><br></pre></td></tr></table></figure><h2 id="priority-queue初始化方法"><a href="#priority-queue初始化方法" class="headerlink" title="priority_queue初始化方法"></a><strong>priority_queue初始化方法</strong></h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">队列的排序，右边是出队列的地方</span><br><span class="line">priority_queue&lt;<span class="keyword">int</span>&gt;q;  经常使用的，默认是less，元素大的优先级高。</span><br><span class="line">priority_queue&lt;<span class="keyword">int</span>,<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;,greater&lt;<span class="keyword">int</span>&gt; &gt;q; 元素小的优先级高。</span><br></pre></td></tr></table></figure><h2 id="交换"><a href="#交换" class="headerlink" title="交换"></a>交换</h2><p><code>swap(priority_queue&lt;T&gt;&amp; other)</code>：和参数的元素进行交换，所包含对象的类型必须相同。：将当前 queue 中的元素和参数 priority_queue 中的元素交换。它们需要包含相同类型的元素。也可以调用全局函数模板 swap() 来完成同样的操作。</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">void swap(priority_queue&lt;T&gt; &amp;x)　重载1：x.swap(y)</span><br><span class="line">void swap(priority_queue&lt;T&gt; &amp;x, priority_queue&lt;T&gt; &amp;y)  重载2: swap(x, y)</span><br></pre></td></tr></table></figure><h2 id="常用操作"><a href="#常用操作" class="headerlink" title="常用操作"></a><strong>常用操作</strong></h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">q.push(element); 入优先级队列</span><br><span class="line">q.pop();         出优先级队列</span><br><span class="line">q.top();         返回优先级队列头成员</span><br><span class="line">q.size();        返回优先级队列成员个数</span><br><span class="line">q.empty();       是否为空</span><br></pre></td></tr></table></figure><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p><a href="http://c.biancheng.net/view/480.html">C++ priority_queue(STL priority_queue)用法详解</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;概念&quot;&gt;&lt;a href=&quot;#概念&quot; class=&quot;headerlink&quot; title=&quot;概念&quot;&gt;&lt;/a&gt;概念&lt;/h2&gt;&lt;p&gt;&lt;code&gt;priority_queue容器适配器&lt;/code&gt;定义了一个元素有序排列的队列。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;默认队列头部的元素优先级最高。&lt;ul&gt;
&lt;li&gt;因为它是一个队列，所以只能访问第一个元素，这也意味着优先级最高的元素总是第一个被处理。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;如何定义“优先级”完全取决于我们自己。&lt;/li&gt;&lt;/ul&gt;
    
    </summary>
    
    
      <category term="C++" scheme="https://stemha.github.io/categories/C/"/>
    
    
      <category term="C++标准库" scheme="https://stemha.github.io/tags/C-%E6%A0%87%E5%87%86%E5%BA%93/"/>
    
      <category term="priority_queue" scheme="https://stemha.github.io/tags/priority-queue/"/>
    
  </entry>
  
  <entry>
    <title>queue常用操作</title>
    <link href="https://stemha.github.io/2020/05/19/queue%E5%B8%B8%E7%94%A8%E6%93%8D%E4%BD%9C/"/>
    <id>https://stemha.github.io/2020/05/19/queue%E5%B8%B8%E7%94%A8%E6%93%8D%E4%BD%9C/</id>
    <published>2020-05-18T18:10:50.000Z</published>
    <updated>2020-05-18T18:12:23.172Z</updated>
    
    <content type="html"><![CDATA[<h2 id="queue初始化方法"><a href="#queue初始化方法" class="headerlink" title="queue初始化方法"></a><strong>queue初始化方法</strong></h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt;q;</span><br></pre></td></tr></table></figure><a id="more"></a><h2 id="交换"><a href="#交换" class="headerlink" title="交换"></a>交换</h2><p><code>swap(queue&lt;T&gt; &amp;other_q)</code>：将当前 queue 中的元素和参数 queue 中的元素交换。它们需要包含相同类型的元素。也可以调用全局函数模板 swap() 来完成同样的操作。</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">void swap(queue&lt;T&gt; &amp;x)　重载1：x.swap(y)</span><br><span class="line">void swap(queue&lt;T&gt; &amp;x, queue&lt;T&gt; &amp;y)  重载2: swap(x, y)</span><br></pre></td></tr></table></figure><h2 id="常用操作"><a href="#常用操作" class="headerlink" title="常用操作"></a><strong>常用操作</strong></h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">q.push(<span class="number">1</span>);  入队列，无返回值</span><br><span class="line">q.pop();    出队列，无返回值</span><br><span class="line">q.front();  返回最上面（最后进入）的成员的引用</span><br><span class="line">q.back()    返回 <span class="built_in">queue</span> 中最后一个元素的引用，但不删除该元素。</span><br><span class="line">q.size();   返回队列成员个数</span><br><span class="line">q.empty();  判断是否为空队列，<span class="keyword">bool</span></span><br></pre></td></tr></table></figure><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p><a href="http://c.biancheng.net/view/479.html">C++ queue(STL queue)用法详解</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;queue初始化方法&quot;&gt;&lt;a href=&quot;#queue初始化方法&quot; class=&quot;headerlink&quot; title=&quot;queue初始化方法&quot;&gt;&lt;/a&gt;&lt;strong&gt;queue初始化方法&lt;/strong&gt;&lt;/h2&gt;&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;queue&lt;/span&gt;&amp;lt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;&amp;gt;q;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="C++" scheme="https://stemha.github.io/categories/C/"/>
    
    
      <category term="C++标准库" scheme="https://stemha.github.io/tags/C-%E6%A0%87%E5%87%86%E5%BA%93/"/>
    
      <category term="queue" scheme="https://stemha.github.io/tags/queue/"/>
    
  </entry>
  
  <entry>
    <title>stack常用操作</title>
    <link href="https://stemha.github.io/2020/05/19/stack%E5%B8%B8%E7%94%A8%E6%93%8D%E4%BD%9C/"/>
    <id>https://stemha.github.io/2020/05/19/stack%E5%B8%B8%E7%94%A8%E6%93%8D%E4%BD%9C/</id>
    <published>2020-05-18T17:54:51.000Z</published>
    <updated>2020-05-18T17:59:39.431Z</updated>
    
    <content type="html"><![CDATA[<h2 id="stack初始化方法"><a href="#stack初始化方法" class="headerlink" title="stack初始化方法"></a><strong>stack初始化方法</strong></h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">std</span>::<span class="built_in">stack</span>&lt;<span class="keyword">int</span>&gt; q;</span><br><span class="line"><span class="function"><span class="built_in">std</span>::<span class="built_in">stack</span>&lt;<span class="keyword">int</span>&gt; <span class="title">second</span><span class="params">(first)</span></span>; </span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">stack</span>&lt;<span class="keyword">int</span>, <span class="built_in">std</span>;:<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; third; 使用<span class="built_in">vector</span>初始化<span class="built_in">stack</span></span><br></pre></td></tr></table></figure><a id="more"></a><h2 id="交换"><a href="#交换" class="headerlink" title="交换"></a>交换</h2><p>swap将两个 stack的内容交换。这两个 stack的模板参数 T和 Container必须都相同。</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">void swap(stack&amp; x)　重载1：x.swap(y)</span><br><span class="line">void swap(stack&amp; x, stack&amp; y)  重载2: swap(x, y)</span><br></pre></td></tr></table></figure><h2 id="常用操作"><a href="#常用操作" class="headerlink" title="常用操作"></a><strong>常用操作</strong></h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">q.push(element); 入栈</span><br><span class="line">q.pop();   出栈</span><br><span class="line">q.top();   返回栈顶成员</span><br><span class="line">q.size();  返回栈成员个数</span><br><span class="line">q.empty(); 判断是否为空栈</span><br></pre></td></tr></table></figure><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p><a href="https://www.cnblogs.com/MarkKobs-blog/p/10347746.html">C++ STL容器——stack用法介绍</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;stack初始化方法&quot;&gt;&lt;a href=&quot;#stack初始化方法&quot; class=&quot;headerlink&quot; title=&quot;stack初始化方法&quot;&gt;&lt;/a&gt;&lt;strong&gt;stack初始化方法&lt;/strong&gt;&lt;/h2&gt;&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;std&lt;/span&gt;::&lt;span class=&quot;built_in&quot;&gt;stack&lt;/span&gt;&amp;lt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;&amp;gt; q;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;std&lt;/span&gt;::&lt;span class=&quot;built_in&quot;&gt;stack&lt;/span&gt;&amp;lt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;&amp;gt; &lt;span class=&quot;title&quot;&gt;second&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(first)&lt;/span&gt;&lt;/span&gt;; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;std&lt;/span&gt;::&lt;span class=&quot;built_in&quot;&gt;stack&lt;/span&gt;&amp;lt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;, &lt;span class=&quot;built_in&quot;&gt;std&lt;/span&gt;;:&lt;span class=&quot;built_in&quot;&gt;vector&lt;/span&gt;&amp;lt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;&amp;gt;&amp;gt; third; 使用&lt;span class=&quot;built_in&quot;&gt;vector&lt;/span&gt;初始化&lt;span class=&quot;built_in&quot;&gt;stack&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="C++" scheme="https://stemha.github.io/categories/C/"/>
    
    
      <category term="C++标准库" scheme="https://stemha.github.io/tags/C-%E6%A0%87%E5%87%86%E5%BA%93/"/>
    
      <category term="stack" scheme="https://stemha.github.io/tags/stack/"/>
    
  </entry>
  
  <entry>
    <title>vector常用操作</title>
    <link href="https://stemha.github.io/2020/05/19/vector%E5%B8%B8%E7%94%A8%E6%93%8D%E4%BD%9C/"/>
    <id>https://stemha.github.io/2020/05/19/vector%E5%B8%B8%E7%94%A8%E6%93%8D%E4%BD%9C/</id>
    <published>2020-05-18T17:30:04.000Z</published>
    <updated>2020-05-24T07:49:09.922Z</updated>
    
    <content type="html"><![CDATA[<h2 id="vector初始化方法"><a href="#vector初始化方法" class="headerlink" title="vector初始化方法"></a><strong>vector初始化方法</strong></h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; vec;       初始化size为<span class="number">0</span>的<span class="built_in">vector</span></span><br><span class="line"><span class="function"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; <span class="title">vec</span><span class="params">(<span class="number">10</span>)</span></span>;   初始化size为<span class="number">10</span>，默认值都为<span class="number">0</span>的<span class="built_in">vector</span></span><br><span class="line"><span class="function"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; <span class="title">vec</span><span class="params">(<span class="number">10</span>,<span class="number">1</span>)</span></span>; 初始化size为<span class="number">10</span>，值都为<span class="number">1</span>的<span class="built_in">vector</span></span><br></pre></td></tr></table></figure><a id="more"></a><h3 id="通过数组初始化"><a href="#通过数组初始化" class="headerlink" title="通过数组初始化"></a><strong>通过数组初始化</strong></h3><p>通过数组a的地址初始化，注意地址是从0到5（左闭右开区间），类似迭代器</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> a[<span class="number">5</span>] = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>&#125;;</span><br><span class="line"><span class="function"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; <span class="title">vec</span><span class="params">(a, a+<span class="number">5</span>)</span></span>;</span><br></pre></td></tr></table></figure><h3 id="通过vector初始化"><a href="#通过vector初始化" class="headerlink" title="通过vector初始化"></a><strong>通过vector初始化</strong></h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; <span class="title">a</span><span class="params">(<span class="number">5</span>,<span class="number">1</span>)</span></span>;</span><br><span class="line"><span class="function"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; <span class="title">b</span><span class="params">(a)</span></span>;</span><br></pre></td></tr></table></figure><h3 id="通过insert初始化"><a href="#通过insert初始化" class="headerlink" title="通过insert初始化"></a><strong>通过insert初始化</strong></h3><p>insert初始化方式将同类型的迭代器对应的始末区间（<strong>左闭右开区间</strong>）内的值插入到vector中<br><strong>//助记，插入开始的地方</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; <span class="title">a</span><span class="params">(<span class="number">6</span>,<span class="number">6</span>)</span></span>;</span><br><span class="line">vecot&lt;<span class="keyword">int</span>&gt; b;</span><br><span class="line">b.insert(b.begin(), a.begin(), a.begin() + <span class="number">3</span>); 将a[<span class="number">0</span>]~a[<span class="number">2</span>]插入到b中，b.size()由<span class="number">0</span>变为<span class="number">3</span></span><br></pre></td></tr></table></figure><p>insert还可以插入m个值为n的元素</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">在b开始位置处插入<span class="number">6</span>个<span class="number">6</span></span><br><span class="line">b.insert(b.begin(), <span class="number">6</span>, <span class="number">6</span>);</span><br></pre></td></tr></table></figure><h3 id="通过copy函数赋值"><a href="#通过copy函数赋值" class="headerlink" title="通过copy函数赋值"></a><strong>通过copy函数赋值</strong></h3><p><strong>//助记，拷贝到目标地</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; <span class="title">a</span><span class="params">(<span class="number">5</span>,<span class="number">1</span>)</span></span>;</span><br><span class="line"><span class="keyword">int</span> a1[<span class="number">5</span>] = &#123;<span class="number">2</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">2</span>&#125;;</span><br><span class="line"><span class="function"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; <span class="title">b</span><span class="params">(<span class="number">10</span>)</span></span>;</span><br><span class="line">将a中元素全部拷贝到b开始的位置中,注意拷贝的区间为a.begin() ~ a.end()的左闭右开的区间</span><br><span class="line">copy(a.begin(), a.end(), b.begin());</span><br><span class="line">拷贝区间也可以是数组地址构成的区间</span><br><span class="line">copy(a1, a1+<span class="number">5</span>, b.begin() + <span class="number">5</span>);</span><br></pre></td></tr></table></figure><h2 id="常用操作"><a href="#常用操作" class="headerlink" title="常用操作"></a><strong>常用操作</strong></h2><p>注意：<br>std::vector 不支持 push_front，，它的目的是为了O(1)的push_back(),对它来说O(n)次的insert()就能做到push_front。<br>支持push_front()的是deque支持的是deque。</p><h3 id="加入元素"><a href="#加入元素" class="headerlink" title="加入元素"></a><strong>加入元素</strong></h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">q.push_back(x);     尾部加入元素</span><br><span class="line">q.insert(iter,x);   在iter位置插入x，传回新数据位置</span><br><span class="line">q.insert(iter,n,x); 在iter位置插入n个x，无返回值</span><br><span class="line">q.insert(iter,l,r); 在iter位置插入[l,r)区间内的数据，无返回值</span><br></pre></td></tr></table></figure><h3 id="vector交换"><a href="#vector交换" class="headerlink" title="vector交换"></a><strong>vector交换</strong></h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">q.swap(p); 交换p，q容器内元素</span><br><span class="line">q.assign(iter1,iter2); <span class="comment">//将区间[iter1，iter2)内元素赋值给vector，并清空vector容器之前的内容。</span></span><br></pre></td></tr></table></figure><h3 id="删除元素"><a href="#删除元素" class="headerlink" title="删除元素"></a><strong>删除元素</strong></h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">q.pop_back(); 删除最后一个元素</span><br><span class="line">q.erase(iter1); 删除iter位置元素，返回值是指向被删元素之后的那个元素(即下一个元素)的迭代器。</span><br><span class="line">q.erase(iter1,iter2); 删除[iter1，iter2)区间内的元素</span><br></pre></td></tr></table></figure><h3 id="清空-覆盖"><a href="#清空-覆盖" class="headerlink" title="清空/覆盖"></a><strong>清空/覆盖</strong></h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">q.clear(); <span class="comment">//清空Vector</span></span><br><span class="line">q.assign(n,x); <span class="comment">//将n个x赋值到vector中，并清空vector容器之前的内容。</span></span><br></pre></td></tr></table></figure><h3 id="返回元素"><a href="#返回元素" class="headerlink" title="返回元素"></a><strong>返回元素</strong></h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">q.front(); 返回第一个数据</span><br><span class="line">q.back(); 返回最后一个数据</span><br><span class="line">q.at(i); <span class="comment">//返回第i个元素</span></span><br></pre></td></tr></table></figure><h3 id="vector元素个数-是否为空"><a href="#vector元素个数-是否为空" class="headerlink" title="vector元素个数/是否为空"></a><strong>vector元素个数/是否为空</strong></h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">q.size(); 返回容器内成员个数</span><br><span class="line">q.resize(x); <span class="comment">//重新指定容器大小</span></span><br><span class="line">q.empty(); 判断Vector是否为空</span><br></pre></td></tr></table></figure><h3 id="迭代器"><a href="#迭代器" class="headerlink" title="迭代器"></a><strong>迭代器</strong></h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">q.begin();  <span class="comment">//返回头位置迭代器</span></span><br><span class="line">q.end();    <span class="comment">//返回尾位置迭代器</span></span><br><span class="line">q.rbegin(); <span class="comment">//返回尾部反向迭代器</span></span><br><span class="line">q.rend();   <span class="comment">//返回头部反向迭代器</span></span><br></pre></td></tr></table></figure><h3 id="vector内存容量"><a href="#vector内存容量" class="headerlink" title="vector内存容量"></a><strong>vector内存容量</strong></h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">q.capacity(); <span class="comment">//返回Vector可用空间的大小</span></span><br><span class="line">q.reserve(); <span class="comment">//重新指定空间大小，小于当前capacity时保持为原本的capacity值</span></span><br></pre></td></tr></table></figure><h2 id="二维vector的初始化"><a href="#二维vector的初始化" class="headerlink" title="二维vector的初始化"></a>二维vector的初始化</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; vec1;</span><br><span class="line"><span class="keyword">int</span> row = <span class="number">3</span>;</span><br><span class="line"><span class="keyword">int</span> col = <span class="number">3</span>;</span><br><span class="line">vec1.resize(row);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;vec1.size();i++)</span><br><span class="line">    vec1[i].resize(col);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;row;i++)</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;col;j++)  </span><br><span class="line">        vec1[i][j]=<span class="number">5</span>;</span><br></pre></td></tr></table></figure><p>或者</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &gt;vec(row,<span class="built_in">vector</span>&lt;<span class="keyword">char</span>&gt;(col,<span class="number">5</span>));</span><br></pre></td></tr></table></figure><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p><a href="https://blog.csdn.net/xiangxianghehe/article/details/90637998">C++ 给vector去重的两种方法</a><br><a href="https://www.cnblogs.com/quyc/p/12857054.html">vector的几种初始化及赋值方式</a><br><a href="https://www.cnblogs.com/wangkundentisy/p/9023977.html">STL中erase()的用法</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;vector初始化方法&quot;&gt;&lt;a href=&quot;#vector初始化方法&quot; class=&quot;headerlink&quot; title=&quot;vector初始化方法&quot;&gt;&lt;/a&gt;&lt;strong&gt;vector初始化方法&lt;/strong&gt;&lt;/h2&gt;&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;vector&lt;/span&gt;&amp;lt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;&amp;gt; vec;       初始化size为&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;的&lt;span class=&quot;built_in&quot;&gt;vector&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;vector&lt;/span&gt;&amp;lt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;&amp;gt; &lt;span class=&quot;title&quot;&gt;vec&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;;   初始化size为&lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;，默认值都为&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;的&lt;span class=&quot;built_in&quot;&gt;vector&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;vector&lt;/span&gt;&amp;lt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;&amp;gt; &lt;span class=&quot;title&quot;&gt;vec&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;; 初始化size为&lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;，值都为&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;的&lt;span class=&quot;built_in&quot;&gt;vector&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="C++" scheme="https://stemha.github.io/categories/C/"/>
    
    
      <category term="C++标准库" scheme="https://stemha.github.io/tags/C-%E6%A0%87%E5%87%86%E5%BA%93/"/>
    
      <category term="vector" scheme="https://stemha.github.io/tags/vector/"/>
    
  </entry>
  
  <entry>
    <title>使用栈实现的队列</title>
    <link href="https://stemha.github.io/2020/05/14/%E4%BD%BF%E7%94%A8%E6%A0%88%E5%AE%9E%E7%8E%B0%E7%9A%84%E9%98%9F%E5%88%97/"/>
    <id>https://stemha.github.io/2020/05/14/%E4%BD%BF%E7%94%A8%E6%A0%88%E5%AE%9E%E7%8E%B0%E7%9A%84%E9%98%9F%E5%88%97/</id>
    <published>2020-05-14T15:27:32.000Z</published>
    <updated>2020-05-14T15:29:46.123Z</updated>
    
    <content type="html"><![CDATA[<h2 id="算法思想"><a href="#算法思想" class="headerlink" title="算法思想"></a>算法思想</h2><a id="more"></a><ul><li>其中一个栈A作为队列的入口，用于插入新元素；另一个栈B作为队列的出口，用于移除老元素。</li><li>当B为空的时候需要及时将A中的数据转移进去。</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="comment">/*   stack&lt;int&gt;q;</span></span><br><span class="line"><span class="comment">     q.push(1);   //入栈</span></span><br><span class="line"><span class="comment">     q.pop();     //出栈</span></span><br><span class="line"><span class="comment">     q.top();     //返回栈顶成员</span></span><br><span class="line"><span class="comment">     q.size();    //返回栈成员个数</span></span><br><span class="line"><span class="comment">     q.empty();   //判断是否为空栈</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">stackqueue</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">private</span>:</span><br><span class="line">    <span class="built_in">stack</span>&lt;<span class="keyword">int</span>&gt; stacka;</span><br><span class="line">    <span class="built_in">stack</span>&lt;<span class="keyword">int</span>&gt; stackb;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">enqueue</span><span class="params">(<span class="keyword">int</span> a)</span></span>;</span><br><span class="line">        <span class="function"><span class="keyword">int</span> <span class="title">dequeue</span><span class="params">()</span></span>;</span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">transfer</span><span class="params">()</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">stackqueue::dequeue</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(!stackb.empty())</span><br><span class="line">&#123;   </span><br><span class="line">    <span class="keyword">int</span> tmp = stackb.top();</span><br><span class="line">    stackb.pop();</span><br><span class="line">    <span class="keyword">return</span> tmp;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span>(stacka.empty())</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    transfer();</span><br><span class="line">    <span class="keyword">int</span> tmp = stackb.top();</span><br><span class="line">    stackb.pop();</span><br><span class="line">    <span class="keyword">return</span> tmp;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">stackqueue::transfer</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(!stacka.empty())</span><br><span class="line">    &#123;</span><br><span class="line">        stackb.push(stacka.top());</span><br><span class="line">        stacka.pop();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">stackqueue::enqueue</span><span class="params">(<span class="keyword">int</span> a)</span></span>&#123;</span><br><span class="line">    stacka.push(a);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    stackqueue *que = <span class="keyword">new</span> stackqueue();</span><br><span class="line">    que-&gt;enqueue(<span class="number">1</span>);</span><br><span class="line">    que-&gt;enqueue(<span class="number">2</span>);</span><br><span class="line">    que-&gt;enqueue(<span class="number">3</span>);</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; que-&gt;dequeue() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; que-&gt;dequeue() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    que-&gt;enqueue(<span class="number">4</span>);</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; que-&gt;dequeue() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; que-&gt;dequeue() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;算法思想&quot;&gt;&lt;a href=&quot;#算法思想&quot; class=&quot;headerlink&quot; title=&quot;算法思想&quot;&gt;&lt;/a&gt;算法思想&lt;/h2&gt;
    
    </summary>
    
    
      <category term="算法" scheme="https://stemha.github.io/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="算法" scheme="https://stemha.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="队列" scheme="https://stemha.github.io/tags/%E9%98%9F%E5%88%97/"/>
    
      <category term="栈" scheme="https://stemha.github.io/tags/%E6%A0%88/"/>
    
  </entry>
  
  <entry>
    <title>无序数组排序后的最大相邻差</title>
    <link href="https://stemha.github.io/2020/05/14/%E6%97%A0%E5%BA%8F%E6%95%B0%E7%BB%84%E6%8E%92%E5%BA%8F%E5%90%8E%E7%9A%84%E6%9C%80%E5%A4%A7%E7%9B%B8%E9%82%BB%E5%B7%AE/"/>
    <id>https://stemha.github.io/2020/05/14/%E6%97%A0%E5%BA%8F%E6%95%B0%E7%BB%84%E6%8E%92%E5%BA%8F%E5%90%8E%E7%9A%84%E6%9C%80%E5%A4%A7%E7%9B%B8%E9%82%BB%E5%B7%AE/</id>
    <published>2020-05-14T14:25:41.000Z</published>
    <updated>2020-05-14T14:27:42.718Z</updated>
    
    <content type="html"><![CDATA[<p>解法1：</p><a id="more"></a><p>使用任意一种时间复杂度为O（nlogn）的排序算法（如快速排序）给原数组排序，然后遍历排好序的数组，并对每两个相邻元素求差。<br>复杂度：时间O（nlogn），在不改变原数组的情况下，空间复杂度是O(n)</p><p>解法2：基数排序的思想</p><ol><li>利用计数排序的思想，先求出原数组的最大值max与最小值min的区间长度k（k=max-min+1），以及偏移量d=min。</li><li>创建一个长度为k的新数组Array。</li><li>遍历原数组，每遍历一个元素，就把新数组Array对应下标的值+1。例如原数组元素的值为n，则将Array[n-min]的值加1。遍历结束<br>后，Array的一部分元素值变成了1或更高的数值，一部分元素值仍然是0。</li><li>遍历新数组Array，统计出Array中最大连续出现0值的次数+1，即为相邻元素最大差值。</li></ol><p>解法3：桶排序的思想<br>解法3：</p><ol><li>利用桶排序的思想，根据原数组的长度n，创建出n个桶，每一个桶代表一个区间范围。其中第1个桶从原数组的最小值min开始，区间跨<br>度是（max-min）/（n-1）。</li><li>遍历原数组，把原数组每一个元素插入到对应的桶中，记录每一个桶的最大和最小值。</li><li>遍历所有的桶，统计出每一个桶的最大值，和这个桶右侧非空桶的最小值的差，数值最大的差即为原数组排序后的相邻最大差值。<br>时间复杂度是O（n），空间复杂度是O（n*k）</li></ol><p>代码C++版本：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//获取数组中数字之间的最大差值</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">"memory.h"</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">bucket</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> min;</span><br><span class="line">    <span class="keyword">int</span> max;</span><br><span class="line">    bucket():min(<span class="literal">NULL</span>),max(<span class="literal">NULL</span>)&#123;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">getmaxdtce</span><span class="params">(<span class="keyword">int</span> *a,<span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;   </span><br><span class="line">    <span class="comment">//1.找到数列的最大最下值</span></span><br><span class="line">    <span class="keyword">int</span> *max = max_element(a,a+n);</span><br><span class="line">    <span class="keyword">int</span> *min = min_element(a,a+n);</span><br><span class="line">    <span class="keyword">int</span> d = *max - *min;</span><br><span class="line">    <span class="keyword">if</span>(d==<span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//2.初始化桶</span></span><br><span class="line">    <span class="keyword">int</span> bucketnum = n;</span><br><span class="line">    bucket *buckets = <span class="keyword">new</span> bucket[n];</span><br><span class="line"></span><br><span class="line">    <span class="comment">//3.遍历原始数组，确定每个桶的最大最小值</span></span><br><span class="line">    <span class="comment">//注意，最大点独占一个桶</span></span><br><span class="line">    <span class="comment">//所以前面n-1个桶的间隙是(a[i] - *min) / (d / bucketnum - 1);</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> index = (a[i] - *min) / (d / (bucketnum - <span class="number">1</span>));</span><br><span class="line">        <span class="keyword">if</span>(buckets[index].min==<span class="literal">NULL</span>||buckets[index].min&gt;a[i])</span><br><span class="line">        &#123;</span><br><span class="line">            buckets[index].min = a[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(buckets[index].max==<span class="literal">NULL</span>||buckets[index].max&gt;a[i])</span><br><span class="line">        &#123;</span><br><span class="line">            buckets[index].max = a[i];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//4. 遍历所有的桶，统计出每一个桶的最大值，和这个桶右侧非空桶的最小值的差，数值最大的差即为原数组排序后的相邻最大差值。</span></span><br><span class="line">    <span class="keyword">int</span> leftmax = buckets[<span class="number">0</span>].max;</span><br><span class="line">    <span class="keyword">int</span> maxdistance = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(buckets[i].min==<span class="literal">NULL</span>)&#123;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(buckets[i].min-leftmax&gt;maxdistance)</span><br><span class="line">        &#123;</span><br><span class="line">            maxdistance = buckets[i].min - leftmax;</span><br><span class="line">        &#125;</span><br><span class="line">        leftmax = buckets[i].max;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> maxdistance;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc,<span class="keyword">char</span> *argv[] )</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> *test = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">5</span>];</span><br><span class="line">    <span class="built_in">memset</span>(test, <span class="number">0</span>, <span class="keyword">sizeof</span>(<span class="keyword">int</span>) * <span class="number">5</span>);</span><br><span class="line">    test[<span class="number">0</span>] = <span class="number">1</span>;test[<span class="number">1</span>] = <span class="number">6</span>;</span><br><span class="line">    test[<span class="number">2</span>] = <span class="number">3</span>;</span><br><span class="line">    test[<span class="number">3</span>] = <span class="number">8</span>;</span><br><span class="line">    test[<span class="number">4</span>] = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt;getmaxdtce(test,<span class="number">5</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;解法1：&lt;/p&gt;
    
    </summary>
    
    
      <category term="算法" scheme="https://stemha.github.io/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="算法" scheme="https://stemha.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="桶排序" scheme="https://stemha.github.io/tags/%E6%A1%B6%E6%8E%92%E5%BA%8F/"/>
    
  </entry>
  
  <entry>
    <title>环状链表判断算法</title>
    <link href="https://stemha.github.io/2020/05/14/%E7%8E%AF%E7%8A%B6%E9%93%BE%E8%A1%A8%E5%88%A4%E6%96%AD%E7%AE%97%E6%B3%95/"/>
    <id>https://stemha.github.io/2020/05/14/%E7%8E%AF%E7%8A%B6%E9%93%BE%E8%A1%A8%E5%88%A4%E6%96%AD%E7%AE%97%E6%B3%95/</id>
    <published>2020-05-14T10:21:03.000Z</published>
    <updated>2020-05-14T10:25:41.701Z</updated>
    
    <content type="html"><![CDATA[<h2 id="判断该链表是否有环"><a href="#判断该链表是否有环" class="headerlink" title="判断该链表是否有环"></a>判断该链表是否有环</h2><ol><li>采用两个指针，一个用来遍历，一个用来从头到当前遍历位置的数据对比。<br>思想：比较元素是否出过；<br>复杂度：时间O(n^2),空间O(1)</li><li>hash表的方法，记录元素，一旦在hash表中出现过,就证明有环<br>复杂度：时间O(n),空间O(n)</li><li><code>双指针类型方法</code>：两个指针p1和p2，让它们同时指向这个链表的头节点。然后开始一个大循环，在循环体中，让指针p1每次向后移动1个节点，让指针p2每次向后移动2个节点，然后比较<br>两个指针指向的节点是否相同。如果相同，则可以判断出链表有环，如果不同，则继续下一次循环。<br>思想：追及问题，让快的先跑，如果有环，快的绕一圈后肯定会追上慢的。<br>复杂度：时间O(n),空间O(1)<a id="more"></a></li></ol><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span>&#123;</span></span><br><span class="line"> <span class="keyword">int</span> value;</span><br><span class="line"> node *next;</span><br><span class="line"> node(<span class="keyword">int</span> a):value(a),next(<span class="literal">NULL</span>)&#123;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">typedef</span> node <span class="built_in">list</span>;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">iscycle</span><span class="params">(<span class="built_in">list</span> * head)</span></span>&#123;</span><br><span class="line">    node *p1,*p2;</span><br><span class="line">    p1 = head;</span><br><span class="line">    p2= head;</span><br><span class="line">    <span class="keyword">while</span>(p1!=<span class="literal">NULL</span>&amp;&amp;p1-&gt;next!=<span class="literal">NULL</span>) <span class="comment">//因为p1每次走两步，所以需要判断一下最后两个是否为空，以便决定是否循环；</span></span><br><span class="line">    &#123;</span><br><span class="line">        p1 = p1-&gt;next-&gt;next;</span><br><span class="line">        p2 = p2-&gt;next;</span><br><span class="line">        <span class="keyword">if</span>(p1==p2)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line"> node * node1 = <span class="keyword">new</span> node(<span class="number">5</span>);</span><br><span class="line"> node * node2 = <span class="keyword">new</span> node(<span class="number">3</span>);</span><br><span class="line"> node * node3 = <span class="keyword">new</span> node(<span class="number">7</span>);</span><br><span class="line"> node * node4 = <span class="keyword">new</span> node(<span class="number">2</span>);</span><br><span class="line"> node * node5 = <span class="keyword">new</span> node(<span class="number">6</span>);</span><br><span class="line"> node1-&gt;next = node2;</span><br><span class="line"> node2-&gt;next = node3;</span><br><span class="line"> node3-&gt;next = node4;</span><br><span class="line"> node4-&gt;next = node5;</span><br><span class="line"> node5-&gt;next = node2;</span><br><span class="line"> <span class="comment">//cout &lt;&lt; node5-&gt;next &lt;&lt; endl;</span></span><br><span class="line"> <span class="built_in">cout</span> &lt;&lt; iscycle(node1) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="如何求出环的长度？"><a href="#如何求出环的长度？" class="headerlink" title="如何求出环的长度？"></a>如何求出环的长度？</h2><p>当两个指针首次相遇，证明链表有环的时候，让两个指针从相遇点继续循环前进，并统计前进的循环次数，直到两个指针第2次相遇。此<br>时，统计出来的前进次数就是环长。<br>因为指针p1每次走1步，指针p2每次走2步，两者的速度差是1步。当两个指针再次相遇时，p2比p1多走了整整1圈。<br>因此，环长 = 每一次速度差 × 前进次数 = 前进次数<br>也就是 环长=1×前进次数</p><h2 id="如何求出入环节点？"><a href="#如何求出入环节点？" class="headerlink" title="如何求出入环节点？"></a>如何求出入环节点？</h2><p>如果链表有环，如何求出入环节点？<br>答：只要把其中一个指针放回到头节点位置，另一个指针保持在首次相遇点，两个指针都是每次向前走1步。那么，它们最终相遇的节点，就是入环节点。<br>以上答案根据一个走两步一个走一步计算出的。</p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p>漫画算法</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;判断该链表是否有环&quot;&gt;&lt;a href=&quot;#判断该链表是否有环&quot; class=&quot;headerlink&quot; title=&quot;判断该链表是否有环&quot;&gt;&lt;/a&gt;判断该链表是否有环&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;采用两个指针，一个用来遍历，一个用来从头到当前遍历位置的数据对比。&lt;br&gt;思想：比较元素是否出过；&lt;br&gt;复杂度：时间O(n^2),空间O(1)&lt;/li&gt;
&lt;li&gt;hash表的方法，记录元素，一旦在hash表中出现过,就证明有环&lt;br&gt;复杂度：时间O(n),空间O(n)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;双指针类型方法&lt;/code&gt;：两个指针p1和p2，让它们同时指向这个链表的头节点。然后开始一个大循环，在循环体中，让指针p1每次向后移动1个节点，让指针p2每次向后移动2个节点，然后比较&lt;br&gt;两个指针指向的节点是否相同。如果相同，则可以判断出链表有环，如果不同，则继续下一次循环。&lt;br&gt;思想：追及问题，让快的先跑，如果有环，快的绕一圈后肯定会追上慢的。&lt;br&gt;复杂度：时间O(n),空间O(1)&lt;/li&gt;&lt;/ol&gt;
    
    </summary>
    
    
      <category term="算法" scheme="https://stemha.github.io/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="链表" scheme="https://stemha.github.io/tags/%E9%93%BE%E8%A1%A8/"/>
    
      <category term="算法" scheme="https://stemha.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>数据结构总结</title>
    <link href="https://stemha.github.io/2020/05/11/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E6%80%BB%E7%BB%93/"/>
    <id>https://stemha.github.io/2020/05/11/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E6%80%BB%E7%BB%93/</id>
    <published>2020-05-10T17:17:20.000Z</published>
    <updated>2020-05-13T14:47:50.368Z</updated>
    
    <content type="html"><![CDATA[<p>（未完待续）</p><a id="more"></a><h2 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a><strong>基本概念</strong></h2><p><code>数据结构</code>：</p><ul><li>是数据项的结构化集合。</li><li>结构性的表现<ul><li>数据项之间的相互联系和作用</li><li>或者理解为定义于数据项之间的某种<code>逻辑次序</code></li></ul></li><li>依据逻辑次序的复杂程度划分：<ul><li><code>线性结构</code></li><li><code>半线性结构</code></li><li><code>非线性结构</code></li></ul></li></ul><h2 id="序列（sequence）"><a href="#序列（sequence）" class="headerlink" title="序列（sequence）"></a><strong>序列（sequence）</strong></h2><p><code>序列（sequence）</code>：最基本的线性结构的统称。<br>序列（sequence）依据数据项之间的逻辑次序与其物理存储的对应关系不同，又可以进一步划分向量和列表：</p><h3 id="向量（vector）"><a href="#向量（vector）" class="headerlink" title="向量（vector）"></a><strong>向量（vector）</strong></h3><p><code>向量（vector）</code>:所有数据项之间物理存储位置与逻辑次序完全吻合。此时的逻辑次序也称为<code>秩（rank）</code></p><ul><li><code>循秩访问（call-by-rank）</code>，静态存储策略。</li></ul><h3 id="列表（list）"><a href="#列表（list）" class="headerlink" title="列表（list）"></a><strong>列表（list）</strong></h3><p><code>列表（list）</code>:所有数据项之间物理存储位置与逻辑次序不一定吻合。采用间接定址的方法通过封装后的<code>位置（position）</code>相互引用。</p><ul><li><code>循位置访问（call-by-position）</code>或者称为<code>循链接访问（call-by-link）</code>，动态存储策略。</li></ul><h2 id="栈（stack）"><a href="#栈（stack）" class="headerlink" title="栈（stack）"></a><strong>栈（stack）</strong></h2><p><code>栈（stack）</code>：线性数据结构的一种，视作向量与列表的特例。对象的插入和删除限制在栈的一端。禁止操作的一端称为<code>盲端</code>。<br><code>栈顶（stack top）</code>：可操作（插入和删除）的一端。<code>入栈（push）</code>与<code>出栈（pop）</code>。<br><code>栈底（stack bottom）</code>：无法直接操作的盲端。</p><h3 id="栈与递归"><a href="#栈与递归" class="headerlink" title="栈与递归"></a>栈与递归</h3><h4 id="函数调用栈"><a href="#函数调用栈" class="headerlink" title="函数调用栈"></a>函数调用栈</h4><p><code>调用栈（call stack）</code>和<code>执行栈（execution）</code>:大部分操作系统中，每个运行的二进制程序都都配有一个调用栈，用来跟踪属于同一个程序的所有函数，记录它们之间的调用关系，并保证在每一个调用实例执行完毕之后，可以准确返回。<br><code>帧（frame）</code>：调用栈的基本单位，每次函数调用时，都会相应的创建一帧：</p><ul><li>记录了函数实例在二进制程序中的返回地址，局部变量，传入参数，还有上一帧的栈中地址。</li></ul><h4 id="逆序输出"><a href="#逆序输出" class="headerlink" title="逆序输出"></a>逆序输出</h4><p>进制转换</p><h4 id="递归嵌套"><a href="#递归嵌套" class="headerlink" title="递归嵌套"></a>递归嵌套</h4><p><code>栈混洗（stack permutation）</code>：栈的数据从stackA——&gt;stackS——&gt;stackB。</p><p>括号匹配：</p><p>延迟缓冲：</p><p><code>逆波兰表达式（reverse Polish notation，RPN）</code>：</p><h2 id="试探回溯法"><a href="#试探回溯法" class="headerlink" title="试探回溯法"></a>试探回溯法</h2><p>剪枝<br>试探<br>回溯</p><h3 id="八皇后"><a href="#八皇后" class="headerlink" title="八皇后"></a>八皇后</h3><h3 id="迷宫寻径"><a href="#迷宫寻径" class="headerlink" title="迷宫寻径"></a>迷宫寻径</h3><h2 id="队列（queue）"><a href="#队列（queue）" class="headerlink" title="队列（queue）"></a><strong>队列（queue）</strong></h2><p>视作向量与列表的特例</p><h3 id="基本概念-1"><a href="#基本概念-1" class="headerlink" title="基本概念"></a>基本概念</h3><p>队列（queue）：线性数据结构的一种，对象的插入和删除限制在队列的两端。<br><code>队头（front）</code>：允许取出元素的一端。<code>出队（dequeue）</code>:元素的删除操作。<br><code>队尾（rear）</code>：允许插入元素的一端。<code>入队（enqueue）</code>：元素的插入操作。</p><h3 id="队列应用"><a href="#队列应用" class="headerlink" title="队列应用"></a>队列应用</h3><h4 id="循环分配器"><a href="#循环分配器" class="headerlink" title="循环分配器"></a>循环分配器</h4><h4 id="银行服务模拟"><a href="#银行服务模拟" class="headerlink" title="银行服务模拟"></a>银行服务模拟</h4><h2 id="树"><a href="#树" class="headerlink" title="树"></a><strong>树</strong></h2><ul><li>半线性结构（semi-linear structure）</li><li>其中的元素之间并不存在天然的直接后继或者直接前驱关系。但是只要附加某种约束（比如遍历），就可以在树的元素之间确定某种线性次序关系。因此树属于半线性结构</li></ul><p><code>叶节点（leaf）</code>：无孩子的节点。<br><code>树的高度（height）</code>:树的所有节点深度的最大值称作该树的高度。教材中约定，单个节点的树高度为0，空树的高度为-1。</p><ul><li>如果根结点第0，层数=深度=高度-1</li><li>如果根结点第1，层数=深度=高度</li></ul><p><code>节点的高度</code>：任一节点V的高度对应于<code>子树的高度</code>subtree（V）。</p><h3 id="多叉树（k-ary-tree）"><a href="#多叉树（k-ary-tree）" class="headerlink" title="多叉树（k-ary tree）"></a><strong>多叉树（k-ary tree）</strong></h3><p><code>k叉树（k-ary tree）</code>：每个节点的孩子均不超过k个的有根树。</p><h4 id="多叉树的表示法"><a href="#多叉树的表示法" class="headerlink" title="多叉树的表示法"></a><strong>多叉树的表示法</strong></h4><p><code>父节点表示法</code>：一个向量表，存两个属性，一个是data，一个是parent<br><code>孩子节点表示法</code>：一个向量表，存两个属性，一个是data，一个是children（组织成vector或者list）<br><code>父亲+孩子节点表示法</code>：一个向量表，存三个属性，一个是data，一个是parent，最后一个是children（组织成vector或者list）</p><h4 id="有序树（ordered-tree）"><a href="#有序树（ordered-tree）" class="headerlink" title="有序树（ordered tree）"></a><strong>有序树（ordered tree）</strong></h4><p>有序树（ordered tree）：同一节点的所有孩子之间必须具有某一线性次序。这个约束条件使得作为多叉树特例的二叉树有足够的能力表示任何一颗多叉树。</p><h4 id="长子-兄弟转换法"><a href="#长子-兄弟转换法" class="headerlink" title="长子+兄弟转换法"></a>长子+兄弟转换法</h4><p>同一列的是长子，同一行的是兄弟</p><h3 id="二叉树（binary-tree）"><a href="#二叉树（binary-tree）" class="headerlink" title="二叉树（binary tree）"></a><strong>二叉树（binary tree）</strong></h3><p><code>二叉树（binary tree）</code>：每个节点的读书均不超过2。<br><code>有序二叉树（ordered binary tree）</code>：同一父节点的孩子都可以左右相互切分。<br><code>真二叉树（proper binary tree）</code>：不含一度节点的二叉树</p><h4 id="完全二叉树（complete-binary-tree）"><a href="#完全二叉树（complete-binary-tree）" class="headerlink" title="完全二叉树（complete binary tree）"></a><strong>完全二叉树（complete binary tree）</strong></h4><p>完全二叉树（complete binary tree）：</p><ul><li>对于使用队列操作的层次遍历，前(n/2向下取整）次迭代中都有左孩子入队，前(n/2向上取整然后-1）次迭代中都有右孩子入队</li><li>叶节点只出现在最底部的两层。</li><li>高度为：h=（log n）的向下取整 //根节点设置为高度0的情况下</li><li>规模介于2^h与2^(h+1)-1</li><li>根节点为1，左孩子编号等于2v,右孩子编号2v+1</li></ul><h3 id="满二叉树（full-binary-tree）"><a href="#满二叉树（full-binary-tree）" class="headerlink" title="满二叉树（full binary tree）"></a><strong>满二叉树（full binary tree）</strong></h3><ul><li>规模2^(h+1)-1</li></ul><h4 id="遍历"><a href="#遍历" class="headerlink" title="遍历"></a>遍历</h4><p>递归式遍历<br>迭代版先序遍历<br>迭代版中序遍历<br>迭代版后续遍历<br>层次遍历</p><h3 id="编码树"><a href="#编码树" class="headerlink" title="编码树"></a>编码树</h3><p>编码<br>解码<br>前缀无歧义编码（PFC）<br>huffman编码</p><h4 id="二叉编码树"><a href="#二叉编码树" class="headerlink" title="二叉编码树"></a>二叉编码树</h4><p>根通路串（root path string）</p><h2 id="搜索树"><a href="#搜索树" class="headerlink" title="搜索树"></a><strong>搜索树</strong></h2><p>对线性数据结构查找性能的改进。<br>如果既要求对象集合的组成可以高效率地动态调整，同时也要求能够高效率的查找，对于向量和列表这类线性结构是难以胜任的。<br>兼顾高效率的动态修改和高效率的静态查找，可以使用搜索树。<br>理想平衡和适度平衡，引入平衡二叉树结构，比如AVL树即使在最坏情况下，单次动态查找和静态查找也均在O（log n）时间内完成。</p><h3 id="理想平衡和适度平衡"><a href="#理想平衡和适度平衡" class="headerlink" title="理想平衡和适度平衡"></a><strong>理想平衡和适度平衡</strong></h3><p>理想平衡：如果树的高度恰好为log n，向下取整，则成为理想平衡树 ，比如完全二叉树和满二叉树</p><p>适度平衡：渐进意义下适当放松标准的平衡性。渐进的不超过O(log n)<br>下面介绍的红黑树，AVL树，伸展树，kd-树都是适度平衡的变种。也可以归入平衡二叉搜索树之列。</p><h3 id="搜索树的局部性"><a href="#搜索树的局部性" class="headerlink" title="搜索树的局部性"></a><strong>搜索树的局部性</strong></h3><ol><li>刚刚被访问的节点，可能不久后就能访问到</li><li>将被访问的下一个顶点，极可能就在不久之前被访问的某个节点附近</li></ol><h3 id="二叉搜索树（BST）"><a href="#二叉搜索树（BST）" class="headerlink" title="二叉搜索树（BST）"></a><strong>二叉搜索树（BST）</strong></h3><p><code>二叉搜索树（binary search tree）</code>：处处都满足<strong>顺序性</strong>——任一节点r的左（右）子树中，所有节点均不大于（不小于）节点r<br><code>二叉搜索树的判定</code>:任何一棵二叉树是二叉搜索树，当且仅当其中序遍历序列单调非降。</p><p>复杂度分析：<br>insert，remove，search时间：线性正比于查找路径的长度或者最终返回节点的深度。最坏情况下可能退化成为链表。</p><h4 id="等价二叉搜索树"><a href="#等价二叉搜索树" class="headerlink" title="等价二叉搜索树"></a><strong>等价二叉搜索树</strong></h4><p>若两个二叉搜索树的中序遍历相同，则称它们彼此等价。<br>概括一下就是：上下可变，左右不乱。也就是说节点的左右相对关系是不变的，但是上下关系是可以改变的。<br>局部性：</p><ol><li>经过单词动态修改操作，至多只有O(log n)处局部不再满足限制条件。</li><li>可以在O(log n)时间内，使这O(log n)处局（乃至全树）重新满足限制条件。</li></ol><h4 id="旋转调整（修复）"><a href="#旋转调整（修复）" class="headerlink" title="旋转调整（修复）"></a>旋转调整（修复）</h4><p><code>zig</code> 顺时针旋转<br><code>zag</code> 逆时针旋转</p><h3 id="平衡二叉搜索树（BBST）"><a href="#平衡二叉搜索树（BBST）" class="headerlink" title="平衡二叉搜索树（BBST）"></a><strong>平衡二叉搜索树（BBST）</strong></h3><h4 id="AVL树"><a href="#AVL树" class="headerlink" title="AVL树"></a><strong>AVL树</strong></h4><p><code>平衡因子(balance factor)</code>：其左，右子树的高度差。<br>各个节点的平衡因子绝对值不超过1。也就是各个节点左右子树高度差不超过1。</p><p>失重与重新平衡：<br>单旋与双旋：<br>统一重平衡算法：</p><h4 id="伸展树（splay-tree）"><a href="#伸展树（splay-tree）" class="headerlink" title="伸展树（splay tree）"></a><strong>伸展树（splay tree）</strong></h4><p>伸展树（splay tree）：</p><ul><li>无须时刻都保持全树的平衡，但是却能够在任何足够长的序列上，保持分摊意义上的效率。</li><li>不需要对基本的二叉树节点结构，做任何附加的要求或者改动，不需要记录平衡因子或者高度之类的额外信息，故适用范围更广</li></ul><p>利用了数据局部性，将刚刚被访问的节点，转移至树根附近。</p><p><code>伸展（splaying）</code>：随着节点e的不断上升，两侧子树的结构也在不断的调整，这种过程也形象地称为伸展。</p><h5 id="单层伸展树"><a href="#单层伸展树" class="headerlink" title="单层伸展树"></a><strong>单层伸展树</strong></h5><p>节点e每次提升1层，直至成为树根</p><h5 id="双层伸展树"><a href="#双层伸展树" class="headerlink" title="双层伸展树"></a><strong>双层伸展树</strong></h5><p>节点e每次提升2层，直至成为树根。</p><p>zig-zig/zag-zag<br>zig-zig/zag-zag<br>zig/zag</p><p>复杂度分析：分摊的情况下，O（log n）</p><h4 id="红黑数（red-black-tree）"><a href="#红黑数（red-black-tree）" class="headerlink" title="红黑数（red-black tree）"></a><strong>红黑数（red-black tree）</strong></h4><p>通过假想地引入外部节点（黑色），将二叉树真正扩展为真二叉树。</p><ol><li>根节点始终为黑色</li><li>外部节点均为黑色</li><li>其余节点若为红色，其孩子节点必为黑色</li><li>从任一外部节点到根节点的沿途，黑节点的数目相等</li><li>由1，2可知，红节点属于内部节点，且红节点的父节点和左右孩子肯定存在</li><li>由3可知，红节点之父必为黑色，树的任一通路不会包含相邻的红节点。<br>7  由4可知，所有外部节点的黑高度统一</li></ol><p>所有外部节点的黑高度统一<br>特别的，根节点的黑高度也称为全树的黑高度，在数值上与外部节点的黑高度相等。<br>所有外部节点的黑高度为0.</p><p>双红修正<br>双黑修正</p><h3 id="平衡多路搜索树"><a href="#平衡多路搜索树" class="headerlink" title="平衡多路搜索树"></a><strong>平衡多路搜索树</strong></h3><p>平衡二叉搜索树（BBST）的推广<br>当数据规模大到内存已经不足以容纳时候，常规平衡二叉搜索树的效率会大打折扣。其原因在于查找过程对外存的访问次数过多。</p><blockquote><p>外部存储适合于批量式访问，不妨通过时间成本较低的多次内存操作，来替代时间成本相对较高的单次外存操作。</p></blockquote><p>结合上面的思想，我们可以将通常的二叉树搜索树，改造为多路搜索树（等价变换）</p><p><code>四路搜索树</code>：每个大节点拥有四个外部的分支。</p><ul><li>通常是将二叉搜索树以两层为间隔合并。</li><li>一个大节点包含3个关键码和4个外部分支.</li></ul><p><code>多路搜索树（multi-way search tree）</code>：一般地，以k层为间隔如此重组，可以将二叉搜索树转化为等价的2^k路搜索树。</p><p><strong>优点</strong>：</p><ul><li>访问外存的方式相对于二叉搜索树已经发生了本质的变化，可以以大节点为单位读取一组（而不是一个）关键码。</li><li>这组关键码在逻辑上与物理上都彼此相邻，故可以以批量方式从外存一次性读出，且需要的时间与读取单个关键码几乎一样。</li><li>每组关键码的最佳数目，取决于不同外存的批量访问特性。可以根据扇区的容量等因素来计算。</li></ul><h4 id="B-树"><a href="#B-树" class="headerlink" title="B- 树"></a><strong>B- 树</strong></h4><p>平衡多路搜索树的典型代表<br>B-树（B-tree）：m阶B-树，也就是m路平衡搜索树</p><p><strong>所有外部节点的深度都相等</strong>，每个内部节点都存有<strong>不超过</strong>m-1个关键码，以及用以指示对应分支不超过m个引用。<br>各个节点的分支数应该介于m/2（向上取整）与m之间，故也称为(m/2向上取整，m)-树<br>B-树的外部节点：<br>B-树的宽度<br>B-树的叶节点</p><ul><li>非常适合在相对较小的内存中，实现对大规模数据的高效操作。</li></ul><p>复杂度：O(log<sub>m</sub>N)</p><h4 id="kd-树（k-dimensional-tree）"><a href="#kd-树（k-dimensional-tree）" class="headerlink" title="kd-树（k-dimensional tree）"></a><strong>kd-树（k-dimensional tree）</strong></h4><p>四叉树与八叉树的一般性推广<br>递归定义的平衡二叉树<br>一维范围查询（range query）：给定直线L上的点集P={p<sub>0</sub>,p<sub>n-1</sub>},对于任一区间R=[x<sub>1</sub>,x<sub>2</sub>],P中的哪些顶点落在其中？<br>离线方式和在线方式<br><code>输出敏感（output sensitive）</code>的算法<br>平衡二叉搜索树解决一维度范围i查询问题， 找到最低共同祖先，忽略<br>分割成为矩形，举行左边底边开，右边和顶边封闭<br>每次切分都在中位点（对应的坐标排序居中者）。 以保证全树的高度不超过O(log n)<br>复杂度O（根号n）</p><h2 id="图"><a href="#图" class="headerlink" title="图"></a><strong>图</strong></h2><p>非线性结构</p><h3 id="邻接矩阵"><a href="#邻接矩阵" class="headerlink" title="邻接矩阵"></a>邻接矩阵</h3><h3 id="邻接表"><a href="#邻接表" class="headerlink" title="邻接表"></a>邻接表</h3><h3 id="BFS"><a href="#BFS" class="headerlink" title="BFS"></a>BFS</h3><h3 id="DFS"><a href="#DFS" class="headerlink" title="DFS"></a>DFS</h3><h3 id="拓扑排序"><a href="#拓扑排序" class="headerlink" title="拓扑排序"></a>拓扑排序</h3><h2 id="优先级队列与堆"><a href="#优先级队列与堆" class="headerlink" title="优先级队列与堆"></a>优先级队列与堆</h2><p>二叉堆是一种特殊的完全二叉树，分为最大堆和最小堆。<br><code>最大堆:</code>，任何一个父节点的值，都大于或等于它左、右孩子节点的值。<br><code>最小堆:</code>，任何一个父节点的值，都小于或等于它左、右孩子节点的值。</p><h3 id="完全二叉堆"><a href="#完全二叉堆" class="headerlink" title="完全二叉堆"></a>完全二叉堆</h3><h4 id="上滤与下滤"><a href="#上滤与下滤" class="headerlink" title="上滤与下滤"></a>上滤与下滤</h4><h3 id="左式堆"><a href="#左式堆" class="headerlink" title="左式堆"></a>左式堆</h3><h2 id="串"><a href="#串" class="headerlink" title="串"></a>串</h2><h3 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h3><h3 id="串匹配"><a href="#串匹配" class="headerlink" title="串匹配"></a>串匹配</h3><h2 id="散列表"><a href="#散列表" class="headerlink" title="散列表"></a>散列表</h2><p>看这篇文章即可：<a href="https://stemha.github.io/2020/04/14/%E5%93%88%E5%B8%8C%E8%A1%A8%EF%BC%88%E6%95%A3%E5%88%97%E8%A1%A8%EF%BC%89%E8%AF%A6%E8%A7%A3/#more">哈希表（散列表）详解</a></p><h2 id="注解"><a href="#注解" class="headerlink" title="注解"></a>注解</h2><p>偏序只对部分元素成立关系R，全序对集合中任意两个元素都有关系R。</p><ul><li>集合的包含关系是偏序，因为两个集合可以互不包含。</li><li>复数中的大小就是偏序，其中虚数不能比较大小。</li><li>实数中的大小关系是全序，两个实数必有一个大于等于另一个。</li></ul><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p>数据结构 邓俊辉</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;（未完待续）&lt;/p&gt;
    
    </summary>
    
    
      <category term="数据结构" scheme="https://stemha.github.io/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
      <category term="数据结构" scheme="https://stemha.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>C++标准库容器类概述</title>
    <link href="https://stemha.github.io/2020/05/10/C++%E6%A0%87%E5%87%86%E5%BA%93%E5%AE%B9%E5%99%A8%E7%B1%BB%E6%A6%82%E8%BF%B0/"/>
    <id>https://stemha.github.io/2020/05/10/C++%E6%A0%87%E5%87%86%E5%BA%93%E5%AE%B9%E5%99%A8%E7%B1%BB%E6%A6%82%E8%BF%B0/</id>
    <published>2020-05-10T13:34:48.000Z</published>
    <updated>2020-05-11T08:57:23.690Z</updated>
    
    <content type="html"><![CDATA[<h2 id="基础概念"><a href="#基础概念" class="headerlink" title="基础概念"></a><strong>基础概念</strong></h2><p><code>容器（container）</code>：</p><ul><li>容纳特定类型对象的集合。</li><li>C++中所有的容器都是类模板。</li><li>所有容器类型都定义了默认构造函数，用于创建指定类型的空容器对象。容器默认构造函数不带参数。</li><li>为了使程序更清晰、简短，容器类型最常用的构造函数是默认构造函数。在大多数的程序中，使用默认构造函数能达到最佳运行时性能，并且使容器更容易使用。<a id="more"></a></li></ul><p>容器都是类模板。它们实例化后就成为<code>容器类</code>。用容器类定义的对象称为<code>容器对象</code>。<br><code>容器适配器（adaptors）</code>：</p><ul><li>适配器是根据原始的容器类型所提供的操作，通过定义新的操作接口，来适应基础的容器类型。即通过封装某个序列式容器，并重新组合该容器中包含的成员函数，使其满足某些特定场景的需要。</li><li>容器适配器本质上还是容器，只不过此容器模板类的实现，利用了大量其它基础容器模板类中已经写好的成员函数。当然，如果必要的话，容器适配器中也可以自创新的成员函数。</li><li>STL 中的容器适配器，其内部使用的基础容器并不是固定的，用户可以在满足特定条件的多个基础容器中自由选择。</li><li><a href="http://c.biancheng.net/view/6967.html">什么是适配器，C++ STL容器适配器详解</a></li></ul><h2 id="顺序容器和关联容器"><a href="#顺序容器和关联容器" class="headerlink" title="顺序容器和关联容器"></a><strong>顺序容器和关联容器</strong></h2><p>关联容器和顺序容器的根本不同在于：</p><ul><li>关联容器中的元素是按关键字来保存和访问的</li><li>顺序容器中的元素则是按它们在容器中的位置来顺序保存和访问的。</li></ul><h2 id="顺序容器"><a href="#顺序容器" class="headerlink" title="顺序容器"></a><strong>顺序容器</strong></h2><p><code>顺序容器（sequential container）</code>：</p><ul><li>它将单一类型元素聚集起来成为容器，然后根据位置来存储和访问这些元素。</li><li>顺序容器不是排序的：元素排列次序与元素值无关。</li><li>而是由元素添加到容器里的次序决定。</li><li>主要的有三种：<code>可变长动态数组 vector</code>、<code>双端队列 deque</code>、<code>双向链表 list</code>。</li><li>汇总的有vector、deque、list、forward_list、array、string等。</li></ul><p><strong>表1. 顺序容器与顺序容器适配器:</strong></p><table><thead><tr><th align="left">顺序容器</th><th align="left">用途</th><th align="left">顺序容器适配器</th><th align="left">用途</th><th align="left">底层基础容器</th></tr></thead><tbody><tr><td align="left">vector</td><td align="left">可变长动态数组，支持快速随机访问</td><td align="left"><code>stack</code></td><td align="left">后进先出（LIFO）堆栈</td><td align="left">默认使用deque。满足条件的基础容器有 vector、deque、list</td></tr><tr><td align="left">list</td><td align="left">双向链表，支持快速插入/删除</td><td align="left"><code>queue</code></td><td align="left">先进先出（FIFO）队列</td><td align="left">默认使用deque。满足条件的基础容器有 deque、list</td></tr><tr><td align="left">deque</td><td align="left">双端队列</td><td align="left"><code>priority_queue</code></td><td align="left">有优先级管理的队列</td><td align="left">默认使用vector。满足条件的基础容器有vector、deque。</td></tr></tbody></table><p>除了上面的表格之外还存在<code>forward_list</code>顺序容器（单向链表，只支持单向顺序访问），请看文章<a href="https://blog.csdn.net/u013006553/article/details/78158717">链接</a></p><h2 id="关联容器"><a href="#关联容器" class="headerlink" title="关联容器"></a><strong>关联容器</strong></h2><p>关联容器（Associative containers）：</p><ul><li>支持通过键（key）来高效地查找和读取元素。</li><li>关联容器通过键（key）存储和读取元素，而顺序容器则通过元素在容器中的位置顺序存储和访问元素。虽然关联容器的大部分行为与顺序容器相同，但其独特之处在于支持键的使用。</li><li>关联容器支持很多顺序容器也提供的相同操作，此外，还提供管理或使用键的特殊操作。关联容器共享大部分但并非全部的顺序容器操作。关联容器不提供front、 push_front、 pop_front、back、push_back 以及 pop_back 操作。</li></ul><h3 id="有序关联容器"><a href="#有序关联容器" class="headerlink" title="有序关联容器"></a><strong>有序关联容器</strong></h3><p>有序关联容器有以下四种：set、multiset、map、multimap。</p><ul><li>容器元素根据键的次序排列。插入元素时，容器会按一定的排序规则将元素放到适当的位置上，因此插入元素时不能指定位置。</li><li>默认情况下，关联容器中的元素是从小到大排序（或按关键字从小到大排序）的，而且用&lt;运算符比较元素或关键字大小。因为是排好序的，所以关联容器在查找时具有非常好的性能。</li><li>在迭代遍历关联容器时，我们可确保按键的顺序的访问元素，而与元素在容器中的存放位置完全无关。</li></ul><h4 id="map"><a href="#map" class="headerlink" title="map"></a><strong>map</strong></h4><ul><li>以键－值（key-value）对的形式组织：键(key)用作元素在 map 中的索引，而值(value)则表示所存储和读取的数据。</li><li>map 类型通常可理解为<code>关联数组（associative array）</code>：可使用键作为下标来获取一个值，正如内置数组类型一样。</li></ul><p>常用操作：</p><table><thead><tr><th align="left">map查询操作 操作</th><th align="left">作用</th></tr></thead><tbody><tr><td align="left">m.count(k)</td><td align="left"><code>返回 m 中 k 的出现次数</code></td></tr><tr><td align="left">m.find(k)</td><td align="left"><code>如果 m 容器中存在按 k 索引的元素，则返回指向该元素的迭代器。如果不存在，则返回超出末端迭代器</code></td></tr></tbody></table><p>使用 count 检查 map 对象中某键是否存在:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> occurs = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span> (word_count.count(<span class="string">"foobar"</span>))</span><br><span class="line">occurs = word_count[<span class="string">"foobar"</span>];</span><br></pre></td></tr></table></figure><p>读取元素而不插入该元素:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//find 操作返回指向元素的迭代器，如果元素不存在，则返回 end 迭代器：</span></span><br><span class="line"><span class="keyword">int</span> occurs = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">map</span>&lt;<span class="built_in">string</span>,<span class="keyword">int</span>&gt;::iterator it = word_count.find(<span class="string">"foobar"</span>);</span><br><span class="line"><span class="keyword">if</span> (it != word_count.end())</span><br><span class="line">occurs = it-&gt;second;</span><br></pre></td></tr></table></figure><p>更好的请参考：<a href="https://blog.csdn.net/engineerxin/article/details/104779786">《C++Primer》第十章-关联容器-学习笔记(1)-pair&amp;map</a></p><h4 id="multimap"><a href="#multimap" class="headerlink" title="multimap"></a><strong>multimap</strong></h4><ul><li>支持同一个键多次出现的 map 类型</li></ul><h4 id="set"><a href="#set" class="headerlink" title="set"></a><strong>set</strong></h4><ul><li>set 容器只是单纯的键的集合。每个元素仅包含一个键(key)，并有效地支持关于某个键是否存在的查询。</li><li>适用条件：<ul><li>如果希望有效地存储不同值的集合，那么使用 set 容器比较合适</li><li>当只想知道一个值是否存在时，使用 set 容器是最适合的。</li></ul></li><li>set 不支持下标操作符，而且没有定义 mapped_type 类型。在 set 容器中，value_type 不是 pair 类型，而是与 key_type 相同的类型。</li><li>set 容器存储的键也必须唯一，而且不能修改（也体现了 set 存储的元素仅仅是键，而没有所关联的值）</li></ul><h4 id="multiset"><a href="#multiset" class="headerlink" title="multiset"></a><strong>multiset</strong></h4><ul><li>支持同一个键多次出现的 map 类型</li></ul><p>multimap和 multiset 类型与相应的单元素版本具有相同的头文件定义：分别是 map 和set 头文件。<br>multimap 和 multiset 所支持的操作分别与 map 和 set 的操作相同，只有一个例外：multimap 不支持下标运算。</p><h3 id="无序关联容器"><a href="#无序关联容器" class="headerlink" title="无序关联容器"></a><strong>无序关联容器</strong></h3><p>unordered_map<br>unordered_multimap<br>unordered_set<br>unordered_multiset</p><h2 id="STL容器类库"><a href="#STL容器类库" class="headerlink" title="STL容器类库"></a><strong>STL容器类库</strong></h2><p><code>&lt;vector&gt;</code>：定义<code>vector</code>序列模板，是一个大小可以重新设置的数组类型，比普通数组更安全、更灵活。<br><code>&lt;list&gt;</code>：定义<code>list</code>序列模板，是一个<strong>序列的链表</strong>，常常在任意位置插入和删除元素。<br><code>&lt;deque&gt;</code>：定义<code>deque</code>序列模板，支持在开始和结尾的高效插入和删除操作。<br><code>&lt;queue&gt;</code>：为队列(先进先出)数据结构定义序列适配器<code>queue</code>和<code>priority_queue</code>。<br><code>&lt;stack&gt;</code>：为堆栈(后进先出)数据结构定义序列适配器<code>stack</code>。<br><code>&lt;map&gt;</code>：<code>map</code>是一个关联容器类型，允许根据键值是唯一的，且按照升序存储。<code>multimap</code>类似于map，但键不是唯一的。<br><code>&lt;set&gt;</code>：<code>set</code>是一个关联容器类型，用于以升序方式存储唯一值。<code>multiset</code>类似于set，但是值不必是唯一的。<br><code>&lt;bitset&gt;</code>：为固定长度的位序列定义<code>bitset</code>模板，它可以看作固定长度的紧凑型bool数组。类似数组的结构，它的每一个元素只能是０或１，每个元素仅用１bit空间。<br><code>&lt;array&gt;</code>：（TR1）固定大小数组，支持复制。<br><code>&lt;forward_list&gt;</code>：（c++11）单向列表，forward_list不提供随机访问，这一点跟list相同。<code>forward_list</code>是一个单向链表，只支持单向顺序访问，在链表的任何位置进行插入/删除操作都非常快。<br><code>&lt;unordered_set&gt;</code>：（TR1)无序容器<code>set</code>，其元素随机存放。唯一键的集合，按键散列。<code>multiset</code>类似于set，但是值不必是唯一的。<br><code>&lt;unordered_map&gt;</code>：（C++11）（TR1)无序容器<code>map</code>，其键值随机存放。键-值对的集合，由键散列，键是唯一的<code>multimap</code>类似于map，但键不是唯一的。<br>完整的看<a href="https://www.cnblogs.com/yinheyi/p/7504041.html">C++中常用的std标准容器</a></p><h2 id="STL容器类底层实现"><a href="#STL容器类底层实现" class="headerlink" title="STL容器类底层实现"></a><strong>STL容器类底层实现</strong></h2><h3 id="vector"><a href="#vector" class="headerlink" title="vector"></a>vector</h3><p>底层数据结构为数组 ，支持快速随机访问</p><h3 id="list"><a href="#list" class="headerlink" title="list"></a>list</h3><p>底层数据结构为双向链表，支持快速增删</p><h3 id="deque"><a href="#deque" class="headerlink" title="deque"></a>deque</h3><ul><li>底层数据结构为一个中央控制器和多个缓冲区</li><li>支持首尾（中间不能）快速增删，也支持随机访问</li><li>STL源码分析146页</li></ul><h3 id="forward-list"><a href="#forward-list" class="headerlink" title="forward_list"></a>forward_list</h3><ul><li>顺序容器，底层数据结构为单向链表。</li><li>只支持单向顺序访问，支持快速增删</li></ul><h3 id="stack"><a href="#stack" class="headerlink" title="stack"></a>stack</h3><ul><li>底层一般用list和deque实现，封闭头部即可。</li><li>不用vector的原因应该是容量大小有限制，扩容耗时。</li></ul><h3 id="queue"><a href="#queue" class="headerlink" title="queue"></a>queue</h3><ul><li>底层一般用list和deque实现，封闭头部即可</li><li>不用vector的原因应该是容量大小有限制，扩容耗时</li></ul><h3 id="priority-queue"><a href="#priority-queue" class="headerlink" title="priority_queue"></a>priority_queue</h3><p>底层数据结构：一般是vector为底层容器，堆heap为处理规则来管理底层容器实现</p><h3 id="set-1"><a href="#set-1" class="headerlink" title="set"></a>set</h3><p>底层数据结构为红黑树，有序，不重复</p><h3 id="multiset-1"><a href="#multiset-1" class="headerlink" title="multiset"></a>multiset</h3><p>底层数据结构为红黑树，有序，可重复 </p><h3 id="map-1"><a href="#map-1" class="headerlink" title="map      ﻿﻿﻿﻿"></a>map      ﻿﻿﻿﻿</h3><p>底层数据结构为红黑树，有序，不重复</p><h3 id="multimap-1"><a href="#multimap-1" class="headerlink" title="multimap"></a>multimap</h3><p>底层数据结构为红黑树，有序，可重复</p><h3 id="hash-set"><a href="#hash-set" class="headerlink" title="hash_set ﻿﻿﻿﻿"></a>hash_set ﻿﻿﻿﻿</h3><p>底层数据结构为hash表，无序，不重复</p><h3 id="hash-multiset"><a href="#hash-multiset" class="headerlink" title="hash_multiset"></a>hash_multiset</h3><p>底层数据结构为hash表，无序，可重复 </p><h3 id="hash-map"><a href="#hash-map" class="headerlink" title="hash_map      ﻿﻿﻿﻿"></a>hash_map      ﻿﻿﻿﻿</h3><p>底层数据结构为hash表，无序，不重复</p><h3 id="hash-multimap"><a href="#hash-multimap" class="headerlink" title="hash_multimap"></a>hash_multimap</h3><p>底层数据结构为hash表，无序，可重复</p><p><a href="https://blog.csdn.net/qq_43313035/article/details/89600276">C++STL的容器的底层实现详解</a></p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a><strong>参考资料</strong></h2><p><a href="http://c.biancheng.net/view/331.html">C++容器（STL容器）</a><br><a href="https://blog.51cto.com/9291927/2143283">C++语言学习（九）——C++标准库简介</a><br><a href="https://en.cppreference.com/w/cpp/container">Containers library(cppreference.com)</a><br><a href="https://www.cnblogs.com/yinheyi/p/7504041.html">C++中常用的std标准容器</a> //可以做查找表<br><a href="https://blog.csdn.net/u013006553/article/details/78158717">C++中容易忘的知识点——list和forward_list（四）</a>//可做查寻表<br><a href="https://blog.csdn.net/xiaominkong123/article/details/52238699">C++ STL 的底层实现</a><br><a href="https://blog.csdn.net/elisabeth1994/article/details/103297751">C++标准模板库（STL）的容器的底层实现</a><br><a href="https://blog.csdn.net/qq_43313035/article/details/89600276">C++STL的容器的底层实现详解</a>//可以做查找表</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;基础概念&quot;&gt;&lt;a href=&quot;#基础概念&quot; class=&quot;headerlink&quot; title=&quot;基础概念&quot;&gt;&lt;/a&gt;&lt;strong&gt;基础概念&lt;/strong&gt;&lt;/h2&gt;&lt;p&gt;&lt;code&gt;容器（container）&lt;/code&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;容纳特定类型对象的集合。&lt;/li&gt;
&lt;li&gt;C++中所有的容器都是类模板。&lt;/li&gt;
&lt;li&gt;所有容器类型都定义了默认构造函数，用于创建指定类型的空容器对象。容器默认构造函数不带参数。&lt;/li&gt;
&lt;li&gt;为了使程序更清晰、简短，容器类型最常用的构造函数是默认构造函数。在大多数的程序中，使用默认构造函数能达到最佳运行时性能，并且使容器更容易使用。&lt;/li&gt;&lt;/ul&gt;
    
    </summary>
    
    
      <category term="C++" scheme="https://stemha.github.io/categories/C/"/>
    
    
      <category term="C++" scheme="https://stemha.github.io/tags/C/"/>
    
      <category term="容器类" scheme="https://stemha.github.io/tags/%E5%AE%B9%E5%99%A8%E7%B1%BB/"/>
    
      <category term="关联容器" scheme="https://stemha.github.io/tags/%E5%85%B3%E8%81%94%E5%AE%B9%E5%99%A8/"/>
    
      <category term="顺序容器" scheme="https://stemha.github.io/tags/%E9%A1%BA%E5%BA%8F%E5%AE%B9%E5%99%A8/"/>
    
      <category term="C++标准库" scheme="https://stemha.github.io/tags/C-%E6%A0%87%E5%87%86%E5%BA%93/"/>
    
  </entry>
  
  <entry>
    <title>设计模式总结</title>
    <link href="https://stemha.github.io/2020/05/09/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E6%80%BB%E7%BB%93/"/>
    <id>https://stemha.github.io/2020/05/09/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E6%80%BB%E7%BB%93/</id>
    <published>2020-05-08T16:45:12.000Z</published>
    <updated>2020-05-20T10:18:23.912Z</updated>
    
    <content type="html"><![CDATA[<h2 id="设计模式是什么？"><a href="#设计模式是什么？" class="headerlink" title="设计模式是什么？"></a><strong>设计模式是什么？</strong></h2><a id="more"></a><h3 id="基础概念"><a href="#基础概念" class="headerlink" title="基础概念"></a><strong>基础概念</strong></h3><p><code>设计模式（Design pattern）</code>:</p><ul><li>是软件开发人员在软件开发过程中面临的一般问题的解决方案。这些解决方案是众多软件开发人员经过相当长的一段时间的试验和错误总结出来的。</li><li>是一套被反复使用的、多数人知晓的、经过分类编目的、代码设计经验的总结。</li></ul><h3 id="GOF（Gang-of-Four）"><a href="#GOF（Gang-of-Four）" class="headerlink" title="GOF（Gang of Four）"></a>GOF（Gang of Four）</h3><p>1994 年，由 Erich Gamma、Richard Helm、Ralph Johnson 和 John Vlissides 四人合著出版了一本名为 Design Patterns - Elements of Reusable Object-Oriented Software（中文译名：设计模式 - 可复用的面向对象软件元素） 的书，该书首次提到了软件开发中设计模式的概念。<br>他们所提出的设计模式主要是基于以下的面向对象设计原则：</p><ul><li>对接口编程而不是对实现编程。</li><li>优先使用对象组合而不是继承。</li></ul><h2 id="为什么要用设计模式？"><a href="#为什么要用设计模式？" class="headerlink" title="为什么要用设计模式？"></a><strong>为什么要用设计模式？</strong></h2><ul><li>为了重用代码</li><li>让代码更容易被他人理解</li><li>保证代码可靠性。</li></ul><p>设计模式在软件开发中的两个主要用途：</p><ul><li>开发人员的共同平台，提供了一个标准的术语系统，且具体到特定的情景。<ul><li>例如，单例设计模式意味着使用单个对象，这样所有熟悉单例设计模式的开发人员都能使用单个对象，并且可以通过这种方式告诉对方，程序使用的是单例模式。</li></ul></li><li>最佳的实践 <ul><li>设计模式已经经历了很长一段时间的发展，它们提供了软件开发过程中面临的一般问题的最佳解决方案。学习这些模式有助于经验不足的开发人员通过一种简单快捷的方式来学习软件设计。</li></ul></li></ul><h2 id="设计模式有哪些？"><a href="#设计模式有哪些？" class="headerlink" title="设计模式有哪些？"></a><strong>设计模式有哪些？</strong></h2><p>共有 23 种设计模式，可以分为三类：</p><ul><li><code>创建型模式（Creational Patterns）</code>    提供了一种在<strong>创建对象的同时隐藏创建逻辑</strong>的方式，而不是使用 new 运算符直接实例化对象。这使得程序在判断针对某个给定实例需要创建哪些对象时更加灵活。</li><li><code>结构型模式（Structural Patterns）</code>    用于在许多不同的对象之间形成大型对象结构,<strong>关注类和对象的组合</strong>。继承的概念被用来组合接口和定义组合对象获得新功能的方式。</li><li><code>行为型模式（Behavioral Patterns）</code>    关注对象之间的通信,用于管理对象之间的算法、关系和职责。</li></ul><h2 id="创建型模式"><a href="#创建型模式" class="headerlink" title="创建型模式"></a><strong>创建型模式</strong></h2><h3 id="单例模式（Singleton-Pattern）"><a href="#单例模式（Singleton-Pattern）" class="headerlink" title="单例模式（Singleton Pattern）"></a><strong>单例模式（Singleton Pattern）</strong></h3><p><a href="https://www.runoob.com/design-pattern/singleton-pattern.html">单例模式-菜鸟教程</a><br><strong>目的</strong>：保证一个类仅有一个实例，并提供一个访问它的全局访问点。<br><strong>何时使用</strong>：当您想控制实例数目，节省系统资源的时候。<br><strong>面临的问题</strong>：一个全局使用的类频繁地创建与销毁。<br><strong>解决方案</strong>判断系统是否已经有这个单例，如果有则返回，如果没有则创建。<br><strong>关键代码</strong>：构造函数是私有的。<br><strong>优点</strong>：</p><ol><li>在内存里只有一个实例，减少了内存的开销，尤其是频繁的创建和销毁实例（比如管理学院首页页面缓存）。</li><li>避免对资源的多重占用（比如写文件操作）。</li></ol><p><strong>缺点</strong>：没有接口，不能继承，与单一职责原则冲突，一个类应该只关心内部逻辑，而不关心外面怎么样来实例化。<br><strong>应用实例</strong>：<br>1、一个班级只有一个班主任。<br>2、Windows 是多进程多线程的，在操作一个文件的时候，就不可避免地出现多个进程或线程同时操作一个文件的现象，所以所有文件的处理必须通过唯一的实例来进行。<br>3、一些设备管理器常常设计为单例模式，比如一个电脑有两台打印机，在输出的时候就要处理不能两台打印机打印同一个文件。<br><strong>使用场景</strong>：<br>1、要求生产唯一序列号。<br>2、WEB 中的计数器，不用每次刷新都在数据库里加一次，用单例先缓存起来。<br>3、创建的一个对象需要消耗的资源过多，比如 I/O 与数据库的连接等。<br><strong>实现方式</strong>:<br>《设计模式》一书中给出了一种很不错的实现，定义一个单例类，使用类的私有静态指针变量指向类的唯一实例，并用一个公有的静态方法获取该实例。</p><p><strong>常见的单例模式分为两种</strong>：<br>1、<code>饿汉式</code>：即类产生的时候就创建好实例对象，这是一种空间换时间的方式<br>2、<code>懒汉式</code>：即在需要的时候，才创建对象，这是一种时间换空间的方式<br><a href="https://blog.csdn.net/sinat_33924041/article/details/83621256">【C++】单例模式/工厂模式</a></p><h3 id="工厂模式（Factory-Pattern）"><a href="#工厂模式（Factory-Pattern）" class="headerlink" title="工厂模式（Factory Pattern）"></a><strong>工厂模式（Factory Pattern）</strong></h3><p><a href="https://www.cnblogs.com/yssjun/p/11102162.html">设计模式之工厂模式（factory pattern）</a>讲的很形象<br>工厂顾名思义就是创建产品，根据产品是具体产品还是具体工厂可分为简单工厂模式和工厂方法模式。<br><a href="https://www.runoob.com/design-pattern/factory-pattern.html">工厂模式-菜鸟教程</a><br>提供了一种创建对象的最佳方式，创建对象时不会对客户端暴露创建逻辑，并且是通过使用一个共同的接口来指向新创建的对象。<br><strong>目的</strong>：定义一个创建对象的接口，让其子类自己决定实例化哪一个工厂类，工厂模式使其创建过程（类的实例化）延迟到子类进行。<br><strong>何时使用</strong>：我们明确地计划不同条件下创建不同实例时。<br><strong>面临的问题</strong>：</p><h3 id="抽象工厂模式（Abstract-Factory-Pattern）"><a href="#抽象工厂模式（Abstract-Factory-Pattern）" class="headerlink" title="抽象工厂模式（Abstract Factory Pattern）"></a><strong>抽象工厂模式（Abstract Factory Pattern）</strong></h3><p>根据工厂的抽象程度可分为工厂方法模式和抽象工厂模式。<br>是围绕一个超级工厂创建其他工厂。该超级工厂又称为其他工厂的工厂。<br>提供一个创建一系列相关或相互依赖对象的接口，而无需指定它们具体的类。</p><h3 id="建造者（生成器）模式（Builder-Pattern）"><a href="#建造者（生成器）模式（Builder-Pattern）" class="headerlink" title="建造者（生成器）模式（Builder Pattern）"></a><strong>建造者（生成器）模式（Builder Pattern）</strong></h3><p>使用多个简单的对象一步一步构建成一个复杂的对象。<br>将一个复杂对象的构建与它的表示分离，使得同样的构建过程可以创建不同的表示。</p><h3 id="原型模式（Prototype-Pattern）"><a href="#原型模式（Prototype-Pattern）" class="headerlink" title="原型模式（Prototype Pattern）"></a><strong>原型模式（Prototype Pattern）</strong></h3><p>用于创建重复的对象，同时又能保证性能。<br>这种模式是实现了一个原型接口，该接口用于创建当前对象的克隆。当直接创建对象的代价比较大时，则采用这种模式。<br>其实就是从一个对象再创建另外一个可定制的对象，而且不需知道任何创建的细节。用原型实例指定创建对象的种类，并且通过拷贝这个原型来创建新的对象。</p><h4 id="深拷贝与浅拷贝"><a href="#深拷贝与浅拷贝" class="headerlink" title="深拷贝与浅拷贝"></a><strong>深拷贝与浅拷贝</strong></h4><p><code>浅拷贝</code>：被复制对象的所有变量都含有与原来的对象相同的值，而所有的对其他对象的引用都仍然指向原来的对象。</p><p><code>深拷贝</code>：把要复制的对象所引用的对象都复制一遍。深拷贝把引用对象的变量指向复制过的新对象，而不是原有的被引用的对象。</p><h2 id="结构型模式"><a href="#结构型模式" class="headerlink" title="结构型模式"></a><strong>结构型模式</strong></h2><h3 id="适配器模式（Adapter-Pattern）"><a href="#适配器模式（Adapter-Pattern）" class="headerlink" title="适配器模式（Adapter Pattern）"></a><strong>适配器模式（Adapter Pattern）</strong></h3><p>作为两个不兼容的接口之间的桥梁。<br>将一个类的接口转换成客户希望的另外一个接口。Adapter 模式使得原本由于接口不兼容而不能一起工作的那些类可以一起工作。</p><h3 id="桥接模式（Bridge-Pattern）"><a href="#桥接模式（Bridge-Pattern）" class="headerlink" title="桥接模式（Bridge Pattern）"></a><strong>桥接模式（Bridge Pattern）</strong></h3><p>将抽象部分与它的实现部分分离，使它们都可以独立地变化。</p><h3 id="装饰者模式（Decorator-Pattern）"><a href="#装饰者模式（Decorator-Pattern）" class="headerlink" title="装饰者模式（Decorator Pattern）"></a><strong>装饰者模式（Decorator Pattern）</strong></h3><p>允许向一个现有的对象添加新的功能，同时又不改变其结构。作为现有的类的一个包装。<br>动态地给一个对象添加一些额外的职责。就扩展功能而言，它比生成子类方式更为灵活。</p><h3 id="组合模式（Composite-Pattern）"><a href="#组合模式（Composite-Pattern）" class="headerlink" title="组合模式（Composite Pattern）"></a><strong>组合模式（Composite Pattern）</strong></h3><p>将对象组合成树形结构以表示“部分-整体”的层次结构。它使得客户对单个对象和复合对象的使用具有一致性。</p><h3 id="外观模式（Facade-Pattern）"><a href="#外观模式（Facade-Pattern）" class="headerlink" title="外观模式（Facade Pattern）"></a><strong>外观模式（Facade Pattern）</strong></h3><p>隐藏系统的复杂性，并向客户端提供了一个客户端可以访问系统的接口。<br>为子系统中的一组接口提供一个一致的界面，Facade 模式定义了一个高层接口，这个接口使得这一子系统更加容易使用。</p><h3 id="享元模式（Flyweight-Pattern）"><a href="#享元模式（Flyweight-Pattern）" class="headerlink" title="享元模式（Flyweight Pattern）"></a><strong>享元模式（Flyweight Pattern）</strong></h3><p>用于减少创建对象的数量，以减少内存占用和提高性能。<br>尝试重用现有的同类对象，如果未找到匹配的对象，则创建新对象。<br>运用共享技术有效地支持大量细粒度的对象。</p><h3 id="代理模式（Proxy-Pattern）"><a href="#代理模式（Proxy-Pattern）" class="headerlink" title="代理模式（Proxy Pattern）"></a><strong>代理模式（Proxy Pattern）</strong></h3><p>为其他对象提供一个代理以控制对这个对象的访问。</p><h2 id="行为型模式"><a href="#行为型模式" class="headerlink" title="行为型模式"></a><strong>行为型模式</strong></h2><h3 id="模版方法模式（Template-Method-Pattern）"><a href="#模版方法模式（Template-Method-Pattern）" class="headerlink" title="模版方法模式（Template Method Pattern）"></a><strong>模版方法模式（Template Method Pattern）</strong></h3><p><a href="https://github.com/CyC2018/CS-Notes/blob/master/notes/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%20-%20%E6%A8%A1%E6%9D%BF%E6%96%B9%E6%B3%95.md">设计模式 - 模板方法.</a><br>定义一个操作中的算法的骨架，而将一些步骤延迟到子类中。Template Method 使得子类可以不改变一个算法的结构即可重定义该算法的某些特定步骤。<br>比如冲咖啡和冲茶都有类似的流程，但是某些步骤会有点不一样，要求复用那些相同步骤的代码。</p><h3 id="命令模式（Command-Pattern）"><a href="#命令模式（Command-Pattern）" class="headerlink" title="命令模式（Command Pattern）"></a><strong>命令模式（Command Pattern）</strong></h3><p><a href="https://github.com/CyC2018/CS-Notes/blob/master/notes/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%20-%20%E5%91%BD%E4%BB%A4.md">设计模式 - 命令模式</a><br>将一个请求封装为一个对象，从而使你可用不同的请求对客户进行参数化；对请求排队或记录请求日志，以及支持可取消的操作。</p><h3 id="迭代器模式（Iterator-Pattern）"><a href="#迭代器模式（Iterator-Pattern）" class="headerlink" title="迭代器模式（Iterator Pattern）"></a><strong>迭代器模式（Iterator Pattern）</strong></h3><p>提供一种方法顺序访问一个聚合对象中各个元素，而又不需暴露该对象的内部表示。</p><h3 id="观察者模式（Observer-Pattern）"><a href="#观察者模式（Observer-Pattern）" class="headerlink" title="观察者模式（Observer Pattern）"></a><strong>观察者模式（Observer Pattern）</strong></h3><p>当对象间存在一对多关系时，则使用观察者模式（Observer Pattern）。比如，当一个对象被修改时，则会自动通知它的依赖对象。</p><h3 id="中介者模式（Mediator-Pattern）"><a href="#中介者模式（Mediator-Pattern）" class="headerlink" title="中介者模式（Mediator Pattern）"></a><strong>中介者模式（Mediator Pattern）</strong></h3><p>用来降低多个对象和类之间的通信复杂性。这种模式提供了一个中介类，该类通常处理不同类之间的通信，并支持松耦合，使代码易于维护。</p><h3 id="备忘录模式-（Memento-Pattern）"><a href="#备忘录模式-（Memento-Pattern）" class="headerlink" title="备忘录模式 （Memento Pattern）"></a><strong>备忘录模式 （Memento Pattern）</strong></h3><p>保存一个对象的某个状态，以便在适当的时候恢复对象。<br>在不破坏封装性的前提下，捕获一个对象的内部状态，并在该对象之外保存这个状态。这样以后就可将该对象恢复到保存的状态。</p><h3 id="解释器模式（Interpreter-Pattern）"><a href="#解释器模式（Interpreter-Pattern）" class="headerlink" title="解释器模式（Interpreter Pattern）"></a><strong>解释器模式（Interpreter Pattern）</strong></h3><p>为语言创建解释器，通常由语言的语法和语法分析来定义。<br>给定一个语言，定义它的文法的一种表示，并定义一个解释器，该解释器使用该表示来解释语言中的句子。</p><h3 id="状态模式（State-Pattern）"><a href="#状态模式（State-Pattern）" class="headerlink" title="状态模式（State Pattern）"></a><strong>状态模式（State Pattern）</strong></h3><p>类的行为是基于它的状态改变的。<br>允许一个对象在其内部状态改变时改变它的行为。对象看起来似乎修改了它所属的类。</p><h3 id="策略模式（Strategy-Pattern）"><a href="#策略模式（Strategy-Pattern）" class="headerlink" title="策略模式（Strategy Pattern）"></a><strong>策略模式（Strategy Pattern）</strong></h3><p>定义一系列的算法，把它们一个个封装起来，并且使它们可相互替换。本模式使得算法的变化可独立于使用它的客户端。</p><h3 id="职责链模式-（Chain-of-Responsibility-Pattern）"><a href="#职责链模式-（Chain-of-Responsibility-Pattern）" class="headerlink" title="职责链模式 （Chain of Responsibility Pattern）"></a><strong>职责链模式 （Chain of Responsibility Pattern）</strong></h3><p>为请求创建了一个接收者对象的链，通常每个接收者都包含对另一个接收者的引用。如果一个对象不能处理该请求，那么它会把相同的请求传给下一个接收者，依此类推。<br>为解除请求的发送者和接收者之间耦合，而使多个对象都有机会处理这个请求。将这些对象连成一条链，并沿着这条链传递该请求，直到有一个对象处理它。</p><h3 id="访问者模式-（Visitor-Pattern）"><a href="#访问者模式-（Visitor-Pattern）" class="headerlink" title="访问者模式 （Visitor Pattern）"></a><strong>访问者模式 （Visitor Pattern）</strong></h3><p>使用了一个访问者类，它改变了元素类的执行算法。通过这种方式，元素的执行算法可以随着访问者改变而改变。<br>表示一个作用于某对象结构中的各元素的操作。它使你可以在不改变各元素的类的前提下定义作用于这些元素的新操作。</p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p><a href="https://www.cnblogs.com/yssjun/p/11102162.html">设计模式之工厂模式（factory pattern）</a><br><a href="https://www.cnblogs.com/yfzhou/p/9976001.html">《大话设计模式》读书笔记</a><br><a href="https://www.runoob.com/design-pattern/design-pattern-intro.html">设计模式-菜鸟教程</a><br><a href="https://blog.csdn.net/liang19890820/article/details/66974516">C++ 设计模式-CSDN</a><br><a href="https://blog.csdn.net/sinat_33924041/article/details/83621256">【C++】单例模式/工厂模式</a><br><a href="https://blog.csdn.net/huasir_hit/article/details/75269513">C++中的单例模式和工厂模式</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;设计模式是什么？&quot;&gt;&lt;a href=&quot;#设计模式是什么？&quot; class=&quot;headerlink&quot; title=&quot;设计模式是什么？&quot;&gt;&lt;/a&gt;&lt;strong&gt;设计模式是什么？&lt;/strong&gt;&lt;/h2&gt;
    
    </summary>
    
    
      <category term="软件工程" scheme="https://stemha.github.io/categories/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/"/>
    
    
      <category term="面向对象" scheme="https://stemha.github.io/tags/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/"/>
    
      <category term="设计模式" scheme="https://stemha.github.io/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>C++特性及优缺点</title>
    <link href="https://stemha.github.io/2020/05/08/C++%E7%89%B9%E6%80%A7%E5%8F%8A%E4%BC%98%E7%BC%BA%E7%82%B9/"/>
    <id>https://stemha.github.io/2020/05/08/C++%E7%89%B9%E6%80%A7%E5%8F%8A%E4%BC%98%E7%BC%BA%E7%82%B9/</id>
    <published>2020-05-08T13:03:43.000Z</published>
    <updated>2020-05-08T13:36:30.296Z</updated>
    
    <content type="html"><![CDATA[<h2 id="C-语言优缺点"><a href="#C-语言优缺点" class="headerlink" title="C++语言优缺点"></a><strong>C++语言优缺点</strong></h2><a id="more"></a><p><strong>优点</strong></p><ul><li>兼容性好，C++在保持了C语言简洁高效的特点的同时，还对C的类型系统进行改革性扩充，相比C语言，C++更安全，其编译系统也能检查出更多错误类型。</li><li>面向对象编程能力，可复用性好，可以让团队衍化出自己的的类库。</li><li>性能优势，程序效率高。</li></ul><p><strong>缺点</strong></p><ul><li>C++ 是 C 语言的一个超集，既有指针又有对象使它成为最复杂的语言，学习难度大。过分的精细和复杂了。C++的复杂度，超过了C和OO（面向对象）的复杂度之和</li><li>没有垃圾回收机制。</li></ul><p>C++本质上说是提前编译的，Fortran也是。C#和Java大多时候是编译成字节码，运行的时候再 即使编译。Python和Ruby通常是解释型。这就产生了一个性能的分级：C++和Fortran比Java和C#快，Java和C#又比Python 和Ruby快。<br><a href="http://www.ruanyifeng.com/blog/2010/03/programming_language_evaluations_revised.html">几种计算机语言的评价（修订版）</a><br><a href="https://www.kawabangga.com/posts/582">为什么一些语言会比别的快？</a></p><h2 id="C-特性"><a href="#C-特性" class="headerlink" title="C++特性"></a><strong>C++特性</strong></h2><p>C++面向对象的三个基本特征：封装、继承、多态。它们的目的都是为了——<strong>代码重用</strong>。而多态则是为了实现另一个目的——<strong>接口重用</strong><br>在 C++ 中，用类进行封装（数据抽象），用类派生从一个类继承另一个：派生类继承基类的成员。<br>多态（动态绑定）使编译器能够在运行时决定是使用基类中定义的函数还是派生类中定义的函数<br>继承和多态（动态绑定）在两个方面简化了我们的程序：能够容易地定义与其他类相似但又不相同的新类，能够更容易地编写忽略这些相似类型之间区别的程序。</p><h3 id="封装（encapsulation）"><a href="#封装（encapsulation）" class="headerlink" title="封装（encapsulation）"></a><strong>封装（encapsulation）</strong></h3><p><code>封装</code>是一项低层次的元素组合起来的形成新的、高层次实体的技术。</p><ul><li><code>函数</code>是封装的一种形式：函数所执行的细节行为被封装在函数本身这个更大的实体中。被封装的元素隐藏了它们的实现细节——可以调用一个函数但不能访问它所执行的语句。</li><li><code>类</code>也是一个封装的实体：它代表若干成员的聚焦，大多数（良好设计的）类类型隐藏了实现该类型的成员。</li></ul><p>目的：</p><ul><li>将抽象得到的数据和行为相结合，形成一个有机的整体（结合性）</li><li>将对象的使用者和设计者分开，以提高软件的可维护性和可修改性</li><li>实现代码重用</li></ul><h3 id="继承（inheritance）"><a href="#继承（inheritance）" class="headerlink" title="继承（inheritance）"></a><strong>继承（inheritance）</strong></h3><p>继承：继承性是子类自动共享父类数据结构和方法的机制，这是类之间的一种关系。在定义和实现一个类的时候，可以在一个已经存在的类的基础之上来进行，把这个已经存在的类所定义的内容作为自己的内容，并加入若干新的内容。</p><ul><li>通过继承关联起来的类型都共享共同的接口。当一个类继承另一个类时，这两个类通常可以使用相同的操作。更确切地说，如果两种类型存在继承关系，则可以说一个类“继承”了其父类的行为——接口。</li><li>C++ 中所提及的父类称为<code>基类（base class）</code>，而继承而来的类则称为<code>派生类（derived class）</code>。</li></ul><h3 id="多态（polymorphism）"><a href="#多态（polymorphism）" class="headerlink" title="多态（polymorphism）"></a><strong>多态（polymorphism）</strong></h3><p>多态：多态的基础是继承。多态下，子类重写父类的方法，实际使用过程中，用父类引用变量指向子类对象，此时父类引用调用的是子类重写后的方法，由于是父类引用变量，所有无法调用子类特有的方法。如果想调用子类特有的方法，必须强制类型转换到子类。<br>多态性派生于一个希腊单词，意思是“许多形态”。之所以称<u>通过继承而相关联的类型为</u><code>多态类型</code>，是因为在许多情况下可以互换地使用派生类型或基类型的“许多形态”。在 C++ 中，多态性仅用于通过继承而相关联的类型的引用或指针。<br>多态性：指的是<strong>基于引用或指针的动态类型获得类型明确的行为的能力</strong>。</p><ul><li>在C++中的主要表现是动态多态（动态绑定）</li><li>动态多态（动态绑定）：我们能够编写程序使用继承层次中任意类型的对象，无须关心对象的具体类型。使用这些类的程序无须区分函数是在基类还是在派生类中定义的。</li><li>在 C++ 中，基类必须指出希望派生类重写哪些函数，定义为 virtual 的函数是基类期待派生类重新定义的，基类希望派生类继承的函数不能定义为虚函数。</li><li>引用和指针的静态类型与动态类型可以不同，这是 C++ 用以支持多态性的基石。</li></ul><h4 id="静态多态（编译期-早绑定）"><a href="#静态多态（编译期-早绑定）" class="headerlink" title="静态多态（编译期/早绑定）"></a><strong>静态多态（编译期/早绑定）</strong></h4><p><code>template（模板）</code>：静态多态（编译时完成，效率高，适配性高，松耦合性），隐形接口<br><code>overload（重载）</code>：静态多态</p><ol><li>同名函数，不同参数/函数返回值</li><li>相同范围，同一个类中</li></ol><p><code>overwrite（重写）</code>：静态多态，子类屏蔽父类的同名基函数</p><ol><li>同名同参，无virtual</li><li>同名不同参</li></ol><h4 id="动态多态（运行期-晚绑定）"><a href="#动态多态（运行期-晚绑定）" class="headerlink" title="动态多态（运行期/晚绑定）"></a><strong>动态多态（运行期/晚绑定）</strong></h4><p><code>override（覆盖重写）</code>：动态多态（运行时完成，接口重用，编译器无法优化）</p><ol><li>不同类中</li><li>同名，同参</li><li>基类函数有virtual</li></ol><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a><strong>参考资料</strong></h2><p>[1]C++ primer 第四版<br>[2]<a href="http://www.ruanyifeng.com/blog/2010/03/programming_language_evaluations_revised.html">几种计算机语言的评价（修订版）</a><br>[3]<a href="https://www.kawabangga.com/posts/582">为什么一些语言会比别的快？</a><br>[4]<a href="https://blog.csdn.net/Chuwei_xu/article/details/89321191">C++ 特性及类（面试复习整理）</a><br>[5]<a href="https://www.runoob.com/cplusplus/cpp-polymorphism.html">C++ 多态-菜鸟教程</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;C-语言优缺点&quot;&gt;&lt;a href=&quot;#C-语言优缺点&quot; class=&quot;headerlink&quot; title=&quot;C++语言优缺点&quot;&gt;&lt;/a&gt;&lt;strong&gt;C++语言优缺点&lt;/strong&gt;&lt;/h2&gt;
    
    </summary>
    
    
      <category term="C++" scheme="https://stemha.github.io/categories/C/"/>
    
    
      <category term="C++" scheme="https://stemha.github.io/tags/C/"/>
    
      <category term="封装" scheme="https://stemha.github.io/tags/%E5%B0%81%E8%A3%85/"/>
    
      <category term="继承" scheme="https://stemha.github.io/tags/%E7%BB%A7%E6%89%BF/"/>
    
      <category term="多态" scheme="https://stemha.github.io/tags/%E5%A4%9A%E6%80%81/"/>
    
      <category term="静态多态" scheme="https://stemha.github.io/tags/%E9%9D%99%E6%80%81%E5%A4%9A%E6%80%81/"/>
    
      <category term="动态多态" scheme="https://stemha.github.io/tags/%E5%8A%A8%E6%80%81%E5%A4%9A%E6%80%81/"/>
    
  </entry>
  
  <entry>
    <title>C++内存分配与内存划分</title>
    <link href="https://stemha.github.io/2020/05/08/C++%E5%86%85%E5%AD%98%E5%88%86%E9%85%8D%E4%B8%8E%E5%86%85%E5%AD%98%E5%88%92%E5%88%86/"/>
    <id>https://stemha.github.io/2020/05/08/C++%E5%86%85%E5%AD%98%E5%88%86%E9%85%8D%E4%B8%8E%E5%86%85%E5%AD%98%E5%88%92%E5%88%86/</id>
    <published>2020-05-07T17:46:47.000Z</published>
    <updated>2020-05-20T16:06:32.623Z</updated>
    
    <content type="html"><![CDATA[<h2 id="C-C-内存使用划分"><a href="#C-C-内存使用划分" class="headerlink" title="C/C++内存使用划分"></a><strong>C/C++内存使用划分</strong></h2><p>C/C++编译过的程序使用的内存划分：</p><a id="more"></a><h3 id="栈区"><a href="#栈区" class="headerlink" title="栈区"></a><strong>栈区</strong></h3><ul><li>是连续的内存区域。</li><li>由编译器在需要的时候分配，在不需要的时候自动清除的变量的存储区。</li><li>栈区的变量通常是局部变量、函数参数等。 </li><li>只要栈的剩余空间大于所申请空间，系统将为程序提供内存，否则将报异常提示栈溢出。</li><li>每次程序运行都会分配一个栈，<strong>main函数就在栈底</strong>，然后通过不同函数的调用顺序，依次进栈出栈。<br><a href="https://zhidao.baidu.com/question/397221561.html">c语言main函数中的变量和其他函数中的变量使用的是一个堆栈吗</a></li></ul><h3 id="堆区（动态内存分配）"><a href="#堆区（动态内存分配）" class="headerlink" title="堆区（动态内存分配）"></a><strong>堆区（动态内存分配）</strong></h3><ul><li>是不连续的内存区域。</li></ul><p><code>自由存储区或堆</code>：每一个程序在执行时都占用一块可用的内存空间，用于存放动态分配的对象，此内存空间称为程序的自由存储区或堆。<br>C 语言程序使用一对标准库函数malloc 和 free 在自由存储区中分配存储空间，而 C++ 语言则使用 new 和delete 表达式实现相同的功能。可以手动释放或者程序结束自动释放存储空间。<br><strong>优点</strong>：动态内存的生存期人为决定，使用灵活。<br><strong>缺点</strong>：是容易分配/释放不当容易造成内存泄漏，频繁分配/释放会产生大量内存碎片。<br>若程序员不释放，程序结束时可能由OS（操作系统）回收。<br>注意它与数据结构中的堆是两回事，分配方式类似于链表。</p><h3 id="全局-静态存储区"><a href="#全局-静态存储区" class="headerlink" title="全局/静态存储区"></a><strong>全局/静态存储区</strong></h3><p>全局变量和静态变量的存储是放在一起。C语言中，全局变量又分为初始化的和未初始化的。C++里面没有这个区分了，他们共同占用同一块内存区。程序结束后由系统释放。</p><h3 id="常量存储区"><a href="#常量存储区" class="headerlink" title="常量存储区"></a><strong>常量存储区</strong></h3><p>这是一个比较特殊的存储区，里面存放的是常量，不允许修改。程序结束后由系统释放。</p><h3 id="程序代码区"><a href="#程序代码区" class="headerlink" title="程序代码区"></a><strong>程序代码区</strong></h3><p>存放函数的二进制代码。</p><h2 id="堆存储-栈存储"><a href="#堆存储-栈存储" class="headerlink" title="堆存储/栈存储"></a><strong>堆存储/栈存储</strong></h2><h3 id="对象是存放在堆中还是栈中"><a href="#对象是存放在堆中还是栈中" class="headerlink" title="对象是存放在堆中还是栈中"></a><strong>对象是存放在堆中还是栈中</strong></h3><p>要看怎么去构造这个对象：</p><ul><li>如果用new来生成的对象,是放在堆中的。</li><li>直接定义的局部变量内都是放在栈中的，全局和静态的对象（包括类的静态数据成员）是放在数据段的静态存储区</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Class Test；</span><br><span class="line">Test p;            <span class="comment">//栈上分配内存</span></span><br><span class="line">Test* tTest；      <span class="comment">//指针在栈中</span></span><br><span class="line">tTest = <span class="keyword">new</span> Test;，<span class="comment">//new的在堆中</span></span><br></pre></td></tr></table></figure><h3 id="堆存储"><a href="#堆存储" class="headerlink" title="堆存储"></a><strong>堆存储</strong></h3><ul><li>因为没有专门的系统支持，效率很低；</li><li>可能引发用户态和核心态的切换，内存的申请代价变得更加昂贵。</li><li>操作系统有一个记录空闲内存地址的链表，当系统收到程序的申请时，会遍历该链表，寻找第一个空间大于所申请空间的堆结点，然后将该结点从空闲结点链表中删除，并将该结点的空间分配给程序</li><li>大多数系统，会在这块内存空间中的首地址处记录本次分配的大小，这样，代码中的delete语句才能正确的释放本内存空间。</li><li>因为找到的堆结点的大小不一定正好等于申请的大小，系统会自动的将多余的那部分重新放入空闲链表中。</li></ul><h3 id="栈存储"><a href="#栈存储" class="headerlink" title="栈存储"></a><strong>栈存储</strong></h3><ul><li>用于存储占用空间小，生命周期短的数据（局部变量/参数变量等）</li><li>若栈的剩余空间大于所申请空间，系统将为程序提供内存，否则报异常提示栈溢出</li></ul><p>出现<code>栈内存溢出</code>的常见原因有2个：</p><ol><li>函数调用层次过深,每调用一次,函数的参数、局部变量等信息就压一次栈。</li><li>局部变量体积太大。</li></ol><h3 id="地址分配"><a href="#地址分配" class="headerlink" title="地址分配"></a><strong>地址分配</strong></h3><ul><li>堆，往下增长，向内存地址增加的方向增长</li><li>栈，往上增长，向内存地址减小的方向增长（对于小端存储，高位字节在高端地址、低位字节在低位地址，因此在压栈时先压高字节后压低字节）</li><li>可能会发生堆栈冲突(从堆中分配内存失败或者爆栈)</li><li>大端存储：数据高位在内存低位，低位在内存高位（如Freescale的PowerPC处理器）</li><li>小端存储：数据高位在内存高位，低位在内存低位（Intel的芯片一般是小端存储）</li></ul><h3 id="分配效率"><a href="#分配效率" class="headerlink" title="分配效率"></a><strong>分配效率</strong></h3><p>栈是机器系统提供的数据结构，计算机会在底层对栈提供支持：分配专门的寄存器存放栈的地址，压栈出栈都有专门的指令执行，这就决定了栈的效率比较高。</p><p>堆则是C/C++函数库提供的，它的机制是很复杂的，例如为了分配一块内存，库函数会按照一定的算法在堆内存中搜索可用的足够大小的空间，如果没有足够大小的空间（可能是由于内存碎片太多），就有可能调用系统功能去增加程序数据段的内存空间，这样就有机会分到足够大小的内存，然后进行返回。显然，堆的效率比栈要低得多。</p><p><a href="https://www.cnblogs.com/yunlambert/p/10053800.html">堆、栈与大小端存储</a></p><h2 id="数据存放"><a href="#数据存放" class="headerlink" title="数据存放"></a><strong>数据存放</strong></h2><p>基本数据类型：</p><ul><li>直接存储在<strong>栈(stack)</strong>中的数据。（字符串、布尔值、未定义、数字、null）</li><li>null只是一个空指针对象，没有数据。</li></ul><p>引用类型：</p><ul><li>将该对象引用地址存储在<strong>栈(stack)</strong>中，然后对象里面的数据存放在<strong>堆</strong>中。（数组、对象、函数）</li><li>存储的是该对象在栈中的引用，真实的数据存放在堆内存里</li><li>引用数据类型在栈中存储了指针，该指针指向堆中该实体的起始地址。当解释器寻找引用值时，会首先检索其在栈中的地址，取得地址后从堆中获得实体。</li></ul><h2 id="深拷贝与浅拷贝"><a href="#深拷贝与浅拷贝" class="headerlink" title="深拷贝与浅拷贝"></a><strong>深拷贝与浅拷贝</strong></h2><h3 id="深拷贝"><a href="#深拷贝" class="headerlink" title="深拷贝"></a><strong>深拷贝</strong></h3><p><strong>既复制对象空间又复制资源</strong><br>在某些状况下，类内成员变量需要动态开辟堆内存，如果实行位拷贝，也就是把对象里的值完全复制给另一个对象，如A=B。这时，如果B中有一个成员变量指针已经申请了内存，那A中的那个成员变量也指向同一块内存。如果此时B中执行析构函数释放掉指向那一块堆的指针，这时A内的指针就将成为悬挂指针。因此，这种情况下不能简单地复制指针，而应该复制“资源”，也就是再重新开辟一块同样大小的内存空间。<br>当拷贝对象中有对其他资源（如堆、文件、系统等）的引用时（引用可以是指针或引用）时，对象的另开辟一块新的资源，而不再对拷贝对象中有对其他资源的引用的指针或引用进行单纯的赋值，然后同步复拷贝开辟空间的值。</p><h3 id="浅拷贝"><a href="#浅拷贝" class="headerlink" title="浅拷贝"></a><strong>浅拷贝</strong></h3><p><strong>只复制对象空间而不复制资源</strong> </p><ul><li>如果在类中没有显式地声明一个拷贝构造函数，那么，编译器将会根据需要生成一个默认的拷贝构造函数，完成对象之间的位拷贝。<code>default memberwise copy</code>即称为<code>浅拷贝</code>。</li><li>即默认拷贝构造函数只是对对象进行浅拷贝复制(逐个成员依次拷贝)</li><li>浅拷贝是按位拷贝对象，它会创建一个新对象，这个对象有着原始对象属性值的一份精确拷贝。</li><li>如果属性是基本类型，拷贝的就是基本类型的值；</li><li>如果属性是内存地址（引用类型），拷贝的就是内存地址 ，因此如果其中一个对象改变了这个地址，就会影响到另一个对象。</li></ul><h2 id="C-C-内存分配的三种方式"><a href="#C-C-内存分配的三种方式" class="headerlink" title="C/C++内存分配的三种方式"></a><strong>C/C++内存分配的三种方式</strong></h2><ol><li>静态存储区分配<br>内存分配在程序编译之前完成，且在程序的整个运行期间都存在，例如全局变量、静态变量等。</li><li>栈上分配<br>在函数执行时，函数内的局部变量的存储单元在栈上创建，由操作系统自动分配，函数调用结束时内存也随之析构<br>栈内存分配运算内置于处理器的指令集中，效率高，但栈容量小。</li><li>堆上分配<br>堆分配（又称动态内存分配）。程序在运行时用malloc或者new申请内存，程序员自己用free或者delete释放,在整个程序运行周期内都存在。</li></ol><p><strong>tips:</strong></p><ul><li>申请内存后立即判断指针是否为NULL确定内存是否分配成功，如果为NULL则立即用return终止此函数，或者用exit（1）终止整个程序的运行，为new和malloc设置异常处理函数；</li><li><strong>为申请的内存赋初值</strong>，分配的是一段连续的内存空间的话，要防止指针下标越界；</li><li>sizeof是操作符，不能用sizeof得到内存空间的大小，<strong>只能在申请时候记住申请的空间大小</strong>；</li><li>在内存使用结束后必须用free或delete释放内存，注意在内存使用中如果存在指针加1或减1 的操作应特别注意，释放的内存要和申请的内存一致，放置内存泄漏，<strong>释放内存后，应该立即将指针置为NULL，不要存在野指针</strong>。</li></ul><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p>[1]<a href="https://segmentfault.com/a/1190000018874254">浅拷贝与深拷贝的区别</a><br>[2]<a href="https://blog.csdn.net/nyist_zxp/article/details/80257760">C++中数据存储的位置</a><br>[3]<a href="https://blog.csdn.net/lq18811566072/article/details/80331793">C++经典面试之 内存分配的三种方式</a><br>[4]<a href="https://www.cnblogs.com/yunlambert/p/10053800.html">堆、栈与大小端存储</a><br>[5]<a href="https://zhidao.baidu.com/question/397221561.html">c语言main函数中的变量和其他函数中的变量使用的是一个堆栈吗</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;C-C-内存使用划分&quot;&gt;&lt;a href=&quot;#C-C-内存使用划分&quot; class=&quot;headerlink&quot; title=&quot;C/C++内存使用划分&quot;&gt;&lt;/a&gt;&lt;strong&gt;C/C++内存使用划分&lt;/strong&gt;&lt;/h2&gt;&lt;p&gt;C/C++编译过的程序使用的内存划分：&lt;/p&gt;
    
    </summary>
    
    
      <category term="C++" scheme="https://stemha.github.io/categories/C/"/>
    
    
      <category term="C++" scheme="https://stemha.github.io/tags/C/"/>
    
      <category term="内存分配" scheme="https://stemha.github.io/tags/%E5%86%85%E5%AD%98%E5%88%86%E9%85%8D/"/>
    
      <category term="内存分区" scheme="https://stemha.github.io/tags/%E5%86%85%E5%AD%98%E5%88%86%E5%8C%BA/"/>
    
      <category term="深拷贝" scheme="https://stemha.github.io/tags/%E6%B7%B1%E6%8B%B7%E8%B4%9D/"/>
    
      <category term="浅拷贝" scheme="https://stemha.github.io/tags/%E6%B5%85%E6%8B%B7%E8%B4%9D/"/>
    
  </entry>
  
  <entry>
    <title>文件系统（1）</title>
    <link href="https://stemha.github.io/2020/05/01/%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F%EF%BC%881%EF%BC%89/"/>
    <id>https://stemha.github.io/2020/05/01/%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F%EF%BC%881%EF%BC%89/</id>
    <published>2020-05-01T15:00:41.000Z</published>
    <updated>2020-05-10T15:11:13.881Z</updated>
    
    <content type="html"><![CDATA[<h2 id="基础概念"><a href="#基础概念" class="headerlink" title="基础概念"></a><strong>基础概念</strong></h2><p><code>文件系统</code>：操作系统中处理文件的部分，有关文件的构造，命名，存取，使用，实现和管理都是操作系统文件系统设计的主要内容</p><a id="more"></a><h2 id="文件"><a href="#文件" class="headerlink" title="文件"></a><strong>文件</strong></h2><h3 id="文件结构"><a href="#文件结构" class="headerlink" title="文件结构"></a><strong>文件结构</strong></h3><p>文件可以有多种构造方式。</p><ul><li>字节序列（Windows，UNIX都采用这种文件模型）</li><li>记录序列（以前大型计算机系统中的常见模式，现在没多少了）</li><li>树（处理商业数据的大型计算机中获得广泛使用）<ul><li>文件在这种结构中由一棵记录树构成，每个记录并不具有同样长度，记录的固定位置有一个键。树按键排序，从而对特定的键进行快速查找</li></ul></li></ul><h3 id="文件类型"><a href="#文件类型" class="headerlink" title="文件类型"></a><strong>文件类型</strong></h3><p>Linux中分为    </p><ol><li><code>普通文件（regular）</code>：存在于外部存储器中，用于存储普通文件。</li><li><code>目录文件（directory）</code>：用于存放目录项，是文件系统管理的重要文件类型。</li><li><code>管道文件（pipe）</code>：一种用于进程间通信的特殊文件，也称为命名管道FIFO。</li><li><code>套接字文件（socket）</code>：一种用于网络间通信的特殊文件。</li><li><code>链接文件（link）</code>；用于间接访问另外一个目标文件，相当于widows快捷方式。</li><li><code>字符设备文件（character）</code>:字符设备在应用层的访问结构。</li><li><code>块设备文件（block）</code>：块设备在应用层的访问接口。</li></ol><h3 id="文件存取"><a href="#文件存取" class="headerlink" title="文件存取"></a><strong>文件存取</strong></h3><ul><li>顺序存取文件（sequential access）：进程可以从头到尾顺序读取文件的全部字节或者记录，但不能跳过某一些内容，也不能不按顺序读取。可以返回到起点的。</li><li>随机存取文件（random access）：以任何次序读取其中字节或记录的文件。对很多应用程序来说是必不可少的，比如数据库系统</li></ul><h3 id="文件属性"><a href="#文件属性" class="headerlink" title="文件属性"></a><strong>文件属性</strong></h3><p>操作系统常用的文件属性</p><h4 id="文件保护"><a href="#文件保护" class="headerlink" title="文件保护"></a><strong>文件保护</strong></h4><table><thead><tr><th align="left">属性</th><th align="left">含义</th><th align="left">备注</th></tr></thead><tbody><tr><td align="left">保护</td><td align="left">谁可以存取文件，以什么方式</td><td align="left"></td></tr><tr><td align="left">口令</td><td align="left">存取文件需要的口令</td><td align="left">有一些系统中，用户必须给出口令才能存取文件</td></tr><tr><td align="left">创建者</td><td align="left">创建文件者ID</td><td align="left"></td></tr><tr><td align="left">所有者</td><td align="left">当前所有者</td><td align="left"></td></tr></tbody></table><h4 id="标志"><a href="#标志" class="headerlink" title="标志"></a><strong>标志</strong></h4><table><thead><tr><th align="left">属性</th><th align="left">含义</th><th align="left">备注</th></tr></thead><tbody><tr><td align="left">只读标志</td><td align="left"></td><td align="left"></td></tr><tr><td align="left">隐藏标志</td><td align="left"></td><td align="left"></td></tr><tr><td align="left">系统标志</td><td align="left">0表普通文件，1表示系统文件</td><td align="left"></td></tr><tr><td align="left">存档标志</td><td align="left">0表示已经备份，1表示需要备份</td><td align="left"></td></tr><tr><td align="left">ASCII/二进制标志</td><td align="left">0表示ASCII文件，1表示二进制文件</td><td align="left"></td></tr><tr><td align="left">随机存取标志</td><td align="left">0表示只允许顺序存取，1表示随机存取</td><td align="left"></td></tr><tr><td align="left">临时标志</td><td align="left">0表示正常，1表示进程退出时删除文件</td><td align="left"></td></tr><tr><td align="left">加锁标志</td><td align="left">0表示未加锁，非零表示加锁</td><td align="left"></td></tr></tbody></table><h4 id="查找读写相关"><a href="#查找读写相关" class="headerlink" title="查找读写相关"></a><strong>查找读写相关</strong></h4><table><thead><tr><th align="left">属性</th><th align="left">含义</th><th align="left">备注</th></tr></thead><tbody><tr><td align="left">记录长度</td><td align="left">一个记录中的字节数</td><td align="left"></td></tr><tr><td align="left">键的位置</td><td align="left">每个记录中键的偏移量</td><td align="left"></td></tr><tr><td align="left">键的长度</td><td align="left">键字段的字节数</td><td align="left"></td></tr><tr><td align="left">当前大小</td><td align="left">文件字节数</td><td align="left"></td></tr><tr><td align="left">最大长度</td><td align="left">文件可能增长到的字节数</td><td align="left"></td></tr></tbody></table><h4 id="时间"><a href="#时间" class="headerlink" title="时间"></a><strong>时间</strong></h4><table><thead><tr><th align="left">属性</th><th align="left">含义</th><th align="left">备注</th></tr></thead><tbody><tr><td align="left">创建时间</td><td align="left"></td><td align="left"></td></tr><tr><td align="left">最后一次存取时间</td><td align="left"></td><td align="left"></td></tr><tr><td align="left">最后一次修改时间</td><td align="left"></td><td align="left"></td></tr></tbody></table><h3 id="文件操作"><a href="#文件操作" class="headerlink" title="文件操作"></a><strong>文件操作</strong></h3><p>最常用的一些系统调用（不限制系统的总结）</p><ol><li>create</li><li>delete</li><li>open</li><li>close</li><li>read</li><li>write</li><li>append：write的限制形式，智能在文件末尾读取数据</li><li>seek：对于随机存取文件，通常需要指定从何处读取数据，通常使用seek系统调用把当前位置指针指向文件中的特定位置。seek调用结束后，就可以从该位置开始读了。</li><li>get attributes</li><li>set attributes</li><li>rename</li></ol><p>Linux文件IO函数，通常包括 open,read,write,lseek,close这五个函数。</p><h2 id="目录"><a href="#目录" class="headerlink" title="目录"></a><strong>目录</strong></h2><h3 id="目录操作"><a href="#目录操作" class="headerlink" title="目录操作"></a><strong>目录操作</strong></h3><ol><li>create</li><li>delete</li><li>opendir</li><li>closedir</li><li>readdir</li><li>rename</li><li>link</li><li>ulink</li></ol><h2 id="文件系统的实现"><a href="#文件系统的实现" class="headerlink" title="文件系统的实现"></a><strong>文件系统的实现</strong></h2><h3 id="文件系统布局"><a href="#文件系统布局" class="headerlink" title="文件系统布局"></a>文件系统布局</h3><p><code>文件系统存放</code>：文件系统存放在外存上。多数磁盘划分为一个或者多个分区，每个而分区有一个独立的文件系统。<br><code>主引导记录（master boot record，MBR）</code>：磁盘的0号扇区称为主引导记录，用来引导计算机，MBR之后挨着的是<code>分区表</code>,该表给出了每一个分区的起始和结束地址。<br>在计算机被引导时，BIOS读入并执行MBR。MBR执行的第一件事情是确定活动分区，读入活动分区的第一个块，称为<code>引导块（boot block）</code>，并执行之。引导块中的程序将装载该分区中的操作系统。为了统一，每个分区都从一个启动块开始，即使它不含一个可以启动的操作系统。不过，在将来这个分区也许会有一个操作系统的。</p><h3 id="文件的实现"><a href="#文件的实现" class="headerlink" title="文件的实现"></a><strong>文件的实现</strong></h3><p>文件存储实现的关键问题是记录各个文件分别用到哪些磁盘块。不同的操作系统采用不同的方法。</p><h4 id="连续分配"><a href="#连续分配" class="headerlink" title="连续分配"></a><strong>连续分配</strong></h4><p>最简单的分配方案：把每个文件座位一连串连续数据存储在磁盘上。所以，在块大小为1KB的磁盘上，50KB的文件要分配50个连续大小的块。<br>优点</p><ol><li>实现简单。记录每个文件用到的磁盘块简化为只需记住两个数字即可：第一块的磁盘地址和文件的块数。</li><li>读性能好。单个操作就可以从磁盘上读出整个文件。只需一次查找（对第一个块）。之后就不需要寻道和旋转延迟，所以数据以磁盘全带宽的速率输入。可见连续分配实现简单且具有较高的性能。</li><li>很适合DVD，CD-ROM等一次性光学介质的存储。</li></ol><p>缺点</p><ul><li>磁盘零碎问题。删除文件之后会留下空闲块，随着时间的推移会使得磁盘变得零碎，既有文件也有空洞<ul><li>要么压缩磁盘。代价太高不可行。</li><li>要么重新使用空洞。需要维护一个空闲空间列表，但是为了挑选合适的空闲空间，需要知道该文件的最终大小。如果用户为了避免找到的空闲空间太小而提前给出一个不切实际的较大数字，则可能无法找到合适的空闲空间而导致失败。</li></ul></li></ul><h4 id="链表分配"><a href="#链表分配" class="headerlink" title="链表分配"></a><strong>链表分配</strong></h4><p><code>链表分配</code>：为每个文件构造磁盘块列表，每一个块的<strong>第一个字作为指向下一块的指针</strong>，块的其他部分存放数据。<br>优点</p><ol><li>可以充分利用每个磁盘块，不会因为磁盘碎片而浪费存储空间。</li><li>顺序读文件很方便</li></ol><p>缺点</p><ol><li>随机存取非常慢</li><li>由于指针占去了一些字节，每个磁盘块存储文件数据的字节数不再是2的整数次幂，这种怪异的大小会降低文件的存储效率。（类似于没有对齐）<ul><li>很多程序都是以2的整数次幂来读写磁盘块的。因为上面论述的原因，要读出一个完整的2的整数次幂的块需要从两个磁盘中获得和接收信息，这就因为复制引发了额外的开销。</li></ul></li></ol><h4 id="在内存中采用表的链表分配"><a href="#在内存中采用表的链表分配" class="headerlink" title="在内存中采用表的链表分配"></a><strong>在内存中采用表的链表分配</strong></h4><p>A：我们可以知道上面链表分配的不足，那么如何解决呢？<br>B: 可以取出每个磁盘块的指针字，把它放在内存的一个表里面，就可以解决链表分配的两个不足。</p><p><code>文件分配表（FAT,File Allocation Table）</code>：这个表实现了链表的操作。文件分配表的每一个表项存放着文件数据的下一个块的块号</p><p>优点</p><ol><li>磁盘文件块可以不用存放指针，这样整个块都是数据。</li><li>随机存取更加容易，整个文件分配表实现的链表都在内存中，不需要磁盘引用。</li><li>不管文件多大，在目录项中只需记录一个整数（起始块号），按照它就可以找到文件的全部块。</li></ol><p>缺点</p><ul><li>占用内存空间大。必须整个表都存放在内存中。<ul><li>对于200GB的磁盘和1KB大小的块，这张表有2亿项，每一项至少三个字节，为了提高查找速度，有时需要4个字节。根据系统对空间和时间的优化方案，这张表需要600MB或者800MB，不实用。</li></ul></li></ul><h4 id="i节点分配"><a href="#i节点分配" class="headerlink" title="i节点分配"></a><strong>i节点分配</strong></h4><p>A：我们可以知道上面链表分配的不足，那么如何解决呢？<br>B: 既然整张文件分配表太大了，我们就拆分成小的放，实现一个新的数据结构i节点。</p><p><code>i节点（index-node）</code>：每个文件都赋予了一个称为i节点的数据结构，其中列出了文件属性和文件块的<strong>磁盘地址</strong>。<br>优点：</p><ul><li>只有在对应的文件打开时候，其i节点才在内存中</li></ul><p>缺点与解决方案：</p><ul><li>每个i节点只能存储固定数量的磁盘地址，那么当一个文件所包含的磁盘块的数目超出了i节点所能容纳的数目怎么办呢？<ul><li>一个解决方案，最后一个i节点中的磁盘地址不指向数据块，而是指向一个包含磁盘块地址的块的地址。</li></ul></li></ul><h3 id="目录的实现"><a href="#目录的实现" class="headerlink" title="目录的实现"></a><strong>目录的实现</strong></h3><p>每个目录项只引用i节点的目录</p><h3 id="共享文件"><a href="#共享文件" class="headerlink" title="共享文件"></a><strong>共享文件</strong></h3><p><code>共享文件</code>：当几个用户在同一个项目里面工作时候，他们常常需要共享文件。其结果是，如果一个共享文件同时出现在属于不同用户的不同目录下面，工作起来就很方便。<br><code>连接（link）</code>：原本属于C目录下的文件也出现在B目录下的话，B的目录与该共享文件的联系称为一个<code>连接（link）</code>。这样文件系统本身也成为了一个<code>有向无环图（DAG）</code>。</p><p>共享文件的问题：</p><ol><li>如果目录包含磁盘地址，则当连接文件的时候，必须把C目录中的磁盘地址复制到B目录。如果B或者C之后又向文件中添加内容，则新的数据块只会列入添加工作的用户的目录中。其他用户是不知道的。这违背了共享的初衷</li></ol><h4 id="硬连接和软连接"><a href="#硬连接和软连接" class="headerlink" title="硬连接和软连接"></a><strong>硬连接和软连接</strong></h4><p>解决方案：</p><ol><li><code>i节点方法</code>：磁盘块不列入目录，而是列入一个与文件本身关联的小型数据结构中，目录指向这个数据结构(Linux中的i节点）（<strong>硬连接</strong>）<ul><li>实现机制：需要有一个文件<code>所有者计数机制</code>，当B连接到共享文件时，i节点记录文件的所有者是C，建立一个连接并不会改变所有关系，但是它将i节点的连接技术加1，所以系统知道当前有多少目录项指向这个文件。</li><li>缺点：C删去这个文件之后，还有许多目录项指向它，其他硬连接会指向错误的文件。</li><li>改进：唯一能做的是只删除C的目录项，但是保留i节点，所有者计数减一。只有到计数为0的时候才会真正删除该文件。</li></ul></li><li><code>符号链接方法（symbolic linking）</code>：让系统建立一个类型为Link的新文件，并把该文件放在B目录下，使得B与C的一个文件存在链接。链接文件只包含了它所连接的文件的路径名。（<strong>软连接</strong>）<ul><li>缺点：需要额外的开销。必须读取包含路径的文件，然后一个部分一个部分地扫描路径，直到找到i节点</li><li>缺点：每个符号链接需要额外的i节点和一个额外的磁盘块用于存储路径，如果路径很短，作为一种优化，系统可以将它存储在i节点中。</li><li>优点：只要简单提供一个机器的网络地址和文件在该机器上的路径，就可以连接全球任何地方的机器的文件。</li></ul></li></ol><p>tips：<br>还有一个由连接带来的问题，在符号连接和其他方式中都存在。如果允许连接，文件有两个或多个路径。查找一指定目录及其子目录下的全部文件的程序将多次定位到被连接的文件。例如，一个将某一目录及其子目录下的文件转存到磁带上的程序有可能多次复制一个被连接的文件。进而，如果接着把磁带读入另一台机器，除非转出程序具有智能，否则被连接的文件将被两次复制到磁盘上，而不是只是被链接起来。</p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p>现代操作系统<br><a href="https://blog.csdn.net/qq_36894974/article/details/105092951">简直不要太硬了！一文带你彻底理解文件系统</a><br><a href="https://blog.csdn.net/samxx8/article/details/44779245/">理解linux 的 inode解决inode耗尽问题</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;基础概念&quot;&gt;&lt;a href=&quot;#基础概念&quot; class=&quot;headerlink&quot; title=&quot;基础概念&quot;&gt;&lt;/a&gt;&lt;strong&gt;基础概念&lt;/strong&gt;&lt;/h2&gt;&lt;p&gt;&lt;code&gt;文件系统&lt;/code&gt;：操作系统中处理文件的部分，有关文件的构造，命名，存取，使用，实现和管理都是操作系统文件系统设计的主要内容&lt;/p&gt;
    
    </summary>
    
    
      <category term="操作系统" scheme="https://stemha.github.io/categories/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"/>
    
    
      <category term="软连接" scheme="https://stemha.github.io/tags/%E8%BD%AF%E8%BF%9E%E6%8E%A5/"/>
    
      <category term="硬连接" scheme="https://stemha.github.io/tags/%E7%A1%AC%E8%BF%9E%E6%8E%A5/"/>
    
      <category term="文件与目录" scheme="https://stemha.github.io/tags/%E6%96%87%E4%BB%B6%E4%B8%8E%E7%9B%AE%E5%BD%95/"/>
    
  </entry>
  
  <entry>
    <title>软件工程简述</title>
    <link href="https://stemha.github.io/2020/04/29/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E7%AE%80%E8%BF%B0/"/>
    <id>https://stemha.github.io/2020/04/29/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E7%AE%80%E8%BF%B0/</id>
    <published>2020-04-29T12:47:07.000Z</published>
    <updated>2020-04-29T12:53:33.080Z</updated>
    
    <content type="html"><![CDATA[<p>为了写大型程序，程序员们使用了各种工具和方法，形成了<code>软件工程</code>这门学科。<br>软件工程这个词由NASA工程师Margaret Hamilton创造。她帮助NASA在阿波罗计划中避免出现严重问题。她的经典名言：</p><blockquote><p>这有点像牙齿的根管治疗：你总是拖到最后才做，但有些事情可以事先做好。有点像预防性体检，只不过是预防软件出错。</p></blockquote><a id="more"></a><h2 id="对象"><a href="#对象" class="headerlink" title="对象"></a>对象</h2><p>尽管可以将大项目分解为小函数，每个人同时工作，不用关心整个项目，只关心自己的函数高效和正确就好啦，然而把代码打包成函数还是远远不够的。<br>比如微软Office软件有近4000万行代码，打包成函数也还有几十万个，也还是也有点多。<br>解决办法是，把函数再次打包成为层级，把相关的代码都放到一起，打包成<code>对象（objects）</code>。</p><h2 id="面向对象编程（object-oriented-programming）"><a href="#面向对象编程（object-oriented-programming）" class="headerlink" title="面向对象编程（object oriented programming）"></a>面向对象编程（object oriented programming）</h2><p>把函数打包成为对象的思想叫做<code>“面向对象编程”</code>。<br>对象可以包含对象，函数，变量。子对象也是同样的，所以会出现<u>沿着对象层级一层层找执行函数</u>的做法。</p><h2 id="API"><a href="#API" class="headerlink" title="API"></a>API</h2><p><code>软件工程的比喻</code>：<br>就像建造摩天大一样，有管道工配置管道，电工装电线，油漆工涂油漆，还有成败上千人做其他的事情。<br>所以一个大团队中有许多小团队，不同小团队之间负责不同的功能，所以不同团队之间需要文档，才能帮助理解代码都在做什么，还需要定义好的程序编程接口（API）<br>API帮助不同程序员合作，不需要直到细节，只要直到怎么使用就好了。</p><p>然后<code>private与public</code>提供不同的权限，哪些不让外部访问，哪些仅供内部访问。</p><p><code>面向对象的核心</code>：</p><ul><li>隐藏复杂度</li><li>选择性公布功能</li></ul><h2 id="IDE与调试（debugging）"><a href="#IDE与调试（debugging）" class="headerlink" title="IDE与调试（debugging）"></a>IDE与调试（debugging）</h2><p>代码在编译之前只是文字，可以用任何文本处理程序写代码，但是一般来时，还是会用专门的工具来写比较好。<br>IDE提供了许多有用功能，因为集成了所有的东西，所以叫IDE。</p><ul><li>代码帮助，提示，整理，编译，测试</li></ul><h2 id="文档和注释（readme-comment）"><a href="#文档和注释（readme-comment）" class="headerlink" title="文档和注释（readme/comment）"></a>文档和注释（readme/comment）</h2><p>程序员另一项重要工作是给代码写文档<br>文档一般放在readme中<br>文档也可以写成注释，放在源代码中<br>好的文档的作用：</p><ul><li>能帮助开发者几个月后理解自己和他人的代码</li><li>还能提升复用性，与其让程序员一遍遍写已经有的东西，不如直接用别人写好的来解决问题。</li></ul><h2 id="版本控制"><a href="#版本控制" class="headerlink" title="版本控制"></a>版本控制</h2><p>源代码管理，帮助团队协作，也叫版本控制。弄懂git原理即可。</p><h2 id="质量控制"><a href="#质量控制" class="headerlink" title="质量控制"></a>质量控制</h2><p>写代码与测试代码密不可分。<br>测试也称为<code>质量保证测试（QA，quality assurance testing）</code>。<br>严格测试软件的方方面面，看软件会不会出错，也就是找Bug。</p><h2 id="Beta-Alpha"><a href="#Beta-Alpha" class="headerlink" title="Beta Alpha"></a>Beta Alpha</h2><p><code>beta版软件（beta software）</code>：意思是软件接近完成，但不是百分之一百通过测试过，公司有时会向公众发布beta版本，以帮助发现问题。<br><code>alpha版软件（alpha version software）</code>：一般很粗糙，错误多，只在公司内部测试。</p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p>Crash Course Computer Science</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;为了写大型程序，程序员们使用了各种工具和方法，形成了&lt;code&gt;软件工程&lt;/code&gt;这门学科。&lt;br&gt;软件工程这个词由NASA工程师Margaret Hamilton创造。她帮助NASA在阿波罗计划中避免出现严重问题。她的经典名言：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;这有点像牙齿的根管治疗：你总是拖到最后才做，但有些事情可以事先做好。有点像预防性体检，只不过是预防软件出错。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="软件工程" scheme="https://stemha.github.io/categories/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/"/>
    
    
      <category term="面向对象" scheme="https://stemha.github.io/tags/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/"/>
    
      <category term="版本控制" scheme="https://stemha.github.io/tags/%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6/"/>
    
      <category term="文档和注释" scheme="https://stemha.github.io/tags/%E6%96%87%E6%A1%A3%E5%92%8C%E6%B3%A8%E9%87%8A/"/>
    
  </entry>
  
  <entry>
    <title>常用数据结构简述</title>
    <link href="https://stemha.github.io/2020/04/29/%E5%B8%B8%E7%94%A8%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AE%80%E8%BF%B0/"/>
    <id>https://stemha.github.io/2020/04/29/%E5%B8%B8%E7%94%A8%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AE%80%E8%BF%B0/</id>
    <published>2020-04-28T17:37:34.000Z</published>
    <updated>2020-04-28T17:42:08.042Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>算法处理的数据在内存中的格式是什么？<br>我们希望数据是结构化的，方便读取，因此计算机科学家发明了数据结构</p></blockquote><a id="more"></a><h2 id="数组array"><a href="#数组array" class="headerlink" title="数组array"></a>数组array</h2><p>几乎所有的编程语言都自带了许多函数来处理数组，比如数组的排序</p><h2 id="字符串string"><a href="#字符串string" class="headerlink" title="字符串string"></a>字符串string</h2><p>是数组的亲戚<br>i = “love”<br>虽然长得不像数组，但的确是数组，在计算机幕后的确是这样的<br>字符放在内存中以/0结尾，不是”字符0“而是”二进制0“，这叫字符“null”，表示字符串结尾。</p><ul><li>这个字符非常重要，如果调用print函数，会从开始位置逐个显示到屏幕，但是得直到什么时候停下来!否则会把内存中的所有内容输出。</li></ul><h2 id="矩阵matrix"><a href="#矩阵matrix" class="headerlink" title="矩阵matrix"></a>矩阵matrix</h2><p>数组的数组</p><h2 id="结构体struct"><a href="#结构体struct" class="headerlink" title="结构体struct"></a>结构体struct</h2><p>多个变量打包在一起，在内存中会自动组织到一起的</p><h2 id="节点node与指针"><a href="#节点node与指针" class="headerlink" title="节点node与指针"></a>节点node与指针</h2><p>struct可以构建复杂的数据结构，比如node</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">listnode</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">int</span> value;</span><br><span class="line">listnode * next;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="链表linked-list"><a href="#链表linked-list" class="headerlink" title="链表linked list"></a>链表linked list</h2><p>使用node来构建链表<br>灵活性是通过每个节点指向下一个节点实现的<br><code>循环链表（circular list）</code>：尾部的next指向开头<br><code>非循环链表</code>：尾部节点指针值是null<br>链表使用的时候很少看具体地址么，而是经常使用链表的抽象模型</p><p>链表的优点</p><ul><li>容易重新排序，两端缩减，分割，倒序等</li><li>因为灵活很多数据结果可以用链表实现，比如队列和栈</li></ul><h2 id="队列queue"><a href="#队列queue" class="headerlink" title="队列queue"></a>队列queue</h2><p>FIFO<br>队列的链表实现<br>比方1-&gt;2-&gt;3-&gt;4-&gt;5<br>可以让队列头指向1，队列尾部指向5 （也就是链表的节点连接是反向的）<br>入队（enqueuing）出队（dequeuing）</p><h2 id="栈stack"><a href="#栈stack" class="headerlink" title="栈stack"></a>栈stack</h2><p>LIFO<br>入栈（push onto the stack）和出栈（pop from the stack） </p><h2 id="树tree"><a href="#树tree" class="headerlink" title="树tree"></a>树tree</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">treenode</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">int</span> value;</span><br><span class="line">listnode * nextleft;</span><br><span class="line">listnode * nextright;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>最重要的性质：树到根是单向的</p><h2 id="二叉树-binary-tree"><a href="#二叉树-binary-tree" class="headerlink" title="二叉树 binary tree"></a>二叉树 binary tree</h2><p>每个节点至多两个孩子</p><h2 id="图graph"><a href="#图graph" class="headerlink" title="图graph"></a>图graph</h2><p>顶点多对多</p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p>Crash Course Computer Science</p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;算法处理的数据在内存中的格式是什么？&lt;br&gt;我们希望数据是结构化的，方便读取，因此计算机科学家发明了数据结构&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="数据结构" scheme="https://stemha.github.io/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
      <category term="简述" scheme="https://stemha.github.io/tags/%E7%AE%80%E8%BF%B0/"/>
    
      <category term="数据结构" scheme="https://stemha.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>操作系统与文件系统简述</title>
    <link href="https://stemha.github.io/2020/04/29/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E4%B8%8E%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F%E7%AE%80%E8%BF%B0/"/>
    <id>https://stemha.github.io/2020/04/29/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E4%B8%8E%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F%E7%AE%80%E8%BF%B0/</id>
    <published>2020-04-28T16:34:41.000Z</published>
    <updated>2020-04-28T16:44:52.616Z</updated>
    
    <content type="html"><![CDATA[<h2 id="操作系统"><a href="#操作系统" class="headerlink" title="操作系统"></a>操作系统</h2><a id="more"></a><p>1940s，1950s的年代，计算机慢，一次只能运行一个程序，<br>程序员在打孔纸上写程序，拿到一个计算机房间，交给操作员。<br>操作员等计算机空下来后，将程序放入，然后运行，输出结果，停机。</p><p>计算机变快之后，放程序的时间比程序运行时间还长，我们需要计算机以一种方式自动运作——&gt;操作系统</p><p>到1950年代尾声，计算机已经变得非常快了，处理器经常闲着，等待慢的设备（比如打印机，读卡器等），也就是程序阻塞在I/O上</p><p>50年代后期，曼彻斯特大学研发了世界上第一台超级计算机，Atlas，想法设法最大限度利用它，1962年设计了atlas supervisor程序，能够在一个CPU上运行多个程序（这种能力也叫<code>多任务处理</code>）<br>Atlas是世界上第一台同时支持虚拟内存和内存保护的电脑</p><p>同时运行多个程序会有一些问题</p><ul><li>每个程序都会占一些内存，切换程序的时候不能丢失数据</li><li>解决办法是给每一个程序配置专属内存块</li></ul><p>分配专属内存块到物理地址时候，可能物理地址不连续的，为了隐藏这种复杂性，把内存地址虚拟化，也就是<code>虚拟内存机制</code></p><p>这种机制可以使程序内存大小灵活增减，也叫<code>动态内存分配</code></p><p><code>内存保护</code>：程序只能捣乱自己的内存，不会影响到其他的程序。</p><p>分时操作系统<br>Multics  首次在设计时候考虑了安全机制，但是导致系统过于臃肿。</p><p>Dennis 和 Thompson 联手打造了Unix，将os分为两部分</p><ol><li>操作系统的核心功能，比如内存管理，多任务和输入输出管理，称之为内核</li><li>一堆有用的工具，比如程序和运行库</li></ol><p>Unix中并没有向multics这么多的错误处理代码<br>-如果有错误产生，就让<code>内核恐慌（kernel panic）</code></p><ul><li>内核崩溃是没有办法恢复的，所以调用了一个pannic的函数，起初只是打印pannic一词，然后无限循环<br>Unix成为1970-1980年代最流行的操作系统之一</li></ul><p>1980年代，计算机降价到普通人买得起，这时候叫个人电脑。<br>起初微软的操作系统没有内存保护，经常蓝屏,后来微软都加上了</p><p>我们现在用的ios，安卓，windows，macos基本上都有了<code>内存保护</code>，<code>虚拟内存</code>，<code>多任务</code>了；</p><h2 id="文件系统"><a href="#文件系统" class="headerlink" title="文件系统"></a>文件系统</h2><p>文件格式：随机排列文件当然没有问题，但是随机排列会更好的</p><p>最简单的文件格式</p><ul><li>文本文件（.txt）</li></ul><p>元数据（meta data）：关于数据的数据<br>元数据存在于文件开头，在实际的数据前面，因此也叫<code>文件头（header）</code></p><p>早期计算机只做一件事，比如火炮射程表，这时候整个存储器就像一个文件（数据从头到尾直到占用满）</p><p>后期计算和存储能力的提升，可以存多个文件了，这时候最简单的方式是把文件连续存储，一个个在内存中连续存放<br>但是存储器没有文件概念，只存储大量位，我们怎么直到文件的开头和结尾在哪呢？<br>所以我们需要一个特殊文件，来记录其他文件存储的位置<br>这个特殊文件有很多名字，这里泛称为<code>“目录文件”</code>,这个文件经常是存放在开头的</p><p>目录文件存放</p><ul><li>其他文件的名字”文件名+”.“+扩展名“</li><li>文件的元数据，比如创建时间(created)，最后修改时间(last modified)，文件所有者，是否能读写，最重要的是<code>文件的起始位置和长度</code></li></ul><p>就像书的目录意义，更改了书里面的内容，就需要更改对应的目录</p><p>目录文件和对目录文件的管理是一个非常简单的文件系统的例子</p><p>上面的例子是<code>”平面文件系统“</code>：文件都在同一个层次<br>平面文件系统存在的问题：如果给某个文件加数据，会覆盖掉后面文件的一部分</p><p>所以现代的文件系统会做两件事</p><ol><li>把空间预先分为一块块，并留一些“预留空间”可以方便改动和管理 （用这样的方案目录文件需要记录文件存放在哪些块里面）</li><li>拆分文件，存放在多个块里面，这样文件可以轻松增大和缩小（目录文件会记录不只一个块）//有点像虚拟内存</li></ol><p>删除文件只需要在目录文件上删除那条记录即可。</p><p><code>碎片</code>：文件存储在多个块里面，块之间是分开的，顺序也是乱的。//是增删改文件导致的，不可避免的</p><p>对很多存储技术来说，碎片是坏事，现实生活中大文件可能存放在数百个块里面，导致打开文件特别慢。<br>如何解决？碎片整理！<br>计算机把数据来回移动，排成正确的顺序</p><p><code>分层文件系统</code><br>树状目录的形式</p><ul><li>目录文件（根目录）不仅要指向文件，还要指向目录（is directory字段）//相对于平面文件系统的变化</li><li>无线深度的文件夹</li><li>可以轻松移动文件，只需要改动两个目录文件（一个删去一条记录，一个加一条记录）</li></ul><h2 id="存储介质"><a href="#存储介质" class="headerlink" title="存储介质"></a>存储介质</h2><p>如今存储技术正朝向固态前进，没有机械活动部件，里面是集成电路，不用像磁盘那样磁头等待磁盘旋转，ssd访问时间低于1/1000秒，但是仍然比RAM慢很多倍，所以现代计算机仍然用层次存储结构。<br>第一个RAM出现于1972年，成本每比特一美分</p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p>Crash Course Computer Science</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;操作系统&quot;&gt;&lt;a href=&quot;#操作系统&quot; class=&quot;headerlink&quot; title=&quot;操作系统&quot;&gt;&lt;/a&gt;操作系统&lt;/h2&gt;
    
    </summary>
    
    
      <category term="操作系统" scheme="https://stemha.github.io/categories/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"/>
    
    
      <category term="操作系统" scheme="https://stemha.github.io/tags/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"/>
    
      <category term="文件系统" scheme="https://stemha.github.io/tags/%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F/"/>
    
  </entry>
  
  <entry>
    <title>Linux概述</title>
    <link href="https://stemha.github.io/2020/04/20/Linux%E6%A6%82%E8%BF%B0/"/>
    <id>https://stemha.github.io/2020/04/20/Linux%E6%A6%82%E8%BF%B0/</id>
    <published>2020-04-20T13:50:16.000Z</published>
    <updated>2020-04-20T14:47:10.553Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Linux设计目标"><a href="#Linux设计目标" class="headerlink" title="Linux设计目标"></a>Linux设计目标</h2><p>Unix被设计成为一种能够同时处理多进程和多用户的交互式系统，Linux继承了Linux的设计目标。</p><a id="more"></a><p>设计Linux的基本方针：</p><ul><li>每个程序只做一件事并且做好。</li></ul><h3 id="好的程序员追求的系统"><a href="#好的程序员追求的系统" class="headerlink" title="好的程序员追求的系统"></a>好的程序员追求的系统</h3><ul><li>简单，优雅，</li><li>一致性 （<code>最小惊讶原理</code>）</li><li>较强的功能性与灵活性<ul><li>意味着系统有较小的一组基本元素，产生多种多样的组合来满足各种应用需要。</li></ul></li></ul><h2 id="Linux的接口"><a href="#Linux的接口" class="headerlink" title="Linux的接口"></a>Linux的接口</h2><p><img src="/2020/04/20/Linux%E6%A6%82%E8%BF%B0/Linux%E5%B1%82%E6%AC%A1%E7%BB%93%E6%9E%84.jpg" alt></p><center>Linux系统层次结构 </center><p>所有版本的Linux必须提供大量的标准程序，其中一些是POSIX标准指定的，其他的根据Linux的版本而有所不同。它们包括：</p><ul><li>命令处理器（shell）</li><li>编译器</li><li>编辑器</li><li>文本处理程序</li><li>文件操作工具等</li></ul><h3 id="Linux具有三种不同的接口"><a href="#Linux具有三种不同的接口" class="headerlink" title="Linux具有三种不同的接口"></a>Linux具有三种不同的接口</h3><ol><li>真正的系统调用接口</li><li>库函数接口</li><li>由标准应用程序构成的接口</li></ol><h2 id="shell"><a href="#shell" class="headerlink" title="shell"></a>shell</h2><p>shell中，后台运行一个程序的语法是在原本命令后加“&amp;”。</p><p>shell脚本：包含shell命令的文件。</p><ul><li>可以包含参数，同时使用if、for、while和case等结构。</li><li>可以给变量赋值，然后过一段时间再读取这些变量。</li></ul><h2 id="linux应用程序"><a href="#linux应用程序" class="headerlink" title="linux应用程序"></a>linux应用程序</h2><h3 id="应用程序分类"><a href="#应用程序分类" class="headerlink" title="应用程序分类"></a>应用程序分类</h3><p>Linux的命令行用户界面包含大量的标准应用程序。大致分为6类：</p><ol><li>文件和目录操作命令</li><li>过滤器</li><li>程序设计工具，如编辑器和编译器</li><li>文档处理</li><li>系统管理</li><li>其他</li></ol><h3 id="过滤器"><a href="#过滤器" class="headerlink" title="过滤器"></a>过滤器</h3><p>过滤器有：</p><ul><li>grep、sort、head、tail</li><li>cut和paste（文档剪切与粘贴）</li><li>od：将输入（通常是二进制，也包括八，十和十六进制）转化为ASCII文档。</li><li>pr：打印机格式化输出</li><li>tr：字符大小写转换</li></ul><h3 id="编译器和程序设计工具"><a href="#编译器和程序设计工具" class="headerlink" title="编译器和程序设计工具"></a>编译器和程序设计工具</h3><p>编译器和程序设计工具：</p><ul><li>gcc</li><li>ar：将库函数收集到存档文件中</li><li>make：维护程序，跟踪哪些头文件依赖于哪些头文件等，然后安排所有需要进行的编译自动进行。 </li></ul><h2 id="内核结构"><a href="#内核结构" class="headerlink" title="内核结构"></a>内核结构</h2><p><img src="/2020/04/20/Linux%E6%A6%82%E8%BF%B0/Linux%E5%86%85%E6%A0%B8%E7%BB%93%E6%9E%84.jpg" alt></p><center>Linux内核结构 </center><p>内核最底层，负责中断处理程序，这是它们与设备交互的主要方式，以及底层的分派机制。分派在中断时发生。</p><ul><li>底层的代码中止正在运行的进程，将其状态存储在内核进程结构中，然后启动相应的驱动程序。</li><li>进程分派，在内核完成某些操作并且需要再次启动一个用户进程时，发生。进程分派的代码是汇编代码，并且和进程调度的代码有很大不同。</li></ul><p>内核子系统的三个主要部件</p><ul><li>I/O部件<ul><li>包含所有负责与设备交互以及实现联网和存储的I/O功能的内核部件</li></ul></li><li>内存管理部件<ul><li>维护虚拟内存到物理内存的映射，维护最近被访问页面的缓存以及实现一个好的页面置换算法。并根据需要把需要的数据和代码页读入内存中。</li></ul></li><li>进程管理部件<ul><li>主要是进程的创建和中止。还有CPU调度和信号处理。</li></ul></li></ul><p>内核最顶层，是内核的系统调用接口。所有的调用都来自这里，其导致一个陷阱，将系统从用户态切换到受保护的内核态，继而将控制权交给上述的内核部件之一。</p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p>现代操作系统</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Linux设计目标&quot;&gt;&lt;a href=&quot;#Linux设计目标&quot; class=&quot;headerlink&quot; title=&quot;Linux设计目标&quot;&gt;&lt;/a&gt;Linux设计目标&lt;/h2&gt;&lt;p&gt;Unix被设计成为一种能够同时处理多进程和多用户的交互式系统，Linux继承了Linux的设计目标。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Linux" scheme="https://stemha.github.io/categories/Linux/"/>
    
    
      <category term="Linux概述" scheme="https://stemha.github.io/tags/Linux%E6%A6%82%E8%BF%B0/"/>
    
  </entry>
  
  <entry>
    <title>Linux常用命令整理（2）</title>
    <link href="https://stemha.github.io/2020/04/19/Linux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%E6%95%B4%E7%90%86%EF%BC%882%EF%BC%89/"/>
    <id>https://stemha.github.io/2020/04/19/Linux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%E6%95%B4%E7%90%86%EF%BC%882%EF%BC%89/</id>
    <published>2020-04-19T12:47:44.000Z</published>
    <updated>2020-04-19T16:31:26.921Z</updated>
    
    <content type="html"><![CDATA[<h2 id="统计与过滤"><a href="#统计与过滤" class="headerlink" title="统计与过滤"></a>统计与过滤</h2><a id="more"></a><h3 id="grep"><a href="#grep" class="headerlink" title="grep"></a>grep</h3><p>用于过滤/搜索的特定字符,可用正则表达式能多种命令配合使用。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">grep [-option] pattern file</span><br></pre></td></tr></table></figure><p><a href="https://www.runoob.com/linux/linux-comm-grep.html">Linux grep 命令</a></p><h3 id="wc"><a href="#wc" class="headerlink" title="wc"></a>wc</h3><p>统计指定文件中的行数、字数、字节数，并将统计结果显示输出。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wc [-option] 文件…</span><br></pre></td></tr></table></figure><p>该命令统计指定文件中的行数、字数、字节数。如果没有给出文件名，则从标准输入读取。wc同时也给出所指定文件的总统计数</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ wc testfile           <span class="comment"># testfile文件的统计信息  </span></span><br><span class="line">5 100 600 testfile      <span class="comment"># testfile文件的行数为5、单词数100、字节数600</span></span><br></pre></td></tr></table></figure><p><a href="https://www.runoob.com/linux/linux-comm-wc.html">Linux wc命令</a></p><h2 id="进程相关"><a href="#进程相关" class="headerlink" title="进程相关"></a>进程相关</h2><h3 id="进程的挂起"><a href="#进程的挂起" class="headerlink" title="进程的挂起"></a>进程的挂起</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kill -stop PID &#x2F;&#x2F;将进程挂起（redhat）</span><br></pre></td></tr></table></figure><p>需要重新执行当前被挂起的任务时，使用 bg %num 即可将挂起的 job 的状态由 stopped 改为 running，仍在后台执行。需要改为在前台执行时，执行fg %num 即可。<br>也可以使用[ctrl]+[z]</p><h3 id="pstree"><a href="#pstree" class="headerlink" title="pstree"></a>pstree</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">pstree -p    &#x2F;&#x2F;可以显示进程树</span><br><span class="line">pstree -apnh &#x2F;&#x2F;显示进程间的关系</span><br><span class="line">pstree -u    &#x2F;&#x2F;显示用户名称</span><br></pre></td></tr></table></figure><p><a href="https://www.runoob.com/linux/linux-comm-pstree.html">Linux pstree命令</a></p><h3 id="lsof-（lists-openfiles）"><a href="#lsof-（lists-openfiles）" class="headerlink" title="lsof （lists openfiles）"></a>lsof （lists openfiles）</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">lsof [参数][文件]  &#x2F;&#x2F;需要root执行（因为要访问核心内存和各种文件）</span><br></pre></td></tr></table></figure><p>功能： 用于查看你进程打开的文件，打开文件的进程，进程打开的端口(TCP、UDP)。<br>找回/恢复删除的文件。</p><ul><li>好用的系统监视工具（神器）。</li><li>有着最多开关的Linux/Unix命令之一</li></ul><p>lsof打开的文件可以是：<br>1.普通文件<br>2.目录<br>3.网络文件系统的文件<br>4.字符或设备文件<br>5.(函数)共享库<br>6.管道，命名管道<br>7.符号链接<br>8.网络文件（例如：NFS file、网络socket，unix域名socket）<br>9.还有其它类型的文件，等等<br><a href="https://www.runoob.com/w3cnote/linux-check-port-usage.html">lsof 菜鸟教程</a><br><a href="https://www.jianshu.com/p/a3aa6b01b2e1">Linux 命令神器：lsof</a></p><h3 id="ps-process-status"><a href="#ps-process-status" class="headerlink" title="ps(process status)"></a>ps(process status)</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ps [options] [--help]  &#x2F;&#x2F;用来显示当前进程的状态</span><br></pre></td></tr></table></figure><p>ps命令用来列出系统中当前运行的那些进程。ps命令列出的是当前那些进程的快照，就是执行ps命令的那个时刻的那些进程。<br>如果想要动态的显示进程信息，就可以使用top命令。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">root@ubuntu:~# ps</span><br><span class="line">  PID TTY          TIME CMD</span><br><span class="line">13777 pts&#x2F;1    00:00:00 bash</span><br><span class="line">14564 pts&#x2F;1    00:00:00 ps</span><br></pre></td></tr></table></figure><p><a href="https://www.runoob.com/linux/linux-comm-ps.html">Linux ps命令</a></p><h3 id="jobs"><a href="#jobs" class="headerlink" title="jobs"></a>jobs</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">jobs[选项][参数] &#x2F;&#x2F;用于显示Linux中的任务列表及任务状态，包括后台运行的任务。</span><br><span class="line">&#x2F;&#x2F;jobs 的状态可以是 running, stopped, Terminated</span><br></pre></td></tr></table></figure><p>该命令可以显示任务号及其对应的进程号。其中，任务号是以普通用户的角度进行的，而进程号则是从系统管理员的角度来看的。一个任务可以对应于一个或者多个进程号。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">root@ubuntu:~# jobs  </span><br><span class="line">&#x2F;&#x2F;后台没有进程，所以jobs命令的输出是空</span><br><span class="line">root@ubuntu:~# ping 192.168.0.1</span><br><span class="line">PING 192.168.0.1 (192.168.0.1) 56(84) bytes of data.</span><br><span class="line">^Z</span><br><span class="line">[1]+  Stopped                 ping 192.168.0.1</span><br><span class="line">root@ubuntu:~# jobs</span><br><span class="line">[1]+  Stopped                 ping 192.168.0.1</span><br><span class="line">root@ubuntu:~# jobs -l  &#x2F;&#x2F;-l：显示进程号；</span><br><span class="line">[1]+ 14661 Stopped                 ping 192.168.0.1</span><br></pre></td></tr></table></figure><p><a href="https://ipcmen.com/jobs">jobs命令</a></p><blockquote><p>fg、bg、jobs、&amp;、ctrl + z都是与系统任务有关的常用命令</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">command&amp; 或者 ctrl + z 让进程在后台运行 </span><br><span class="line">jobs     查看后台运行的进程 </span><br><span class="line">fg %jobnumber    让后台的进程jobnumber到前台到前台 </span><br><span class="line">bg %jobnumber    让进程jobnumber到后台去 </span><br><span class="line">&#x2F;&#x2F;%jobnumber 是通过 jobs 命令查到的后台正在执行的命令的序号 (不是 pid)</span><br></pre></td></tr></table></figure><h3 id="kill"><a href="#kill" class="headerlink" title="kill"></a>kill</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kill[参数][进程号]</span><br></pre></td></tr></table></figure><p>功能： 发送指定的信号到相应进程。不指定信号将发送SIGTERM（15）终止指定进程。如果无法终止该程序可用“-KILL” 参数，其发送的信号为SIGKILL(9) ，将强制结束进程，使用ps命令或者jobs 命令可以查看进程号。root用户将影响用户的进程，非root用户只能影响自己的进程。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;通过 jobs 命令查看 job 号（假设为 jobnumber）</span><br><span class="line">kill %jobnumber</span><br><span class="line">通过 ps 命令查看 job 的进程号（PID，假设为 pid）</span><br><span class="line">&#x2F;&#x2F;kill pid</span><br></pre></td></tr></table></figure><h3 id="killall"><a href="#killall" class="headerlink" title="killall"></a>killall</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">killall[参数][进程名] &#x2F;&#x2F;用来结束同名的的所有进程（kill processes by name）</span><br></pre></td></tr></table></figure><p>killall命令用于杀死指定名字的进程。我们可以使用kill命令杀死指定进程PID的进程，如果要找到我们需要杀死的进程，我们还需要在之前使用ps等命令再配合grep来查找进程，而killall把这两个过程合二为一，是一个很好用的命令。</p><h2 id="系统监测"><a href="#系统监测" class="headerlink" title="系统监测"></a>系统监测</h2><h3 id="top"><a href="#top" class="headerlink" title="top"></a>top</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">top [参数]</span><br></pre></td></tr></table></figure><p>显示当前系统正在执行的进程的相关信息，包括进程ID、内存占用率、CPU占用率等</p><h3 id="free"><a href="#free" class="headerlink" title="free"></a>free</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">free [参数]</span><br></pre></td></tr></table></figure><p>功能： free 命令显示系统使用和空闲的内存情况，包括物理内存、交互区内存(swap)和内核缓冲区内存。共享内存将被忽略</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">root@ubuntu:~# free</span><br><span class="line">              total        used        free      shared  buff&#x2F;cache   available</span><br><span class="line">Mem:        1009176      136644      172116         628      700416      687996</span><br><span class="line">Swap:             0           0           0</span><br></pre></td></tr></table></figure><h3 id="vmstat-virtual-memory-statistics"><a href="#vmstat-virtual-memory-statistics" class="headerlink" title="vmstat (virtual memory statistics)"></a>vmstat (virtual memory statistics)</h3><p>功能： 用来显示虚拟内存的信息</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">root@ubuntu:~# vmstat</span><br><span class="line">procs -----------memory---------- ---swap-- -----io---- -system-- ------cpu-----</span><br><span class="line"> r  b   swpd   free   buff  cache   si   so    bi    bo   in   cs us sy id wa st</span><br><span class="line"> 0  0      0 172200 145008 555428    0    0     0     6   16   15  0  0 100  0  0</span><br></pre></td></tr></table></figure><p>虚拟内存的原理：<br>在系统中运行的每个进程都需要使用到内存，但不是每个进程都需要每时每刻使用系统分配的内存空间。当系统运行所需内存超过实际的物理内存，内核会释放某些进程所占用但未使用的部分或所有物理内存，将这部分资料存储在磁盘上直到进程下一次调用，并将释放出的内存提供给有需要的进程使用。<br>在Linux内存管理中，主要是通过“调页Paging”和“交换Swapping”来完成上述的内存调度。调页算法是将内存中最近不常使用的页面换到磁盘上，把活动页面保留在内存中供进程使用。交换技术是将整个进程，而不是部分页面，全部交换到磁盘上。<br>分页(Page)写入磁盘的过程被称作<code>Page-Out</code>，分页(Page)从磁盘重新回到内存的过程被称作Page-In。当内核需要一个分页时，但发现此分页不在物理内存中(因为已经被Page-Out了)，此时就发生了分页错误（Page Fault）。<br>当系统内核发现可运行内存变少时，就会通过Page-Out来释放一部分物理内存。经管Page-Out不是经常发生，但是如果Page-out频繁不断的发生，直到当内核管理分页的时间超过运行程式的时间时，系统效能会急剧下降。这时的系统已经运行非常慢或进入暂停状态，这种状态亦被称作<code>thrashing(颠簸)</code>。</p><h3 id="iostat-I-O-statistics"><a href="#iostat-I-O-statistics" class="headerlink" title="iostat (I/O statistics)"></a>iostat (I/O statistics)</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">iostat[参数][时间][次数]</span><br></pre></td></tr></table></figure><p>功能： 通过iostat方便查看CPU、网卡、tty设备、磁盘、CD-ROM 等等设备的活动情况, 负载信息。</p><p>Linux系统中的 iostat是I/O statistics（输入/输出统计）的缩写，iostat工具将对系统的磁盘操作活动进行监视。它的特点是汇报磁盘活动统计情况，同时也会汇报出CPU使用情况。同vmstat一样，iostat也有一个弱点，就是它不能对某个进程进行深入分析，仅对系统的整体情况进行分析。iostat属于sysstat软件包。可以用yum install sysstat 直接安装。</p><h2 id="命令执行"><a href="#命令执行" class="headerlink" title="命令执行"></a>命令执行</h2><h3 id="watch"><a href="#watch" class="headerlink" title="watch"></a>watch</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">watch[参数][命令]</span><br></pre></td></tr></table></figure><p>可以将命令的输出结果输出到标准输出设备，多用于周期性执行命令/定时执行命令（也就是说定个具体时间或者隔一段时间执行一次）<br><a href="https://ipcmen.com/watch">watch命令</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">watch -n 1 -d <span class="string">'pstree|grep http'</span> <span class="comment"># 每隔一秒高亮显示http链接数的变化情况。 后面接的命令若带有管道符，需要加''将命令区域归整。</span></span><br></pre></td></tr></table></figure><h3 id="at"><a href="#at" class="headerlink" title="at"></a>at</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">at[参数][时间]</span><br></pre></td></tr></table></figure><p>功能：在一个指定的时间执行一个指定任务，只能执行一次，且需要开启atd进程（ps -ef | grep atd查看， 开启用/etc/init.d/atd start or restart； 开机即启动则需要运行 chkconfig –level 2345 atd on）</p><h3 id="crontab"><a href="#crontab" class="headerlink" title="crontab"></a>crontab</h3><p>通过crontab 命令，我们可以在固定的间隔时间执行指定的系统指令或 shell script脚本。时间间隔的单位可以是分钟、小时、日、月、周及以上的任意组合。这个命令非常适合周期性的日志分析或数据备份等工作。</p><p><a href="https://www.cnblogs.com/ftl1012/p/crontab.html">Linux crontab命令详解</a></p><p>##文件传输</p><h3 id="rcp-remote-file-copy"><a href="#rcp-remote-file-copy" class="headerlink" title="rcp (remote file copy)"></a>rcp (remote file copy)</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rcp [参数] [源文件] [目标文件]</span><br></pre></td></tr></table></figure><p>功能：rcp命令用在远端复制文件或目录，如同时指定两个以上的文件或目录，且最后的目的地是一个已经存在的目录，则它会把前面指定的所有文件或目录复制到该目录中。</p><p>rcp（远程文件拷贝）命令用于在计算机之间拷贝文件。rcp命令有两种格式。第一种格式用于文件到文件的拷贝；第二种格式用于把文件或目录拷贝到另一个目录中。</p><h3 id="scp-secure-copy"><a href="#scp-secure-copy" class="headerlink" title="scp (secure copy)"></a>scp (secure copy)</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">scp [参数] [源路径] [目标路径]</span><br></pre></td></tr></table></figure><p>功能：</p><ul><li>scp是linux系统下基于ssh登陆进行安全的远程文件拷贝命令。</li><li>linux的scp命令可以在linux服务器之间复制文件和目录。</li></ul><h3 id="wget"><a href="#wget" class="headerlink" title="wget"></a>wget</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget [参数] [URL地址]</span><br></pre></td></tr></table></figure><p>用于从网络上下载资源，没有指定目录，下载资源回默认为当前目录。</p><ul><li>支持断点下传功能</li><li>同时支持FTP和HTTP下载方式</li><li>支持代理服务器</li></ul><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p><a href="https://ipcmen.com/">Linux命令大全（手册）</a><br><a href="https://www.runoob.com/linux/linux-command-manual.html">Linux 命令大全（菜鸟教程）</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;统计与过滤&quot;&gt;&lt;a href=&quot;#统计与过滤&quot; class=&quot;headerlink&quot; title=&quot;统计与过滤&quot;&gt;&lt;/a&gt;统计与过滤&lt;/h2&gt;
    
    </summary>
    
    
      <category term="Linux" scheme="https://stemha.github.io/categories/Linux/"/>
    
    
      <category term="Linux" scheme="https://stemha.github.io/tags/Linux/"/>
    
      <category term="命令" scheme="https://stemha.github.io/tags/%E5%91%BD%E4%BB%A4/"/>
    
  </entry>
  
  <entry>
    <title>Linux常用命令整理（1）</title>
    <link href="https://stemha.github.io/2020/04/19/Linux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%E6%95%B4%E7%90%86%EF%BC%881%EF%BC%89/"/>
    <id>https://stemha.github.io/2020/04/19/Linux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%E6%95%B4%E7%90%86%EF%BC%881%EF%BC%89/</id>
    <published>2020-04-19T09:35:55.000Z</published>
    <updated>2020-04-19T15:44:09.499Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Linux命令基础知识"><a href="#Linux命令基础知识" class="headerlink" title="Linux命令基础知识"></a>Linux命令基础知识</h2><a id="more"></a>    <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">command</span> [-options] parameter1 parameter2 ... </span><br><span class="line">命令     选项      参数(1)    参数(2) </span><br><span class="line">说明： </span><br><span class="line">1. 任何命令中第一个输入的部分绝对是『命令(<span class="built_in">command</span>)』或者『可运行文件』 </span><br><span class="line">2. <span class="built_in">command</span> 命令的名称 </span><br><span class="line">3. [-options] 选项并不存在于实际的命令中，而加入选项配置时，通常选项前会带 - 号（比如-h）。有时候会使用选项的完整全名，此时带有 -- 符号（比如--<span class="built_in">help</span>） </span><br><span class="line">4. parameter1 parameter2.. 为依附在选项后面的参数，或者是 <span class="built_in">command</span> 的参数；  </span><br><span class="line">5. 命令, 选项, 参数等以空格来区分，但是不论空几格 ，shell 都同一视为一格；  </span><br><span class="line">6. [Enter]按键代表着一行命令的开始启动。 </span><br><span class="line">7. 命令太长的时候，可以使用反斜杠 (\) 来跳脱[Enter]符号，使命令连续到下一行。反斜杠后需要立刻接特殊字符才行。</span><br><span class="line">8. 在 Linux 中，区分大小写。</span><br></pre></td></tr></table></figure><h2 id="基本查询"><a href="#基本查询" class="headerlink" title="基本查询"></a>基本查询</h2><h3 id="查询所支持的语言"><a href="#查询所支持的语言" class="headerlink" title="查询所支持的语言"></a>查询所支持的语言</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">echo</span> <span class="variable">$LANG</span> </span><br><span class="line">zh_TW.UTF-8</span><br><span class="line"><span class="comment">#修改为英文语系 </span></span><br><span class="line">$ LANG=en_US</span><br><span class="line">$ <span class="built_in">echo</span> <span class="variable">$LANG</span> </span><br><span class="line">en_US</span><br></pre></td></tr></table></figure><h3 id="时间日历与计算器"><a href="#时间日历与计算器" class="headerlink" title="时间日历与计算器"></a>时间日历与计算器</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ date &#x2F;&#x2F;date 时间</span><br><span class="line">$ cal  &#x2F;&#x2F;cal 日历</span><br><span class="line">$ bc   &#x2F;&#x2F;计算器</span><br></pre></td></tr></table></figure><h3 id="版本信息查询"><a href="#版本信息查询" class="headerlink" title="版本信息查询"></a>版本信息查询</h3><h4 id="uname-－a"><a href="#uname-－a" class="headerlink" title="uname －a"></a>uname －a</h4><p>查看版本当前操作系统内核信息</p><h4 id="cat-proc-version"><a href="#cat-proc-version" class="headerlink" title="cat /proc/version"></a>cat /proc/version</h4><p>查看当前操作系统版本信息</p><h4 id="cat-etc-issue-或-cat-etc-redhat-release"><a href="#cat-etc-issue-或-cat-etc-redhat-release" class="headerlink" title="cat /etc/issue 或 cat /etc/redhat-release"></a>cat /etc/issue 或 cat /etc/redhat-release</h4><p>查看版本当前操作系统发行版信息</p><h4 id="cat-proc-cpuinfo"><a href="#cat-proc-cpuinfo" class="headerlink" title="cat /proc/cpuinfo"></a>cat /proc/cpuinfo</h4><p>Linux查看cpu相关信息，包括型号、主频、内核信息等</p><h4 id="getconf-LONG-BIT"><a href="#getconf-LONG-BIT" class="headerlink" title="getconf LONG_BIT"></a>getconf LONG_BIT</h4><p>Linux查看版本多少位</p><h4 id="lsb-release-a"><a href="#lsb-release-a" class="headerlink" title="lsb_release -a"></a>lsb_release -a</h4><p>CentOS 6.9版本需要安装lsb，CentOS 7.0以上直接可以使用</p><h2 id="命令信息查询"><a href="#命令信息查询" class="headerlink" title="命令信息查询"></a>命令信息查询</h2><h3 id="命令总数：-Tab-Tab"><a href="#命令总数：-Tab-Tab" class="headerlink" title="命令总数：[Tab][Tab]"></a>命令总数：[Tab][Tab]</h3><p>按下两个[Tab]按键，查看共有多少命令可以让用户使用用。</p><h3 id="man-page"><a href="#man-page" class="headerlink" title="man page"></a>man page</h3><p>有时忘记了命令全称，也可以根据不完整的名称查出来，系统有哪些跟这个名词有关的说明文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"> -f 查询以keyword开头所有相关帮助信息列表，只会找数据中的左边那个命令(或文件)的完整名称。</span><br><span class="line">$ man -f keyword</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"> -k 将说明文件里面只要含有keyword的都列出来。</span><br><span class="line">$ man -k keyword</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ whatis  [命令或者是数据]   相当于 man -f [命令或者是数据] </span><br><span class="line">$ apropos [命令或者是数据]   相当于 man -k [命令或者是数据] </span><br><span class="line">两个特殊命令要能使用，必须要有创建 whatis 数据库才行！这个数据库的创建需要以 root 的身份下达如下的命令：</span><br><span class="line">[root@ ~]<span class="comment"># makewhatis</span></span><br></pre></td></tr></table></figure><h2 id="关机-重新启动命令"><a href="#关机-重新启动命令" class="headerlink" title="关机/重新启动命令"></a>关机/重新启动命令</h2><h3 id="数据同步写入硬盘中：-sync"><a href="#数据同步写入硬盘中：-sync" class="headerlink" title="数据同步写入硬盘中： sync"></a>数据同步写入硬盘中： sync</h3><h3 id="惯用的关机命令：-shutdown"><a href="#惯用的关机命令：-shutdown" class="headerlink" title="惯用的关机命令： shutdown"></a>惯用的关机命令： shutdown</h3><h3 id="重新启动，关机：-reboot-halt-poweroff"><a href="#重新启动，关机：-reboot-halt-poweroff" class="headerlink" title="重新启动，关机： reboot, halt, poweroff"></a>重新启动，关机： reboot, halt, poweroff</h3><p>在默认的情况下， 这几个命令都会完成一样的工作！(因为halt会先呼叫shutdown，而shutdown最后会呼叫halt！)。 不过，shutdown可以依据目前已启动的服务来逐次关闭各服务后才关机；至于halt却能够在不理会目前系统状况下， 进行硬件关机的特殊功能</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@ ~]# reboot </span><br><span class="line">[root@ ~]# shutdown -h now </span><br><span class="line">[root@ ~]# poweroff -f</span><br></pre></td></tr></table></figure><h4 id="halt"><a href="#halt" class="headerlink" title="halt"></a>halt</h4><p>若系统的 runlevel 为 0 或 6 ，则Linux halt命令关闭系统，否则以 shutdown 指令（加上 -h 参数）来取代。<br>使用权限：系统管理者。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@ ~]# halt</span><br></pre></td></tr></table></figure><h4 id="切换运行等级：init"><a href="#切换运行等级：init" class="headerlink" title="切换运行等级：init"></a>切换运行等级：init</h4><p>Linux共有七种运行等级<br>run level 0：关机<br>run level 3：纯文本模式<br>run level 5：含有图形接口模式<br>run level 6：重新启动<br>可以使用init来关机</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@~]# init 0</span><br></pre></td></tr></table></figure><h2 id="文件处理命令"><a href="#文件处理命令" class="headerlink" title="文件处理命令"></a>文件处理命令</h2><h3 id="目录相关：ls、pwd、mkdir、rmdir"><a href="#目录相关：ls、pwd、mkdir、rmdir" class="headerlink" title="目录相关：ls、pwd、mkdir、rmdir"></a>目录相关：ls、pwd、mkdir、rmdir</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ls -l  &#x2F;&#x2F;列出当前目录下的文件详细信息</span><br><span class="line">pwd [-options] &#x2F;&#x2F;查看”当前工作目录“的完整路径</span><br><span class="line">mkdir [-options] 目录名 &#x2F;&#x2F;创建目录 </span><br><span class="line">rmdir [-options] 目录名   &#x2F;&#x2F;删除空目录。</span><br></pre></td></tr></table></figure><h3 id="文件复制移动：touch、mv、cp、rm"><a href="#文件复制移动：touch、mv、cp、rm" class="headerlink" title="文件复制移动：touch、mv、cp、rm"></a>文件复制移动：touch、mv、cp、rm</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">mv [选项] 源文件或目录 目标文件或目录</span><br><span class="line">//mv命令将文件重命名或将其移至一个新的目录中</span><br><span class="line">``` </span><br><span class="line"> </span><br><span class="line">```bash</span><br><span class="line">cp [选项]… [-T] 源 目的</span><br><span class="line">//cp命令将源文件复制至目标文件，或将多个源文件复制至目标目录。</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">touch [选项]… 文件…</span><br><span class="line">//touch命令可更改文档或目录的日期时间，包括存取时间和更改时间。</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">rm [选项] 文件…</span><br><span class="line">rm命令删除一个目录中的一个或多个文件或目录，如果没有使用-r选项，则rm不会删除目录。</span><br></pre></td></tr></table></figure><h3 id="取得路径的文件名与目录名：basename，dirname"><a href="#取得路径的文件名与目录名：basename，dirname" class="headerlink" title="取得路径的文件名与目录名：basename，dirname"></a>取得路径的文件名与目录名：basename，dirname</h3><h3 id="查看文件内容：more、less、head、tail、cat、tac、nl、diff"><a href="#查看文件内容：more、less、head、tail、cat、tac、nl、diff" class="headerlink" title="查看文件内容：more、less、head、tail、cat、tac、nl、diff"></a>查看文件内容：more、less、head、tail、cat、tac、nl、diff</h3><p>more：一页一页显示文件内容<br>less：less与more类似，但是可以向前翻页<br>head：查看文件时，只显示头几行<br>tail：查看文件时，只显示尾几行【-f 循环读取文件，不断刷新】<br>tac：从最后一行开始显示：tac（可以看出 tac 是 cat 的倒着写）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">cat [选项] [文件]…</span><br><span class="line">主要的三大功能：</span><br><span class="line">1.一次显示整个文件:cat filename</span><br><span class="line">2.从键盘创建一个文件:cat &gt; filename 只能创建新文件,不能编辑已有文件.</span><br><span class="line">3.将几个文件合并为一个文件:cat file1 file2 &gt; file</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">nl [选项]… [文件]…</span><br><span class="line">\\可以用来显示文件</span><br><span class="line">\\nl命令在linux系统中用来计算文件中行号。nl 可以将输出的文件内容自动的加上行号！</span><br><span class="line">\\其默认的结果与 cat -n 有点不太一样， nl 可以将行号做比较多的显示设计，包括位数与是否自动补齐 0 等等的功能。</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">diff[参数][文件1或目录1][文件2或目录2]</span><br><span class="line">\\diff命令能比较单个文件或者目录内容。如果指定比较的是文件，则只有当输入为文本文件时才有效。以逐行的方式，比较文本文件的异同处。如果指定比较的是目录的的时候，diff 命令会比较两个目录下名字相同的文本文件。列出不同的二进制文件、公共子目录和只在一个目录出现的文件。</span><br><span class="line">root@ubuntu:~# diff &#x2F;snap&#x2F; &#x2F;usr&#x2F;</span><br><span class="line">Only in &#x2F;snap&#x2F;: README</span><br><span class="line">Only in &#x2F;usr&#x2F;: bin</span><br><span class="line">Only in &#x2F;usr&#x2F;: games</span><br><span class="line">Only in &#x2F;usr&#x2F;: include</span><br><span class="line">Only in &#x2F;usr&#x2F;: lib</span><br><span class="line">Only in &#x2F;usr&#x2F;: local</span><br><span class="line">Only in &#x2F;usr&#x2F;: sbin</span><br><span class="line">Only in &#x2F;usr&#x2F;: share</span><br><span class="line">Only in &#x2F;usr&#x2F;: src</span><br></pre></td></tr></table></figure><h3 id="创建文件链接：-ln"><a href="#创建文件链接：-ln" class="headerlink" title="创建文件链接： ln"></a>创建文件链接： ln</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;ln (link)</span><br><span class="line">ln -s source dist        # 建立软连接</span><br><span class="line">ln source dist           # 建立硬连接</span><br></pre></td></tr></table></figure><p><code>软链接(symbolic link)</code>：软链接又叫符号链接，这个文件包含了另一个文件的路径名。可以是任意文件或目录，可以链接不同文件系统的文件。<br><code>硬链接(hard link)</code>：硬链接是已存在文件的另一个名字。【不允许给目录创建硬链接；只有在同一文件系统中的文件之间才能创建硬链接。】</p><p>硬链接：指通过索引节点来进行的连接。在Linux的文件系统中，保存在磁盘分区中的文件不管是什么类型都给它分配一个编号，称为索引节点号(Inode Number)。在Linux中，多个文件名指向同一索引节点是存在的。一般这种连接就是硬连接。硬连接的作用是允许一个文件拥有多个有效路径名，这样用户就可以建立硬连接到重要文件,以防止“误删”的功能。其原因如上所述，因为对应该目录的索引节点有一个以上的连接。只删除一个连接并不影响索引节点本身和其它的连接，只有当最后一个连接被删除后，文件的数据块及目录的连接才会被释放。也就是说，文件才会被真正删除。<br>软链接：文件有点类似于Windows的快捷方式。它实际上是特殊文件的一种。在符号连接中，文件实际上是一个文本文件，其中包含的有另一文件的位置信息。</p><h3 id="更改文件权限"><a href="#更改文件权限" class="headerlink" title="更改文件权限"></a>更改文件权限</h3><p>umask 档案预设权限<br>chattr 配置文件档案隐藏属性<br>lsattr 显示档案隐藏属性<br>file    观察文件类型：</p><h4 id="chgrp"><a href="#chgrp" class="headerlink" title="chgrp"></a>chgrp</h4><p>改变所属群组, /etc/group里面可查询群组</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@~]# chgrp users code.log</span><br></pre></td></tr></table></figure><h4 id="chown"><a href="#chown" class="headerlink" title="chown"></a>chown</h4><p>功能： 通过chown改变文件的拥有者和群组。在更改文件的所有者或所属群组时，可以使用用户名称和用户识别码设置。普通用户不能将自己的文件改变成其他的拥有者。其操作权限一般为管理员。<br>格式： chown [选项]… [所有者][:[组]] 文件…</p><h4 id="chmod"><a href="#chmod" class="headerlink" title="chmod"></a>chmod</h4><p>功能：用于改变文件或目录的访问权限，用它控制文件或目录的访问权限。<br>格式： chmod [-cfvR] [–help] [–version] mode file<br>数字与字符对应关系如下：<br>r=4，w=2，x=1<br>若要rwx属性则4+2+1=7<br>若要rw-属性则4+2=6；<br>若要r-x属性则4+1=7。</p><h3 id="压缩文件"><a href="#压缩文件" class="headerlink" title="压缩文件"></a>压缩文件</h3><p>压缩文件和读取压缩文件：tar，gzip，zcat</p><h3 id="磁盘占用与挂载"><a href="#磁盘占用与挂载" class="headerlink" title="磁盘占用与挂载"></a>磁盘占用与挂载</h3><h4 id="df"><a href="#df" class="headerlink" title="df"></a>df</h4><p>df命令可以获取硬盘被占用了多少空间，目前还剩下多少空间等信息，它也可以显示所有文件系统对i节点和磁盘块的使用情况。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">root@ubuntu:~# df </span><br><span class="line">Filesystem     1K-blocks    Used Available Use% Mounted on</span><br><span class="line">udev              491848       0    491848   0% &#x2F;dev</span><br><span class="line">tmpfs             100920     628    100292   1% &#x2F;run</span><br></pre></td></tr></table></figure><h4 id="du-disk-usage"><a href="#du-disk-usage" class="headerlink" title="du (disk usage)"></a>du (disk usage)</h4><p>du的英文原义为“disk usage”，含义为显示磁盘空间的使用情况，统计目录（或文件）所占磁盘空间的大小。该命令的功能是逐级进入指定目录的每一个子目录并显示该目录占用文件系统数据块（1024字节）的情况。若没有给出指定目录，则对当前目录进行统计。</p><h4 id="mount"><a href="#mount" class="headerlink" title="mount"></a>mount</h4><p>在linux系统中，可以使用mount命令挂载光盘镜像文件、移动硬盘、U盘以及Windows网络共享和UNIX NFS网络共享等</p><h3 id="文件查找"><a href="#文件查找" class="headerlink" title="文件查找"></a>文件查找</h3><h4 id="which"><a href="#which" class="headerlink" title="which"></a>which</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">which 可执行文件名称   &#x2F;&#x2F;查找路径：PATH所含目录</span><br><span class="line">&#x2F;&#x2F;which指令会在PATH变量指定的路径中，搜索某个系统命令的位置，并且返回第一个搜索结果。</span><br></pre></td></tr></table></figure><p>适用场合：查找命令/可执行文件所在的路径。有时候可能在多个路径下存在相同的命令，该命令可用于查找当前所执行的命令到底是哪一个位置处的命令。 </p><h4 id="whereis"><a href="#whereis" class="headerlink" title="whereis"></a>whereis</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">whereis [-bmsu] [BMS 目录名 -f ] 文件名 &#x2F;&#x2F;查找路径：索引数据库所含目录</span><br><span class="line">&#x2F;&#x2F;whereis命令是定位可执行文件、源代码文件、帮助文件在文件系统中的位置。这些文件的属性应属于源文件，二进制文件，或是帮助文件。</span><br><span class="line">&#x2F;&#x2F;whereis 程序还具有搜索源代码、指定备用搜索路径和搜索不寻常项的能力。</span><br></pre></td></tr></table></figure><p>原理：首先会去掉文件名中的前缀空格和以.开头的任何字符，然后在数据库（var/lib/slocate/slocate.db）中查找与经过处理后的文件名相匹配的源文件，二进制文件，或是帮助文件。<br>使用之前可以使用updatedb命令手动更新数据库。<br>适用场合：定位可执行文件、源代码文件、帮助文件在文件系统中的位置</p><h4 id="locate"><a href="#locate" class="headerlink" title="locate"></a>locate</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">locate [选择参数] [样式]  &#x2F;&#x2F;查找路径：索引数据库所含目录</span><br><span class="line">locate指令和find找寻档案的功能类似，但locate是透过update程序将硬盘中的所有档案和目录资料先建立一个索引数据库，在执行loacte时直接找该索引，查询速度会较快，索引数据库一般是由操作系统管理，但也可以直接下达update强迫系统立即修改索引数据库。</span><br></pre></td></tr></table></figure><p>原理：默认情况下(文件名中不包含通配符<em>时)，locate会给出所有与</em>filename*相匹配的文件的路径。<br>适用场合：没有文件类型性质的模糊查找</p><h4 id="find"><a href="#find" class="headerlink" title="find"></a>find</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">find pathname -options [-print -exec -ok …]  &#x2F;&#x2F;查找路径：当前目录&#x2F;指定目录</span><br></pre></td></tr></table></figure><p>适用场合：能用which、whereis和locate的时候尽量不要用find.<br>功能： 用于在文件树种查找文件，并作出相应的处理<br>原理：遍历当前工作目录及其子目录<br>参数：</p><p>1.使用name选项，可以使用某种文件名模式来匹配文件，记住要用引号将文件名模式引起来。<br>2.按照文件权限模式用-perm选项,按文件权限模式来查找文件的话。最好使用八进制的权限表示法。<br>3.如果希望按照更改时间来查找文件，可以使用mtime,atime或ctime选项。<br>4.使用type选项,根据不同的文件类型进行查找，如d(目录)、l(链接)</p><p>find命令之exec<br>-exec 参数后面跟的是command命令，它的终止是以;为结束标志的，所以这句命令后面的分号是不可缺少的，考虑到各个系统中分号会有不同的意义，所以前面加反斜杠。{} 花括号代表前面find查找出来的文件名。例如：find . -type f -exec ls -l {} ;find命令匹配到了当前目录下的所有普通文件，并在-exec选项中使用ls -l命令将它们列出。<br>find命令之xargs<br>find命令把匹配到的文件传递给xargs命令，而xargs命令每次只获取一部分文件而不是全部，不像-exec选项那样。这样它可以先处理最先获取的一部分文件，然后是下一批，并如此继续下去。在有些系统中，使用-exec选项会为处理每一个匹配到的文件而发起一个相应的进程，并非将匹配到的文件全部作为参数一次执行；这样在有些情况下就会出现进程过多，系统性能下降的问题，因而效率不高； 而使用xargs命令则只有一个进程。另外，在使用xargs命令时，究竟是一次获取所有的参数，还是分批取得参数，以及每一次获取参数的数目都会根据该命令的选项及系统内核中相应的可调参数来确定。</p><h2 id="网络管理命令"><a href="#网络管理命令" class="headerlink" title="网络管理命令"></a>网络管理命令</h2><p><a href="https://www.runoob.com/w3cnote/linux-check-port-usage.html">Linux 查看端口占用情况</a></p><h3 id="ip"><a href="#ip" class="headerlink" title="ip"></a>ip</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ip [-option] [动作] [命令]</span><br></pre></td></tr></table></figure><p>option ：设定的参数，主要有-s显示出该设备的统计数据(statistics)，例如总接受封包数等；<br>动作：就是是可以针对哪些网络参数进行动作，包括有：</p><p>link ：关于设备 (device) 的相关设定，包括 MTU, MAC 地址等等<br>addr/address ：关于额外的 IP 设定，例如多 IP 的实现等等；<br>route ：与路由有关的相关设定</p><h3 id="ifconfig"><a href="#ifconfig" class="headerlink" title="ifconfig"></a>ifconfig</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ifconfig [网络设备] [参数]</span><br></pre></td></tr></table></figure><p>ifconfig 命令用来查看和配置网络设备。当网络环境发生改变时可通过此命令对网络进行相应的配置。</p><h3 id="dig"><a href="#dig" class="headerlink" title="dig"></a>dig</h3><p>dig命令是一个功能强大的DNS查询命令。</p><p>一般格式：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dig [@global-server] [domain] [q-type] [q-class] &#123;q-opt&#125; &#123;d-opt&#125;</span><br></pre></td></tr></table></figure><p>参数说明：<br>global-server：默认是以/etc/resolv.conf作为DNS查询的主机，这里可以填入其它DNS主机IP。<br>domain：要查询的域名。<br>q-type：查询记录的类型，例如a、any、mx、ns、soa、hinfo、axfr、txt等，默认查询a。<br>q-class：查询的类别，相当于nslookup中的set class。默认值为in（Internet）。<br>q-opt：查询选项，可以有好几种方式，比如：-f file为通过批处理文件解析多个地址；-p port指定另一个端口（缺省的DNS端口为53），等等。<br>d-opt：dig特有的选项。使用时要在参数前加上一个“+”号。</p><p>d-opt常用选项：<br>+vc：使用TCP协议查询。<br>+time=###：设置超时时间。</p><h3 id="netstat"><a href="#netstat" class="headerlink" title="netstat"></a>netstat</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">netstat [-acCeFghilMnNoprstuvVwx][-A&lt;网络类型&gt;][--ip]</span><br></pre></td></tr></table></figure><p>Netstat 命令用于显示各种网络相关信息，如网络连接，路由表，<strong>接口状态 (Interface Statistics)</strong>，masquerade 连接，多播成员 (Multicast Memberships) 等等。<br><a href="https://www.runoob.com/linux/linux-comm-netstat.html">netstat命令(菜鸟教程)</a></p><h3 id="ss-Socket-Statistics"><a href="#ss-Socket-Statistics" class="headerlink" title="ss(Socket Statistics)"></a>ss(Socket Statistics)</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ss [参数]</span><br><span class="line">ss [参数] [过滤]</span><br></pre></td></tr></table></figure><p>功能： ss命令可以用来获取 socket统计信息，此命令输出的结果类似于 netstat输出的内容，但它能显示更多更详细的 TCP连接状态的信息，且比 netstat 更快速高效。它使用了 TCP协议栈中 tcp_diag（是一个用于分析统计的模块），能直接从获得第一手内核信息，这就使得 ss命令快捷高效。在没有 tcp_diag，ss也可以正常运行。<br><a href="https://blog.csdn.net/jiajiren11/article/details/80887528">ss命令的参数及使用详解</a></p><h3 id="ping"><a href="#ping" class="headerlink" title="ping"></a>ping</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ping [参数] [主机名或IP地址]</span><br></pre></td></tr></table></figure><p>ping命令用于：确定网络和各外部主机的状态；跟踪和隔离硬件和软件问题；测试、评估和管理网络。如果主机正在运行并连在网上，它就对回送信号进行响应。每个回送信号请求包含一个网际协议（IP）和 ICMP 头，后面紧跟一个 tim 结构，以及来填写这个信息包的足够的字节。缺省情况是连续发送回送信号请求直到接收到中断信号（Ctrl-C）。<br>ping 命令每秒发送一个数据报并且为每个接收到的响应打印一行输出。ping 命令计算信号往返时间和(信息)包丢失情况的统计信息，并且在完成之后显示一个简要总结。ping 命令在程序超时或当接收到 SIGINT 信号时结束。Host 参数或者是一个有效的主机名或者是因特网地址。</p><h3 id="tracertroute"><a href="#tracertroute" class="headerlink" title="tracertroute"></a>tracertroute</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">traceroute[参数][主机]</span><br><span class="line">&#x2F;&#x2F;具体参数格式：</span><br><span class="line">traceroute [-dFlnrvx][-f&lt;存活数值&gt;][-g&lt;网关&gt;…][-i&lt;网络界面&gt;][-m&lt;存活数值&gt;][-p&lt;通信端口&gt;][-s&lt;来源地址&gt;][-t&lt;服务类型&gt;][-w&lt;超时秒数&gt;][主机名称或IP地址][数据包大小]</span><br></pre></td></tr></table></figure><p>traceroute指令让你追踪网络数据包的路由途径，预设数据包大小是40Bytes，用户可另行设置。</p><h3 id="route"><a href="#route" class="headerlink" title="route"></a>route</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">route [-f] [-p] [Command [Destination] [mask Netmask] [Gateway] [metric Metric]] [if Interface]]</span><br></pre></td></tr></table></figure><p>功能： Route命令是用于操作基于内核ip路由表，它的主要作用是创建一个静态路由让指定一个主机或者一个网络通过一个网络接口，如eth0。当使用”add”或者”del”参数时，路由表被修改，如果没有参数，则显示路由表当前的内容。</p><p>Linux系统的route命令用于显示和操作IP路由表。要实现两个不同的子网之间的通信，需要一台连接两个网络的路由器，或者同时位于两个网络的网关来实现。<br>在Linux系统中，设置路由通常是为了解决以下问题：该Linux系统在一个局域网中，局域网中有一个网关，能够让机器访问Internet，那么就需要将这台机器的IP地址设置为Linux机器的默认路由。要注意的是，直接在命令行下执行route命令来添加路由，不会永久保存，当网卡重启或者机器重启之后，该路由就失效了；可以在/etc/rc.local中添加route命令来保证该路由设置永久有效。</p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p><a href="https://www.ibm.com/developerworks/cn/linux/l-cn-hardandsymb-links/index.html">理解 Linux 的硬链接与软链接</a><br>鸟哥的linux私房菜<br><a href="https://blog.csdn.net/u010625000/article/details/44455023">Linux下4个查找命令which、whereis、locate、find的总结</a><br><a href="https://www.runoob.com/linux/linux-command-manual.html">Linux 命令大全</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Linux命令基础知识&quot;&gt;&lt;a href=&quot;#Linux命令基础知识&quot; class=&quot;headerlink&quot; title=&quot;Linux命令基础知识&quot;&gt;&lt;/a&gt;Linux命令基础知识&lt;/h2&gt;
    
    </summary>
    
    
      <category term="Linux" scheme="https://stemha.github.io/categories/Linux/"/>
    
    
      <category term="Linux" scheme="https://stemha.github.io/tags/Linux/"/>
    
      <category term="命令" scheme="https://stemha.github.io/tags/%E5%91%BD%E4%BB%A4/"/>
    
  </entry>
  
  <entry>
    <title>《别闹了费曼先生》读书笔记</title>
    <link href="https://stemha.github.io/2020/04/18/%E3%80%8A%E5%88%AB%E9%97%B9%E4%BA%86%E8%B4%B9%E6%9B%BC%E5%85%88%E7%94%9F%E3%80%8B%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    <id>https://stemha.github.io/2020/04/18/%E3%80%8A%E5%88%AB%E9%97%B9%E4%BA%86%E8%B4%B9%E6%9B%BC%E5%85%88%E7%94%9F%E3%80%8B%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/</id>
    <published>2020-04-18T12:48:23.000Z</published>
    <updated>2020-04-18T13:11:18.893Z</updated>
    
    <content type="html"><![CDATA[<h2 id="当科学大师碰上菜鸟"><a href="#当科学大师碰上菜鸟" class="headerlink" title="当科学大师碰上菜鸟"></a>当科学大师碰上菜鸟</h2><a id="more"></a><blockquote><p>报告时间终于到了。我面前坐了这些科学大师，全在等我开口讲话！我生平第一次学术报告，却碰上这样的听众！我的意思是说，他们会问很多难题，我将会大大地出丑了！我还清楚记得，从牛皮纸袋抽出讲稿时，双手不住地发抖。<br>但奇迹出现了——事实上我很幸运，类似的奇迹在我一生中一再发生——只要我开始思考物理、必须全神贯注于要说明的问题上，我的脑袋中就再没有其他杂念，完全不会紧张。因此当我开始报告以后，我根本不知道听众是谁了；我只不过在说明这些物理概念。事情就那么简单！</p></blockquote><h2 id="向数学家挑战"><a href="#向数学家挑战" class="headerlink" title="向数学家挑战"></a>向数学家挑战</h2><blockquote><p>我向他们挑战：“我跟你们打赌，随便你提出一个定理——只要你用我听得懂的方式告诉我，它假设些什么、定理是什么等等——我立刻可以告诉你，它是对的还是错的！”</p></blockquote><blockquote><p>其实，我也并不是随便乱猜的。我有一套方法，甚至到了今天，当别人对我说明一些什么，而我努力要弄明白时，我还在用这些方法：不断地举实例。<br>譬如说，那些念数学的提出一个听起来很了不得的定理，大家都非常兴奋。当他们告诉我这个定理的各项条件时，我便一边构思符合这些条件的情况。当他们说到数学上的“集”时，我便想到一个球，两个不相容的集便是两个球。然后视情况而定，球可能具有不同的颜色、长出头发或发生其他千奇百怪的状况。最后，当他们提出那宝贝定理时，我只要想到那跟我长满头发的绿球不吻合时，便宣布：“不对！”</p></blockquote><blockquote><p>看怎样用些有趣、近代的数学观念来教数学。原先的目的，是要使那些觉得数学枯燥无味的学生提高兴趣。</p></blockquote><h2 id="费曼教授"><a href="#费曼教授" class="headerlink" title="费曼教授"></a>费曼教授</h2><blockquote><p>20 世纪40 年代，我待在普林斯顿的期间，亲眼看到高等研究院内那些卓越心灵的下场。他们都具备了聪明绝顶的头脑，因此特别被选中，来到坐落在森林旁边的漂亮房子里，整天悠哉游哉地闲坐——不用教书，没有任何约束或负担。但等过了一段日子，他们想不出什么新东西来，每个人心里一定开始感到内疚或沮丧，更加担心提不出新想法。可是一切还是如旧，仍然没有灵感。<br>会发生这种情况，完全是因为那里缺乏真正的活动和挑战：他们没有跟做实验的学者接触，也不必思索如何回答学生提出的问题，什么都没有！</p></blockquote><blockquote><p>在任何思考过程中，当一切进行顺利、灵感源源不绝时，教书确实是一种妨碍，十分讨厌。但有更多的时候是脑袋空空的，如果既想不出什么、又没做什么，那真会教人疯狂！你甚至不能说：“我在教书呀！”。</p></blockquote><h2 id="不敢面对问题到弄明白"><a href="#不敢面对问题到弄明白" class="headerlink" title="不敢面对问题到弄明白"></a>不敢面对问题到弄明白</h2><blockquote><p>在罗彻斯特举行了一个会议——一年一度的罗彻斯特研讨会（Rochester Conference）。我还是事事落于人后，而李政道已在发表关于宇称不守恒的论文。他和杨振宁作出宇称并不守恒的结论，现在他正提出解释这现象的理论。<br>会议期间，我住在我位于西瑞桥斯（Syracuse）的妹妹家。我把论文带回家跟她说：“我搞不懂李政道和杨振宁说的东西，这全都那么复杂！”“不，”她说，“你的意思并不是说你无法弄懂它，而是你没有发明它。你没有用你的方法，从听到线索开始做起，把它推演出来。你应该做的是想象自己重新在当学生，把这篇论文带到楼上去，逐字逐句地读，检查每一条方程式。然后你就什么都弄懂了。”<br>我接受了她的建议，把那东西从头看到尾，发现它真的很明显简单。我只是一直害怕去读它，总觉得它太深奥。</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;当科学大师碰上菜鸟&quot;&gt;&lt;a href=&quot;#当科学大师碰上菜鸟&quot; class=&quot;headerlink&quot; title=&quot;当科学大师碰上菜鸟&quot;&gt;&lt;/a&gt;当科学大师碰上菜鸟&lt;/h2&gt;
    
    </summary>
    
    
      <category term="读书笔记" scheme="https://stemha.github.io/categories/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="费曼" scheme="https://stemha.github.io/tags/%E8%B4%B9%E6%9B%BC/"/>
    
      <category term="诺贝尔奖" scheme="https://stemha.github.io/tags/%E8%AF%BA%E8%B4%9D%E5%B0%94%E5%A5%96/"/>
    
      <category term="传记" scheme="https://stemha.github.io/tags/%E4%BC%A0%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>哈希表（散列表）详解</title>
    <link href="https://stemha.github.io/2020/04/14/%E5%93%88%E5%B8%8C%E8%A1%A8%EF%BC%88%E6%95%A3%E5%88%97%E8%A1%A8%EF%BC%89%E8%AF%A6%E8%A7%A3/"/>
    <id>https://stemha.github.io/2020/04/14/%E5%93%88%E5%B8%8C%E8%A1%A8%EF%BC%88%E6%95%A3%E5%88%97%E8%A1%A8%EF%BC%89%E8%AF%A6%E8%A7%A3/</id>
    <published>2020-04-14T14:34:02.000Z</published>
    <updated>2020-04-15T09:53:01.025Z</updated>
    
    <content type="html"><![CDATA[<h2 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a><strong>基本概念</strong></h2><p><code>散列方法（hashing）</code>：一种将字符组成的字符串转换为固定长度（一般是更短长度）的数值或索引值的方法。以最基本的向量作为底层支撑结构，通过适当的散列函数在<u>词条的关键码与向量单元的秩之间建立起映射关系</u>。<br><code>散列表（hashtable）</code>：逻辑上由一些列可存放词条（或者其引用）的单元（称作<code>桶（bucket）</code>或<code>桶单元</code>）组成。各桶单元按照其逻辑次序在物理上连续排列。通常直接使用数组进行排列，这时散列表也称作<code>桶数组（bucket array）</code><br><code>地址空间（address space）</code>：如果桶数组的容量为R，则其中合法秩的区间[0,r)也称作为地址空间。</p><a id="more"></a><p><code>散列函数（hash function）</code>：用来描述散列方法，是从关键码空间到桶数组地址空间的函数。比如下面的hash()：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">hash</span>() : key -&gt; <span class="built_in">hash</span>(key)</span><br></pre></td></tr></table></figure><p><code>key的散列地址（hashing address）</code>：也就是上面的hash(key) 。</p><p><code>完美散列（perfect hashing）</code>：在时间和空间性能方面均达到最优的散列，也就是没有空余，没有重复的散列。</p><p><code>装填因子（load factor）</code>：散列表中非空桶的数目与桶单元总数的比值。是散列表的空间利用率度量方法。</p><p><code>散列冲突（collision）</code>：关键码不同的词条映射到同一个散列地址的情况。</p><p><code>词条的聚集（clustering）</code>：词条集中到散列表内少数若干桶中（或附近）的现象。</p><p>综上散列表的基本构思概括为：</p><blockquote><p>开辟物理地址连续的桶数组hba[],借助散列函数hash(),将词条关键码key映射为桶地址hash(key),从而快速确定待操作的词条的位置。</p></blockquote><h2 id="散列函数"><a href="#散列函数" class="headerlink" title="散列函数"></a><strong>散列函数</strong></h2><p>好的散列函数应该具备的条件：</p><ul><li>确定性 ：也就是说词条E的映射地址hash(E.key)必须完全取决于E.key。</li><li>简单性 ：映射过程不能过于复杂</li><li>所有关键码经过映射后应该尽量覆盖整个地址空间。也就是说hash()最好是满射。</li><li>均匀性 ：最重要的原则，关键码映射到各个桶的概率是同等的，应该尽量为1/R ，R为散列表长度或容量。</li></ul><h3 id="直接定址法"><a href="#直接定址法" class="headerlink" title="直接定址法"></a><strong>直接定址法</strong></h3><p>直接定址法：关键码就可以直接用作为散列地址</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">hash</span>(key)=key</span><br></pre></td></tr></table></figure><h3 id="除余法（devision-method）"><a href="#除余法（devision-method）" class="headerlink" title="除余法（devision method）"></a><strong>除余法（devision method）</strong></h3><p>除余法：选择一个适当的正整数R,用R去除关键码去除关键码,余数作为 散列地址.这个方法的关键是选取适当的R。一般R为素数，采用素数表长是是降低聚集发生概率的捷径。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">hash</span>(key)=key mod R  //R为散列表长度或容量。一般R为素数。</span><br></pre></td></tr></table></figure><p>缺点：残留有某种连续性，比如相邻关键码所对应的散列的地址，总是彼此相邻。</p><h3 id="MAD法（multiply-add-divide-method）乘加除法"><a href="#MAD法（multiply-add-divide-method）乘加除法" class="headerlink" title="MAD法（multiply-add-divide method）乘加除法"></a><strong>MAD法（multiply-add-divide method）乘加除法</strong></h3><p>乘加除法：需要依次执行乘法，加法，和除法运算得名。<br>解决的问题：用来克服除余法的连续性缺陷。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">hash</span>(key)=(a * key + b)mod R  //a&gt;0，b&gt;0，且(a mod R) !=0</span><br><span class="line">//R为散列表长度或容量。一般R为素数。</span><br></pre></td></tr></table></figure><h3 id="数字分析法（selecting-digits）"><a href="#数字分析法（selecting-digits）" class="headerlink" title="数字分析法（selecting digits）"></a><strong>数字分析法（selecting digits）</strong></h3><p>数字分析法：从关键码key中特定进制的展开中抽出特定的若干位，构成一个整型地址。对关键码的各位进行分析（多种方法），丢下分布不均匀的位，留下均匀的位作为地址。<br>数字分析法举例：</p><ul><li>平方取中法（mid-square）</li><li>折叠法（folding）<ul><li>一般折叠</li><li>往复折返式折叠</li></ul></li><li>异或法（xor）<ul><li>一般异或</li><li>往复折返式异或</li></ul></li></ul><h3 id="伪随机数法"><a href="#伪随机数法" class="headerlink" title="伪随机数法"></a><strong>伪随机数法</strong></h3><p>越是随机，越是没有规律的就是好的散列函数。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">hash</span>(key)=rand(key) mod R  //R为散列表长度或容量。</span><br></pre></td></tr></table></figure><h2 id="冲突及其排解"><a href="#冲突及其排解" class="headerlink" title="冲突及其排解"></a><strong>冲突及其排解</strong></h2><h3 id="开散列策略-封闭定址"><a href="#开散列策略-封闭定址" class="headerlink" title="开散列策略/封闭定址"></a><strong>开散列策略/封闭定址</strong></h3><p>开散列（open hashing）或封闭定址（closed addressing）：</p><ul><li>开放基本的散列表结构，引入次级关联结构。</li><li>散列表中的地址只对特定的词条开放（每个桶可以只能能存放特定的一组词条）。</li></ul><h4 id="多槽位法（multiple-slots）"><a href="#多槽位法（multiple-slots）" class="headerlink" title="多槽位法（multiple slots）"></a><strong>多槽位法（multiple slots）</strong></h4><p>多槽位法：将每个桶细分为更小的称作<code>槽位（slot）</code>的若干单元，每一组槽位可以组织为向量或列表。//类似于二维数组</p><h4 id="独立链法（separate-chaining-（拉链法）"><a href="#独立链法（separate-chaining-（拉链法）" class="headerlink" title="独立链法（separate chaining)（拉链法）"></a><strong>独立链法（separate chaining)（拉链法）</strong></h4><p>拉链法：某些哈希地址可以被多个关键字值共享，这样可以针对每个哈希地址建立一个单链表。//引入链表<br>先计算哈希地址，然后搜索该地址的单链表。</p><h4 id="公共溢出区法（overflow）"><a href="#公共溢出区法（overflow）" class="headerlink" title="公共溢出区法（overflow）"></a><strong>公共溢出区法（overflow）</strong></h4><p>在原有散列表hashA之外再设置一个公共溢出区（散列表hashB），如果抽入词条发生冲突，就将该词条转存至公共溢出区（散列表hashB）中。 //引入新的散列表<br>可以说是一种递归形式的散列表。</p><h3 id="闭散列策略-开放定址"><a href="#闭散列策略-开放定址" class="headerlink" title="闭散列策略/开放定址"></a><strong>闭散列策略/开放定址</strong></h3><p>闭散列（open hashing）或开放定址（closed addressing）：</p><ul><li>仅仅依靠基本的散列表结构，就地排解冲突。</li><li>散列表中的地址对所有的词条开放（每个桶可以都有可能存放任一词条）。</li><li>一个桶冲突了，只允许在散列表内部为其寻找另一空桶。</li></ul><h4 id="线性试探法（linear-probing）"><a href="#线性试探法（linear-probing）" class="headerlink" title="线性试探法（linear probing）"></a><strong>线性试探法（linear probing）</strong></h4><p>线性试探法：冲突发生时，顺序查看表中下一单元，直到找出一个空单元或查遍全表。<br>被尝试的桶依次为：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[(<span class="built_in">hash</span>(key) + i)mod R ] ,i=1,2,3,...</span><br></pre></td></tr></table></figure><h4 id="平法试探法（二次探测法）"><a href="#平法试探法（二次探测法）" class="headerlink" title="平法试探法（二次探测法）"></a><strong>平法试探法（二次探测法）</strong></h4><p>被尝试的桶依次为：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[(<span class="built_in">hash</span>(key) + i^2)mod R ] ,i=1,2,3,...</span><br></pre></td></tr></table></figure><h4 id="伪随机试探法"><a href="#伪随机试探法" class="headerlink" title="伪随机试探法"></a><strong>伪随机试探法</strong></h4><p>被尝试的桶依次为：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[rand(i)mod R ] ,rand(i)为系统定义的第i个随机数。</span><br></pre></td></tr></table></figure><h4 id="再散列法（rehashing）"><a href="#再散列法（rehashing）" class="headerlink" title="再散列法（rehashing）"></a><strong>再散列法（rehashing）</strong></h4><p>再散列法：使用哈希函数去散列一个输入的时候，如果输出是同一个散列地址就再次散列，直至不发生冲突为止。<br>缺点：每次冲突都要重新散列，计算时间增加。<br>被尝试的桶依次为：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">//hash2为二级散列函数</span><br><span class="line">[(<span class="built_in">hash</span>(key) + i*hash2(key) ] ,i=1,2,3,...</span><br></pre></td></tr></table></figure><h2 id="本文许可证"><a href="#本文许可证" class="headerlink" title="本文许可证"></a>本文许可证</h2><p>本文遵循 <a href="https://github.com/huihut/interview/blob/master/LICENSE">CC BY-NC-SA 4.0</a>（署名 - 非商业性使用 - 相同方式共享） 协议，转载请注明出处，不得用于商业目的。<br><a href="LICENSE"><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9pLmNyZWF0aXZlY29tbW9ucy5vcmcvbC9ieS1uYy1zYS80LjAvODh4MzEucG5n?x-oss-process=image/format,png" alt="CC BY-NC-SA 4.0"></a></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;基本概念&quot;&gt;&lt;a href=&quot;#基本概念&quot; class=&quot;headerlink&quot; title=&quot;基本概念&quot;&gt;&lt;/a&gt;&lt;strong&gt;基本概念&lt;/strong&gt;&lt;/h2&gt;&lt;p&gt;&lt;code&gt;散列方法（hashing）&lt;/code&gt;：一种将字符组成的字符串转换为固定长度（一般是更短长度）的数值或索引值的方法。以最基本的向量作为底层支撑结构，通过适当的散列函数在&lt;u&gt;词条的关键码与向量单元的秩之间建立起映射关系&lt;/u&gt;。&lt;br&gt;&lt;code&gt;散列表（hashtable）&lt;/code&gt;：逻辑上由一些列可存放词条（或者其引用）的单元（称作&lt;code&gt;桶（bucket）&lt;/code&gt;或&lt;code&gt;桶单元&lt;/code&gt;）组成。各桶单元按照其逻辑次序在物理上连续排列。通常直接使用数组进行排列，这时散列表也称作&lt;code&gt;桶数组（bucket array）&lt;/code&gt;&lt;br&gt;&lt;code&gt;地址空间（address space）&lt;/code&gt;：如果桶数组的容量为R，则其中合法秩的区间[0,r)也称作为地址空间。&lt;/p&gt;
    
    </summary>
    
    
      <category term="数据结构" scheme="https://stemha.github.io/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
      <category term="散列表" scheme="https://stemha.github.io/tags/%E6%95%A3%E5%88%97%E8%A1%A8/"/>
    
  </entry>
  
  <entry>
    <title>Linux系统目录结构</title>
    <link href="https://stemha.github.io/2020/04/14/Linux%E7%B3%BB%E7%BB%9F%E7%9B%AE%E5%BD%95%E7%BB%93%E6%9E%84/"/>
    <id>https://stemha.github.io/2020/04/14/Linux%E7%B3%BB%E7%BB%9F%E7%9B%AE%E5%BD%95%E7%BB%93%E6%9E%84/</id>
    <published>2020-04-13T16:04:52.000Z</published>
    <updated>2020-04-13T16:38:08.889Z</updated>
    
    <content type="html"><![CDATA[<h2 id="bin-binary"><a href="#bin-binary" class="headerlink" title="/bin (binary)"></a>/bin (binary)</h2><p>目录存放着最经常使用的命令</p><a id="more"></a><h2 id="boot"><a href="#boot" class="headerlink" title="/boot"></a>/boot</h2><p>这里存放的是启动Linux时使用的一些核心文件，包括一些连接文件以及镜像文件。</p><p>包括Linux内核文件，以及开机菜单与开机所需的配置文件</p><p>linux kernel常用的文件名为vmlinux</p><h2 id="dev-device"><a href="#dev-device" class="headerlink" title="/dev (device)"></a>/dev (device)</h2><p>该目录下存放的是Linux的外部设备，在Linux中访问设备的方式和访问文件的方式是相同的。</p><h2 id="etc-Editable-Text-Configuration"><a href="#etc-Editable-Text-Configuration" class="headerlink" title="/etc (Editable Text Configuration)"></a>/etc (Editable Text Configuration)</h2><p>可配置文件<br>存放所有的系统管理所需要的配置文件和子目录。</p><h3 id="etc-init-d"><a href="#etc-init-d" class="headerlink" title="/etc/init.d"></a>/etc/init.d</h3><p>所有服务的默认启动脚本都是放置在这个目录内</p><h3 id="etc-xinetd-d"><a href="#etc-xinetd-d" class="headerlink" title="/etc/xinetd.d"></a>/etc/xinetd.d</h3><p>所谓的super daemon管理的各项服务的配置文件目录</p><h3 id="etc-X11"><a href="#etc-X11" class="headerlink" title="/etc/X11"></a>/etc/X11</h3><p>与X Windows有关的各种配置文件都在这里</p><h3 id="etc-securetty"><a href="#etc-securetty" class="headerlink" title="/etc/securetty"></a>/etc/securetty</h3><p>只有/etc/securetty中登记的终端才允许root用户登录，如果不存在这个文件，则root可以在任何终端上登录</p><p>这个终端指tty1之类的</p><h3 id="etc-passwd"><a href="#etc-passwd" class="headerlink" title="/etc/passwd"></a>/etc/passwd</h3><p>保存的就是系统中所有的用户和用户的主要信息</p><h3 id="etc-shadow"><a href="#etc-shadow" class="headerlink" title="/etc/shadow"></a>/etc/shadow</h3><p>/etc/passwd是用户数据库，其中的域给出了用户名、加密口令和用户的其他信息. /etc/shadow是在安装了影子(shadow)口令软件的系统上的影子口令文件。影子口令文件将/etc/passwd 文件中的加密口令移动到/etc/shadow中，而后者只对超级用户root可读。这使破译口令更困难，以此增加系统的安全性。</p><h2 id="home-home-directory"><a href="#home-home-directory" class="headerlink" title="/home (home directory)"></a>/home (home directory)</h2><p>用户的主目录，在Linux中，每个用户都有一个自己的目录，一般该目录名是以用户的账号命名的</p><p>系统默认的用户主文件夹</p><p>比较重要的是 主文件夹有两者代号</p><ul><li><p>~ 代表目前这个用户的主文件夹</p></li><li><p>~dmtsai 代表dmtsai的主文件夹</p></li></ul><h2 id="lib"><a href="#lib" class="headerlink" title="/lib"></a>/lib</h2><p>这个目录里存放着系统最基本的动态连接共享库，其作用类似于Windows里的DLL文件。几乎所有的应用程序都需要用到这些共享库。</p><p>放置的是开机会用到的函数库，以及在/bin或/sbin下面的命令会调用的函数库而已</p><p>尤其重要的是/lib/modules/这个目录</p><p>放置内核相关的模块（驱动程序）</p><h2 id="lost-found"><a href="#lost-found" class="headerlink" title="/lost+found"></a>/lost+found</h2><p>这个目录一般情况下是空的，当系统非法关机后，这里就存放了一些文件。</p><p>这个目录是使用标准的ext2/ext3文件系统格式才会产生的目录</p><h2 id="media"><a href="#media" class="headerlink" title="/media"></a>/media</h2><p>linux系统会自动识别一些设备，例如U盘、光驱等等，当识别后，linux会把识别的设备挂载到这个目录下。</p><p>包括软盘，光盘，DVD等设备都暂时挂载于此</p><h2 id="mnt"><a href="#mnt" class="headerlink" title="/mnt"></a>/mnt</h2><p>系统提供该目录是为了让用户临时挂载别的文件系统的，或者说是额外的设备</p><p>比较早的时候，这个目录的用途与/media相同。只是有了/media之后这个目录就暂时用来挂载用了</p><h2 id="opt"><a href="#opt" class="headerlink" title="/opt"></a>/opt</h2><p> 这是给主机额外安装软件所摆放的目录。比如你安装一个ORACLE数据库则就可以放到这个目录下。默认是空的。</p><p>给第三方软件放置的目录</p><h2 id="proc-process"><a href="#proc-process" class="headerlink" title="/proc (process)"></a>/proc (process)</h2><p>这个目录本身是一个虚拟的文件系统，放置的数据都是在内存中:例如，系统内核，进程，外部设备的状态及网络状态等</p><p>目录是一个虚拟的目录，它是系统内存的映射，我们可以通过直接访问这个目录来获取系统信息</p><p>这个目录的内容不在硬盘上而是在内存里，本身不占用任何硬盘空间，我们也可以直接修改里面的某些文件</p><h2 id="root"><a href="#root" class="headerlink" title="/root"></a>/root</h2><p>该目录为系统管理员，也称作超级权限者的用户主目录。</p><h2 id="run"><a href="#run" class="headerlink" title="/run"></a>/run</h2><p>是一个临时文件系统，存储系统启动以来的信息。当系统重启时，这个目录下的文件应该被删掉或清除。如果你的系统上有 /var/run 目录，应该让它指向 run。</p><h2 id="sbin"><a href="#sbin" class="headerlink" title="/sbin"></a>/sbin</h2><p>s就是Super User的意思，这里存放的是系统管理员使用的系统管理程序。</p><h2 id="selinux"><a href="#selinux" class="headerlink" title="/selinux"></a>/selinux</h2><p>这个目录是Redhat/CentOS所特有的目录，Selinux是一个安全机制，类似于windows的防火墙，但是这套机制比较复杂，这个目录就是存放selinux相关的文件的。</p><p>这个目录的内容数据也是在内存中的信息，同样不会占用任何的硬盘容量</p><p>Secure Enhance Linux的执行目录</p><h2 id="srv-service"><a href="#srv-service" class="headerlink" title="/srv (service)"></a>/srv (service)</h2><p> 该目录存放一些服务启动之后需要提取的数据。</p><p>一些网络服务启动之后，这些服务所取用的数据目录</p><p>存放服务启动后需要提取的数据（不用服务器就是空）</p><h2 id="sys"><a href="#sys" class="headerlink" title="/sys"></a>/sys</h2><p> 这是linux2.6内核的一个很大的变化。该目录下安装了2.6内核中新出现的一个文件系统 sysfs 。</p><p>sysfs文件系统集成了下面3种文件系统的信息：针对进程信息的proc文件系统、针对设备的devfs文件系统以及针对伪终端的devpts文件系统。<br>该文件系统是内核设备树的一个直观反映。</p><p>当一个内核对象被创建的时候，对应的文件和目录也在内核对象子系统中被创建。</p><p>这个目录与/proc目录类似，也是一个虚拟的文件系统，主要也是记录与内核相关的信息。包括目前已经加载的内核模块与内核检测到的硬件设备信息等。</p><p>这个目录同样不占用硬盘容量。</p><h2 id="tmp"><a href="#tmp" class="headerlink" title="/tmp"></a>/tmp</h2><p>这个目录是用来存放一些临时文件的。</p><h2 id="usr-UNIX-Software-Resource-而不是user"><a href="#usr-UNIX-Software-Resource-而不是user" class="headerlink" title="/usr (UNIX Software Resource,而不是user)"></a>/usr (UNIX Software Resource,而不是user)</h2><p>是UNIX 操作系统软件资源所放置的目录，而不是用户的数据.<br>这是一个非常重要的目录，用户的很多应用程序和文件都放在这个目录下，类似于windows下的program files目录。<br>注意事项：FHS建议所有软件开发者将他们的数据合理地放置到这个目录下的子目录，而不要自行新建软件自己独立的目录<br>有点像windows系统中C:\Windows\和C:\Program files\这两个目录的综合体</p><h3 id="usr-bin"><a href="#usr-bin" class="headerlink" title="/usr/bin"></a>/usr/bin</h3><p>系统用户使用的应用程序。</p><h3 id="usr-sbin"><a href="#usr-sbin" class="headerlink" title="/usr/sbin"></a>/usr/sbin</h3><p>超级用户使用的比较高级的管理程序和系统守护程序</p><h3 id="usr-src"><a href="#usr-src" class="headerlink" title="/usr/src"></a>/usr/src</h3><p>内核源代码默认的放置目录。</p><h2 id="var"><a href="#var" class="headerlink" title="/var"></a>/var</h2><p>这个目录中存放着在不断扩充着的东西，我们习惯将那些经常被修改的目录放在这个目录下。包括各种日志文件。</p><h2 id="附注"><a href="#附注" class="headerlink" title="附注"></a>附注</h2><p>上面这些目录比较完备了</p><p>我主要是根据菜鸟教程，鸟哥的私房菜进行整理的</p><p>关于/run这个目录稍微特殊一点点，有的系统是二级目录，如果你的系统上有 /var/run 目录，应该让它指向 run。</p><p>可以用ls -l / 命令查看目录树</p><h3 id="关于挂载"><a href="#关于挂载" class="headerlink" title="关于挂载"></a>关于挂载</h3><p>开机过程中仅有根目录会被挂载，其他分区则是在开机完成之后才会持续进行挂载的行为</p><h2 id="本文许可证"><a href="#本文许可证" class="headerlink" title="本文许可证"></a>本文许可证</h2><p>本文遵循 <a href="https://github.com/huihut/interview/blob/master/LICENSE">CC BY-NC-SA 4.0</a>（署名 - 非商业性使用 - 相同方式共享） 协议，转载请注明出处，不得用于商业目的。<br><a href="LICENSE"><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9pLmNyZWF0aXZlY29tbW9ucy5vcmcvbC9ieS1uYy1zYS80LjAvODh4MzEucG5n?x-oss-process=image/format,png" alt="CC BY-NC-SA 4.0"></a></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;bin-binary&quot;&gt;&lt;a href=&quot;#bin-binary&quot; class=&quot;headerlink&quot; title=&quot;/bin (binary)&quot;&gt;&lt;/a&gt;/bin (binary)&lt;/h2&gt;&lt;p&gt;目录存放着最经常使用的命令&lt;/p&gt;
    
    </summary>
    
    
      <category term="Linux" scheme="https://stemha.github.io/categories/Linux/"/>
    
    
      <category term="Linux" scheme="https://stemha.github.io/tags/Linux/"/>
    
      <category term="目录结构" scheme="https://stemha.github.io/tags/%E7%9B%AE%E5%BD%95%E7%BB%93%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>linux 性能分析，测试与调优工具</title>
    <link href="https://stemha.github.io/2020/04/09/linux-%E6%80%A7%E8%83%BD%E5%88%86%E6%9E%90%EF%BC%8C%E6%B5%8B%E8%AF%95%E4%B8%8E%E8%B0%83%E4%BC%98%E5%B7%A5%E5%85%B7/"/>
    <id>https://stemha.github.io/2020/04/09/linux-%E6%80%A7%E8%83%BD%E5%88%86%E6%9E%90%EF%BC%8C%E6%B5%8B%E8%AF%95%E4%B8%8E%E8%B0%83%E4%BC%98%E5%B7%A5%E5%85%B7/</id>
    <published>2020-04-09T06:44:46.000Z</published>
    <updated>2020-04-09T07:10:43.789Z</updated>
    
    <content type="html"><![CDATA[<h3 id="静态性能分析工具-static-performance-analysis-tools"><a href="#静态性能分析工具-static-performance-analysis-tools" class="headerlink" title="静态性能分析工具(static performance analysis tools)"></a>静态性能分析工具(static performance analysis tools)</h3><ul><li><strong>dmesg</strong> 用于显示开机信息，开机信息也保存在/var/log目录中，名为dmesg的文件里。</li><li><strong>blockdev</strong>  工具允许从命令行调用区块设备控制程序。调用设备的ioctl函数。似乎Linux中对设备的直接操作只有ioctl函数。</li><li><strong>ldd</strong> （List Dynamic Dependencies，意译为列出动态库依赖关系）是一款在类Unix系统的实用工具，负责在命令行内输出程序或共享库所依赖的函数库。<a id="more"></a></li><li><strong>lsblk</strong> (list block)即用于列出所有可用块设备的信息,而且还能显示他们之间的依赖关系,但是它不会列出RAM盘的信息</li><li><strong>lsscsi</strong>  可以看到Raid卡信息和所有虚拟磁盘以及光驱的信息，如果没有硬件SCSI控制器，那就不会返回信息。</li><li><strong>lspci</strong> 显示有关pci总线的信息以及连接到它们的设备。</li><li><strong>lscpu</strong> (list cpu)显示CPU的详细信息，比如CPU的制造商、架构、CPU数量、型号、主频、缓存及支持的虚拟化技术等信息。</li><li><strong>lstopo</strong> (list topology of the system)显示可视化的方式组成 CPU、缓存、内存和I/O设备的拓扑结构。这个命令用来识别处理器结构和系统的NUMA拓扑结构。</li><li><strong>likwid</strong> (Like I Knew What I’m Doing) 是一个用来测量、配置并显示硬件相关特性的命令行收集工具。其中的likwid拓扑结构能显示CPU硬件(线程/缓存/NUMA)的拓扑结构信息，还能识别处理器家族(比如：Intel Core 2, AMD Shanghai)。</li><li><strong>smartctl</strong>  查看硬盘的SMART信息。</li><li><strong>fdisk</strong> 创建和维护分区表的程序(兼容DOS类型的分区表、BSD或SUN的磁盘列表）</li><li><strong>schedtool</strong> (scheduling tool)查询或设置CPU状态的工具。通过不同的参数可以查看或设置不同的属性。</li><li><strong>numactl</strong> (Control NUMA policy)用于控制 进程与共享存储的 NUMA 技术机制。</li><li><strong>cpuid</strong> 获取CPU的信息。该命令的底层是CPUID指令。它获取的内容比/proc/cpuinfo要详细很多。</li><li><strong>MegaCli</strong> 管理维护硬件RAID的软件</li><li><strong>App Config</strong></li></ul><h3 id="观测工具-Observability-Tools"><a href="#观测工具-Observability-Tools" class="headerlink" title="观测工具(Observability Tools)"></a>观测工具(Observability Tools)</h3><ul><li><strong>iostat</strong>  (input/output statistics)报告中央处理器（CPU）统计信息和整个系统、适配器、tty 设备、磁盘和 CD-ROM 的输入/输出统计信息。</li><li><strong>vmstat</strong>  (VirtualMeomoryStatistics,虚拟内存统计) 报告关于内核线程、虚拟内存、磁盘、陷阱和 CPU 活动的统计信息。</li><li><strong>dstat</strong> 用来替换vmstat、iostat、netstat、nfsstat和ifstat这些命令的工具,是一个全能系统信息统计工具。</li><li><strong>pidstat</strong> 是sysstat工具的一个命令，用于监控全部或指定进程的cpu、内存、线程、设备IO等系统资源的占用情况。</li><li><strong>mpstat</strong>  (multiprocessor statistics)查看多核心的cpu中每个计算核心的统计数据。类似工具vmstat只能查看系统的整体cpu情况</li><li><strong>netstat</strong> ( network statistics)显示当前的网络状态，包括传输控制协议层的连线状况、路由表、网络接口状态和网络协议的统计信息等。</li><li><strong>iotop</strong> 用来监视磁盘I/O使用状况的top类工具</li><li><strong>top</strong> (display Linux processes)实时显示系统中各个进程的资源占用状况,类似于Windows的任务管理器。</li><li><strong>htop</strong>  top命令的升级版。交互式的进程浏览器，可以用来替换Linux下的top命令</li><li><strong>gtop</strong>  JavaScript 编写的开源系统资源监控实用程序,它是 Linux 系统自带 top 工具的替代品</li><li><strong>tiptop</strong>  通过读取CPU硬件计数器的信息（比如cahche miss，executed instructions per cycle等等）了解程序执行效率</li><li><strong>strace</strong> 可跟踪系统调用的执行。最简单的方式，它可以从头到尾跟踪binary的执行，然后以一行文本输出系统调用的名字，参数和返回值。</li><li><strong>uptime</strong> 可以显示当前系统时间、系统已运行时间、启用终端数量以及平均负载值等信息</li><li><strong>lsof</strong>  (list open files)列出当前系统打开的文件，注意linux中设备也是文件</li><li><strong>perf</strong>  性能分析工具，能够进行函数级与指令级的热点查找。</li><li><strong>Flame Graphs</strong> 性能分析的利器,通过它可以快速定位性能瓶颈点。</li></ul><h3 id="测试工具-Benchmarking-Tools"><a href="#测试工具-Benchmarking-Tools" class="headerlink" title="测试工具(Benchmarking Tools)"></a>测试工具(Benchmarking Tools)</h3><ul><li><strong>fio</strong> 开源的I/O压力测试工具，主要是用来测试磁盘/SSD的IO性能，也可测试cpu，nic的IO性能。</li><li><strong>hdparm</strong> (hard disk parameters)用于显示与设定硬盘的参数</li><li><strong>dd</strong>  用于读取、转换并输出数据。可从标准输入或文件中读取数据,根据指定的格式来转换数据,再输出到文件、设备或标准输出。  </li><li><strong>perf_events</strong> 网上很多叫法如perf_events , perf profiler , Performance Counters for Linux。叫法不同，都指perf</li><li><strong>perf-tools</strong>  基于 perf_events (perf) 和 ftrace 的Linux性能分析调优工具集，能够收集ftrace和perf_events中乱七八糟的参数。</li><li><strong>ktap</strong>  Linux的基于脚本的动态跟踪工具 允许用户跟踪Linux内核动态。</li><li><strong>sysbench</strong>  一个开源的、模块化的、跨平台的多线程性能测试工具,可以用来进行CPU、内存、磁盘I/O、线程、数据库的性能测试。</li><li><strong>ab</strong> (apachebench) ab命令会创建多个并发访问线程,模拟多个访问者同时对某一URL地址进行访问。</li><li><strong>wrk</strong> 针对 Http 协议的基准测试工具，它能够在单机多核 CPU 的条件下，使用系统自带的高性能 I/O 机制，如 epoll，kqueue 等，通过多线程和事件模式，对目标机器产生大量的负载。</li><li><strong>jmeter</strong>  Apache组织开发的基于Java的压力测试工具。用于对软件做压力测试。</li><li><strong>openssl</strong> 加解密能力也是CPU性能测试的一部分。</li><li><strong>UnixBench</strong> 类unix系(Unix,BSD,Linux)统下的性能测试工具</li><li><strong>lmbench</strong> 多平台软件，因此能够对同级别的系统进行比较测试，反映不同系统的优劣势，可用于评价系统综合性能的多平台开源benchmark，能够测试包括文档读写、内存操作、进程创建销毁开销、网络等性能.</li><li><strong>perfbench</strong> perf下的工具 测试系统性能</li><li><strong>hping3</strong>  面向命令行的用于生成和解析TCP/IP协议数据包汇编/分析的开源工具。</li><li><strong>iperf</strong> 网络性能测试工具。Iperf可以测试最大TCP和UDP带宽性能，具有多种参数和UDP特性，可以根据需要调整，可以报告带宽、延迟抖动和数据包丢失。</li><li><strong>ping</strong>  向特定的目的主机发送 ICMP（Iternet Control Message Protocol 因特网报文控制协议）Echo 请求报文，测试目的站是否可达及了解其有关状态。</li><li><strong>ttcp</strong>  传统的测试TCP性能的工具,它主要测试两个机器之间TCP的吞吐量(在应用层模拟消息传递的过程)</li><li><strong>traceroute</strong>  利用ICMP 协议定位您的计算机和目标计算机之间的所有路由器。</li><li><strong>mtr</strong> 网络连通性判断工具，它结合了ping, traceroute,nslookup 的相关特性</li><li><strong>pchar</strong> 沿Internet路径执行网络测量</li></ul><h3 id="调优工具-Tuning-Tools"><a href="#调优工具-Tuning-Tools" class="headerlink" title="调优工具(Tuning Tools)"></a>调优工具(Tuning Tools)</h3><ul><li><strong>sysctl</strong>  (System Administration)用来配置与显示在/proc/sys目录中的内核参数</li><li><strong>swapon</strong>  用于激活Linux中的交换空间，Linux的内存管理必须使用交换区来建立虚拟内存。</li><li><strong>env</strong> gnu的coreutils包内的一个软件，用来显示系统中已存在的环境变量,以及在定义的环境中执行指令。</li><li><strong>tune2fs</strong> 允许系统管理员在Linux ext2、ext3或ext4文件系统上调整各种可调的文件系统参数。</li><li><strong>ionice</strong>  获取或设置程序的IO调度与优先级。PRI(new)=PRI(default)+nice</li><li><strong>nice</strong>  调整程序运行的优先级，当前程序运行优先级基础之上调整指定值得到新的程序运行优先级。</li><li><strong>renice</strong>  重新指定一个或多个进程的优先级</li><li><strong>taskset</strong> 将某个进程与某个CPU核心绑定。</li><li><strong>ulimit</strong>  为shell内建指令，可用来控制shell执行程序的资源</li><li><strong>chcpu</strong>   修改cpu的状态,启用和关闭cpu，扫描新的CPU,改变底层虚拟机监控程序的CPU调度模式,并请求CPU的系统管理程序(配置)或返回CPU hypervisor</li><li><strong>numactl</strong> 用于控制进程与共享存储的 NUMA 技术机制。</li><li><strong>sysctl</strong>  用于运行时配置内核参数,这些参数位于/proc/sys目录下。</li><li><strong>ethtool</strong> 用于查询及设置网卡参数</li><li><strong>stap</strong> (SystemTap) 内核开发者必须要掌握的一个工具,用于内核监控和跟踪，以及诊断性能或功能问题。</li><li><strong>kpatch</strong>  给Linux内核动态打补丁但是不必重启系统</li></ul><h2 id="本文许可证"><a href="#本文许可证" class="headerlink" title="本文许可证"></a>本文许可证</h2><p>本文遵循 <a href="https://github.com/huihut/interview/blob/master/LICENSE">CC BY-NC-SA 4.0</a>（署名 - 非商业性使用 - 相同方式共享） 协议，转载请注明出处，不得用于商业目的。<br><a href="LICENSE"><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9pLmNyZWF0aXZlY29tbW9ucy5vcmcvbC9ieS1uYy1zYS80LjAvODh4MzEucG5n?x-oss-process=image/format,png" alt="CC BY-NC-SA 4.0"></a></p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;静态性能分析工具-static-performance-analysis-tools&quot;&gt;&lt;a href=&quot;#静态性能分析工具-static-performance-analysis-tools&quot; class=&quot;headerlink&quot; title=&quot;静态性能分析工具(static performance analysis tools)&quot;&gt;&lt;/a&gt;静态性能分析工具(static performance analysis tools)&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;dmesg&lt;/strong&gt; 用于显示开机信息，开机信息也保存在/var/log目录中，名为dmesg的文件里。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;blockdev&lt;/strong&gt;  工具允许从命令行调用区块设备控制程序。调用设备的ioctl函数。似乎Linux中对设备的直接操作只有ioctl函数。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;ldd&lt;/strong&gt; （List Dynamic Dependencies，意译为列出动态库依赖关系）是一款在类Unix系统的实用工具，负责在命令行内输出程序或共享库所依赖的函数库。&lt;/li&gt;&lt;/ul&gt;
    
    </summary>
    
    
      <category term="Linux" scheme="https://stemha.github.io/categories/Linux/"/>
    
    
      <category term="Linux" scheme="https://stemha.github.io/tags/Linux/"/>
    
      <category term="工具" scheme="https://stemha.github.io/tags/%E5%B7%A5%E5%85%B7/"/>
    
      <category term="性能分析" scheme="https://stemha.github.io/tags/%E6%80%A7%E8%83%BD%E5%88%86%E6%9E%90/"/>
    
  </entry>
  
  <entry>
    <title>《练习的心态》读书笔记</title>
    <link href="https://stemha.github.io/2020/04/08/%E3%80%8A%E7%BB%83%E4%B9%A0%E7%9A%84%E5%BF%83%E6%80%81%E3%80%8B%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    <id>https://stemha.github.io/2020/04/08/%E3%80%8A%E7%BB%83%E4%B9%A0%E7%9A%84%E5%BF%83%E6%80%81%E3%80%8B%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/</id>
    <published>2020-04-08T09:12:52.000Z</published>
    <updated>2020-04-09T07:04:13.262Z</updated>
    
    <content type="html"><![CDATA[<h2 id="引言-人生就是漫长的练习"><a href="#引言-人生就是漫长的练习" class="headerlink" title="引言　人生就是漫长的练习"></a>引言　人生就是漫长的练习</h2><h2 id="第1章-学习开始"><a href="#第1章-学习开始" class="headerlink" title="第1章　学习开始"></a>第1章　学习开始</h2><p>当你弄懂了练习的正确原理，学习某些新事物的任务将变成一种<strong>没有压力的愉快与平和的体验</strong>，变成一个适合你生活中各种领域的过程，并且促成你对生活中所有的艰辛与痛苦采用合适的视角来观察。</p><a id="more"></a><p><strong>压力与焦虑主要来源于我们自己对目标的依恋。</strong><br>练习的心态这也是一种技能：尽可能迅速，最少的付出来发展任何一项技能的能力，以及在这个过程体验内心平和与愉悦的能力。</p><p>在不感到失败和焦虑的情况下去努力实现目标。<br>学习的渴望仅仅是第一步，需要正确理解技术性细节与努力，否则会耗尽的</p><p>当今的文化是多任务的，比如开车时第一件事会习惯性打开收音机。   而<code>滑冰</code>正相反，滑冰时候不会注意边上嘈杂的声音！<br>由于习惯于一心多用，我们大脑躁动不安，且具有极大惯性，没法安静下来。</p><p>练习的心态是安静的<br>意识是第一位的：没法控制自己的思维，不管设立什么样的目标，都没有用。我们对自己要去的方向就像<code>乘坐马车</code>，必须要拉紧思维的缰绳才行啊！<br>填补空虚是一个循环往复的过程</p><p><code>学会走路</code>的过程并不会在心里让你压力倍增。我们要意识并掌控这个过程，学会从中享受！</p><h2 id="第2章-以过程为导向，不以结果为导向"><a href="#第2章-以过程为导向，不以结果为导向" class="headerlink" title="第2章　以过程为导向，不以结果为导向"></a>第2章　以过程为导向，不以结果为导向</h2><p> 人生的悖论：耐心与自律的问题是，要培养它们中的任何一个，需要同时具备它们两个。</p><ul><li>简单法则</li><li>以过程为导向</li><li>重点关注当前</li><li>将过程确定为目标，并且运用总目标作为船舵，以指引自己的努力。</li></ul><p>对自己想要做的事情刻意训练，带着意图训练，并且自始至终清醒的知道那种意图</p><h2 id="第3章-关键是视角"><a href="#第3章-关键是视角" class="headerlink" title="第3章　关键是视角"></a>第3章　关键是视角</h2><p>当我们试图理解自己以及我们对人生中各种努力的痛苦挣扎时，可以通过观察一朵鲜花来找到平和。问你自己：一朵鲜花的生命，从撒下种子到完全盛开，在什么时候可以达到完美？</p><p>然后呢？ 达成目标之后，然后呢？然后又能干什么呢？？？？<br><code>初学者心态</code><br><code>鲜花的生命</code>，自始至终都是完美的</p><p><strong>他了解到，假如将自己的思绪集中在当前，并只专注了他在这一刻正在做的事情的过程，那便可以喜欢上他正在做的任何事情。</strong></p><h2 id="第4章-培养期望的习惯"><a href="#第4章-培养期望的习惯" class="headerlink" title="第4章　培养期望的习惯"></a>第4章　培养期望的习惯</h2><p>习惯是学来的。明智地选择它们。自己创造想要的习惯，不带情绪和判断的采取哪些行为，之后坚持下去。</p><blockquote><p>   就像一名优秀的老师，对待学生的错误不会情绪化，那种情绪化来源于自我期望，与结果和产物关联，如果你体验到这些情绪，就证明你没有专注于当前过程！！！</p></blockquote><p>怎么样阻止旧的习惯，采用一种例行行为来阻止，比如<code>击球前例动作</code></p><h2 id="第5章-感知变化，创造耐心！"><a href="#第5章-感知变化，创造耐心！" class="headerlink" title="第5章　感知变化，创造耐心！"></a>第5章　感知变化，创造耐心！</h2><p>你需要的所有耐心，都已经处在你的内心了。<br>知道什么时候内心疯狂奔走<br>接受什么事情不会尽善尽美</p><blockquote><p>放弃某种幸福和乐趣就在某个地方的徒劳想法</p></blockquote><p>在探索的道路上，除了去追求，没有别的可以达到的目标了//我们20岁的目标肯定与18岁的不同，参照对象也是不一样的，不要指望能达到你的目标。探索本身就是一种目标。</p><p>对于没有费力得到的东西，那种兴奋感在得到东西早已烟消云散。</p><p><code>得到目标</code>和<code>实现目标</code>是两种完全不同的概念<br>真正的愉悦 </p><h2 id="第6章-4“S”方法"><a href="#第6章-4“S”方法" class="headerlink" title="第6章　4“S”方法"></a>第6章　4“S”方法</h2><p>力求简化，将征服大多数复杂的任务。</p><ul><li>简化 </li><li>细分 </li><li>缩短 </li><li>放慢</li></ul><h2 id="第7章-平静与DOC方法"><a href="#第7章-平静与DOC方法" class="headerlink" title="第7章　平静与DOC方法"></a>第7章　平静与DOC方法</h2><p>客观是通往宁静心灵之路！</p><p>主观判断需要一个评估和对比的过程，这要求有一个相对的点，即理想状况<br>判断有一个不利的地方，它不会以一种超然的方式运行，常常会包含着某些情绪，有趣的是，对事情我们感觉到的重要性越多，我们带的情绪越多<br>将自我与观察者合并  。就像我们安慰他人时候带着的超然智慧一样。  怎么合并呢 冥想！</p><p>do observe correct<br>就像射箭运动员一样，安静，不复杂完全没有心理的杂乱</p><h2 id="第8章-教孩子，也从孩子身上学习"><a href="#第8章-教孩子，也从孩子身上学习" class="headerlink" title="第8章　教孩子，也从孩子身上学习"></a>第8章　教孩子，也从孩子身上学习</h2><p>智慧并不是年龄的副产物。从你身边所有的人身上学习，同时也用自己的行为影响身边的人。</p><h2 id="第9章-你的技能在成长"><a href="#第9章-你的技能在成长" class="headerlink" title="第9章　你的技能在成长"></a>第9章　你的技能在成长</h2><p>有了刻意的和反复的努力，进步便水到渠成。</p><blockquote><p>   如果说各种软件上的信息不能使你知识变得丰富，那么你就不需要它们</p></blockquote><h2 id="本文许可证"><a href="#本文许可证" class="headerlink" title="本文许可证"></a>本文许可证</h2><p>本文遵循 <a href="https://github.com/huihut/interview/blob/master/LICENSE">CC BY-NC-SA 4.0</a>（署名 - 非商业性使用 - 相同方式共享） 协议，转载请注明出处，不得用于商业目的。<br><a href="LICENSE"><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9pLmNyZWF0aXZlY29tbW9ucy5vcmcvbC9ieS1uYy1zYS80LjAvODh4MzEucG5n?x-oss-process=image/format,png" alt="CC BY-NC-SA 4.0"></a></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;引言-人生就是漫长的练习&quot;&gt;&lt;a href=&quot;#引言-人生就是漫长的练习&quot; class=&quot;headerlink&quot; title=&quot;引言　人生就是漫长的练习&quot;&gt;&lt;/a&gt;引言　人生就是漫长的练习&lt;/h2&gt;&lt;h2 id=&quot;第1章-学习开始&quot;&gt;&lt;a href=&quot;#第1章-学习开始&quot; class=&quot;headerlink&quot; title=&quot;第1章　学习开始&quot;&gt;&lt;/a&gt;第1章　学习开始&lt;/h2&gt;&lt;p&gt;当你弄懂了练习的正确原理，学习某些新事物的任务将变成一种&lt;strong&gt;没有压力的愉快与平和的体验&lt;/strong&gt;，变成一个适合你生活中各种领域的过程，并且促成你对生活中所有的艰辛与痛苦采用合适的视角来观察。&lt;/p&gt;
    
    </summary>
    
    
      <category term="读书笔记" scheme="https://stemha.github.io/categories/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="练习" scheme="https://stemha.github.io/tags/%E7%BB%83%E4%B9%A0/"/>
    
      <category term="心态" scheme="https://stemha.github.io/tags/%E5%BF%83%E6%80%81/"/>
    
  </entry>
  
  <entry>
    <title>成为一个不惑、不忧、不惧的人</title>
    <link href="https://stemha.github.io/2020/03/29/%E6%88%90%E4%B8%BA%E4%B8%80%E4%B8%AA%E4%B8%8D%E6%83%91%E3%80%81%E4%B8%8D%E5%BF%A7%E3%80%81%E4%B8%8D%E6%83%A7%E7%9A%84%E4%BA%BA/"/>
    <id>https://stemha.github.io/2020/03/29/%E6%88%90%E4%B8%BA%E4%B8%80%E4%B8%AA%E4%B8%8D%E6%83%91%E3%80%81%E4%B8%8D%E5%BF%A7%E3%80%81%E4%B8%8D%E6%83%A7%E7%9A%84%E4%BA%BA/</id>
    <published>2020-03-29T11:48:51.000Z</published>
    <updated>2020-03-29T12:28:26.713Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>说明:本文是梁启超于1922年应苏州学界邀请作的一场演讲。当时，他向在座者提出了一个问题：“为什么进学校？”。而后，他给出的答案是：进学校为的是求学问，求学问为的是学做人。而要成为一个人，总要具备三德：智、仁、勇，实现的状态便是“智者不惑，仁者不忧，勇者不惧”。演讲距今虽然已经过去快一个世纪，但是观点仍然具有很强的穿透力，值得大家好好读一读。</p></blockquote><a id="more"></a>     <h2 id="演讲全文"><a href="#演讲全文" class="headerlink" title="演讲全文"></a>演讲全文</h2><p>诸君!我在南京讲学将近三个月了，这边苏州学界里，有好几回写信邀我，可惜我在南京是天天有功课的，不能分身前来。今天到这里，能够和全城各校诸君聚在一堂，令我感激的很，但有一件，还要请诸君原谅：因为我一个月以来，都带着些病，勉强支持，今天不能作很长的讲演，恐怕有负诸君期望哩。</p><p>问诸君“为什么进学校?”</p><p>我想人人都会众口一词的答道：“为的是求学问”。再问：“你为什么要求学问?”“你想学些什么?”恐怕各人的答案就很不相同，或者竟自答不出来了。诸君啊!我替你们回答一句罢：“为的是学做人。”你在学校里头学的什么数学、几何、物理、化学、生理、心理、历史、地理、国文、英语，乃至什么哲学、文学、科学、政治、法律、经济、教育、农业、工业、商业等等，不过是做人所需的一种手段，不能说专靠这些便达到做人的目的，任凭你把这些件件学的精通，你能够成个人不成个人还是个问题。</p><p>人类心理，有知、情、意三部分。这三部分圆满发达的状态，我们先哲名为三达德——智、仁、勇。为什么叫做“达德”呢?因为这三件事是人类普通道德的标准，总要三个具备，才能成一个人。三件的完成状态怎么样呢?孔子说：<strong>“知者不惑，仁者不忧，勇者不惧。”</strong>所以教育应分为知育、情育、意育三方面，——现在讲的智育、德育、体育不对，德育范围太笼统，体育范围太狭隘——<strong>知育要教到人不惑，情育要教到人不忧，意育到教到人不惧。</strong>教育家教育学生，应该以这三件为究竟，我们自动的自己教育自己，也应该以这三件为究竟。</p><h3 id="1-怎么样才能不惑呢"><a href="#1-怎么样才能不惑呢" class="headerlink" title="1. 怎么样才能不惑呢?"></a>1. 怎么样才能不惑呢?</h3><p><strong>最要紧的是养成我们的判断力</strong>。<u>想要养成判断力，第一步，最少须有相当的常识，进一步，对于自己要做的事须有专门智识，再进一步，还要有遇事能断的智慧。</u></p><p>假如一个人连常识都没有，听见打雷，说是雷公发威，看见月蚀，说是蛤蟆贪嘴。那么，一定闹到什么事都没有主意，碰到一点疑难问题，就靠求神问卜看相算命去解决，真所谓“大惑不解”，成了最可怜的人了。学校里小学中学所教，就是要人有了许多基本的知识，免得凡事都暗中摸索。</p><p>但仅仅有点常识还不够，我们做人，总要各有一件专门职业。这门职业，也并不是我一人破天荒去做，从前已经许多人做过，他们积累了无数经验，发现出好些原理原则，这就是<code>专门学识</code>。<u>我打算做这项职业，就应该有这项专门的学识。</u>例如我想做农吗，怎么的改良土壤，怎么的改良种子，怎么的防御水旱病虫，等等，都是前人经验有得成为学识的;我们有了这种学识，应用他来处置这些事，自然会不惑，反是则惑了。做工、做商等等都各有他的专门学识，也是如此。我想做财政家吗，何种租税可以生出何样结果，何种公债可以生出何样结果等等，都是前人经验有得成为学识的;我们有了这种学识，应用他来处置这些事，自然会不惑，反是则惑了。教育家、军事家等等，都各有他的专门学说，也是如此。</p><p>我们在高等以上学校所求的知识，就是这一类。但专靠这种常识和学识就够吗?还不能。宇宙和人生是活的不是呆的，我们每日碰见的事理是复杂的变化的，不是单纯的刻板的，倘若我们只是学过这一件，才懂这一件，那么，碰着一件没有学过的事来到跟前，便手忙脚乱了。</p><p>所以还要<strong>养成总体的智慧，才能有根本的判断力</strong>。这种<code>总的智慧如何才能养成呢?</code><u>第一件，要把我们向来粗浮的脑筋着实磨炼他，叫他变成细密而且踏实。那么，无论遇着如何繁难的事，我都可以彻头彻尾想清楚他的条理，自然不至于惑了。</u></p><p>第二件，要把我们向来浑浊的脑筋，着实将养他，叫他变成清明。那么，一件事理到跟前，我才能很从容很莹澈的去判断他，自然不至于惑了。以上所说常识学识和总体的智慧，都是<code>知育</code>的要件，目的是教人做到<code>“知者不惑”</code>。</p><h3 id="2-怎么样才能不忧呢"><a href="#2-怎么样才能不忧呢" class="headerlink" title="2. 怎么样才能不忧呢?"></a>2. 怎么样才能不忧呢?</h3><p>为什么仁者便会不忧呢?想明白这个道理，先要知道中国先哲的人生观是怎么样。“仁”之一字，儒家人生观的全体大用都包在里头。“仁”到底是什么?很难用言语说明，勉强下个解释，可以说是：“普遍人格之实现。”孔子说：“仁者人也。”意思是说<code>人格完成就叫做“仁”</code>。</p><p>但我们要知道，人格不是单独一个人可以表现的，要从人和人的关系上来看。所以仁字从二人，郑康成解他做“相人偶”。<strong>总而言之，要彼此交感互发，成为一体，然后我的人格才能实现。</strong>所以我们若不讲人格主义，那便无话可说;讲到这个主义，当然归宿到普遍人格。换句话说，宇宙即是人生，人生即是宇宙，我们的人格，和宇宙无二区别，体验得这个道理，就叫做“仁者”。然则这种仁者为什么就会不忧呢?<strong>大凡忧之所从来，不外两端，一曰忧成败，二曰忧得失。</strong>我们得着“仁”的人生观，就不会忧成败。为什么呢?因为我们知道宇宙和人生是永远不会圆满的，所以《易经》六十四卦，始“乾”而终“未济”。正为在这永远不会圆满的宇宙中，才永远容得我们创造进化。</p><p><strong>我们所做的事，不过在宇宙进化几万万里的长途中，往前挪一寸，两寸，那里配说成功呢?然则不做怎么样呢?不做便连这一寸都不往前挪，那可真是失败了。</strong></p><p>“仁者”看透这种道理，信得过只有不做事才算失败，肯做事便不会失败。所以《易经》说：“君子以自强不息。”换一方面来看，他们又信得过凡事不会成功的几万万里路挪了一两寸，算成功吗?所以《论语》：<strong>“知其不可而为之。”你想，有这种人生观的人，还有什么成败可忧呢?</strong></p><p>再者，我们得着“仁”的人生观，便不会忧得失。为什么呢?因为认定这件东西是我的，才有得失之可言。连人格都不是单独存在，不能明确的画出这一部分是我的，那一部分是人家的，然则哪里有东西可以为我们所得?既已没有东西为我所得，当然也没有东西为我所失。</p><p>我只是为学问而学问，为劳动而劳动，并不是拿学问劳动等做手段来达某种目的——可以为我们“所得”得。所以老子说：“生而不有，为而不恃。”“既以为人已愈有，既以与人已愈多。”你想，有这种人生观的人，还有什么得失可忧呢?总而言之，有了这种人生观，自然会觉得“天地与我并生，而万物与我为一”，自然会“无人而不自得”。他的生活，纯然是趣味化艺术化。这是最高的情感教育，目的教人做到“仁者不忧”。</p><h3 id="3-怎么样才能不惧呢"><a href="#3-怎么样才能不惧呢" class="headerlink" title="3. 怎么样才能不惧呢?"></a>3. 怎么样才能不惧呢?</h3><p>有了不惑不忧功夫，惧当然会减少许多了。但这是属于意志方面的事。一个人若是意志力薄弱，便会有丰富的智识，临时也会用不着，便有优美的情操，临时也会变了卦。然则意志怎么会才坚强呢?头一件须要心地光明，孟子说：“浩然之气，至大至刚。行有不慊于心，则馁矣。”又说：“自反而不缩，虽褐宽博，吾不惴焉;自反而缩，虽千万人，吾往矣。”</p><p>俗话说得好：“生平不作亏心事，夜半敲门心不惊。”一个人要保持勇气，须要从一切行为可以公开做起，这是第一着。第二件要不为劣等欲望之所牵制。</p><p>《论语》记：子曰：“吾未见刚者。”或对曰伸枨。子曰：“枨也欲，焉刚。”一被物质上无聊得嗜欲东拉西扯，那么百炼成刚也会变成绕指柔了。总之，一个人的意志，由刚强变为薄弱极易，由薄弱返到刚强极难。一个人有了意志薄弱的毛病，这个人可就完了。</p><p>自己作不起自己的主，还有什么事可做?受别人压制，做别人奴隶，自己只要肯奋斗，终必能恢复自由。自己的意志做了自己情欲的奴隶，那么，真是万劫沉沦，永无恢复自由的余地，终身畏首畏尾，成了个可怜人了。</p><p>孔子说：“和而不流，强哉矫;中立而不倚，强哉矫。国有道，不变塞焉，强哉矫;国无道，至死不变，强哉矫。”我老实告诉诸君说罢，做人不做到如此，决不会成一个人。但做到如此真是不容易，非时时刻刻做磨炼意志的功夫不可，<strong>意志磨炼得到家，自然是看着自己应做得事，一点不迟疑，扛起来便做，“虽千万人吾往矣。”这样才算顶天立地做一世人，绝不会有藏头躲尾左支右绌的丑态。这便是<code>意育</code>的目的，要教人做到“勇者不惧”</strong>。</p><p>我们拿这三件事作做人的标准，请诸君想想，我自己现时做到哪一件——哪一件稍微有一点把握。倘若连一件都不能做到，连一点把握都没有，嗳哟!那可真危险了，你将来做人恐怕做不成。讲到学校里的教育吗，第二层的情育，第三层的意育，可以说完全没有，剩下的只有第一层的知育。就算知育罢，又只有所谓常识和学识，至于我所讲的总体智慧靠来养成根本判断力的，却是一点儿也没有。</p><p>这种“贩卖知识杂货店”的育，把他前途想下去，真令人不寒而栗!现在这种教育，一时又改革不来，我们可爱的青年，除了他更没有可以受教育的地方。诸君啊!你到底还要做人不要?你要知道危险呀，非你自己抖擞精神方法自救，没有人救你呀!</p><p>诸君啊!你千万别要以为得些断片的智识，就算是有学问呀。我老实不客气告诉你罢;你如果做成一个人，知识自然是越多越好：你如果做不成一个人，知识却是越多越坏。你不信吗?试想想全国人所唾骂的卖国贼某人某人，是有智识的呀，还是没有智识的呢?试想想全国人所痛恨的官僚政客——专门助军阀作恶鱼肉良民的人，是有智识的呀，还是没有智识的呢?诸君须知道啊，这些人当十几年前在学校的时代，意气横历，天真烂漫，何尝不和诸君一样?为什么就会堕落到这样的田地呀?</p><p>屈原说：“何昔日之芳草兮，今直为此萧艾也!岂其有他故兮，莫好修之害也。”天下最伤心的事，莫过于看着一群好好的青年，一步一步的往坏路上走。诸君猛醒啊!现在你所厌所恨的人，就是你前车之鉴了。</p><p>诸君啊!你现在怀疑吗?沉闷吗?悲哀痛苦吗?觉得外边的压迫你不能抵抗吗?我告诉你：你怀疑和沉闷，便是你因不知才会惑;你悲哀痛苦，便是你因不仁才会忧;你觉得你不能抵抗外界的压迫，便是你因不勇才有惧。这都是你的知、情、意未经过修养磨炼，所以还未成个人。我盼望你有痛切的自觉啊!有了自觉，自然会成功。那么，学校之外，当然有许多学问，读一卷经，翻一不史，到处都可以发现诸君的良师呀!</p><p>诸君啊，醒醒罢!养足你的根本智慧，体验出你的人格人生观，保护好你的自由意志。你成人不成人，就看这几年哩!</p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;说明:本文是梁启超于1922年应苏州学界邀请作的一场演讲。当时，他向在座者提出了一个问题：“为什么进学校？”。而后，他给出的答案是：进学校为的是求学问，求学问为的是学做人。而要成为一个人，总要具备三德：智、仁、勇，实现的状态便是“智者不惑，仁者不忧，勇者不惧”。演讲距今虽然已经过去快一个世纪，但是观点仍然具有很强的穿透力，值得大家好好读一读。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="醒世通言" scheme="https://stemha.github.io/categories/%E9%86%92%E4%B8%96%E9%80%9A%E8%A8%80/"/>
    
    
      <category term="演讲" scheme="https://stemha.github.io/tags/%E6%BC%94%E8%AE%B2/"/>
    
      <category term="人生" scheme="https://stemha.github.io/tags/%E4%BA%BA%E7%94%9F/"/>
    
  </entry>
  
  <entry>
    <title>学术论文的基本结构</title>
    <link href="https://stemha.github.io/2020/03/29/%E5%AD%A6%E6%9C%AF%E8%AE%BA%E6%96%87%E7%9A%84%E5%9F%BA%E6%9C%AC%E7%BB%93%E6%9E%84/"/>
    <id>https://stemha.github.io/2020/03/29/%E5%AD%A6%E6%9C%AF%E8%AE%BA%E6%96%87%E7%9A%84%E5%9F%BA%E6%9C%AC%E7%BB%93%E6%9E%84/</id>
    <published>2020-03-29T10:14:24.000Z</published>
    <updated>2020-04-09T07:12:32.973Z</updated>
    
    <content type="html"><![CDATA[<h2 id="基本结构"><a href="#基本结构" class="headerlink" title="基本结构"></a>基本结构</h2><ol><li><strong>标题</strong><ul><li>真实反应论文内容 </li><li>简短明了 </li><li>吸引人</li><li>大背景 </li><li>小背景</li><li>技术特色<a id="more"></a>    </li></ul></li></ol><ol start="2"><li><strong>摘要</strong></li></ol><ul><li>概括你的研究</li><li>假设或要研究的问题</li><li>研究方法 </li><li>主要成果</li></ul><ol start="3"><li><strong>引言</strong></li></ol><ul><li><p>说明选题的背景，目的，意义</p></li><li><p>陈述研究的主要内容和论文的假说或研究问题</p></li><li><p>文章的研究方法与章节编排</p></li></ul><ol start="4"><li><strong>文献综述</strong></li></ol><ul><li>阐述前人的研究，展示文献批判能力，说明你对研究问题的掌握程度，表明你研究的创新之处。</li></ul><ol start="5"><li><strong>研究方法</strong></li></ol><ul><li>详细介绍相关信息，便于读者采取同样的方法能够重复此项研究。</li><li>研究性质</li><li>对象</li><li>步骤</li><li>工具</li><li>条件</li><li>…</li></ul><ol start="6"><li><strong>研究结果</strong></li></ol><ul><li>用文字和/或图表真实报告你获得的数据或结果。</li></ul><ol start="7"><li><strong>讨论</strong></li></ol><ul><li>基于你获得的数据论述对于研究问题可能得到的结论。</li></ul><ol start="8"><li><strong>结论</strong></li></ol><ul><li>简明总结所得到的数据，得出的结论及意义。</li><li>说明研究的价值，不足或局限性。</li></ul><ol start="9"><li><strong>致谢</strong></li></ol><ol start="10"><li><strong>参考文献</strong></li></ol><h2 id="本文许可证"><a href="#本文许可证" class="headerlink" title="本文许可证"></a>本文许可证</h2><p>本文遵循 <a href="https://github.com/huihut/interview/blob/master/LICENSE">CC BY-NC-SA 4.0</a>（署名 - 非商业性使用 - 相同方式共享） 协议，转载请注明出处，不得用于商业目的。<br><a href="LICENSE"><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9pLmNyZWF0aXZlY29tbW9ucy5vcmcvbC9ieS1uYy1zYS80LjAvODh4MzEucG5n?x-oss-process=image/format,png" alt="CC BY-NC-SA 4.0"></a></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;基本结构&quot;&gt;&lt;a href=&quot;#基本结构&quot; class=&quot;headerlink&quot; title=&quot;基本结构&quot;&gt;&lt;/a&gt;基本结构&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;标题&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;真实反应论文内容 &lt;/li&gt;
&lt;li&gt;简短明了 &lt;/li&gt;
&lt;li&gt;吸引人&lt;/li&gt;
&lt;li&gt;大背景 &lt;/li&gt;
&lt;li&gt;小背景&lt;/li&gt;
&lt;li&gt;技术特色&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ol&gt;
    
    </summary>
    
    
      <category term="学术论文" scheme="https://stemha.github.io/categories/%E5%AD%A6%E6%9C%AF%E8%AE%BA%E6%96%87/"/>
    
    
      <category term="学术论文" scheme="https://stemha.github.io/tags/%E5%AD%A6%E6%9C%AF%E8%AE%BA%E6%96%87/"/>
    
      <category term="基本结构" scheme="https://stemha.github.io/tags/%E5%9F%BA%E6%9C%AC%E7%BB%93%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>好用的chrome插件</title>
    <link href="https://stemha.github.io/2020/03/29/%E5%A5%BD%E7%94%A8%E7%9A%84chrome%E6%8F%92%E4%BB%B6/"/>
    <id>https://stemha.github.io/2020/03/29/%E5%A5%BD%E7%94%A8%E7%9A%84chrome%E6%8F%92%E4%BB%B6/</id>
    <published>2020-03-29T09:29:48.000Z</published>
    <updated>2020-04-09T07:12:51.644Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>深刻体会到工具的好用，有一些问题使用工具真的省力，关键是学会如何找到这些工具和如何描述自己的相关需求。</p></blockquote><h2 id="Awesome-Autocomplete-for-GitHub"><a href="#Awesome-Autocomplete-for-GitHub" class="headerlink" title="Awesome Autocomplete for GitHub"></a>Awesome Autocomplete for GitHub</h2><p>增强github的搜索功能</p><a id="more"></a>     <h2 id="Git-History-Browser-Extension"><a href="#Git-History-Browser-Extension" class="headerlink" title="Git History Browser Extension"></a>Git History Browser Extension</h2><p>查看github的历史更新记录，超级好用，可以对比不同人对代码做的更新；</p><h2 id="octotree"><a href="#octotree" class="headerlink" title="octotree"></a>octotree</h2><p>可以查看github的目录结构，并且下载单个的文件；</p><h2 id="Sourcegraph"><a href="#Sourcegraph" class="headerlink" title="Sourcegraph"></a>Sourcegraph</h2><p>可以查看相关的代码，搜索代码，查找代码定义的地方</p><h2 id="The-Great-Suspender"><a href="#The-Great-Suspender" class="headerlink" title="The Great Suspender"></a>The Great Suspender</h2><p>休眠chrome不必要的标签页</p><h2 id="Tab-Resize-split-screen-layouts"><a href="#Tab-Resize-split-screen-layouts" class="headerlink" title="Tab Resize - split screen layouts"></a>Tab Resize - split screen layouts</h2><p>浏览器分屏</p><p><img src="/2020/03/29/%E5%A5%BD%E7%94%A8%E7%9A%84chrome%E6%8F%92%E4%BB%B6/chrome-plug-in-components.png" alt="avatar"></p><h2 id="本文许可证"><a href="#本文许可证" class="headerlink" title="本文许可证"></a>本文许可证</h2><p>本文遵循 <a href="https://github.com/huihut/interview/blob/master/LICENSE">CC BY-NC-SA 4.0</a>（署名 - 非商业性使用 - 相同方式共享） 协议，转载请注明出处，不得用于商业目的。<br><a href="LICENSE"><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9pLmNyZWF0aXZlY29tbW9ucy5vcmcvbC9ieS1uYy1zYS80LjAvODh4MzEucG5n?x-oss-process=image/format,png" alt="CC BY-NC-SA 4.0"></a></p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;深刻体会到工具的好用，有一些问题使用工具真的省力，关键是学会如何找到这些工具和如何描述自己的相关需求。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;Awesome-Autocomplete-for-GitHub&quot;&gt;&lt;a href=&quot;#Awesome-Autocomplete-for-GitHub&quot; class=&quot;headerlink&quot; title=&quot;Awesome Autocomplete for GitHub&quot;&gt;&lt;/a&gt;Awesome Autocomplete for GitHub&lt;/h2&gt;&lt;p&gt;增强github的搜索功能&lt;/p&gt;
    
    </summary>
    
    
      <category term="效率工具" scheme="https://stemha.github.io/categories/%E6%95%88%E7%8E%87%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="生产力" scheme="https://stemha.github.io/tags/%E7%94%9F%E4%BA%A7%E5%8A%9B/"/>
    
      <category term="插件" scheme="https://stemha.github.io/tags/%E6%8F%92%E4%BB%B6/"/>
    
      <category term="chrome" scheme="https://stemha.github.io/tags/chrome/"/>
    
  </entry>
  
  <entry>
    <title>《苏菲的世界》读书笔记</title>
    <link href="https://stemha.github.io/2020/03/29/%E3%80%8A%E8%8B%8F%E8%8F%B2%E7%9A%84%E4%B8%96%E7%95%8C%E3%80%8B%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    <id>https://stemha.github.io/2020/03/29/%E3%80%8A%E8%8B%8F%E8%8F%B2%E7%9A%84%E4%B8%96%E7%95%8C%E3%80%8B%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/</id>
    <published>2020-03-28T16:40:11.000Z</published>
    <updated>2020-04-13T15:44:43.770Z</updated>
    
    <content type="html"><![CDATA[<h2 id="伊甸园-在某个时刻事物必然从无到有"><a href="#伊甸园-在某个时刻事物必然从无到有" class="headerlink" title="伊甸园　在某个时刻事物必然从无到有"></a>伊甸园　在某个时刻事物必然从无到有</h2><p>你是谁？<br>世界从何处来？<br>    要么一直存在<br>    要么从无到有<br>        比如空间是由某样东西变成的，那么那样东西必然也是由另外一样东西变成的。一直推下去，那么必然是在某一时刻，事物从无到有。</p><p>生死这两件事就像钱币的两面，被我们的思考翻来翻去的时候，当一面变得更清晰的时候，另外一面也随之变得更大而清晰。</p><a id="more"></a><h2 id="魔术师的礼帽-要成为一个优秀的哲学家只有一个条件：要有好奇心"><a href="#魔术师的礼帽-要成为一个优秀的哲学家只有一个条件：要有好奇心" class="headerlink" title="魔术师的礼帽　要成为一个优秀的哲学家只有一个条件：要有好奇心"></a>魔术师的礼帽　要成为一个优秀的哲学家只有一个条件：要有好奇心</h2><p>哲学是什么？<br>天底下有没有一种东西是所有人都感兴趣的呢？有的！当人的基本需求（比如衣食住行，亲情爱情，爱与关怀等）满足之后，还有一些东西是人人都需要的，那就是明白我们是谁，我们为何在这里。宇宙，地球与生命是如何产生的？</p><p><u>探讨哲学的最好方式就是问一些哲学性的问题，如：这世界是如何创造出来的？其背后是否有某种一直或者意义？人死后还有生命吗？我们如何能够解答这些问题呢？最重要的是，我们应该如何生活？</u><br>我们无法从百科全书上得到这些答案，不过读一读别人的意见倒可以帮助我们建立自己对于生命的看法。</p><p>哲学家追求真理的过程很想一步侦探小说，对于案件，警方有时候可以侦破，但也有可能永远无法查出真相（虽然在某个地方一定有一个破案的办法）。因此，即使要回答一个问题很不容易，但无论如何总会有一个（且仅此一个）正确答案的。比如人死后要么就是透过某种形式存在，要不就是根本不在存在。</p><p>作者很好的比喻：许多人对于这个世界的种种也同样有种不可置信的感觉，就像我们看到魔术师突然从一顶原本空空如也的帽子里拉出一只小兔子一般。实际上我们就生活在这个世界上，是这个世界的一部分。形象的比喻一下，我们就是那只从礼帽里面变出的小兔子的一部分，小兔子可以比作是是整个宇宙，而我们则是寄居在小兔子身上的小小生物，但是我们和兔子不同的是，小兔子可不知道自己参与了一场魔术表演，而我们知道自己是某种神秘事物的一部分，我们想了解其中的奥秘；哲学家们总是试图沿着兔子的细毛往上爬，以便将魔术师的看个清楚；</p><h2 id="神话-善与恶之间脆弱的平衡"><a href="#神话-善与恶之间脆弱的平衡" class="headerlink" title="神话　善与恶之间脆弱的平衡"></a>神话　善与恶之间脆弱的平衡</h2><p>神话的世界观<br>    北欧<br>            （挪威）索尔和铁锤   北欧人相信人类居住的这部分是一部分岛屿，名为米德加德(Midgard)，也就是”中央王国“的意思，在这个中央王国内，有一个地方名叫阿斯加德（Asgard），乃是诸神的领地。中央王国之外，有一个叫乌特加德（Utgard），是狡猾的巨人居住的地方。<br>                象征肥沃多产的额女神芙瑞雅<br>                侍童洛奇<br>                《史莱慕之诗》  巨人之王史莱慕<br>希腊  公元前700左右，有一大部分希腊神话被荷马与赫西俄德（赫西俄德Hesiod以长诗《工作与时日》《神谱》闻名于后世，被称为“希腊训谕诗之父”。）记录下来。</p><p><code>赞诺芬尼司(Xnphans)</code>,古希腊哲学家。是早期批评荷马的神话的哲学家之一。 赞诺芬尼斯_百度百科  他指出人类按照自己的形象创造出这些天神。</p><p>随后这段期间，希腊人在希腊本土与意大利南部，小亚细亚等希腊殖民地建立了许多城市。在这些城市中，所有劳力工作由奴隶担任，因此市民有充分的闲暇，可以将所有的时间投注在政治与文化上；这时候的人们思考方式与以前大不相同，无需借助神话而提出一些哲学性的问题；<br>我们称这样的现象为“从神话的思考模式发展到以经验与理性为基础的思考模式”</p><h2 id="自然派哲学家-没有一件事物可以来自空无"><a href="#自然派哲学家-没有一件事物可以来自空无" class="headerlink" title="自然派哲学家　没有一件事物可以来自空无"></a>自然派哲学家　没有一件事物可以来自空无</h2><p>万事万物是否有一种基本的物质组成？<br>哲学家的课题：每个人关注和质疑的事项是什么？<br>了解了每一位哲学家的课题之后，我们就比较容易了解他的思想脉络，因为没有任何一位哲学家会企图探讨哲学的所有领域。</p><p>自然派哲学家<br>关注的课题是“大自然与它的循环和变化”<br>最重要的是，他们想要透过对大自然本身的研究来了解实际的变化过程，而不是借助神话来解释。<br>这样，哲学逐渐脱离了宗教的范畴。自然派哲学家朝科学推理的方向迈出了第一步，成为后来科学的先驱。</p><p>米雷特斯的三位哲学家<br>泰利斯<br>安娜克西曼德<br>安那西梅尼斯</p><p>没有任何事物会来自于虚无<br>帕梅尼德斯（约公元前540年~公元前480年）<br>他认为：</p><ol><li>没有任何事物会改变。</li><li>因此我们的感官认知是不可靠的</li></ol><p>理性主义：坚决相信人的理智的态度<br>理性主义者：百分百相信人类的理智是时间所有知识源泉的人</p><p>所有的事物都是流动的<br>赫拉克里德斯（约公元前540年~公元前480年）<br>他认为：</p><ol><li>万物都会改变（”一切事物都是流动的“）</li><li>我们的感官认知是可靠的</li></ol><p>恩培窦克里斯（西西里）<br>恩培窦克里斯认为帕梅尼德斯与赫拉克里德斯各有一点是对的，也各有一点是错的，造成这个根本性差异的原因是之前的两人都认定世间只有一种元素存在。<br>恩培窦克里斯认为：</p><ol><li>没有任何事物会改变。</li><li>我们的感官认知是可靠的</li></ol><p>恩培窦克里斯的结论是：大自然不可能只有一种元素构成。</p><p>安纳萨格拉斯（约公元前500年~公元前428年）</p><h2 id="德谟克里特斯-世界上最巧妙的玩具"><a href="#德谟克里特斯-世界上最巧妙的玩具" class="headerlink" title="德谟克里特斯　世界上最巧妙的玩具"></a>德谟克里特斯　世界上最巧妙的玩具</h2><blockquote><p>   积木为何是世界上最巧妙的玩具？</p></blockquote><p>原子理论<br>德谟克里特斯（约公元前460年~公元前370年，来自爱琴海北部海岸的阿布拉德小镇）</p><p><code>唯物论者</code>：只相信物质的东西。</p><h2 id="命运-算命者试图预测某些事实上极不可测的事物"><a href="#命运-算命者试图预测某些事实上极不可测的事物" class="headerlink" title="命运　算命者试图预测某些事实上极不可测的事物"></a>命运　算命者试图预测某些事实上极不可测的事物</h2><p>古希腊的德尔菲（Delphi）神论与宿命论 现在看来都是迷信</p><p>历史与医学<br>历史上最早的一批历史学家开始为历史事件寻求合理的解释。<br>贺若多陀斯（约公元前484年~公元前424年）与修西德底斯（约公元前460年~公元前400年）</p><p>在希腊哲学、历史学发展的同时，希腊医学兴起，其目的是为了疾病与健康寻求合乎自然的解释。<br>希波克拉底（约公元前460~公元前377年，生于寇斯岛，希腊医学始祖）<br>比较出名的是希波克拉底誓言：</p><blockquote><p>我将依照自身的能力与判断，采用对病人有利的疗法与处方，绝不施以有害或有毒之物。无论应何人之请，我也绝不给与致命药物或做此类之建议，也绝不协助妇女堕胎。进入病家访视时，我将以病人的福祉为念，不做任何贪渎害人之事，不受男女奴仆之引诱。我在执业时之所见所闻，反不应泄露者，我将严予保密。若我遵行此一誓言，不懈不怠，愿上苍使我乐享生命、精进医事并受世人敬重。若我违反誓言，愿我遭相反之命运。</p></blockquote><h2 id="苏格拉底-最聪明的是明白自己无知的人"><a href="#苏格拉底-最聪明的是明白自己无知的人" class="headerlink" title="苏格拉底　最聪明的是明白自己无知的人"></a>苏格拉底　最聪明的是明白自己无知的人</h2><blockquote><p>是否有人天生就很害羞呢？<br>最聪明的是明白自己无知的人。<br>真正的智慧来自内心。<br>明白是非者必能够进退合宜。</p></blockquote><p>雅典的哲学<br>以人为中心<br>苏格拉底是谁？<br>谈话的艺术</p><p>“苏格拉底式的反讽”<br>神圣的声音<br>雅典的小丑<br>正确的见解导致正确的行动</p><h2 id="雅典-废墟中升起了几栋高楼"><a href="#雅典-废墟中升起了几栋高楼" class="headerlink" title="雅典　废墟中升起了几栋高楼"></a>雅典　废墟中升起了几栋高楼</h2><h2 id="柏拉图-回归灵魂世界的渴望"><a href="#柏拉图-回归灵魂世界的渴望" class="headerlink" title="柏拉图　回归灵魂世界的渴望"></a>柏拉图　回归灵魂世界的渴望</h2><p>柏拉图学院<br>永远的真善美<br>理型的世界<br>真正的知识<br>不朽的灵魂<br>走出黑暗的洞穴（洞穴神话）<br>哲学之国（理想国）</p><h2 id="少校的小木屋-镜中的女孩双眼眨了一眨"><a href="#少校的小木屋-镜中的女孩双眼眨了一眨" class="headerlink" title="少校的小木屋　镜中的女孩双眼眨了一眨"></a>少校的小木屋　镜中的女孩双眼眨了一眨</h2><h2 id="亚力士多德-一位希望澄清我们观念的严谨的逻辑学家"><a href="#亚力士多德-一位希望澄清我们观念的严谨的逻辑学家" class="headerlink" title="亚力士多德　一位希望澄清我们观念的严谨的逻辑学家"></a>亚力士多德　一位希望澄清我们观念的严谨的逻辑学家</h2><p>逻辑<br>亚里士多德创立了逻辑学这门学科，他以实例显示我们在得出合乎逻辑的结论或证明时，必须遵循若干法则。</p><h2 id="希腊文化-一丝火花"><a href="#希腊文化-一丝火花" class="headerlink" title="希腊文化　一丝火花"></a>希腊文化　一丝火花</h2><p>生命与容忍的哲学<br>宗教，哲学与科学</p><p>犬儒学派</p><p>斯多葛学派</p><p>伊比鸠鲁学派</p><p>新柏拉图派哲学<br>神秘主义</p><h2 id="明信片-我对自己实施严格的检查制度"><a href="#明信片-我对自己实施严格的检查制度" class="headerlink" title="明信片　我对自己实施严格的检查制度"></a>明信片　我对自己实施严格的检查制度</h2><h2 id="两种文化-避免在真空中飘浮的唯一方式"><a href="#两种文化-避免在真空中飘浮的唯一方式" class="headerlink" title="两种文化　避免在真空中飘浮的唯一方式"></a>两种文化　避免在真空中飘浮的唯一方式</h2><p>印欧文化</p><p>闪族文化</p><h2 id="中世纪-对了一部分并不等于错"><a href="#中世纪-对了一部分并不等于错" class="headerlink" title="中世纪　对了一部分并不等于错"></a>中世纪　对了一部分并不等于错</h2><h2 id="文艺复兴-啊！藏在凡俗身躯里的神明子孙哪"><a href="#文艺复兴-啊！藏在凡俗身躯里的神明子孙哪" class="headerlink" title="文艺复兴　啊！藏在凡俗身躯里的神明子孙哪"></a>文艺复兴　啊！藏在凡俗身躯里的神明子孙哪</h2><p>实证法：以亲身的经验，而不是以古人的著作或凭空想象来作为知识的基础。</p><h2 id="巴洛克时期-宛如梦中的事物"><a href="#巴洛克时期-宛如梦中的事物" class="headerlink" title="巴洛克时期　宛如梦中的事物"></a>巴洛克时期　宛如梦中的事物</h2><h2 id="笛卡尔-他希望清除工地上所有的瓦砾"><a href="#笛卡尔-他希望清除工地上所有的瓦砾" class="headerlink" title="笛卡尔　他希望清除工地上所有的瓦砾"></a>笛卡尔　他希望清除工地上所有的瓦砾</h2><h2 id="斯宾诺莎-上帝不是一个傀儡戏师傅"><a href="#斯宾诺莎-上帝不是一个傀儡戏师傅" class="headerlink" title="斯宾诺莎　上帝不是一个傀儡戏师傅"></a>斯宾诺莎　上帝不是一个傀儡戏师傅</h2><h2 id="洛克-赤裸、空虚一如教师来到教室前的黑板"><a href="#洛克-赤裸、空虚一如教师来到教室前的黑板" class="headerlink" title="洛克　赤裸、空虚一如教师来到教室前的黑板"></a>洛克　赤裸、空虚一如教师来到教室前的黑板</h2><h2 id="休姆-将它付之一炬"><a href="#休姆-将它付之一炬" class="headerlink" title="休姆　将它付之一炬"></a>休姆　将它付之一炬</h2><p>如果我们手里有一本书，我们应该问：书里是否有包含任何与数量和数目有关的抽象思考？如果答案是没有，那么我们应该再问：书里是否包含任何与事实有关的经验性思考？如果答案是没有，那么我们还是将它付之一炬吧，因为这样的书纯粹是诡辩和幻想。</p><p>印象<br>观念</p><p>不可知论者：不持肯定或否定的态度，持怀疑态度。</p><h2 id="柏克莱-宛如燃烧的恒星旁一颗晕眩的行星"><a href="#柏克莱-宛如燃烧的恒星旁一颗晕眩的行星" class="headerlink" title="柏克莱　宛如燃烧的恒星旁一颗晕眩的行星"></a>柏克莱　宛如燃烧的恒星旁一颗晕眩的行星</h2><h2 id="柏客来-曾祖母向一名吉普赛妇人买的一面古老魔镜"><a href="#柏客来-曾祖母向一名吉普赛妇人买的一面古老魔镜" class="headerlink" title="柏客来　曾祖母向一名吉普赛妇人买的一面古老魔镜"></a>柏客来　曾祖母向一名吉普赛妇人买的一面古老魔镜</h2><h2 id="启蒙-从制针的技术到铸造大炮的方法"><a href="#启蒙-从制针的技术到铸造大炮的方法" class="headerlink" title="启蒙　从制针的技术到铸造大炮的方法"></a>启蒙　从制针的技术到铸造大炮的方法</h2><h2 id="康德-头上闪烁的星空与心中的道德规范"><a href="#康德-头上闪烁的星空与心中的道德规范" class="headerlink" title="康德　头上闪烁的星空与心中的道德规范"></a>康德　头上闪烁的星空与心中的道德规范</h2><h2 id="浪漫主义-神秘之路通向内心"><a href="#浪漫主义-神秘之路通向内心" class="headerlink" title="浪漫主义　神秘之路通向内心"></a>浪漫主义　神秘之路通向内心</h2><h2 id="黑格尔-可以站得住脚的就是有道理的"><a href="#黑格尔-可以站得住脚的就是有道理的" class="headerlink" title="黑格尔　可以站得住脚的就是有道理的"></a>黑格尔　可以站得住脚的就是有道理的</h2><h2 id="祁克果-欧洲正迈向破产的地步"><a href="#祁克果-欧洲正迈向破产的地步" class="headerlink" title="祁克果　欧洲正迈向破产的地步"></a>祁克果　欧洲正迈向破产的地步</h2><p>主观的真理<br>可以测算的真理<br>我信因为荒谬<br>个体主义者</p><h2 id="马克思-在欧洲游荡的幽灵"><a href="#马克思-在欧洲游荡的幽灵" class="headerlink" title="马克思　在欧洲游荡的幽灵"></a>马克思　在欧洲游荡的幽灵</h2><h2 id="达尔文-满载基因航行过生命的一艘小船"><a href="#达尔文-满载基因航行过生命的一艘小船" class="headerlink" title="达尔文　满载基因航行过生命的一艘小船"></a>达尔文　满载基因航行过生命的一艘小船</h2><h2 id="弗洛伊德-他内心出现那股令人讨厌的自大的冲动"><a href="#弗洛伊德-他内心出现那股令人讨厌的自大的冲动" class="headerlink" title="弗洛伊德　他内心出现那股令人讨厌的自大的冲动"></a>弗洛伊德　他内心出现那股令人讨厌的自大的冲动</h2><p>弗洛伊德发展了所谓的深度心理学或精神分析<br>弗洛依德主张人和他的环境之间不断有一种紧张关系存在。这种紧张关系（也就是冲突）尤其存在于他的驱策力，需要和社会之间。<br>基本需求可能会被伪装和升华；<br>快乐原则/本我<br>现实原则/自我<br>这世界的道德规范已经成为我们内心的一部分/成为超我<br>潜意识:我们并不一定能够意识到我们曾经有过的各种经验。但那些只要我们“用心想便可以记起来的想法或经验”通常是指被压抑的想法或经验。<br>不错的比喻：演讲厅说话<br>演讲厅称为”意识“，演讲厅之外称为“潜意识”；<br>大声喧哗者被”压抑“，椅子堵住门口作为”防御“</p><p>我们的感觉和行为会受到“潜意识的鼓动”<br>这类机制有好几种：比如<br>“说溜了嘴”<br>“合理化”我们自己也不愿意承认，也不愿意告诉别人我们做一件事的真正动机，因为这个动机是让人无法接受的。–&gt;”两面式沟通“的经验<br>“投射”把我们内心试图压抑的特点转移到别人身上。譬如说一个很吝啬的人会说别人斤斤计较。<br>如何对抗不愉快的经历呢？弗洛伊德发展出一个”自由联想“的技巧。<br>梦的解析<br>显梦 mainfest dream     潜梦意念<br>把潜梦意念转换成显梦面向的工作，他称之为“梦的运作”<br>超现实主义</p><p>灵感：潜意识的盖子被打开了，好像我们突然所想的东西是来自某种外部的源泉似的。<br>创作的过程是想象与理性细密交织的时刻</p><p>想象力也许可以创造新的事物，但是却不能加以挑选，这时候理智就发挥作用了！</p><h2 id="我们这个时代-人是注定要受自由之苦的"><a href="#我们这个时代-人是注定要受自由之苦的" class="headerlink" title="我们这个时代　人是注定要受自由之苦的"></a>我们这个时代　人是注定要受自由之苦的</h2><h2 id="花园宴会-一只白色的乌鸦"><a href="#花园宴会-一只白色的乌鸦" class="headerlink" title="花园宴会　一只白色的乌鸦"></a>花园宴会　一只白色的乌鸦</h2><h2 id="对位法-两首或多首旋律齐响"><a href="#对位法-两首或多首旋律齐响" class="headerlink" title="对位法　两首或多首旋律齐响"></a>对位法　两首或多首旋律齐响</h2><h2 id="那轰然一响-我们也是星尘"><a href="#那轰然一响-我们也是星尘" class="headerlink" title="那轰然一响　我们也是星尘"></a>那轰然一响　我们也是星尘</h2>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;伊甸园-在某个时刻事物必然从无到有&quot;&gt;&lt;a href=&quot;#伊甸园-在某个时刻事物必然从无到有&quot; class=&quot;headerlink&quot; title=&quot;伊甸园　在某个时刻事物必然从无到有&quot;&gt;&lt;/a&gt;伊甸园　在某个时刻事物必然从无到有&lt;/h2&gt;&lt;p&gt;你是谁？&lt;br&gt;世界从何处来？&lt;br&gt;    要么一直存在&lt;br&gt;    要么从无到有&lt;br&gt;        比如空间是由某样东西变成的，那么那样东西必然也是由另外一样东西变成的。一直推下去，那么必然是在某一时刻，事物从无到有。&lt;/p&gt;
&lt;p&gt;生死这两件事就像钱币的两面，被我们的思考翻来翻去的时候，当一面变得更清晰的时候，另外一面也随之变得更大而清晰。&lt;/p&gt;
    
    </summary>
    
    
      <category term="读书笔记" scheme="https://stemha.github.io/categories/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="哲学" scheme="https://stemha.github.io/tags/%E5%93%B2%E5%AD%A6/"/>
    
      <category term="名著" scheme="https://stemha.github.io/tags/%E5%90%8D%E8%91%97/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="https://stemha.github.io/2020/03/28/hello-world/"/>
    <id>https://stemha.github.io/2020/03/28/hello-world/</id>
    <published>2020-03-27T17:12:36.485Z</published>
    <updated>2020-03-28T18:54:34.808Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><a id="more"></a><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot;&gt;documentation&lt;/a&gt; for more info. If you get any problems when using Hexo, you can find the answer in &lt;a href=&quot;https://hexo.io/docs/troubleshooting.html&quot;&gt;troubleshooting&lt;/a&gt; or you can ask me on &lt;a href=&quot;https://github.com/hexojs/hexo/issues&quot;&gt;GitHub&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&quot;Quick-Start&quot;&gt;&lt;a href=&quot;#Quick-Start&quot; class=&quot;headerlink&quot; title=&quot;Quick Start&quot;&gt;&lt;/a&gt;Quick Start&lt;/h2&gt;&lt;h3 id=&quot;Create-a-new-post&quot;&gt;&lt;a href=&quot;#Create-a-new-post&quot; class=&quot;headerlink&quot; title=&quot;Create a new post&quot;&gt;&lt;/a&gt;Create a new post&lt;/h3&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ hexo new &lt;span class=&quot;string&quot;&gt;&quot;My New Post&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;More info: &lt;a href=&quot;https://hexo.io/docs/writing.html&quot;&gt;Writing&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;Run-server&quot;&gt;&lt;a href=&quot;#Run-server&quot; class=&quot;headerlink&quot; title=&quot;Run server&quot;&gt;&lt;/a&gt;Run server&lt;/h3&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ hexo server&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;More info: &lt;a href=&quot;https://hexo.io/docs/server.html&quot;&gt;Server&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="博客维护" scheme="https://stemha.github.io/categories/%E5%8D%9A%E5%AE%A2%E7%BB%B4%E6%8A%A4/"/>
    
    
      <category term="hexo" scheme="https://stemha.github.io/tags/hexo/"/>
    
      <category term="教程" scheme="https://stemha.github.io/tags/%E6%95%99%E7%A8%8B/"/>
    
  </entry>
  
</feed>
